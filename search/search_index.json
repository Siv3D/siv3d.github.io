{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siv3D: A C++ Framework for Creative Coding \u00b6 Siv3D is a framework for developing games and apps with fun and easy C++ code , distributed under the MIT license and running on Windows, macOS, Linux, and Web. Download Siv3D | v0.6.6 \u00b6 Windows macOS Ubuntu Download Siv3D for Web (experimental) | v0.6.6 \u00b6 for Web (Windows + Visual Studio) for Web (Visual Studio Code) Powerful features to streamline game and app development \u00b6 2D / 3D graphics (Shapes, images, text, icons, videos, 3D models, etc.) Audio (background music, sound effects, text-to-speech, audio filters, etc.) Input devices (Mouse, keyboard, webcam, microphone, gamepad, etc.) Window, filesystem, networking Image processing, sound processing, physics, path finding, geometry, and other calculations With Siv3D, you can combine a rich set of classes and functions to efficiently develop applications such as 2D / 3D games, media art, visualizers, and simulators with short code. Learn more The best way to complete your application work using only C++ \u00b6 Program your app using a combination of standard C++ syntax and cleverly designed Siv3D convenience types and functions. With the following concise code, the world begins to move. # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // Set the background color const Texture food { U \"\ud83c\udf7f\" _emoji }; // Create a texture from an emoji const Texture chick { U \"\ud83d\udc25\" _emoji }; // Create a texture from an emoji while ( System :: Update ()) // Main loop { Circle { Scene :: Center (), 100 }. draw (); // Draw a circle in the center of the scene food . drawAt ( Scene :: Center ()); // Draw the texture in the center of the scene chick . drawAt ( Cursor :: Pos ()); // Draw the texture at the mouse cursor position } } 7 reasons to use Siv3D \u00b6 1. \u26a1 Very short code \u00b6 Siv3D \u306e\u30b3\u30fc\u30c9\u306f\u6700\u77ed 2 \u884c\u3067\u3059\u3002\u63cf\u753b\u3084\u5165\u51fa\u529b\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u95a2\u6570\u3068\u30af\u30e9\u30b9\u304c\u63c3\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u307b\u3068\u3093\u3069\u306f 1 \u3064\u306e .cpp \u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u5b8c\u6210\u3057\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u3001 GitHub \u3084 GitHub Gist \u306a\u3069\u306e\u30b3\u30fc\u30c9\u5171\u6709\u30b5\u30a4\u30c8\u3092\u4f7f\u3063\u3066\u624b\u8efd\u306b\u4fdd\u5b58\u30fb\u30b7\u30a7\u30a2\u3057\u3066\u3001\u4e16\u754c\u4e2d\u306e Siv3D \u30e6\u30fc\u30b6\u3068\u6280\u8853\u3092\u4ea4\u63db\u3057\u3001\u5b66\u3073\u5408\u3044\u307e\u3057\u3087\u3046\u3002 2. \ud83d\udef8 Latest C++ \u00b6 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea API \u306f\u3001\u6700\u65b0\u306e C++20 \u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001Siv3D \u3092\u4f7f\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3001\u30e2\u30c0\u30f3\u306a C++ \u306e\u66f8\u304d\u65b9\u3084\u30c6\u30af\u30cb\u30c3\u30af\u304c\u81ea\u7136\u3068\u8eab\u306b\u4ed8\u304d\u307e\u3059\u3002Siv3D \u306e\u4f5c\u8005\u306f\u3001\u65e5\u672c\u6700\u5927\u306e\u30b2\u30fc\u30e0\u958b\u767a\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 CEDEC \u3067 \u6700\u65b0 C++ \u306e\u6d3b\u7528\u306b\u95a2\u3059\u308b\u8b1b\u6f14 \u3092\u3057\u305f\u308a\u3001 C++ \u306e\u60c5\u5831\u30dd\u30fc\u30bf\u30eb \u3092\u4f5c\u6210\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u6700\u5148\u7aef\u306e C++ \u306e\u666e\u53ca\u6d3b\u52d5\u306b\u52aa\u3081\u3066\u3044\u307e\u3059\u3002 3. \ud83c\udfec Small learning, big power \u00b6 Siv3D \u306f 2,200 \u30d5\u30a1\u30a4\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068 90 \u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u5927\u898f\u6a21\u306a\u30a8\u30f3\u30b8\u30f3\u3067\u3059\u304c\u3001\u5229\u7528\u8005\u306f\u305d\u306e\u30d1\u30ef\u30d5\u30eb\u306a\u6a5f\u80fd\u3092\u3001\u4f7f\u3044\u3084\u3059\u304f\u4e00\u8cab\u3057\u305f Siv3D \u306e API \u3092\u899a\u3048\u308b\u3060\u3051\u3067\u81ea\u5728\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u52c9\u5f37\u306e\u30b3\u30b9\u30c8\u3092\u6e1b\u3089\u3057\u3001\u81ea\u5206\u306e\u4f5c\u308a\u305f\u3044\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5c02\u5ff5\u3067\u304d\u307e\u3059\u3002 4. \u26f0\ufe0f Open-source \u00b6 Siv3D \u306f MIT \u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u3082\u3068 GitHub \u4e0a\u3067\u958b\u767a \u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3044\u3064\u3067\u3082\u5185\u90e8\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u305f\u308a\u3001\u6539\u9020\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u542b\u3081\u3001\u5546\u7528\u5229\u7528\u3092\u59a8\u3052\u308b\u6761\u4ef6\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u958b\u767a\u3057\u305f\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u53ce\u76ca\u306f 100% \u958b\u767a\u8005\u304c\u7372\u5f97\u3067\u304d\u307e\u3059\u3002 5. \ud83d\udee9\ufe0f Lightweight and quick start \u00b6 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u305f\u3081\u306e OpenSiv3D SDK \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f\u308f\u305a\u304b 120 MB \u3067\u3059\uff08Windows \u7248\uff09\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6570\u30af\u30ea\u30c3\u30af\u3067\u5b8c\u4e86\u3057\u3001Visual Studio \u3092\u8d77\u52d5\u3059\u308c\u3070\u30e1\u30cb\u30e5\u30fc\u306b Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3059\u3050\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002 6. \ud83d\udc97 Friendly community \u00b6 Siv3D \u3067\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u3001 Siv3D \u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\u307e\u305f\u3001\u5168\u56fd\u306e\u5b66\u6821\u3084\u5730\u57df\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e \u7121\u6599\u51fa\u5f35\u52c9\u5f37\u4f1a \u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u5b66\u751f\u306b\u306f\u3001Siv3D \u3092\u7df4\u7fd2\u5834\u306b\u3057\u305f\u30b5\u30dd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6bce\u5e74\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 7. \ud83c\udf10 Runs in a Web browser \u00b6 \u73fe\u5728\u8a66\u9a13\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b Web \u7248\uff08 OpenSiv3D for Web \uff09\u3092\u4f7f\u3046\u3068\u3001Siv3D \u3067\u4f5c\u3063\u305f C++ \u30a2\u30d7\u30ea\u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u30b9\u30de\u30db\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u3082\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u3088\u308a\u3082\u305f\u304f\u3055\u3093\u306e\u4eba\u306b\u3042\u306a\u305f\u306e\u4f5c\u54c1\u3092\u5c4a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Sponsoring Siv3D \u00b6 If you like Siv3D's vision and wish to support its development, please consider becoming an individual or corporate sponsor of Siv3D. Several benefits are also available. Siv3D Sponsors Gold Sponsor \u00b6 TOMOAKI12345 CubeSoft, Inc. Silver Sponsor \u00b6 sknjpn Bronze Sponsor \u00b6 \u30a2\u30b2\u30cf\u30de, \ud83d\ude00, minachun, Fuyutsubaki, \ud83d\ude0a, \ud83d\udc1d, \ud83d\udc20, \u91ce\u83dc\u30b8\u30e5\u30fc\u30b9, MawkishWaffle, jacking75, Chris Ohk, IZUNA, qppon, k-sunako, ysaito, totono, \u304a\u304a\u3084\u307e, tumf, \ud83c\udf75, lamuda, \ud83d\udc27 \uff08*\u533f\u540d\u306e\u65b9\u306f\u7d75\u6587\u5b57\uff09 Become a Siv3D Sponsor","title":"Getting started with Siv3D"},{"location":"#siv3d-a-c-framework-for-creative-coding","text":"Siv3D is a framework for developing games and apps with fun and easy C++ code , distributed under the MIT license and running on Windows, macOS, Linux, and Web.","title":"Siv3D: A C++ Framework for Creative Coding"},{"location":"#powerful-features-to-streamline-game-and-app-development","text":"2D / 3D graphics (Shapes, images, text, icons, videos, 3D models, etc.) Audio (background music, sound effects, text-to-speech, audio filters, etc.) Input devices (Mouse, keyboard, webcam, microphone, gamepad, etc.) Window, filesystem, networking Image processing, sound processing, physics, path finding, geometry, and other calculations With Siv3D, you can combine a rich set of classes and functions to efficiently develop applications such as 2D / 3D games, media art, visualizers, and simulators with short code. Learn more","title":"Powerful features to streamline game and app development"},{"location":"#the-best-way-to-complete-your-application-work-using-only-c","text":"Program your app using a combination of standard C++ syntax and cleverly designed Siv3D convenience types and functions. With the following concise code, the world begins to move. # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // Set the background color const Texture food { U \"\ud83c\udf7f\" _emoji }; // Create a texture from an emoji const Texture chick { U \"\ud83d\udc25\" _emoji }; // Create a texture from an emoji while ( System :: Update ()) // Main loop { Circle { Scene :: Center (), 100 }. draw (); // Draw a circle in the center of the scene food . drawAt ( Scene :: Center ()); // Draw the texture in the center of the scene chick . drawAt ( Cursor :: Pos ()); // Draw the texture at the mouse cursor position } }","title":"The best way to complete your application work using only C++"},{"location":"#7-reasons-to-use-siv3d","text":"","title":"7 reasons to use Siv3D"},{"location":"#1--very-short-code","text":"Siv3D \u306e\u30b3\u30fc\u30c9\u306f\u6700\u77ed 2 \u884c\u3067\u3059\u3002\u63cf\u753b\u3084\u5165\u51fa\u529b\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u95a2\u6570\u3068\u30af\u30e9\u30b9\u304c\u63c3\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u307b\u3068\u3093\u3069\u306f 1 \u3064\u306e .cpp \u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u5b8c\u6210\u3057\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u3001 GitHub \u3084 GitHub Gist \u306a\u3069\u306e\u30b3\u30fc\u30c9\u5171\u6709\u30b5\u30a4\u30c8\u3092\u4f7f\u3063\u3066\u624b\u8efd\u306b\u4fdd\u5b58\u30fb\u30b7\u30a7\u30a2\u3057\u3066\u3001\u4e16\u754c\u4e2d\u306e Siv3D \u30e6\u30fc\u30b6\u3068\u6280\u8853\u3092\u4ea4\u63db\u3057\u3001\u5b66\u3073\u5408\u3044\u307e\u3057\u3087\u3046\u3002","title":"1. \u26a1 Very short code"},{"location":"#2--latest-c","text":"Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea API \u306f\u3001\u6700\u65b0\u306e C++20 \u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001Siv3D \u3092\u4f7f\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3001\u30e2\u30c0\u30f3\u306a C++ \u306e\u66f8\u304d\u65b9\u3084\u30c6\u30af\u30cb\u30c3\u30af\u304c\u81ea\u7136\u3068\u8eab\u306b\u4ed8\u304d\u307e\u3059\u3002Siv3D \u306e\u4f5c\u8005\u306f\u3001\u65e5\u672c\u6700\u5927\u306e\u30b2\u30fc\u30e0\u958b\u767a\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 CEDEC \u3067 \u6700\u65b0 C++ \u306e\u6d3b\u7528\u306b\u95a2\u3059\u308b\u8b1b\u6f14 \u3092\u3057\u305f\u308a\u3001 C++ \u306e\u60c5\u5831\u30dd\u30fc\u30bf\u30eb \u3092\u4f5c\u6210\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u6700\u5148\u7aef\u306e C++ \u306e\u666e\u53ca\u6d3b\u52d5\u306b\u52aa\u3081\u3066\u3044\u307e\u3059\u3002","title":"2. \ud83d\udef8 Latest C++"},{"location":"#3--small-learning-big-power","text":"Siv3D \u306f 2,200 \u30d5\u30a1\u30a4\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068 90 \u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u5927\u898f\u6a21\u306a\u30a8\u30f3\u30b8\u30f3\u3067\u3059\u304c\u3001\u5229\u7528\u8005\u306f\u305d\u306e\u30d1\u30ef\u30d5\u30eb\u306a\u6a5f\u80fd\u3092\u3001\u4f7f\u3044\u3084\u3059\u304f\u4e00\u8cab\u3057\u305f Siv3D \u306e API \u3092\u899a\u3048\u308b\u3060\u3051\u3067\u81ea\u5728\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u52c9\u5f37\u306e\u30b3\u30b9\u30c8\u3092\u6e1b\u3089\u3057\u3001\u81ea\u5206\u306e\u4f5c\u308a\u305f\u3044\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5c02\u5ff5\u3067\u304d\u307e\u3059\u3002","title":"3. \ud83c\udfec Small learning, big power"},{"location":"#4--open-source","text":"Siv3D \u306f MIT \u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u3082\u3068 GitHub \u4e0a\u3067\u958b\u767a \u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3044\u3064\u3067\u3082\u5185\u90e8\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u305f\u308a\u3001\u6539\u9020\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u542b\u3081\u3001\u5546\u7528\u5229\u7528\u3092\u59a8\u3052\u308b\u6761\u4ef6\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u958b\u767a\u3057\u305f\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u53ce\u76ca\u306f 100% \u958b\u767a\u8005\u304c\u7372\u5f97\u3067\u304d\u307e\u3059\u3002","title":"4. \u26f0\ufe0f Open-source"},{"location":"#5--lightweight-and-quick-start","text":"Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u305f\u3081\u306e OpenSiv3D SDK \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f\u308f\u305a\u304b 120 MB \u3067\u3059\uff08Windows \u7248\uff09\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6570\u30af\u30ea\u30c3\u30af\u3067\u5b8c\u4e86\u3057\u3001Visual Studio \u3092\u8d77\u52d5\u3059\u308c\u3070\u30e1\u30cb\u30e5\u30fc\u306b Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3059\u3050\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002","title":"5. \ud83d\udee9\ufe0f Lightweight and quick start"},{"location":"#6--friendly-community","text":"Siv3D \u3067\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u3001 Siv3D \u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\u307e\u305f\u3001\u5168\u56fd\u306e\u5b66\u6821\u3084\u5730\u57df\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e \u7121\u6599\u51fa\u5f35\u52c9\u5f37\u4f1a \u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u5b66\u751f\u306b\u306f\u3001Siv3D \u3092\u7df4\u7fd2\u5834\u306b\u3057\u305f\u30b5\u30dd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6bce\u5e74\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002","title":"6. \ud83d\udc97 Friendly community"},{"location":"#7--runs-in-a-web-browser","text":"\u73fe\u5728\u8a66\u9a13\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b Web \u7248\uff08 OpenSiv3D for Web \uff09\u3092\u4f7f\u3046\u3068\u3001Siv3D \u3067\u4f5c\u3063\u305f C++ \u30a2\u30d7\u30ea\u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u30b9\u30de\u30db\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u3082\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u3088\u308a\u3082\u305f\u304f\u3055\u3093\u306e\u4eba\u306b\u3042\u306a\u305f\u306e\u4f5c\u54c1\u3092\u5c4a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"7. \ud83c\udf10 Runs in a Web browser"},{"location":"#sponsoring-siv3d","text":"If you like Siv3D's vision and wish to support its development, please consider becoming an individual or corporate sponsor of Siv3D. Several benefits are also available. Siv3D Sponsors","title":"Sponsoring Siv3D"},{"location":"acknowledgments/","text":"Acknowledgments \u00b6 Siv3D \u306e\u958b\u767a\u306f\u3001\u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb (IPA) \u306b\u3088\u308b \u672a\u8e0fIT\u4eba\u6750\u767a\u6398\u30fb\u80b2\u6210\u4e8b\u696d \u53ca\u3073 \u672a\u8e0f\u30a2\u30c9\u30d0\u30f3\u30b9\u30c8\u4e8b\u696d \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u3092\u6d3b\u7528\u3057\u305f\u30d3\u30b8\u30e5\u30a2\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u958b\u767a\u306f\u3001\u79d1\u5b66\u6280\u8853\u632f\u8208\u6a5f\u69cb (JST) \u6226\u7565\u7684\u5275\u9020\u7814\u7a76\u63a8\u9032\u4e8b\u696d (ACT-I) \u53ca\u3073 \u516c\u76ca\u8ca1\u56e3\u6cd5\u4eba I-O DATA \u8ca1\u56e3 \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u306f \u65e9\u7a32\u7530\u5927\u5b66\u5b9f\u4f53\u60c5\u5831\u5b66\u535a\u58eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u306b\u3088\u308b\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002","title":"Acknowledgments"},{"location":"acknowledgments/#acknowledgments","text":"Siv3D \u306e\u958b\u767a\u306f\u3001\u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb (IPA) \u306b\u3088\u308b \u672a\u8e0fIT\u4eba\u6750\u767a\u6398\u30fb\u80b2\u6210\u4e8b\u696d \u53ca\u3073 \u672a\u8e0f\u30a2\u30c9\u30d0\u30f3\u30b9\u30c8\u4e8b\u696d \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u3092\u6d3b\u7528\u3057\u305f\u30d3\u30b8\u30e5\u30a2\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u958b\u767a\u306f\u3001\u79d1\u5b66\u6280\u8853\u632f\u8208\u6a5f\u69cb (JST) \u6226\u7565\u7684\u5275\u9020\u7814\u7a76\u63a8\u9032\u4e8b\u696d (ACT-I) \u53ca\u3073 \u516c\u76ca\u8ca1\u56e3\u6cd5\u4eba I-O DATA \u8ca1\u56e3 \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u306f \u65e9\u7a32\u7530\u5927\u5b66\u5b9f\u4f53\u60c5\u5831\u5b66\u535a\u58eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u306b\u3088\u308b\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002","title":"Acknowledgments"},{"location":"features/","text":"Features \u00b6 Overview of features provided by Siv3D: Graphics \u00b6 Advanced 2D graphics Basic 3D graphics (Wavefront OBJ, primitive shapes) Custom vertex / pixel shaders (HLSL, GLSL) Text rendering (Bitmap, SDF, MSDF) PNG, JPEG, BMP, SVG, GIF, Animated GIF, TGA, PPM, WebP, TIFF Unicode 14.0 emojis and 7,000+ icons Image processing Video rendering Audio \u00b6 WAVE, MP3, AAC, OggVorbis, Opus, MIDI, WMA , FLAC , AIFF* Adjustable volume, pan, play speed and pitch File streaming (WAVE, MP3, OggVorbis) Dynamic audio buffer Fade in and fade out Looping Mixing busses Filters (LPF, HPF, echo, reverb) FFT SoundFont rendering Text to speech Input \u00b6 Mouse Keyboard Gamepad Webcam Microphone Joy-Con / Pro Controller XInput Digital drawing tablet Leap Motion Window \u00b6 Fullscreen mode High DPI support Window styles (sizable, borderless) File dialog Drag & drop Message box Toast notification Networks and Communications \u00b6 HTTP client Multiplayer (Photon SDK) TCP communication Serial communication Interprocess communication (pipe) Math \u00b6 Vector and matrix classes ( Point , Float2 , Vec2 , Float3 , Vec3 , Float4 , Vec4 , Mat3x2 , Mat3x3 , Mat4x4 , SIMD_Float4 , Quaternion ) 2D shape classes ( Line , Circle , Ellipse , Rect , RectF , Triangle , Quad , RoundRect , Polygon , MultiPolygon , LineString , Spline2D , Bezier2 , Bezier3 ) 3D shape classes ( Plane , InfinitePlane , Sphere , Box , OrientedBox , Ray , Line3D , Triangle3D , ViewFrustum , Disc , Cylinder , Cone ) Color classes ( Color , ColorF , HSV ) Polar / cylindrical / spherical coordinates system 2D / 3D shape intersection 2D / 3D geometry processing Rectangle packing Planar subdivisions Linear and gamma color space Pseudo random number generators Interpolation, easing, and smoothing Perlin noise Math parser Navigation mesh Extended arithmetic types ( HalfFloat , int128 , uint128 , BigInt , BigFloat ) String Processing \u00b6 Advanced String class ( String , StringView ) Unicode conversion Regular expression {fmt} style text formatting Text reader / writer classes CSV / INI / JSON / XML / TOML reader classes CSV / INI / JSON writer classes Misc \u00b6 Basic GUI (button, slider, radio buttons, checkbox, text box, color picker, list box) Integrated 2D physics engine (Box2D) Advanced array / 2D array classes ( Array , Grid ) Kd-tree Disjoint Set Union Asynchronous asset file streaming Data compression (zlib, Zstandard) Transitions between scenes File system Directory watcher QR code reader / writer GeoJSON Date and time Stopwatch and timer Logging Serialization UUID Child process Clipboard Power status Scripting (AngelScript) \uff08*Some features are limited to specific platforms\uff09","title":"Features"},{"location":"features/#features","text":"Overview of features provided by Siv3D:","title":"Features"},{"location":"features/#graphics","text":"Advanced 2D graphics Basic 3D graphics (Wavefront OBJ, primitive shapes) Custom vertex / pixel shaders (HLSL, GLSL) Text rendering (Bitmap, SDF, MSDF) PNG, JPEG, BMP, SVG, GIF, Animated GIF, TGA, PPM, WebP, TIFF Unicode 14.0 emojis and 7,000+ icons Image processing Video rendering","title":"Graphics"},{"location":"features/#audio","text":"WAVE, MP3, AAC, OggVorbis, Opus, MIDI, WMA , FLAC , AIFF* Adjustable volume, pan, play speed and pitch File streaming (WAVE, MP3, OggVorbis) Dynamic audio buffer Fade in and fade out Looping Mixing busses Filters (LPF, HPF, echo, reverb) FFT SoundFont rendering Text to speech","title":"Audio"},{"location":"features/#input","text":"Mouse Keyboard Gamepad Webcam Microphone Joy-Con / Pro Controller XInput Digital drawing tablet Leap Motion","title":"Input"},{"location":"features/#window","text":"Fullscreen mode High DPI support Window styles (sizable, borderless) File dialog Drag & drop Message box Toast notification","title":"Window"},{"location":"features/#networks-and-communications","text":"HTTP client Multiplayer (Photon SDK) TCP communication Serial communication Interprocess communication (pipe)","title":"Networks and Communications"},{"location":"features/#math","text":"Vector and matrix classes ( Point , Float2 , Vec2 , Float3 , Vec3 , Float4 , Vec4 , Mat3x2 , Mat3x3 , Mat4x4 , SIMD_Float4 , Quaternion ) 2D shape classes ( Line , Circle , Ellipse , Rect , RectF , Triangle , Quad , RoundRect , Polygon , MultiPolygon , LineString , Spline2D , Bezier2 , Bezier3 ) 3D shape classes ( Plane , InfinitePlane , Sphere , Box , OrientedBox , Ray , Line3D , Triangle3D , ViewFrustum , Disc , Cylinder , Cone ) Color classes ( Color , ColorF , HSV ) Polar / cylindrical / spherical coordinates system 2D / 3D shape intersection 2D / 3D geometry processing Rectangle packing Planar subdivisions Linear and gamma color space Pseudo random number generators Interpolation, easing, and smoothing Perlin noise Math parser Navigation mesh Extended arithmetic types ( HalfFloat , int128 , uint128 , BigInt , BigFloat )","title":"Math"},{"location":"features/#string-processing","text":"Advanced String class ( String , StringView ) Unicode conversion Regular expression {fmt} style text formatting Text reader / writer classes CSV / INI / JSON / XML / TOML reader classes CSV / INI / JSON writer classes","title":"String Processing"},{"location":"features/#misc","text":"Basic GUI (button, slider, radio buttons, checkbox, text box, color picker, list box) Integrated 2D physics engine (Box2D) Advanced array / 2D array classes ( Array , Grid ) Kd-tree Disjoint Set Union Asynchronous asset file streaming Data compression (zlib, Zstandard) Transitions between scenes File system Directory watcher QR code reader / writer GeoJSON Date and time Stopwatch and timer Logging Serialization UUID Child process Clipboard Power status Scripting (AngelScript) \uff08*Some features are limited to specific platforms\uff09","title":"Misc"},{"location":"releases/","text":"Release Notes \u00b6 v0.6 \u00b6 v0.6.6 | 2022-11-22 \u65b0\u6a5f\u80fd \u00b6 \u30b7\u30f3\u30d7\u30eb\u306a\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u3092\u6271\u3046\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #898 ) \u30b5\u30f3\u30d7\u30eb \u5165\u529b\u51e6\u7406\u3092\u6253\u3061\u5207\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #897 ) \u30b5\u30f3\u30d7\u30eb std::map \u306e\u7f6e\u304d\u63db\u3048\u3068\u306a\u308b OrderedTable \u578b\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #909 ) \u30b5\u30f3\u30d7\u30eb RoundRect::draw() \u306b\u304a\u3044\u3066\u3001\u4e0a\u4e0b\u306e\u8272\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #906 ) \u30b5\u30f3\u30d7\u30eb Rect::drawFrame() , RectF::drawFrame() , RoundRect::draw() , RoundRect::drawFrame() \u306b\u304a\u3044\u3066\u3001\u4e0a\u4e0b\u306e\u8272\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #906 ) \u30b5\u30f3\u30d7\u30eb \uff08Windows \u7248\uff09\u30bf\u30b9\u30af\u30d0\u30fc\u306b\u30bf\u30b9\u30af\u306e\u9032\u6357\u72b6\u6cc1\u3092\u8868\u793a\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #904 ) \u30b5\u30f3\u30d7\u30eb 2 \u3064\u306e\u9577\u65b9\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df\u3092\u9577\u65b9\u5f62\u3067\u8fd4\u3059\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #872 ) \u30b5\u30f3\u30d7\u30eb P2Body \u306b\u5f3e\u4e38\u30e2\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #901 ) \u6642\u9593\u578b\u304c _fmt() \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #894 , #895 ) \u7a7a\u306e\u9577\u65b9\u5f62\u3092\u4f5c\u6210\u3059\u308b Rect::Empty() , RectF::Empty() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #881 ) \u9577\u65b9\u5f62\u304c\u7a7a\u3067\u3042\u308b\u304b\u3092\u8fd4\u3059 Rect::isEmpty() , Rect::operator bool() , RectF::isEmpty() , RectF::operator bool() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #879 , #880 ) Array::partition() , Array::stable_partition() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #869 ) Camera2DParameters , LicenseManager , LicenseInfo , XInput \u304c\u30b9\u30af\u30ea\u30d7\u30c8\u5185\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #868 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 \u30d8\u30c3\u30c0\u306e\u8efd\u91cf\u5316\u306e\u305f\u3081\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3057\u305f ( #883 , #886 ) Windows \u7248\u306b\u304a\u3051\u308b\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b\u3068\u64cd\u4f5c\u4e0d\u80fd\u306b\u306a\u308b\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\u30b7\u30fc\u30f3\u5185\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u8868\u793a\u3055\u308c\u307e\u3059 ( #915 ) Array \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u63a8\u8ad6\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #887 ) CITATION.cff \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #882 ) Grid::resize() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #876 ) \u4ed5\u69d8\u5909\u66f4 \u00b6 \u5404\u7a2e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #914 ) PlayingCard \u306e\u30c7\u30b6\u30a4\u30f3\u3092\u5fae\u4fee\u6b63\u3057\u307e\u3057\u305f ( #905 ) PlayingCard.hpp \u306f experimental \u304b\u3089\u6b63\u5f0f\u306a\u6a5f\u80fd\u306b\u306a\u308a\u307e\u3057\u305f ( #885 ) \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 DisjointSet \u306e\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u524a\u6e1b\u3057\u307e\u3057\u305f ( #878 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Web \u7248\u306e\u4e0d\u5177\u5408\u4fee\u6b63\u3001\u4e92\u63db\u6027\u5411\u4e0a\u3092\u884c\u3044\u307e\u3057\u305f XMLReader \u306e\u4e00\u90e8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #896 ) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #871 , #903 ) \u6b63\u898f\u8868\u73fe\u306b\u304a\u3051\u308b\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u4ed5\u69d8\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #893 ) String::removed(StringView) \u306b\u7a7a\u306e\u6587\u5b57\u5217\u3092\u6e21\u3059\u3068\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308b\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #892 ) Allocator \u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #889 , #891 ) DisjointSet::operator bool() \u306e\u623b\u308a\u5024\u306e true , false \u304c\u9006\u3060\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #877 ) \u5404\u7a2e\u30af\u30e9\u30b9\u306e _fmt() \u5bfe\u5fdc\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #873 ) LineString::calculateBufferClosed() , LineString::calculateRoundBufferClosed() \u304c\u9589\u3058\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #870 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 MayFlyOvO : OrderedTable \u306e\u8ffd\u52a0 Raclamusi : Array , Allocator , \"fmt\" \u306e\u6539\u5584\u30fb\u30d0\u30b0\u4fee\u6b63 AngelCase : String::removed() \u306e\u30d0\u30b0\u4fee\u6b63 yunba28 : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 sknjpn : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 v0.6.5 | 2022-08-10 \u65b0\u6a5f\u80fd \u00b6 Visual Studio 2022 17.3 \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #859 ) LineString::extractLineString(double, CloseRing) \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #866 ) \u30b5\u30f3\u30d7\u30eb JSON \u304c\u30d0\u30a4\u30ca\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 (BSON/CBOR/MessagePack) \u3068\u306e\u76f8\u4e92\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #842 ) \u30b5\u30f3\u30d7\u30eb \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u7d50\u5408\u3059\u308b FileSystem::PathAppend() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #825 ) \u30b5\u30f3\u30d7\u30eb TextEditState \u306b\u3001Tab \u30ad\u30fc\u3084 Enter \u30ad\u30fc\u306b\u3088\u308b\u5165\u529b\u5b8c\u4e86\u3092\u53d6\u5f97\u3067\u304d\u308b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #808 ) \u30b5\u30f3\u30d7\u30eb \u5e95\u8fba\u306e\u4e2d\u5fc3\u3001\u9802\u70b9\u3001\u5e95\u8fba\u306e\u9577\u3055\u304b\u3089\u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u3092\u4f5c\u6210\u3059\u308b Triangle::FromPoints() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #865 ) \u6587\u5b57\u5217\u3092\u30d1\u30fc\u30bb\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b PercentEncode() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #864 ) NavMesh::query() \u306b\u3001\u7d50\u679c\u306e\u683c\u7d0d\u5148\u3092\u53c2\u7167\u3067\u6e21\u3059\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #861 ) Math:: \u306b Dot() \u3068 Cross() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u307e\u3067\u306f Vec2, Vec3 \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f ( #848 ) \u9577\u65b9\u5f62\u306e\u5404\u8fba\u30fb\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3001Y \u5ea7\u6a19\u3060\u3051\u3092\u8fd4\u3059\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #853 ) \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u3092 (0 ,0), \u53f3\u4e0b\u3092 (1, 1) \u3068\u3057\u305f\u3068\u304d\u306e (relativeX, relativeY) \u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #850 ) \u540c\u68b1\u3059\u308b Font Awesome \u3092 5.15.2 \u2192 6.1.1 \u306b\u66f4\u65b0\u3057\u307e\u3057\u305f ( #846 ) Blob \u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #843 ) Font::height(double size) \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #830 ) \u540c\u68b1\u3059\u308b\u30e2\u30ce\u30af\u30ed Noto Emoji \u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #816 ) \u6c34\u5e73\u65b9\u5411\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8fd4\u3059 .horizontalAspectRatio() \u95a2\u6570\u3092 Point , Float2 , Vec2 , Rect , RectF , Image , Texture , Emoji , Scene:: , RoundRect \u306b\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #810 ), ( #812 ) Multiplayer_Photon \u306b\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u95a2\u9023\u306e\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #807 ) Multiplayer_Photon \u306b .joinRandomRoomOrCreate() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #806 ) NotImplementedError \u4f8b\u5916\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #787 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 Linux \u7248\u306e CMake \u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #829 ) Linux \u7248\u306e CMakeLists.txt \u306b\u304a\u3044\u3066\u3001boost \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u7bc4\u56f2\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #847 ) SimpleGUI::TextBox() \u306e\u6319\u52d5\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #832 ), ( #804 ) \u8aa4\u7528\u9632\u6b62\u306e\u305f\u3081 BigInt operator \"\"_big(long double x) \u3092 = delete \u6307\u5b9a\u3057\u307e\u3057\u305f ( #826 ) \u3044\u304f\u3064\u304b\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u4ed5\u69d8\u5909\u66f4 \u00b6 BigFloat \u306e\u6587\u5b57\u5217\u5909\u63db\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #839 ) Multiplayer_Photon::getLocalPlayerID() \u306e\u623b\u308a\u5024\u3092 LocalPlayerID \u306b\u5909\u66f4\u3057\u307e\u3057\u305f ( #809 ) AsyncHTTPTask::isReady \u3092 const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u5909\u66f4\u3057\u307e\u3057\u305f ( #805 ) \u5404\u7a2e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #801 ) engine \u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #817 ) \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 NavMesh::query() \u306e\u5b9f\u884c\u6027\u80fd\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #861 ) HLSL \u3084 GLSL \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #835 ) SimpleGUI \u306e\u6587\u5b57\u5217\u5f15\u6570\u3092 const String& \u2192 StringView \u306b\u5909\u66f4\u3057\u307e\u3057\u305f ( #827 ) \u7b97\u8853\u578b\u304b\u3089 BigInt , BigFloat \u3092\u5f15\u304f\u3068\u304d\u306e\u5b9f\u884c\u6027\u80fd\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #822 ) Rect , RectF \u306e constexpr \u5bfe\u5fdc\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #813 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 LineString::extractLineString() \u304c\u6b63\u3057\u304f\u306a\u3044\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #862 ) \u59cb\u70b9\u3068\u7d42\u70b9\u304c\u4e00\u81f4\u3059\u308b LineString \u306e .calculateRoundBuffer() \u306b\u5931\u6557\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #860 ) macOS, Linux \u7248\u3067 NULL \u304c\u30de\u30af\u30ed\u3067\u7a7a\u6587\u5b57\u5217\u306b\u7f6e\u63db\u3055\u308c\u308b\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #858 ) RoundRect::drawFrmae() \u3067\u4e0d\u6b63\u306a\u5024\u3092\u6e21\u3057\u305f\u3068\u304d\u306b\u3001\u63cf\u753b\u304c\u4e71\u308c\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #856 ) BasicCamera3D \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u540d\u3092 .getVerticlaFOV() \u2192 .getVerticalFOV() \u306b\u4fee\u6b63\u3057\u307e\u3057\u305f ( #854 ) Grid::choice() \u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3059\u308b\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #840 ) Base64::Decode() \u3067\u3001\u7279\u5b9a\u6761\u4ef6\u306b\u304a\u3044\u3066\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #837 ) Parse<double> \u304c float \u578b\u306e\u7cbe\u5ea6\u3067\u884c\u308f\u308c\u3066\u3044\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #831 ) \u4e00\u90e8\u6761\u4ef6\u3067 Line \u540c\u58eb\u306e Intersect, IntersectAt \u306e\u5224\u5b9a\u304c\u8aa4\u3063\u3066\u3044\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #823 ) BigInt , BigFloat \u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #821 ) macOS \u7248\u3001Linux \u7248\u306e FileSystem::SelectFolder() \u304c\u7d50\u679c\u306e\u672b\u5c3e\u306b / \u3092\u4ed8\u3051\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #824 ) macOS \u7248\u306e FileSystem::FullPath() \u306e\u7d50\u679c\u304c\u4e0d\u6b63\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #824 ) SFMT \u306e\u30d8\u30c3\u30c0\u30fb\u30d5\u30a9\u30eb\u30c0\u540d\u306e typo \u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #818 ) macOS \u7248\u3067 TCPClient \u306e\u5207\u65ad\u304c TCPServer \u306b\u4f1d\u308f\u3089\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #799 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 MurakamiShun : Linux \u7248\u306e CMake \u3092\u6539\u5584 m4saka : Line \u540c\u58eb\u306e Intersect, IntersectAt \u306e\u30d0\u30b0\u3092\u4fee\u6b63 Raclamusi : BigInt , BigFloat \u306e\u6539\u5584\u30fb\u30d0\u30b0\u4fee\u6b63\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 kestrel-90r : \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u306e typo \u306e\u4fee\u6b63 ShivAlley : Math:: \u306e\u6570\u5b66\u95a2\u6570\u3092\u8ffd\u52a0 tas9n : AsyncHTTPTask \u306e\u6539\u5584 ROCKTAKEY : CMakeLists.txt \u306e\u6539\u5584 yknishidate : \u30b3\u30fc\u30c9\u306e\u6539\u5584 agehama : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 curay168 : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 v0.6.4 | 2022-05-21 \u65b0\u6a5f\u80fd \u00b6 Visual Studio 2022 17.2 \u4ee5\u964d\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #790 ) Xcode 13.3 \u4ee5\u964d\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #753 ) Photon SDK \u3068\u9023\u4fc2\u3059\u308b Multiplayer_Photon \uff08\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u6a5f\u80fd\uff09\u30a2\u30c9\u30aa\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #734 ) \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u30b5\u30f3\u30d7\u30eb 3D \u6a19\u6e96\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b UV transform \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #764 ) \u30b5\u30f3\u30d7\u30eb MeshData::RoundedBox() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #769 ) \u30b5\u30f3\u30d7\u30eb \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u52d5\u7684\u306b\u6ce2\u5f62\u3092\u66f8\u304d\u8fbc\u3080\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #736 ) \u30b5\u30f3\u30d7\u30eb Windows \u7248\u306e\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306b\u304a\u3051\u308b\u901a\u77e5\u97f3\u306e\u7121\u52b9\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #748 ) \u30b5\u30f3\u30d7\u30eb DisjointSet (Union Find) \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #742 ) \u30b5\u30f3\u30d7\u30eb Shader::LinearToScreen() \u306b\u304a\u3044\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u3092\u5909\u66f4\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f ( #762 ) \u30b5\u30f3\u30d7\u30eb Polygon::addHole() \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #786 ) \u30b5\u30f3\u30d7\u30eb Font \u306b\u5408\u5b57\u3092\u56de\u907f\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #792 ) \u30b5\u30f3\u30d7\u30eb -1.0 \uff5e 1.0 \u306e\u7bc4\u56f2\u3092\u8fd4\u3059 Periodic:: \u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #761 ) \u30b5\u30f3\u30d7\u30eb ManagedScript \u306b\u3001\u30ea\u30ed\u30fc\u30c9\u3092\u767a\u751f\u3055\u305b\u308b\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #768 ) \u30b5\u30f3\u30d7\u30eb Script \u5185\u3067 include \u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #767 ) \u30b5\u30f3\u30d7\u30eb JSON::push_back() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #725 ) String::replace() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u5897\u3084\u3057\u307e\u3057\u305f ( #729 ) ImageProcessing::GenerateMips() \u3067\u6700\u5927\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #763 ) \u30b9\u30af\u30ea\u30d7\u30c8\u3067 enum \u306e\u5024\u3092\u8868\u793a\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f ( #774 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306b OpenMode , TextEncoding , TextReader , TextWriter \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #775 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306b Parse \u7cfb\u306e\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #782 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306b INI \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #783 ) Deserializer<MemoryViewReader> \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #777 ) Serializer<Writer>::operator ->() const \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #776 ) Geometry2D::Or() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #793 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 (\u975e\u516c\u5f0f) ARM \u5411\u3051\u306e\u30d3\u30eb\u30c9\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #707 ) SceneManager \u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #750 ) NavMesh \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30de\u30c3\u30d7\u69cb\u7bc9\u3092\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f ( #785 ) \u30b5\u30f3\u30d7\u30eb \u4ed5\u69d8\u5909\u66f4 \u00b6 \u5404\u7a2e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #726 ), ( #728 ), ( #727 ), ( #731 ), ( #756 ), ( #757 ), ( #758 ), ( #759 ), ( #773 ), ( #760 ) Polygon::addHole() \u306e\u4ed5\u69d8\u3092\u5909\u66f4\u3057\u307e\u3057\u305f ( #786 ) engine / example \u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #740 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Circle::boundingRect() \u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #718 ) SimpleAnimation::isDone() \u306e\u623b\u308a\u5024\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #710 ) TextEditState::TextEditState(String&& defaultText) \u306e use after move \u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #703 ) JSON \u30af\u30e9\u30b9\u3067\u7a7a\u306e\u914d\u5217\u3092\u4f5c\u308c\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #723 ) operator>>(basic_istream&, Color&) \u306e\u8b66\u544a\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #720 ) \u30ea\u30e2\u30fc\u30c8\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u74b0\u5883\u3067 System::EnumActiveMonitors() \u306b\u5931\u6557\u3057\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #719 ) TOMLReader \u3067\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u3082\u5931\u6557\u5224\u5b9a\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #732 ) Windows \u7248\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u80cc\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #706 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30d0\u30a4\u30f3\u30c9\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #741 ) Shape2D::Stairs() \u306e\u7b2c 5 \u5f15\u6570\u304c false \u3060\u3068\u4e09\u89d2\u5f62\u306e\u5411\u304d\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #708 ) macOS \u7248\u3067 RectanglePacking \u304c\u5229\u7528\u3067\u304d\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #754 ) ARM \u5411\u3051\u30d3\u30eb\u30c9\u306b\u304a\u3051\u308b Image \u3068 OpenCV \u306e\u9023\u643a\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #778 ) SimpleGUI::ListBox() \u3067\u7bc4\u56f2\u5916\u30a2\u30af\u30bb\u30b9\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #780 ) WaveSample \u306e\u5909\u63db\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #795 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 tana : ARM \u5411\u3051\u30d3\u30eb\u30c9\u306e\u6539\u5584 mak1a : Multiplayer_Photon \u306e\u5b9f\u88c5 , SimpleAnimation::isDone() \u306e\u4fee\u6b63 Ryoga-exe : \u30b3\u30fc\u30c9\u306e\u6539\u5584 k-sunako : CMakeLists.txt \u306e\u6539\u5584 falrnd : Circle::boundingRect() \u306e\u4fee\u6b63 polyester-CTRL : OpenCV_Bridge \u306e\u6539\u5584 yaito3014 : \u30b3\u30fc\u30c9\u306e\u6539\u5584 NachiaVivias : WaveSample \u306e\u6539\u5584 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8 \u00b6 #12 Photon: mak1a, Luke, sthairno v0.6.3 | 2021-11-14 \u65b0\u6a5f\u80fd \u00b6 Visual Studio 2022 \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #683 ) SimpleGUI \u306b\u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #659 ) # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); ListBoxState ls1 { { U \"\u5317\u6d77\u9053\" , U \"\u9752\u68ee\u770c\" , U \"\u5ca9\u624b\u770c\" , U \"\u5bae\u57ce\u770c\" , U \"\u79cb\u7530\u770c\" , U \"\u5c71\u5f62\u770c\" , U \"\u798f\u5cf6\u770c\" , U \"\u8328\u57ce\u770c\" , U \"\u6803\u6728\u770c\" , U \"\u7fa4\u99ac\u770c\" , U \"\u57fc\u7389\u770c\" , U \"\u5343\u8449\u770c\" , U \"\u6771\u4eac\u90fd\" , U \"\u795e\u5948\u5ddd\u770c\" , U \"\u65b0\u6f5f\u770c\" , U \"\u5bcc\u5c71\u770c\" , U \"\u77f3\u5ddd\u770c\" , U \"\u798f\u4e95\u770c\" , U \"\u5c71\u68a8\u770c\" , U \"\u9577\u91ce\u770c\" , U \"\u5c90\u961c\u770c\" , U \"\u9759\u5ca1\u770c\" , U \"\u611b\u77e5\u770c\" , U \"\u4e09\u91cd\u770c\" , U \"\u6ecb\u8cc0\u770c\" , U \"\u4eac\u90fd\u5e9c\" , U \"\u5927\u962a\u5e9c\" , U \"\u5175\u5eab\u770c\" , U \"\u5948\u826f\u770c\" , U \"\u548c\u6b4c\u5c71\u770c\" , U \"\u9ce5\u53d6\u770c\" , U \"\u5cf6\u6839\u770c\" , U \"\u5ca1\u5c71\u770c\" , U \"\u5e83\u5cf6\u770c\" , U \"\u5c71\u53e3\u770c\" , U \"\u5fb3\u5cf6\u770c\" , U \"\u9999\u5ddd\u770c\" , U \"\u611b\u5a9b\u770c\" , U \"\u9ad8\u77e5\u770c\" , U \"\u798f\u5ca1\u770c\" , U \"\u4f50\u8cc0\u770c\" , U \"\u9577\u5d0e\u770c\" , U \"\u718a\u672c\u770c\" , U \"\u5927\u5206\u770c\" , U \"\u5bae\u5d0e\u770c\" , U \"\u9e7f\u5150\u5cf6\u770c\" , U \"\u6c96\u7e04\u770c\" , } }; ListBoxState ls2 { { U \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\uff081905\u5e741\u6708 - 1906\u5e748\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1905\u5e7410\u6708 - 1907\u5e745\u6708\u3001\u5927\u5009\u66f8\u5e97\u30fb\u670d\u90e8\u66f8\u5e97\uff09\" , U \"\u574a\u3063\u3061\u3083\u3093\uff081906\u5e744\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1907\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u8349\u6795\uff081906\u5e749\u6708\u3001\u300e\u65b0\u5c0f\u8aac\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u4e8c\u767e\u5341\u65e5\uff081906\u5e7410\u6708\u3001\u300e\u4e2d\u592e\u516c\u8ad6\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u91ce\u5206\uff081907\u5e741\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1908\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u865e\u7f8e\u4eba\u8349\uff081907\u5e746\u6708 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1908\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5751\u592b\uff081908\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u4e09\u56db\u90ce\uff081908\u5e749 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1909\u5e745\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u305d\u308c\u304b\u3089\uff081909\u5e746 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1910\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u9580\uff081910\u5e743\u6708 - 6\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1911\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5f7c\u5cb8\u904e\u8fc4\uff081912\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1912\u5e749\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u884c\u4eba\uff081912\u5e7412\u6708 - 1913\u5e7411\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e741\u6708\u3001\u5927\u5009\u66f8\u5e97\uff09\" , U \"\u3053\u309d\u308d\uff081914\u5e744\u6708 - 8\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e749\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u9053\u8349\uff081915\u5e746\u6708 - 9\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1915\u5e7410\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u660e\u6697\uff081916\u5e745\u6708 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1917\u5e741\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , } }; ls2 . selectedItemIndex = 3 ; ListBoxState ls3 = ls2 ; while ( System :: Update ()) { if ( SimpleGUI :: ListBox ( ls1 , Vec2 { 20 , 20 }, 120 , 156 ) && ls1 . selectedItemIndex ) { } if ( SimpleGUI :: ListBox ( ls2 , Vec2 { 180 , 20 }, 240 , 156 , false ) && ls2 . selectedItemIndex ) { } if ( SimpleGUI :: ListBox ( ls3 , Vec2 { 20 , 200 }, 1020 , 480 ) && ls3 . selectedItemIndex ) { } } } \u540c\u68b1\u3059\u308b Color Emoji \u3092\u66f4\u65b0\u3057\u3001Unicode 14.0 \u306e\u7d75\u6587\u5b57\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #694 ) # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.4 , 0.5 , 0.6 }); const Texture e0 { U \"\ud83e\udee0\" _emoji }; const Texture e1 { U \"\ud83e\udee3\" _emoji }; const Texture e2 { U \"\ud83e\udee1\" _emoji }; const Texture e3 { U \"\ud83e\udee5\" _emoji }; const Texture e4 { U \"\ud83e\udef5\" _emoji }; const Texture e5 { U \"\ud83e\uddcc\" _emoji }; const Texture e6 { U \"\ud83e\udeb8\" _emoji }; const Texture e7 { U \"\ud83e\udeba\" _emoji }; const Texture e8 { U \"\ud83e\uded8\" _emoji }; const Texture e9 { U \"\ud83e\uded9\" _emoji }; const Texture e10 { U \"\ud83e\udee7\" _emoji }; const Texture e11 { U \"\ud83d\udede\" _emoji }; while ( System :: Update ()) { e0 . drawAt ( 100 , 100 ); e1 . drawAt ( 300 , 100 ); e2 . drawAt ( 500 , 100 ); e3 . drawAt ( 700 , 100 ); e4 . drawAt ( 100 , 300 ); e5 . drawAt ( 300 , 300 ); e6 . drawAt ( 500 , 300 ); e7 . drawAt ( 700 , 300 ); e8 . drawAt ( 100 , 500 ); e9 . drawAt ( 300 , 500 ); e10 . drawAt ( 500 , 500 ); e11 . drawAt ( 700 , 500 ); } } GUI \u30d5\u30a9\u30f3\u30c8\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a2\u30a4\u30b3\u30f3\u30d5\u30a9\u30f3\u30c8\u3078\u306e\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002SimpleGUI \u306e\u30c6\u30ad\u30b9\u30c8\u3067 U\"\\U000F0493 Setting\" \u306e\u3088\u3046\u306b\u30a2\u30a4\u30b3\u30f3\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3067\u304d\u307e\u3059 ( #698 ) # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); double volume = 1.0 ; while ( System :: Update ()) { SimpleGUI :: Button ( U \" \\U000F1677 \u3086\u3063\u304f\u308a\" , Vec2 { 20 , 20 }, 160 ); SimpleGUI :: Button ( U \" \\U000F0907 \u3044\u305d\u3044\u3067\" , Vec2 { 20 , 60 }, 160 ); SimpleGUI :: Button ( U \" \\U000F0493 \u8a2d\u5b9a\" , Vec2 { 20 , 100 }, 160 ); SimpleGUI :: Slider ( 0.5 < volume ? U \" \\U000F057E \" : 0.0 < volume ? U \" \\U000F0580 \" : U \" \\U000F0581 \" , volume , Vec2 { 20 , 140 }, 30 , 130 ); } } Windows \u7248\u306e System::EnumerateMonitors() \u306b\u304a\u3044\u3066\u3001\u3088\u308a\u533a\u5225\u3057\u3084\u3059\u3044\u30e2\u30cb\u30bf\u30fc\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #695 ) \u6587\u5b57\u3092 3D \u306e Mesh \u3067\u8868\u73fe\u3059\u308b\u305f\u3081\u306e MeshGlyph \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #680 ) # include <Siv3D.hpp> class Font3D { public : Font3D () = default ; SIV3D_NODISCARD_CXX20 explicit Font3D ( const Font & font ) : m_font { font } {} [[ nodiscard ]] Array < MeshGlyph > getGlyphs ( StringView s ) const { Array < MeshGlyph > results ; for ( auto ch : s ) { auto it = m_table . find ( ch ); if ( it == m_table . end ()) { it = m_table . emplace ( ch , m_font . createMesh ( ch )). first ; } results << it -> second ; } return results ; } void drawCylindricalInner ( StringView s , const Vec3 & center , double r , double scale , double startAngle , const ColorF & color ) const { const double perimeter = ( r * Math :: TwoPi ); double penPosX = 0.0 ; startAngle += 90 _deg ; for ( auto meshGlyph : getGlyphs ( s )) { penPosX += ( meshGlyph . xOffset * scale ); if ( meshGlyph . mesh ) { const double angle = ( penPosX / perimeter ) * 360 _deg ; const Quaternion q = Quaternion :: RotateY ( -90 _deg + angle - startAngle ); const Vec3 pos = Cylindrical { r , ( -180 _deg - angle + startAngle ), 0.0 } + center ; const Mat4x4 mat = Mat4x4 :: Translate ( - meshGlyph . xOffset , 0 , 0 ) . scaled ( scale ) . rotated ( q ) . translated ( pos ); meshGlyph . mesh . draw ( mat , color ); } penPosX += ( meshGlyph . xAdvance - meshGlyph . xOffset ) * scale ; } } void drawCylindricalOuter ( StringView s , const Vec3 & center , double r , double scale , double startAngle , const ColorF & color ) const { const double perimeter = ( r * Math :: TwoPi ); double penPosX = 0.0 ; startAngle += 90 _deg ; for ( auto meshGlyph : getGlyphs ( s )) { penPosX += ( meshGlyph . xOffset * scale ); if ( meshGlyph . mesh ) { const double angle = ( penPosX / perimeter ) * 360 _deg ; const Quaternion q = Quaternion :: RotateY ( 90 _deg - angle - startAngle ); const Vec3 pos = Cylindrical { r , ( 180 _deg + angle + startAngle ), 0.0 } + center ; const Mat4x4 mat = Mat4x4 :: Translate ( - meshGlyph . xOffset , 0 , 0 ) . scaled ( scale ) . rotated ( q ) . translated ( pos ); meshGlyph . mesh . draw ( mat , color ); } penPosX += ( meshGlyph . xAdvance - meshGlyph . xOffset ) * scale ; } } private : Font m_font ; mutable HashTable < char32 , MeshGlyph > m_table ; }; void Main () { Window :: Resize ( 1280 , 720 ); const ColorF backgroundColor = ColorF { 0.5 , 0.6 , 0.6 }. removeSRGBCurve (); const Texture uvChecker { U \"example/texture/uv.png\" , TextureDesc :: MippedSRGB }; const MSRenderTexture renderTexture { Scene :: Size (), TextureFormat :: R8G8B8A8_Unorm_SRGB , HasDepth :: Yes }; DebugCamera3D camera { renderTexture . size (), 30 _deg , Vec3 { 10 , 16 , -32 } }; const Font3D font3D { Font { 60 } }; while ( System :: Update ()) { const double t = Scene :: Time (); camera . update ( 2.0 ); Graphics3D :: SetCameraTransform ( camera ); // 3D \u63cf\u753b { Graphics3D :: SetGlobalAmbientColor ( Graphics3D :: DefaultGlobalAmbientColor ); Graphics3D :: SetSunColor ( ColorF { 0.75 }); const ScopedRenderTarget3D target { renderTexture . clear ( backgroundColor ) }; Plane { 64 }. draw ( uvChecker ); Cylinder { Vec3 { 0 , 0 , 0 }, Vec3 { 0 , 16 , 0 }, 5.6 }. draw ( ColorF { 0.25 }. removeSRGBCurve ()); // 3D Text Circle { // \u4e21\u9762\u63cf\u753b\u3001\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u7121\u52b9\u5316 const ScopedRenderStates3D rasterizer { RasterizerState :: SolidCullNone , BlendState :: Additive }; Graphics3D :: SetGlobalAmbientColor ( ColorF { 1.0 }); Graphics3D :: SetSunColor ( ColorF { 0.0 }); font3D . drawCylindricalOuter ( DateTime :: Now (). format ( U \"HH:mm:ss\" ), Vec3 { 0 , 11.5 , 0 }, 6 * 1.2 , 3.0 * 1.2 , ( t * -25 _deg ), ColorF { 1.0 , 0.98 , 0.9 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( DateTime :: Now (). format ( U \"HH:mm:ss\" ), Vec3 { 0 , 11.5 , 0 }, 6 * 1.2 , 3.0 * 1.2 , ( t * -25 _deg ) + 180 _deg , ColorF { 1.0 , 0.98 , 0.9 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"Monday, September 27, 2021\" , Vec3 { 0 , 10 , 0 }, 6 * 1.2 , 1.2 * 1.2 , ( t * -50 _deg ), ColorF { 1.0 , 0.98 , 0.9 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NIKKEI 225 30,248.81 +609.41\" , Vec3 { 0 , 8 , 0 }, 6 , 1.0 , ( t * -72 _deg ), ColorF { 0.6 , 1.0 , 0.8 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"HANG SENG 24,192,16 -318.82\" , Vec3 { 0 , 7 , 0 }, 6 , 1.0 , ( t * -62 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"SHANGHAI 3,613.07 -29.15\" , Vec3 { 0 , 6 , 0 }, 6 , 1.0 , ( t * -58 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"FTSE 7,051.48 -26.87\" , Vec3 { 0 , 5 , 0 }, 6 , 1.0 , ( t * -70 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"CAC 6,638.46 -63.52\" , Vec3 { 0 , 4 , 0 }, 6 , 1.0 , ( t * -60 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"DAX 15,531.75 -112.22\" , Vec3 { 0 , 3 , 0 }, 6 , 1.0 , ( t * -66 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NASDAQ 15,047.70 -4.54\" , Vec3 { 0 , 2 , 0 }, 6 , 1.0 , ( t * -68 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NIKKEI 225 30,248.81 +609.41\" , Vec3 { 0 , 8 , 0 }, 6 , 1.0 , ( t * -72 _deg ) + 180 _deg , ColorF { 0.6 , 1.0 , 0.8 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"HANG SENG 24,192,16 -318.82\" , Vec3 { 0 , 7 , 0 }, 6 , 1.0 , ( t * -62 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"SHANGHAI 3,613.07 -29.15\" , Vec3 { 0 , 6 , 0 }, 6 , 1.0 , ( t * -58 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"FTSE 7,051.48 -26.87\" , Vec3 { 0 , 5 , 0 }, 6 , 1.0 , ( t * -70 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"CAC 6,638.46 -63.52\" , Vec3 { 0 , 4 , 0 }, 6 , 1.0 , ( t * -60 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"DAX 15,531.75 -112.22\" , Vec3 { 0 , 3 , 0 }, 6 , 1.0 , ( t * -66 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NASDAQ 15,047.70 -4.54\" , Vec3 { 0 , 2 , 0 }, 6 , 1.0 , ( t * -68 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); } } // 3D \u30b7\u30fc\u30f3\u3092 2D \u30b7\u30fc\u30f3\u306b\u63cf\u753b { Graphics3D :: Flush (); renderTexture . resolve (); Shader :: LinearToScreen ( renderTexture ); } } } Windows \u7248\u306b\u304a\u3044\u3066\u3001Leap Motion \u30c7\u30d0\u30a4\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3057\u305f ( #677 ) // Ultraleap SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e // 1. \u30a4\u30f3\u30af\u30eb\u30fc\u30c9 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b // C:\\Program Files\\Ultraleap\\LeapSDK\\include \u3092\u8ffd\u52a0\u3002 // 2. \u30e9\u30a4\u30d6\u30e9\u30ea \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b // C:\\Program Files\\Ultraleap\\LeapSDK\\lib\\x64 \u3092\u8ffd\u52a0\u3002 // 3. App \u30d5\u30a9\u30eb\u30c0\u306b LeapC.dll \u3092\u30b3\u30d4\u30fc\u3002 # include <Siv3D.hpp> inline constexpr double HandScale = 0.08 ; void DrawSphere ( uint32 handID , const Vec3 & pos ) { Sphere { ( pos * HandScale ), ( 6 * HandScale ) } . draw ( HSV { handID * 60 }. removeSRGBCurve ()); } void DrawCylinder ( const Vec3 & from , const Vec3 & to ) { Cylinder { ( from * HandScale ), ( to * HandScale ), ( 3 * HandScale ) }. draw (); } void Main () { Window :: Resize ( 1280 , 720 ); const ColorF backgroundColor = ColorF { 0.4 , 0.6 , 0.8 }. removeSRGBCurve (); const Texture uvChecker { U \"example/texture/uv.png\" , TextureDesc :: MippedSRGB }; const MSRenderTexture renderTexture { Scene :: Size (), TextureFormat :: R8G8B8A8_Unorm_SRGB , HasDepth :: Yes }; DebugCamera3D camera { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -32 } }; const Font font { FontMethod :: MSDF , 48 , Typeface :: Bold }; size_t trackingModeIndex = 0 ; bool showInfo = true ; Leap :: Connection leap { Leap :: TrackingMode :: Desktop }; if ( not leap ) { throw Error { U \"Leap device not found\" }; } while ( System :: Update ()) { leap . update (); camera . update ( 2.0 ); Graphics3D :: SetCameraTransform ( camera ); // 3D \u63cf\u753b { const ScopedRenderTarget3D target { renderTexture . clear ( backgroundColor ) }; if ( trackingModeIndex == 0 ) { Plane { 64 }. draw ( uvChecker ); const double z = 6 ; for ( auto x : Range ( -2 , 2 )) { Cylinder { ( x * 6.0 ), 4 , z , 2 , 8 }. draw ( ColorF { 0.8 }. removeSRGBCurve ()); } for ( auto x : Range ( -8 , 8 )) { const Box box { ( x * 2 ), 10 , z , 1.8 , 1 , 10 }; bool intersect = false ; for ( const auto & hand : leap . getHands ()) { for ( auto fingerIndex : step ( 5 )) { for ( auto boneIndex : Range ( 1 , 3 )) { const Vec3 to = hand . fingerBone ( fingerIndex , boneIndex ). to ; const Sphere sphere { ( to * HandScale ), ( 6 * HandScale ) }; if ( sphere . intersects ( box )) { intersect = true ; break ; } } if ( intersect ) { break ; } } if ( intersect ) { break ; } } box . draw ( HSV { ( x * 40 ), ( intersect ? 0.8 : 0.15 ), 1.0 }. removeSRGBCurve ()); } } for ( const auto & hand : leap . getHands ()) { const auto handID = hand . id (); for ( auto fingerIndex : step ( 5 )) { for ( auto boneIndex : step ( 4 )) { const Vec3 from = hand . fingerBone ( fingerIndex , boneIndex ). from ; const Vec3 to = hand . fingerBone ( fingerIndex , boneIndex ). to ; if ( fingerIndex == 4 && boneIndex == 0 ) { DrawSphere ( handID , from ); } DrawSphere ( handID , to ); if (( fingerIndex != 0 && fingerIndex != 4 ) && boneIndex == 0 ) { continue ; } DrawCylinder ( from , to ); } } DrawSphere ( handID , hand . palmPosition ()); DrawCylinder ( hand . fingerBone ( 0 , 0 ). from , hand . fingerBone ( 1 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 1 , 1 ). from , hand . fingerBone ( 2 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 2 , 1 ). from , hand . fingerBone ( 3 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 3 , 1 ). from , hand . fingerBone ( 4 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 0 , 0 ). from , hand . fingerBone ( 4 , 0 ). from ); } } { Graphics3D :: Flush (); renderTexture . resolve (); Shader :: LinearToScreen ( renderTexture ); } if ( SimpleGUI :: RadioButtons ( trackingModeIndex , { U \"Desktop\" , U \"Head-mounted\" , U \"Screentop\" }, Vec2 { 20 , 20 })) { leap . setTrackingMode ( static_cast < Leap :: TrackingMode > ( trackingModeIndex )); if ( trackingModeIndex == 0 ) { camera = DebugCamera3D { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -32 } }; } else if ( trackingModeIndex == 1 ) { camera = DebugCamera3D { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -24 }, Vec3 { 0 , 0 , 8 } }; } else { camera = DebugCamera3D { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -56 }, Vec3 { 0 , 0 , -24 } }; } } SimpleGUI :: CheckBox ( showInfo , U \"showInfo\" , Vec2 { 20 , 140 }); if ( showInfo ) { for ( const auto & hand : leap . getHands ()) { const Vec2 palmPos = camera . worldToScreenPoint ( hand . palmPosition () * HandScale ). xy (); String ext ; for ( auto fingerIndex : step ( 5 )) { ext << ( hand . isExtended ( fingerIndex ) ? U '1' : U '0' ); } const String state = U \"pinchDistance: {:.2f} \\n grabAngle: {:.2f} \\n pinchStrength: {:.2f} \\n grabStrength: {:.2f} \\n fingers:{}\" _fmt ( hand . pinchDistance (), hand . grabAngle (), hand . pinchStrength (), hand . grabStrength (), ext ); font ( hand . isLeftHand () ? U \"L\" : U \"R\" ) . draw ( TextStyle :: Outline ( 0.15 , ColorF { 0.0 }), 100 , Arg :: rightCenter = palmPos . movedBy ( -20 , 0 )); font ( state ) . draw ( 30 , Arg :: leftCenter = palmPos , ColorF { 0.15 }); } } } } Math::Tau \u3084 0.5_tau \u306a\u3069\u30012\u03c0 \u3092\u8868\u3059\u5b9a\u6570 \u03c4 \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #673 ) # include <Siv3D.hpp> void Main () { Print << Math :: Pi ; Print << Math :: Tau ; Print << Math :: PiF ; Print << Math :: TauF ; Print << 0.5 _pi ; Print << 0.5 _tau ; while ( System :: Update ()) { } } \u7570\u306a\u308b\u7a2e\u985e\u3069\u3046\u3057\u306e Optional \u306e\u6bd4\u8f03\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #670 ) BigFloat \u306b .isNan() , .isInf() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #669 ) Array , Optional , BigInt , BigFloat \u306b\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f ( #658 ) String , StringView , UUIDValue \u306b\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f ( #664 ) DrawableText::regionBase() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #666 ) Windows \u7248\u306b\u304a\u3044\u3066\u3001\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u4ee5\u4e0a\u306e\u983b\u5ea6\u3067\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3092\u53d6\u5f97\u3067\u304d\u308b\u95a2\u6570 Platform::Windows::Keyboard::GetEvents() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #662 ) # include <Siv3D.hpp> void Main () { uint64 eventIndex = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 { 680 , 20 })) { ClearPrint (); } for ( const auto & event : Platform :: Windows :: Keyboard :: GetEvents ()) { if ( eventIndex < event . eventIndex ) { Print << event . timeMillisec << U \": \" << Input { InputDeviceType :: Keyboard , event . code }. name () << ( event . down ? U \" down (event)\" : U \" up (event)\" ); eventIndex = event . eventIndex ; } } /* for (const auto& key : Keyboard::GetAllInputs()) { if (key.down()) { Print << Time::GetMillisec() << U\": \" << key.name() << U\" down\"; } else if (key.up()) { Print << Time::GetMillisec() << U\": \" << key.name() << U\" up\"; } } */ } } \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 \u30b9\u30af\u30ea\u30d7\u30c8\u30a8\u30f3\u30b8\u30f3\u306e\u521d\u671f\u5316\u3092\u9045\u5ef6\u3055\u305b\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u521d\u671f\u5316\u306b\u304b\u304b\u308b\u6642\u9593\u3092\u77ed\u7e2e\u3057\u307e\u3057\u305f\uff08\u6570\u5341\u30df\u30ea\u79d2\uff09 ( #657 ) GLSL \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u8a18\u8ff0\u3092\u7c21\u7d20\u5316\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u5c11\u3057\u524a\u6e1b\u3057\u307e\u3057\u305f ( #687 ) HalfFloat \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092 constexpr \u306b\u3057\u307e\u3057\u305f ( #689 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 NotoEmoji-Regular.ttf \u3092\u30a8\u30f3\u30b8\u30f3\u30ea\u30bd\u30fc\u30b9\u306b\u542b\u307e\u306a\u304f\u3066\u3082\u30a8\u30f3\u30b8\u30f3\u3092\u521d\u671f\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #684 ) NotoSansCJK-Regular.ttc.zstdcmp \u3084 NotoSansJP-Regular.otf.zstdcmp \u306e\u4ee3\u66ff\u306b\u3067\u304d\u308b\u3001\u6700\u4f4e\u9650\u5fc5\u8981\u306a\u30b0\u30ea\u30d5\u3092\u683c\u7d0d\u3057\u305f\u30d5\u30a9\u30f3\u30c8 engine/font/min/siv3d-min.woff \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #682 ) Windows \u7248\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u5bfe\u5fdc\u8a00\u8a9e\u3092\u5897\u3084\u3057\u307e\u3057\u305f ( #671 ) \u4ed5\u69d8\u5909\u66f4 \u00b6 Web \u7248\u3067\u901a\u5e38\u3068\u540c\u3058\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u305f\u3081\u3001 SIV3D_MAINLOOP_BEGIN \u3092\u524a\u9664\u3057\u307e\u3057\u305f ( #674 ) macOS \u7248\u3068 Linux \u7248\u306b\u304a\u3044\u3066\u3001\u30ed\u30b0\u306f std::cout \u3067\u306f\u306a\u304f std::clog \u304a\u3088\u3073 std::cerr \u306b\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #630 ) engine \u304a\u3088\u3073 example \u30d5\u30a9\u30eb\u30c0\u306e\u66f4\u65b0 ( #686 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 DrawableText::draw(double, Arg:: ...) \u3084 DrawableText::region(double, Arg ...) \u306e\u4f4d\u7f6e\u304c\u6b63\u3057\u304f\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #665 ) Windows \u7248\u306b\u304a\u3044\u3066 Window::IsToggleFullscreenEnabled() \u304c\u5e38\u306b false \u3092\u8fd4\u3059\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #699 ) HalfFloat{ 0.0f } == HalfFloat{ -0.0f } \u304c false \u306b\u306a\u308b\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #660 ) CircularBase<float, Oclock> \u4f7f\u7528\u6642\u306b\u767a\u751f\u3059\u308b\u8b66\u544a\u3092\u89e3\u6d88\u3057\u307e\u3057\u305f ( #667 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 tetsurom : HalfFloat \u306e\u5b9f\u88c5\u6539\u5584, Optional \u306e\u5b9f\u88c5\u6539\u5584, BigFloat \u306e\u5b9f\u88c5\u6539\u5584, \u5404\u7a2e\u30af\u30e9\u30b9\u3078\u306e\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50\u306e\u5b9f\u88c5 v0.6.2 | 2021-09-29 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 Windows \u7248\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u3092\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f ( #650 , #651 ) \u30e1\u30e2\u30ea / VRAM \u306e\u6d88\u8cbb\u91cf\u3092\u524a\u6e1b\u3057\u307e\u3057\u305f ( #648 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Windows \u7248\u3067\u91cd\u3044\u63cf\u753b\u51e6\u7406\u3092\u884c\u3063\u305f\u3068\u304d\u306b v0.4.3 \u3088\u308a\u3082\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #652 ) Windows \u7248\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e stdafx.h \u3092 Header Files \u30d5\u30a3\u30eb\u30bf\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f ( #653 ) v0.6.1 | 2021-09-21 \u65b0\u6a5f\u80fd \u00b6 SDF / MSDF \u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7c21\u5358\u306b\u6307\u5b9a\u3067\u304d\u308b Graphics2D::SetSDFParameters(const TextStyle&) , Graphics2D::SetMSDFParameters(const TextStyle&) \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #647 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 Windows \u7248\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u767a\u751f\u3057\u3066\u3044\u305f\u30d3\u30eb\u30c9\u6642\u306e IntelliSense \u306e\u8b66\u544a\u3092 2 \u4ef6\u6291\u5236\u3057\u307e\u3057\u305f ( #643 ) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u4ed5\u69d8\u5909\u66f4 \u00b6 Monitor \u306f MonitorInfo \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f ( #649 ) UUID \u306f UUIDValue \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 v0.6.0 \u306b\u304a\u3044\u3066\u3001Windows \u7248\u3067\u30bf\u30c3\u30c1\u64cd\u4f5c\u3092\u3057\u305f\u3068\u304d\u306b\u5de6\u30af\u30ea\u30c3\u30af\u3068\u5224\u5b9a\u3055\u308c\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #645 ) v0.6.0 \u306b\u304a\u3044\u3066\u3001 <Siv3D/Windows/Windows.hpp> \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #644 ) v0.6.0 \u306b\u304a\u3044\u3066\u3001 Platform::Windows::GetHWND() \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #646 ) MathParser \u306b\u7a7a\u306e\u6587\u5b57\u5217\u3092\u6e21\u3057\u305f\u3068\u304d\u306b\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #641 ) v0.6.0 | 2021-09-18 \u65b0\u6a5f\u80fd \u00b6 \u57fa\u672c\u7684\u306a 3D \u63cf\u753b\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f C++20 \u306b\u5bfe\u5fdc\u3057\u3001Concepts \u3084 Designated initialization, \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3078\u306e [[nodiscard]] , \u5b87\u5b99\u8239\u6f14\u7b97\u5b50\u3001\u3088\u308a\u591a\u304f\u306e constexpr , \u65b0\u3057\u3044\u6a19\u6e96\u6a5f\u80fd\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u306a\u3069\u304c\u6d3b\u7528\u3055\u308c\u3066\u3044\u307e\u3059 \u8a66\u9a13\u7684\u306a Web \u7248\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f (\u8a73\u3057\u304f\u306f OpenSiv3D for Web ) Windows \u3067 OpenGL \u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304c\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f (\u8a73\u3057\u304f\u306f \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 35) \u30d5\u30a1\u30a4\u30eb\u306e\u975e\u540c\u671f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306a\u3069\u3092\u884c\u3046 HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30c7\u30d5\u30a9\u30eb\u30c8\u3067 HighDPI \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f SVG \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f MIDI \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u52d5\u753b\u3092\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u6271\u3048\u308b VideoTexture \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Windows \u3067\u30da\u30f3\u30bf\u30d6\u30ec\u30c3\u30c8\u306e\u5165\u529b\uff08\u7b46\u5727\u30fb\u50be\u304d\uff09\u3092\u53d6\u5f97\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f 2D \u63cf\u753b\u3067\u30ab\u30b9\u30bf\u30e0\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u30023D \u3067\u3082\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3001\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059 \u3059\u3079\u3066\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\uff08\u518d\u751f\u3001\u505c\u6b62\u3001\u97f3\u91cf\u3001\u30d1\u30f3\u3001\u30b9\u30d4\u30fc\u30c9\uff09\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3057\u305f HPF, LPF, \u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u306a\u3069\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u97f3\u58f0\u30d5\u30a3\u30eb\u30bf\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u6587\u5b57\u306e\u8f2a\u90ed\u3084 Polygon \u3092\u6b63\u78ba\u306b\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Font \u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u5f62\u5f0f\u306b SDF / MSDF \u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Font \u306e\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3001\u8f2a\u90ed\u3001\u30b7\u30e3\u30c9\u30a6\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f String \u578b\u306b\u5bfe\u5fdc\u3057\u305f\u3001\u6b63\u898f\u8868\u73fe\u3092\u6271\u3046\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u308b\u6587\u5b57\u5217\u306e\u96e3\u8aad\u5316\u3092\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30c7\u30de\u30f3\u30b0\u30eb\u3092\u884c\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Kahan \u306e\u52a0\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f 128-bit \u6574\u6570\u578b\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Stopwatch \u3084 Timer \u304c\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e\u57fa\u6e96\u6642\u523b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ISteadyClock \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e Stopwatch \u3084 Timer \u3092\u4e00\u62ec\u3057\u3066\u4e00\u6642\u505c\u6b62\u3055\u305b\u305f\u308a\u3001\u9045\u304f/\u65e9\u304f\u9032\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3057\u305f TimeProfiler \u304c\u3088\u308a\u8a73\u7d30\u306a\u7d71\u8a08\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u5730\u7406\u7a7a\u9593\u30c7\u30fc\u30bf\u306e\u4ea4\u63db\u5f62\u5f0f\u3067\u3042\u308b GeoJSON \u3092\u8aad\u307f\u8fbc\u3080\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u591a\u304f\u306e\u6570\u5b66\u5b9a\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f JSONReader , JSONWriter \u3092\u7d71\u5408\u3057\u305f JSON \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u7c21\u6613\u7684\u306a\u30ad\u30fc\u30d5\u30ec\u30fc\u30e0\u306b\u3088\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046 SimpleAnimation \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u7d71\u8a08\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u6570\u5024\u306b\u5fdc\u3058\u305f\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u884c\u3046\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30d9\u30af\u30c8\u30eb\u30af\u30e9\u30b9\u306b\u591a\u6570\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u56f3\u5f62\u30af\u30e9\u30b9\u306b\u591a\u6570\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Shape2D \u306b\u30cf\u30fc\u30c8\u5f62\u3001\u4e21\u65b9\u5411\u77e2\u5370\u3001Squircle \u5f62\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Polygon \u306b\u67d4\u8edf\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u9577\u65b9\u5f62\u8a70\u8fbc\u307f\u306b 90\u00b0 \u56de\u8ee2\u3092\u8a31\u53ef\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u5404\u7a2e\u4e71\u6570\u95a2\u6570\u304c\u4e71\u6570\u30a8\u30f3\u30b8\u30f3\u3092\u5f15\u6570\u306b\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f UUID \u751f\u6210\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u74b0\u5883\u5909\u6570\u306e\u53d6\u5f97\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u53d6\u5f97\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30e2\u30cb\u30bf\u30fc\u306e\u7269\u7406\u30b5\u30a4\u30ba\u306a\u3069\u3001\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u8a73\u7d30\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Klat \u65b9\u5f0f\u306b\u3088\u308b\u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u753b\u50cf\u5f62\u5f0f WebP, TIFF \u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u97f3\u58f0\u5f62\u5f0f Opus, AIFF, FLAC, MIDI, WMA \u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u753b\u50cf\u306e\u4e00\u90e8\u5206\u306b\u753b\u50cf\u51e6\u7406\u3092\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f GrabCut \u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f QR \u30b3\u30fc\u30c9\u751f\u6210\u6a5f\u80fd\u3092\u6539\u5584\u3057\u307e\u3057\u305f VideoWriter \u3092\u6539\u5584\u3057\u307e\u3057\u305f \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u5168\u3066\u306e\u30ad\u30fc\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u306b\u304a\u3051\u308b\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u3088\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3057\u305f example \u30d5\u30a1\u30a4\u30eb\u3092\u591a\u6570\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u304c\u3088\u308a\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Spline2D \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u56f3\u5f62\u306e\u8f2a\u90ed\u306e\u4e00\u90e8\u306e\u53d6\u5f97\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u56f3\u5f62\u306e Lerp \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f GPU \u3060\u3051\u3067\u306e\u4e09\u89d2\u5f62\u63cf\u753b\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30ab\u30b9\u30bf\u30e0\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u97f3\u91cf\u3092\u8abf\u6574\u3067\u304d\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Ogg Vorbis \u306e\u30eb\u30fc\u30d7\u30bf\u30b0\u53d6\u5f97\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u51f9\u5305 (Concave hull) \u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u67d4\u8edf\u306a\u753b\u50cf\u30c7\u30b3\u30fc\u30c0\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f \u9589 / \u958b\u533a\u9593\u3092\u6307\u5b9a\u3057\u305f\u4e71\u6570\u751f\u6210\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f SIV3D_SET() \u306b\u3088\u308b\u30d3\u30eb\u30c9\u6642\u306e\u30a8\u30f3\u30b8\u30f3\u8a2d\u5b9a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Effect \u306e\u518d\u5e30\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f CJK \u30d5\u30a9\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u3001 Print \u304c\u4e2d\u56fd\u8a9e\u3001\u97d3\u56fd\u8a9e\u306e\u8868\u793a\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080 VideoReader \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f 2D \u7269\u7406\u6f14\u7b97\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Siv3D \u304f\u3093\u30c9\u30c3\u30c8\u7d75\u7d20\u6750\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f Siv3D \u304f\u3093 .obj 3D \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f Image::stamp() \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f Line::drawDoubleHeadedArrow() \u3067\u4e21\u65b9\u5411\u77e2\u5370\u3092\u63cf\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u4fdd\u5b58\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u3092\u5927\u5e45\u306b\u6539\u5584\u3057\u307e\u3057\u305f 2D \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u3088\u308a\u591a\u304f\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u591a\u304f\u306e 3D \u5f62\u72b6\u306e\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Linux \u7248\u306e IME\u306e\u6319\u52d5\u3092\u6539\u5584\u3057\u307e\u3057\u305f \u30e6\u30fc\u30b6\u30a2\u30c9\u30aa\u30f3\u306e\u8ffd\u52a0\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u305d\u306e\u4ed6\u591a\u6570\u306e\u65b0\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 Windows \u7248\u306e\u30a2\u30d7\u30ea\u306e\u8d77\u52d5\u6642\u9593\u304c\u6570\u767e\u30df\u30ea\u79d2\u524d\u5f8c\u77ed\u7e2e\u3057\u307e\u3057\u305f Heterogeneous lookup \u306b\u3088\u308a\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3084 StringView \u3067 HashTable \u3084 HashSet \u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u3059\u308b\u969b\u306e\u5b9f\u884c\u6642\u6027\u80fd\u304c\u5411\u4e0a\u3057\u307e\u3057\u305f \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3084\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u304c\u9ad8\u901f\u306b\u306a\u308a\u307e\u3057\u305f Parse / ParseOpt / ParseOr \u306e\u901f\u5ea6\u3092\u6539\u5584\u3057\u307e\u3057\u305f \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u304c .hpp \u30d5\u30a1\u30a4\u30eb\u304b\u3089 .ipp \u30d5\u30a1\u30a4\u30eb\u306b\u79fb\u3055\u308c\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u304c\u8aad\u307f\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f Windows \u7248\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u30d3\u30eb\u30c9\u304c\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f \u4ed5\u69d8\u5909\u66f4 \u00b6 bool \u578b\u306e\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u591a\u304f\u304c\u3001\u540d\u524d\u306e\u4ed8\u3044\u305f YesNo \u578b\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u304c\u5411\u4e0a\u3057\u307e\u3057\u305f Optional \u578b\u304c C++ \u6a19\u6e96\u306e std::optional \u306b\u8fd1\u3044\u52d5\u4f5c\u3092\u3059\u308b\u3088\u3046\u6539\u5584\u3055\u308c\u307e\u3057\u305f HashTable \u578b\u304c C++ \u6a19\u6e96\u306e std::unordered_map \u306b\u8fd1\u3044\u52d5\u4f5c\u3092\u3059\u308b\u3088\u3046\u6539\u5584\u3055\u308c\u307e\u3057\u305f KDTree \u304c\u3088\u308a\u77ed\u3044\u8a18\u8ff0\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f Concurrenttask \u306f AsyncTask \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u5b50\u30d7\u30ed\u30bb\u30b9\u4f5c\u6210\u95a2\u6570\u306f ChildProcess \u30af\u30e9\u30b9\u306b\u7d71\u5408\u3055\u308c\u307e\u3057\u305f Unicode::FromWString() \u306f Unicode::FromWstring() \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306e U\"{}\"_fmt(x) \u306f\u3001\u6709\u52b9\u6841\u6570\u3059\u3079\u3066\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Time::Get\uff5e \u306f\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5\u6642\u9593\u3067\u306f\u306a\u304f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u304b\u3089\u306e\u6642\u9593\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f CustomStopwatch \u306f VariableSpeedStopwatch \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f FileSystem::SpecialFolderPath() \u306f FileSystem::GetFolderPath() \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f FileSystem::UniqueFilePath() \u306f UUID \u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u540d\u524d\u3092\u4f5c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ByteArray \u306f Blob \u304a\u3088\u3073 MemoryReader \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f CSVData \u306f CSV \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f INIData \u306f INI \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f JSONReader , JSONWriter \u306f JSON \u306b\u7d71\u5408\u3055\u308c\u307e\u3057\u305f EasingController \u306f EasingAB \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f Sprite \u306f Buffer2D \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u306f TriangleIndex \u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f MessageBox \u306e\u4ed5\u69d8\u304c\u5909\u308f\u308a\u307e\u3057\u305f \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u4ed5\u69d8\u304c\u5909\u308f\u308a\u307e\u3057\u305f \u7269\u4f53\u691c\u51fa\u6a5f\u80fd\u306f CascadeClassifier \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f Key \u306f Input \u306b\u306a\u308a\u307e\u3057\u305f \u7d75\u6587\u5b57\u3068\u30a2\u30a4\u30b3\u30f3\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u66f4\u65b0\u3057\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u306e\u7a2e\u985e\u304c\u5927\u5e45\u306b\u5897\u3048\u307e\u3057\u305f Image \u306e\u6700\u5927\u30b5\u30a4\u30ba\u3092 1 \u8fba 8192px \u2192 16384px \u306b\u62e1\u5f35\u3057\u307e\u3057\u305f ConstantBuffer \u30b5\u30a4\u30ba 16 \u00d7 N \u30d0\u30a4\u30c8\u5236\u7d04\u304c\u64a4\u5ec3\u3055\u308c\u307e\u3057\u305f \u4e26\u5217\u5b9f\u884c\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u306f SIV3D_CONCURRENT \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f High DPI \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u306a\u308a\u3001 SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Array \u306e\u4e26\u5217\u95a2\u6570\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f AsyncTask \u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u306b\u3088\u308b\u5dee\u7570\u3092\u89e3\u6d88\u3057\u307e\u3057\u305f Windows \u306e MakeDragDrop() \u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f PPM \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306e\u4e71\u6570\u306e\u518d\u73fe\u6027\u306e\u6539\u5584\u3057\u307e\u3057\u305f QR \u30b3\u30fc\u30c9\u751f\u6210\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f \u6ce8\u610f\u70b9 \u00b6 Math::SmoothDmap() \u306e\u5f15\u6570\u9806\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3067\u767a\u898b\u3067\u304d\u307e\u305b\u3093 \u30d5\u30a9\u30f3\u30c8\u306e\u7e26\u66f8\u304d\u6a5f\u80fd\u306f\u4e00\u6642\u7684\u306b\u975e\u642d\u8f09\u306b\u306a\u308a\u307e\u3057\u305f \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u6a5f\u80fd\u306f\u4e00\u6642\u7684\u306b\u975e\u642d\u8f09\u306b\u306a\u308a\u307e\u3057\u305f SimpleGUIManager \u6a5f\u80fd\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3057\u305f NoiseGenerator \u30af\u30e9\u30b9\u306f\u4e00\u6642\u7684\u306b\u975e\u642d\u8f09\u306b\u306a\u308a\u307e\u3057\u305f Shift_JIS \u5f62\u5f0f\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f \u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u306b\u3064\u3044\u3066\u3001\u4ed5\u7d44\u307f\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f (\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 15 \u53c2\u7167) \u7d75\u6587\u5b57\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u4e71\u6570\u306e\u518d\u73fe\u6027\u304c v0.4.3 \u3068\u4e92\u63db\u304c\u3042\u308a\u307e\u305b\u3093 2D \u7269\u7406\u6f14\u7b97\u306f cm \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5358\u4f4d\u306b\u5909\u66f4\u3057\u307e\u3057\u305f Glyph \u5358\u4f4d\u3067\u306e\u63cf\u753b\u306e\u65b9\u6cd5\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f Windows \u7248\u306f <Siv3D.hpp> \u306e\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u3092\u5168\u3066\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u81ea\u52d5\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002Main.cpp \u306b\u3042\u308b # include <Siv3D.hpp> \u306f\u5b9f\u8cea\u7684\u306b\u306f\u7121\u610f\u5473\u3067\u3059\u3002 # define NO_S3D_USING \u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d8\u30c3\u30c0\u4f5c\u6210\u7528\u30d8\u30c3\u30c0 stdafx.h \u3067\u884c\u3063\u3066\u304f\u3060\u3055\u3044 Audio \u306f Wave \u3068\u4e92\u63db\u306e\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002 .getWave() \u306f .getSamples() \u306b\u7f6e\u304d\u63db\u308f\u308a\u307e\u3057\u305f\u3002 GlobalAudio::BusGetSamples() \u3082\u5229\u7528\u3067\u304d\u307e\u3059 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u958b\u767a\u3092\u5168\u9762\u7684\u306b\u62c5\u5f53 Ebishu-0309 : Geometry2D:: \u306b\u591a\u6570\u306e\u95a2\u6570\u3092\u5b9f\u88c5 , Shape2D::Squircle() \u306e\u5b9f\u88c5 , Bezier2 , Bezier3 \u306e .boundingRect() \u3092\u5b9f\u88c5, \u30b3\u30fc\u30c9\u306e\u6539\u5584 taotao54321 : Grid \u306e\u4fee\u6b63, \u30b3\u30fc\u30c9\u306e\u6539\u5584 sthairno : Linux \u7248\u306e IME \u51e6\u7406\u6539\u5584 itakawa : Siv3D \u304f\u3093 .obj \u30d5\u30a1\u30a4\u30eb\u63d0\u4f9b take-cheeze : GitHub Actions \u3092\u4f7f\u3063\u305f CI \u306e\u6574\u5099 Luke256 : \u30b3\u30fc\u30c9\u306e\u6539\u5584 YASAI03 : HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6a5f\u80fd SimpleHTTP \u306e\u63d0\u6848\u30fb\u5b9f\u88c5 falrnd : Geometry2D \u306e\u4ea4\u5dee\u5224\u5b9a\u306e\u6539\u5584 yurkth : GeoJSON \u95a2\u9023\u306e\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u5b9f\u88c5 ianCK : \u30b3\u30fc\u30c9\u306e\u6539\u5584 lriki : Siv3D \u304f\u3093\u30c9\u30c3\u30c8\u7d75\u7d20\u6750\u306e\u63d0\u4f9b Ryoga-exe : Color::gamma() \u306e\u30d0\u30b0\u4fee\u6b63 sivboard : \u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u306e\u5b9f\u88c5\u8ffd\u52a0\u3068\u30d0\u30b0\u4fee\u6b63 agehama : PPM \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u306e\u30d0\u30b0\u4fee\u6b63 kurokoji : Linux \u7248 MessageBox \u306e\u8ffd\u52a0 ichi-raven : \u30b3\u30fc\u30c9\u306e\u6539\u5584 azaika : JSON \u30af\u30e9\u30b9\u306e\u8a2d\u8a08\u30fb\u5b9f\u88c5 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8 \u00b6 #01 \u7d71\u8a08\u95a2\u6570: \u767d\u5742, \u30de\u30ad\u30a2, fal_rnd #03 Shape2D::Heart : \u91ce\u83dc\u30b8\u30e5\u30fc\u30b9, \u3066\u3083\u3044\u306e #04 2D \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a: Ebishu, fal_rnd, \u304d\u3064\u306d\u3073 #05 Squircle : Ebishu, Ryoga.exe #07 \u56fd\u3068\u90fd\u5e02 : torin (yurkth) #10 OutlineGlyph to Array<Polygon> : Ebishu, fal_rnd v0.4 \u00b6 v0.4.3 | 2020-04-11 1. \u30c9\u30ed\u30cd\u30fc\u56f3\u3001\u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u4f5c\u6210 \u00b6 \u30c9\u30ed\u30cd\u30fc\u56f3\u3001\u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u8a08\u7b97\u3092\u884c\u3046 Subdivision2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.99 )); const Rect rect ( 50 , 50 , Scene :: Size () - Size ( 100 , 100 )); Subdivision2D subdiv ( rect ); // \u30c9\u30ed\u30cd\u30fc\u4e09\u89d2\u5f62\u5206\u5272\u306e\u4e09\u89d2\u5f62\u30ea\u30b9\u30c8 Array < Triangle > triangles ; // \u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u60c5\u5831\u306e\u30ea\u30b9\u30c8 Array < VoronoiFacet > facets ; // facets \u3092\u9577\u65b9\u5f62\u3067\u30af\u30ea\u30c3\u30d7\u3057 Polygon \u306b\u5909\u63db\u3057\u305f\u30ea\u30b9\u30c8 Array < Polygon > facetPolygons ; while ( System :: Update ()) { const Vec2 pos = Cursor :: Pos (); // \u9577\u65b9\u5f62\u4e0a\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 if ( rect . leftClicked ()) { // \u70b9\u3092\u8ffd\u52a0 subdiv . addPoint ( pos ); // \u30c9\u30ed\u30cd\u30fc\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97 subdiv . calculateTriangles ( triangles ); // \u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u8a08\u7b97 subdiv . calculateVoronoiFacets ( facets ); // \u9577\u65b9\u5f62\u306e\u7bc4\u56f2\u5916\u3092\u30af\u30ea\u30c3\u30d7 facetPolygons = facets . map ([ rect = rect . asPolygon ()]( const VoronoiFacet & f ) { return Geometry2D :: And ( Polygon ( f . points ), rect ). front (); }); } rect . draw ( ColorF ( 0.75 )); for ( auto [ i , facetPolygon ] : Indexed ( facetPolygons )) { facetPolygon . draw ( HSV ( i * 25.0 , 0.65 , 0.8 )). drawFrame ( 3 , ColorF ( 0.25 )); } for ( const auto & triangle : triangles ) { triangle . drawFrame ( 2.5 , ColorF ( 0.9 )); } for ( const auto & facet : facets ) { Circle ( facet . center , 6 ). drawFrame ( 5 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304b\u3089\u6700\u77ed\u8ddd\u96e2\u306b\u3042\u308b\u70b9\u3092\u63a2\u3059 if ( const auto nearestVertexID = subdiv . findNearest ( pos )) { const Vec2 nearestVertex = subdiv . getVertex ( nearestVertexID . value ()); Line ( pos , nearestVertex ). draw ( LineStyle :: RoundDot , 5 , ColorF ( 0.6 )); Circle ( nearestVertex , 16 ). drawFrame ( 3.5 ); } } } 2. \u9577\u65b9\u5f62\u8a70\u8fbc\u307f \u00b6 \u9577\u65b9\u5f62\u306e\u96c6\u5408\u3092\u3001\u5225\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u306b\u52b9\u7387\u7684\u306b\u8a70\u3081\u8fbc\u3080\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b std::pair<Array<Rect>, Size> RectanglePacking::Pack(const Array<Rect>& rects, int32 maxSide) \u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u8a70\u3081\u8fbc\u307f\u5f8c\u306e\u9577\u65b9\u5f62\u306e\u30ea\u30b9\u30c8\u3068\u3001\u305d\u308c\u3089\u3092\u8a70\u3081\u8fbc\u3081\u308b\u6700\u5c0f\u306e\u9577\u65b9\u5f62\u306e\u30b5\u30a4\u30ba\u306e\u30da\u30a2\u3092\u8fd4\u3057\u307e\u3059\u3002\u5165\u529b\u306e rects \u306e\u4f4d\u7f6e\u60c5\u5831\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002 maxSide \u306f\u5e45\u307e\u305f\u306f\u9ad8\u3055\u306e\u6700\u5927\u5024\u3067\u3001\u3053\u308c\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u914d\u5217\u3068 Size(0, 0) \u306e\u30da\u30a2\u3092\u8fd4\u3057\u307e\u3059\u3002\u914d\u5217\u306b\u542b\u307e\u308c\u308b\u9577\u65b9\u5f62\u306e\u9806\u756a\u306f\u3001\u5165\u529b\u3068\u51fa\u529b\u3067\u5909\u308f\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.99 )); // \u8a70\u3081\u8fbc\u3080\u9577\u65b9\u5f62 const Array < Rect > input = { Rect ( 240 , 210 ), Rect ( 500 , 30 ), Rect ( 150 , 120 ), Rect ( 60 , 120 ), Rect ( 180 , 60 ), Rect ( 120 , 240 ) }; // \u8a70\u3081\u8fbc\u307f\u3092\u8a08\u7b97 const std :: pair < Array < Rect > , Size > result = RectanglePacking :: Pack ( input , 600 ); while ( System :: Update ()) { Rect ( result . second ). draw ( ColorF ( 0.7 )); for ( auto [ i , rect ] : Indexed ( result . first )) { rect . draw ( HSV ( i * 40.0 )); } } } \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 # include <Siv3D.hpp> // \u30e9\u30f3\u30c0\u30e0\u306a\u9577\u65b9\u5f62\u306e\u914d\u5217\u3092\u4f5c\u6210 Array < Rect > GenerateRandomRects () { Array < Rect > rects ( Random ( 4 , 32 )); for ( auto & rect : rects ) { const Point pos = RandomPoint ( Rect ( 0 , 0 , Scene :: Size () - Size ( 150 , 150 ))); rect . set ( pos , Random ( 20 , 150 ), Random ( 20 , 150 )); } return rects ; } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.99 )); Array < Rect > input , output ; Size size ( 0 , 0 ); Point offset ( 0 , 0 ); Stopwatch s ; while ( System :: Update ()) { if ( ! s . isStarted () || s > 1.8 s ) { input = GenerateRandomRects (); std :: tie ( output , size ) = RectanglePacking :: Pack ( input , 1024 ); // \u753b\u9762\u4e2d\u592e\u306b\u8868\u793a\u3059\u308b\u3088\u3046\u4f4d\u7f6e\u3092\u8abf\u6574 offset = ( Scene :: Size () - size ) / 2 ; for ( auto & rect : output ) { rect . moveBy ( offset ); } s . restart (); } // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 const double k = Min ( s . sF () * 10 , 1.0 ); const double t = Saturate ( s . sF () - 0.2 ); const double e = EaseInOutExpo ( t ); Rect ( offset , size ). draw ( ColorF ( 0.7 , e )); for ( auto i : step ( input . size ())) { const auto & in = input [ i ]; const auto & out = output [ i ]; const Vec2 pos = in . pos . lerp ( out . pos , e ); const RectF rect ( pos , out . size ); rect . scaledAt ( rect . center (), k ) . draw ( HSV ( i * 25.0 , 0.65 , 0.9 )) . drawFrame ( 2 , 0 , ColorF ( 0.25 )); } } } 3. GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u8aad\u307f\u8fbc\u307f \u00b6 GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u4e00\u9023\u306e\u30d5\u30ec\u30fc\u30e0\u306e Image \u3068\u3001\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u8868\u793a\u6642\u9593\u3092\u53d6\u5f97\u3059\u308b AnimatedGIFReader \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u63cf\u753b\u7528\u306e\u30af\u30e9\u30b9 struct AnimationTexture { Array < Texture > textures ; // \u30d5\u30ec\u30fc\u30e0\u306e\u6642\u9593 Array < int32 > delays ; int32 duration = 0 ; explicit operator bool () const noexcept { return ! textures . isEmpty (); } Size size () const noexcept { if ( ! textures ) { return Size ( 0 , 0 ); } return textures . front (). size (); } size_t frames () const noexcept { return textures . size (); } size_t getFrameIndex ( int32 timeMillisec ) const noexcept { return AnimatedGIFReader :: MillisecToIndex ( timeMillisec , delays , duration ); } const Texture & getTexture ( int32 timeMillisec ) const noexcept { return textures [ getFrameIndex ( timeMillisec )]; } }; void Main () { AnimationTexture animation ; { // GIF \u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f const AnimatedGIFReader gif ( U \"example/test.gif\" ); if ( ! gif ) { throw Error ( U \"Failed to open a gif file\" ); } Array < Image > images ; // GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8aad\u307f\u8fbc\u307f if ( gif . read ( images , animation . delays , animation . duration )) { // Image \u3092 Texture \u306b\u5909\u63db animation . textures = images . map ([]( const Image & i ) { return Texture ( i ); }); } else { throw Error ( U \"Failed to load a gif animation\" ); } } // \u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3001\u30d5\u30ec\u30fc\u30e0\u6570\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u9577\u3055\uff08\u30df\u30ea\u79d2\uff09 Print << U \"{}, {} frames ({} ms)\" _fmt ( animation . size (), animation . frames (), animation . duration ); const Point pos ( 10 , 90 ); while ( System :: Update ()) { const int32 timeMillisec = static_cast < int32 > ( Scene :: Time () * 1000 ); animation . getTexture ( timeMillisec ). draw ( pos ); } } 4. Rect::rounded() \u3067 4 \u3064\u306e\u89d2\u306b\u7570\u306a\u308b\u5024\u3092\u6307\u5b9a\u53ef\u80fd\u306b \u00b6 Rect::rounded() \u306b\u3001\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u3067\u7570\u306a\u308b\u5024\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 )); Array < Rect > rects ; for ( auto p : step ( Size ( 3 , 4 ))) { rects << Rect ( p * Size ( 220 , 140 ), 180 , 100 ). movedBy ( 80 , 40 ); } while ( System :: Update ()) { rects [ 0 ]. rounded ( 30 , 0 , 0 , 0 ). draw ( HSV ( 20 , 0.75 , 1.0 )); rects [ 1 ]. rounded ( 30 , 30 , 0 , 0 ). draw ( HSV ( 40 , 0.75 , 1.0 )); rects [ 2 ]. rounded ( 0 , 30 , 0 , 0 ). draw ( HSV ( 60 , 0.75 , 1.0 )); rects [ 3 ]. rounded ( 30 , 0 , 0 , 30 ). draw ( HSV ( 80 , 0.75 , 1.0 )); rects [ 4 ]. rounded ( 10 , 20 , 30 , 40 ). draw ( HSV ( 100 , 0.75 , 1.0 )); rects [ 5 ]. rounded ( 0 , 30 , 30 , 0 ). draw ( HSV ( 120 , 0.75 , 1.0 )); rects [ 6 ]. rounded ( 100 , 0 , 0 , 0 ). draw ( HSV ( 140 , 0.75 , 1.0 )); rects [ 7 ]. rounded ( 100 , 0 , 100 , 0 ). draw ( HSV ( 160 , 0.75 , 1.0 )); rects [ 8 ]. rounded ( 0 , 0 , 100 , 0 ). draw ( HSV ( 180 , 0.75 , 1.0 )); rects [ 9 ]. rounded ( 100 , 0 , 0 , 20 ). draw ( HSV ( 200 , 0.75 , 1.0 )); rects [ 10 ]. rounded ( 100 , 20 , 100 , 20 ). draw ( HSV ( 220 , 0.75 , 1.0 )); rects [ 11 ]. rounded ( 0 , 20 , 100 , 0 ). draw ( HSV ( 240 , 0.75 , 1.0 )); } } 5. SimpleGUI::HorizontalRadioButtons() \u00b6 \u6c34\u5e73\u306b\u4e26\u3093\u3060\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI::HorizontalRadioButtons() \u304c SimpleGUI \u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Array < String > options = { U \"Windows\" , U \"macOS\" , U \"Linux\" }; size_t indexA = 0 ; size_t indexB = 0 ; while ( System :: Update ()) { // \u6c34\u5e73 SimpleGUI :: HorizontalRadioButtons ( indexA , options , Vec2 ( 20 , 20 )); // \u7e26 SimpleGUI :: RadioButtons ( indexB , options , Vec2 ( 20 , 60 )); } } 6. Math::InvLerp() \u00b6 Math::Lerp(begin, end, t) == value Math::InvLerp(begin, end, value) == t \u3068\u306a\u308b\u3088\u3046\u306a\u5024 t \u3092\u6c42\u3081\u308b Math::InvLerp() \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 , 0.8 , 0.7 )); const Font font ( 40 , Typeface :: Bold ); const double begin = 240.0 ; const double end = 450.0 ; while ( System :: Update ()) { const double value = Cursor :: Pos (). y ; // Math::Lerp(begin, end, t) == value \u306b\u306a\u308b\u5024 t \u3092\u6c42\u3081\u308b const double t = Math :: InvLerp ( begin , end , value ); // \u5024\u3092 [0.0, 1.0] \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u308b const double st = Saturate ( t ); font ( st ). draw ( 20 , 20 ); Line ( Vec2 ( 0 , begin ), Arg :: direction ( Scene :: Width (), 0 )). draw ( 2 , ColorF ( 0.5 )); Line ( Vec2 ( 0 , end ), Arg :: direction ( Scene :: Width (), 0 )). draw ( 2 , ColorF ( 0.5 )); Circle ( Cursor :: Pos (), 50 ). draw ( ColorF ( st )); } } 7. Line \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u8ffd\u52a0 \u00b6 \u540d\u524d\u4ed8\u304d\u5f15\u6570\u3092\u4f7f\u3063\u305f Line \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c 2 \u7a2e\u985e\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Line(pos, pos + dir) \u306e\u3088\u3046\u306b pos \u3092 2 \u56de\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u59cb\u70b9\u306e\u4f4d\u7f6e\u3001\u59cb\u70b9\u304b\u3089\u898b\u305f\u7d42\u70b9\u306e\u65b9\u5411\u3001\u7d42\u70b9\u307e\u3067\u306e\u8ddd\u96e2 Line ( Scene :: Center (), Arg :: angle = 45 _deg , 200 ) . draw ( LineStyle :: RoundCap , 10 ); // \u59cb\u70b9\u306e\u4f4d\u7f6e\u3001\u7d42\u70b9\u307e\u3067\u306e\u30d9\u30af\u30c8\u30eb Line ( Scene :: Center (), Arg :: direction = Vec2 ( 0 , 200 )) . draw ( LineStyle :: RoundCap , 10 , Palette :: Orange ); } } 8. Rect::drawFrame(), Circle::drawPie(), Circle::drawArc() \u306e 2 \u8272\u6307\u5b9a \u00b6 Rect::drawFrame() , Circle::drawPie() , Circle::drawArc() \u306b\u3001\u5185\u5074\u306e\u8272\u3068\u5916\u5074\u306e\u8272\u3092\u5225\u3005\u306b\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { // \u5185\u5074 ColorF(0.1, 0.6, 0.3), \u5916\u5074 ColorF(0.6, 1.0, 0.8) Rect ( 50 , 50 , 300 ) . drawFrame ( 30 , ColorF ( 0.1 , 0.6 , 0.3 ), ColorF ( 0.6 , 1.0 , 0.8 )); // \u5185\u5074 HSV(50), \u5916\u5074 HSV(0) Circle ( 200 , 200 , 100 ) . drawPie ( 0 _deg , 120 _deg , HSV ( 50 ), HSV ( 0 )); // \u5185\u5074 Palette::White, \u5916\u5074 Palette::Black Circle ( 200 , 200 , 100 ) . drawArc ( 180 _deg , 120 _deg , 10 , 10 , Palette :: White , Palette :: Black ); } } 9. ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u306e\u8aad\u307f\u8fbc\u307f \u00b6 ZIP \u30a2\u30fc\u30ab\u30a4\u30d6 (.zip) \u306e\u4e2d\u8eab\u306e\u53d6\u5f97\u3084\u5c55\u958b\u3092\u884c\u3046 ZIPReader \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 ZIPReader::extractToMemory() \u3092\u4f7f\u3046\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u5c55\u958b\u3057\u3066 Texture \u3084 Audio \u306a\u3069\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 - Windows \u3067\u4f5c\u6210\u3055\u308c\u305f Shift-JIS \u30a8\u30f3\u30b3\u30fc\u30c9\u306e ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u542b\u307e\u308c\u308b\u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u3001Windows \u4ee5\u5916\u306e\u74b0\u5883\u3067\u306f\u6b63\u3057\u304f\u6271\u3048\u307e\u305b\u3093 - \u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3042\u3089\u3086\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u6b63\u3057\u304f\u6271\u3044\u305f\u3044\u5834\u5408\u3001 UTF-8 \u30a8\u30f3\u30b3\u30fc\u30c9\u3067 ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044 (7-zip \u306e\u5834\u5408\u306f cu=on \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\uff09 # include <Siv3D.hpp> void Main () { const ZIPReader zip ( U \"example/zip/zip_test.zip\" ); // \u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5217\u6319 for ( const auto & path : zip . enumPaths ()) { Print << path ; } // `zip_test/loremipsum.txt` \u3092 `unzipped1/` \u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b zip . extract ( U \"zip_test/loremipsum.txt\" , U \"unzipped1/\" ); // `zip_test/image/` \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092 `unzipped2/` \u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b zip . extract ( U \"zip_test/image/*\" , U \"unzipped2/\" ); // \u3059\u3079\u3066\u3092 `unzipped3/` \u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b zip . extractAll ( U \"unzipped3/\" ); // `zip_test/image/windmill.png` \u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u5c55\u958b\u3057\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture textureA ( zip . extractToMemory ( U \"zip_test/image/windmill.png\" )); // `zip_test/image/siv3d-kun.png` \u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u5c55\u958b\u3057\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture textureB ( zip . extractToMemory ( U \"zip_test/image/siv3d-kun.png\" )); while ( System :: Update ()) { textureA . draw (); textureB . draw (); } } 10. \u4e0d\u6b63\u306a Polygon \u9802\u70b9\u306e\u81ea\u52d5\u4fee\u6b63 \u00b6 \u624b\u5165\u529b\u306a\u3069\u306b\u3088\u308b\u4e0d\u6b63\u306a Polygon \u306e\u9802\u70b9\u3092\u4fee\u6b63\u3057\u3001\u59a5\u5f53\u306a Array<Polygon> \u306b\u5909\u63db\u3059\u308b\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 20 , Typeface :: Bold ); Array < Vec2 > points ; Array < Polygon > solvedPolygons ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); // \u9802\u70b9\u5217\u304b\u3089\u9069\u5207\u306a Polygon \u3092\u4f5c\u6210 solvedPolygons = Polygon :: Correct ( points , {}); } else if ( MouseR . down ()) { points . clear (); solvedPolygons . clear (); } for ( auto [ i , point ] : Indexed ( points )) { Circle ( point , 5 ). draw (); Line ( points [ i ], points [( i + 1 ) % points . size ()]) . drawArrow ( 2 , Vec2 ( 20 , 20 ), Palette :: Orange ); } font ( points ). draw ( Rect ( 20 , 20 , 600 , 720 )); { Transformer2D trans ( Mat3x2 :: Translate ( 640 , 0 )); font ( solvedPolygons ). draw ( Rect ( 20 , 20 , 600 , 720 )); for ( auto [ i , solvedPolygon ] : Indexed ( solvedPolygons )) { const HSV color ( i * 40.0 , 0.7 , 1.0 ); solvedPolygon . draw ( color ); const auto & outer = solvedPolygon . outer (); for ( auto [ k , point ] : Indexed ( outer )) { const Vec2 begin = outer [ k ]; const Vec2 end = outer [( k + 1 ) % outer . size ()]; const Vec2 v = ( end - begin ). normalized (); const Vec2 c = ( begin + end ) / 2 ; const Vec2 oc = c + v . rotated ( -90 _deg ) * 10 ; Line ( oc - v * 20 , oc + v * 20 ) . drawArrow ( 2 , Vec2 ( 10 , 10 ), color ); } } } } } 11. Direct3D \u30c9\u30e9\u30a4\u30d0 / \u30c7\u30d0\u30a4\u30b9\u306e\u7a2e\u985e\u306e\u5909\u66f4 \u00b6 Windows \u7248\u3067 #include <Siv3D.hpp> \u306e\u524d\u306b\u7279\u5225\u306a\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u7528\u3059\u308b Direct3D \u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u7a2e\u985e\u3092 WARP, Reference \u306a\u3069\u306b\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002GPU \u306e\u30c9\u30e9\u30a4\u30d0\u306e\u554f\u984c\u3067\u6b63\u5e38\u306a\u63cf\u753b\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u306b WARP \u306b\u3088\u308b\u305f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u63cf\u753b\u8ca0\u8377\u304c\u8efd\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3042\u308c\u3070\u3001WARP \u3067\u52d5\u304b\u3059\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3053\u3068\u3082\u9078\u629e\u80a2\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d5\u30e9\u30b0\u306f\u91cd\u8907\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8 \u2192 dGPU (GeForce \u306a\u3069) \u512a\u5148 SIV3D_WINDOWS_D3D_DRIVER_TYPE_HARDWARE_FAVOR_INTEGRATED \u2192 iGPU (Intel UHD Graphics \u306a\u3069) \u512a\u5148 SIV3D_WINDOWS_D3D_DRIVER_TYPE_WARP \u2192 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6 SIV3D_WINDOWS_D3D_DRIVER_TYPE_REFERENCE \u2192 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30c9\u30e9\u30a4\u30d0 \u53c2\u8003: https://docs.microsoft.com/en-us/windows/win32/api/d3dcommon/ne-d3dcommon-d3d_driver_type // \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30ec\u30f3\u30c0\u30e9\u2015\u3092\u4f7f\u7528 (Windows \u3067\u306e\u307f\u6709\u52b9\uff09 # define SIV3D_WINDOWS_D3D_DRIVER_TYPE_WARP // iGPU (Intel UHD Graphics \u306a\u3069) \u512a\u5148 (Windows \u3067\u306e\u307f\u6709\u52b9\uff09 //# define SIV3D_WINDOWS_D3D_DRIVER_TYPE_HARDWARE_FAVOR_INTEGRATED // \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u7528 (Windows \u3067\u306e\u307f\u6709\u52b9\uff09 //# define SIV3D_WINDOWS_D3D_DRIVER_TYPE_REFERENCE // Siv3D.hpp \u3088\u308a\u3082\u524d\u3067\u5b9a\u7fa9 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { texture . draw (); } } 12. \u305d\u306e\u4ed6 \u00b6 Image to Polygon \u306e\u5805\u7262\u6027\u304c\u5411\u4e0a\u3057\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f Linux \u7248\u306e\u30d3\u30eb\u30c9\u3067 AngelScript \u306e\u30ea\u30f3\u30af\u304c\u4e0d\u8981\u306b\u306a\u308a\u307e\u3057\u305f macOS \u3068 Linux \u306e\u4e00\u90e8\u74b0\u5883\u3067 Microphone \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f isOpened() \u3068\u3044\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u306f isOpen() \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f zlib \u306e\u5727\u7e2e\u5c55\u958b\u3092\u884c\u3046 Zlib::Compress() , Zlib:: Decompress() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ParseOpt<float>() \u304c\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f Math::InvSqrt2_v \u304c\u6b63\u3057\u304f\u306a\u304b\u3063\u305f\u306e\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f Visual Studio \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3057\u305f Visual Studio \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u6642\u306b Main.cpp \u304c\u81ea\u52d5\u3067\u958b\u304f\u3088\u3046\u306b\u3057\u307e\u3057\u305f Windows \u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e Icon.ico \u3092 icon.ico \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u307e\u3057\u305f Camera2D \u306e Scene::Size() \u4f9d\u5b58\u3092\u89e3\u6d88\u3057\u307e\u3057\u305f ParticleSystem2DParameters \u306e\u4ed5\u69d8\u3092\u6539\u5584\u3057\u307e\u3057\u305f \u5404\u7a2e RNG \u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f Serial \u304c\u5207\u65ad\u3055\u308c\u3066\u3082 isOpen() \u304c true \u3092\u8fd4\u3057\u3066\u3044\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f RoundRect \u306e\u9802\u70b9\u751f\u6210\u54c1\u8cea\u306e\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f DynamicTexture \u3067\u30b5\u30a4\u30ba\u3068\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u307f\u6307\u5b9a\u3057\u305f\u969b\u306e\u30a8\u30e9\u30fc\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f macOS \u3067\u65e5\u672c\u8a9e\u30d1\u30b9\u3092\u6271\u3046\u3068\u4e00\u90e8\u306e\u95a2\u6570\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f Windows \u3067 Graphics::SetTargetFrameRateHz() \u304c\u5927\u304d\u304f\u4e0d\u6b63\u78ba\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f RenderTexture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7279\u306b\u660e\u793a\u3057\u306a\u3051\u308c\u3070 ColorF(0.0, 1.0) \u3067\u4e2d\u8eab\u3092\u30af\u30ea\u30a2\u3059\u308b\u3088\u3046\u4ed5\u69d8\u5909\u66f4\u3057\u307e\u3057\u305f JSONWriter::write(bool) \u306e\u6319\u52d5\u304c\u6b63\u3057\u304f\u306a\u304b\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f BasicCamera3D \u306e experimental:: \u3092\u5916\u3057\u307e\u3057\u305f \u305d\u306e\u4ed6\u8efd\u5fae\u306a\u4fee\u6b63\u591a\u6570 v0.4.2 | 2019-12-01 1. SDFFont \u00b6 SDFFont \u306f\u3001\u30b0\u30ea\u30d5\u306e\u753b\u50cf\u3092 Distance field \u5f62\u5f0f\u3067\u6301\u3064 Font \u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u56fa\u5b9a\u30b5\u30a4\u30ba\u3067\u30b0\u30ea\u30d5\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u62e1\u5927\u63cf\u753b\u6642\u306b\u307c\u3084\u3051\u308b\u306a\u3069\u3001\u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u5f31\u304f\u3001\u7e01\u53d6\u308a\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 SDFFont \u30af\u30e9\u30b9\u306f\u3001\u30b0\u30ea\u30d5\u3054\u3068\u306e Distance Field \u3092\u751f\u6210\u3057\u3001\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002 draw() \u3054\u3068\u306b\u7b2c\u4e00\u5f15\u6570\u3067\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u7d50\u679c\u304c\u307c\u3084\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001 Garphics2D::SetSDFParameters() \u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6587\u5b57\u3092\u592a\u3089\u305b\u3089\u308c\u307e\u3059\u3002\u592a\u3055\u3068\u8272\u3092\u5909\u3048\u3066 2 \u56de\u4ee5\u4e0a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u7e01\u53d6\u308a\u306e\u8868\u73fe\u3082\u53ef\u80fd\u3067\u3059\u3002 \u305f\u3060\u3057\u3001 SDFFont \u306e\u751f\u6210\u3084\u63cf\u753b\u306e\u30b3\u30b9\u30c8\u306f Font \u306b\u6bd4\u3079\u3066\u5927\u304d\u3044\u305f\u3081\u3001 Font \u3067\u5341\u5206\u306a\u30b1\u30fc\u30b9\u3067\u306f\u5f93\u6765\u901a\u308a Font \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002 SDFFont \u306e\u54c1\u8cea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30d5\u306e Distance Field \u306e\u30b5\u30a4\u30ba\u3068\u3001\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e Distance Field \u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u6587\u5b57\u306e\u592a\u3089\u305b\u306b\u3064\u3044\u3066\u3082\u3001\u5927\u304d\u3044\u5024\u3067\u306f\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 SDFFont \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a Distance Field \u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 SDFFont \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; // SDFFont const SDFFont sdfFont ( distanceFieldSize , Typeface :: Bold ); const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 40 , Vec2 ( 20 , 20 )); sdfFont ( text ). draw ( 80 , Vec2 ( 20 , 80 )); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 180 )); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.2 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.2 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 ), Palette :: Black ); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.0 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.0 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 )); } } SDFFont \u306e\u4e8b\u524d\u751f\u6210 \u00b6 SDFFont \u306e\u5404\u30b0\u30ea\u30d5\u306e Distance field \u306f\u3001\u751f\u6210\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u30b0\u30ea\u30d5\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u901f\u5ea6\u4f4e\u4e0b\u304c\u9632\u3052\u307e\u3059\u3002 SDFFont::preload(s) \u3067\u3001\u6587\u5b57\u5217 s \u542b\u307e\u308c\u308b\u30b0\u30ea\u30d5\u306e Distance field \u3092\u751f\u6210\u3001 SDFFont::preload(imagePath, jsonPath) \u3067 2 \u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3001 SDFFont \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u4e8b\u524d\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u30b0\u30ea\u30d5\u306f\u5b9f\u884c\u6642\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( distanceFieldSize , Typeface :: Bold ) . preload ( s ) . saveGlyphs ( U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 // \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3084 Distance field \u304c\u4e00\u81f4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044 const SDFFont sdfFont ({ U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" }, distanceFieldSize , Typeface :: Bold ); if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 20 )); } } \u6bd4\u8f03\u7528\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); constexpr Vec2 pos ( 0 , 0 ); const String text = U \"OpenSiv3D \\n \u3042\u3044\u3046\u3048\u304a\" ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } s += text ; // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3068 text \u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( 60 , Typeface :: Light ). preload ( s ). saveGlyphs ( U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" ); SDFFont ( 60 , Typeface :: Heavy ). preload ( s ). saveGlyphs ( U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" ); SDFFont ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ). preload ( s ). saveGlyphs ( U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 const Array < SDFFont > sdfFonts = { SDFFont ({ U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" }, 60 , Typeface :: Light ), SDFFont ({ U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" }, 60 , Typeface :: Heavy ), SDFFont ({ U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" }, 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; for ( const auto & sdfFont : sdfFonts ) { if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } } // \u6bd4\u8f03\u7528\u306e\u901a\u5e38 Font const Array < Font > fonts = { Font ( 60 , Typeface :: Light ), Font ( 60 , Typeface :: Heavy ), Font ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; size_t fontIndex = 0 , method = 0 ; double fontSize = 80 , outline1 = 0.0 , outline2 = 0.0 ; HSV innerColor = Palette :: Black , outlineColor = Palette :: White ; while ( System :: Update ()) { const auto & sdfFont = sdfFonts [ fontIndex ]; const auto & font = fonts [ fontIndex ]; if ( method == 0 ) { Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline2 ); sdfFont ( text ). draw ( fontSize , pos , innerColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline1 ); sdfFont ( text ). draw ( fontSize , pos , outlineColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( fontSize , pos , innerColor ); } else if ( method == 1 ) { Transformer2D tr ( Mat3x2 :: Scale ( fontSize / font . fontSize ())); font ( text ). draw ( pos , innerColor ); } SimpleGUI :: RadioButtons ( fontIndex , { U \"Light 60\" , U \"Heavy 60\" , U \"Logo 50\" }, Vec2 ( 20 , 360 ), 150 ); SimpleGUI :: RadioButtons ( method , { U \"SDFFont\" , U \"Font\" }, Vec2 ( 20 , 480 ), 150 ); SimpleGUI :: Slider ( U \"size: {:.0f}\" _fmt ( fontSize ), fontSize , 15 , 550 , Vec2 ( 20 , 560 ), 150 , 200 ); SimpleGUI :: Slider ( U \"outline1: {:.2f}\" _fmt ( outline1 ), outline1 , 0.0 , 0.49 , Vec2 ( 20 , 600 ), 150 , 200 , ( method == 0 )); SimpleGUI :: Slider ( U \"outline2: {:.2f}\" _fmt ( outline2 ), outline2 , 0.0 , 0.49 , Vec2 ( 20 , 640 ), 150 , 200 , ( method == 0 )); SimpleGUI :: ColorPicker ( innerColor , Vec2 ( 400 , 560 )); SimpleGUI :: ColorPicker ( outlineColor , Vec2 ( 580 , 560 )); } } 2. \u96c6\u4e2d\u7dda\u63cf\u753b \u00b6 \u5b9f\u9a13\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4 HamFramework \u306b\u8ffd\u52a0\u3055\u308c\u305f SaturatedLinework \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u3001\u30b3\u30df\u30ab\u30eb\u306a\u52b9\u679c\u3084\u75be\u8d70\u611f\u3092\u6f14\u51fa\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7dda\u3092\u7c21\u5358\u306b\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62\u3001\u5916\u5468\u306e\u9577\u65b9\u5f62\u3001\u7dda\u306e\u672c\u6570\u3001\u7dda\u306e\u592a\u3055\u3001\u9577\u3055\u306e\u3070\u3089\u3064\u304d\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u306a\u3069\u304c\u3042\u308a\u3001 .draw() \u306e\u5f15\u6570\u3067\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u591a\u6570\u306e\u4e09\u89d2\u5f62\u3092\u751f\u6210\u3057\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3001\u751f\u6210\u3057\u305f\u4e09\u89d2\u5f62\u306f\u518d\u5229\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> # include <HamFramework.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.98 , 0.96 , 0.94 )); // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62 Ellipse target ( 400 , 300 , 180 , 120 ); // \u5916\u5468\u306e\u9577\u65b9\u5f62 Rect outer = Scene :: Rect (); // \u7dda\u306e\u592a\u3055 double minThickness = 3.0 , maxThickness = 10.0 ; // \u7dda\u306e\u672c\u6570 double lineCount = 150 ; // \u7dda\u306e\u9577\u3055\u306e\u3070\u3089\u3064\u304d double offsetRange = 60.0 ; // \u4e71\u6570\u30b7\u30fc\u30c9 uint64 seed = 12345 ; SaturatedLinework < Ellipse > linework ( target , outer ); linework . setThickness ( minThickness , maxThickness ) . setLineCount ( static_cast < size_t > ( lineCount )) . setOffsetRange ( offsetRange ); const Texture texture ( Emoji ( U \"\ud83e\udd80\" )); while ( System :: Update ()) { if ( MouseR . down ()) { target . setCenter ( Cursor :: Pos ()); linework . setTargetShape ( target ); } texture . scaled ( 1.6 ). drawAt ( target . center ); // \u96c6\u4e2d\u7dda\u3092\u63cf\u753b linework . draw ( ColorF ( 0.1 )); if ( SimpleGUI :: Slider ( U \"lineCount\" , lineCount , 0.0 , 400.0 , Vec2 ( 20 , 20 ), 150 )) { linework . setLineCount ( static_cast < size_t > ( lineCount )); } if ( SimpleGUI :: Slider ( U \"offsetRange\" , offsetRange , 0.0 , 100.0 , Vec2 ( 20 , 60 ), 150 )) { linework . setOffsetRange ( offsetRange ); } if ( SimpleGUI :: Button ( U \"Change seed\" , Vec2 ( 20 , 100 ))) { seed = RandomUint64 (); linework . setSeed ( seed ); } } } 3. \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 \u00b6 \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u4f7f\u3063\u3066\u3001\u5916\u90e8\u30c7\u30d0\u30a4\u30b9\u3068\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3067\u306f Arduino UNO \u3067 LED \u306e\u70b9\u706f/\u6d88\u706f\u3092 PC \u304b\u3089\u5236\u5fa1\u3057\u3001\u5408\u308f\u305b\u3066 1 \u30d0\u30a4\u30c8\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002 Arduino \u306e\u30b3\u30fc\u30c9 \u00b6 void setup () { pinMode ( 13 , OUTPUT ); // 13 \u30d4\u30f3 - LED - \u62b5\u6297 - GND // 9600bps \u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u958b\u304f Serial . begin ( 9600 ); } unsigned char i = 0 ; // \u30c6\u30b9\u30c8\u7528\u306b PC \u5074\u306b\u9001\u308b\u5024 void loop () { // 250 \u30df\u30ea\u79d2\u6b62\u3081\u308b delay ( 250 ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b 1 \u30d0\u30a4\u30c8\u51fa\u529b Serial . write ( i ); ++ i ; // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const int val = Serial . read (); if ( val == -1 ) // \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u304c\u7121\u3044 { return ; } if ( val == 0 ) { digitalWrite ( 13 , LOW ); // LOW \u3092\u51fa\u529b } else if ( val == 1 ) { digitalWrite ( 13 , HIGH ); // HIGH \u3092\u51fa\u529b } else if ( val == 2 ) { i = 0 ; } } PC \u5074\u306e\u30b3\u30fc\u30c9 \u00b6 # include <Siv3D.hpp> void Main () { // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const Array < SerialPortInfo > infos = System :: EnumerateSerialPorts (); const Array < String > options = infos . map ([]( const SerialPortInfo & info ) { return U \"{} ({})\" _fmt ( info . port , info . description ); }) << U \"none\" ; Serial serial ; size_t index = ( options . size () - 1 ); while ( System :: Update ()) { const bool isOpen = serial . isOpen (); // OpenSiv3D v0.4.2 \u4ee5\u524d\u306f serial.isOpened() if ( SimpleGUI :: Button ( U \"Write 0\" , Vec2 ( 200 , 20 ), 120 , isOpen )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (0) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 0 ); } if ( SimpleGUI :: Button ( U \"Write 1\" , Vec2 ( 340 , 20 ), 120 , isOpen )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (1) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 1 ); } if ( SimpleGUI :: Button ( U \"Write 2\" , Vec2 ( 480 , 20 ), 120 , isOpen )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (2) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 2 ); } if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 200 , 60 ))) { ClearPrint (); if ( index == ( options . size () - 1 )) { serial = Serial (); } else { Print << U \"Open {}\" _fmt ( infos [ index ]. port ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 if ( serial . open ( infos [ index ]. port )) { Print << U \"Succeeded\" ; } else { Print << U \"Failed\" ; } } } if ( const size_t available = serial . available ()) { // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a Print << U \"READ: \" << serial . readBytes (); } } } 4. PoissonDisk2D \u00b6 \u307b\u3069\u3088\u3044\u8ddd\u96e2\u3067\u91cd\u306a\u3089\u306a\u3044\u70b9\u7fa4\u3092\u751f\u6210\u3059\u308b PoissonDisk2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); const Rect rect ( 100 , 100 , 600 , 400 ); double r = 15.0 ; // \u70b9\u7fa4\u3092\u751f\u6210 PoissonDisk2D pd ( rect . size , r ); while ( System :: Update ()) { rect . drawFrame ( 1 , 1 , ColorF ( 0.2 )); for ( const auto & point : pd . getPoints ()) { Circle ( point , r / 4 ). movedBy ( rect . pos ). draw (); } if ( SimpleGUI :: Slider ( r , 5.0 , 40.0 , Vec2 ( 10 , 10 ))) { pd = PoissonDisk2D ( rect . size , r ); } } } 5. JSONWriter \u00b6 \u6210\u5f62\u3055\u308c\u305f JSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u9806\u6b21\u51fa\u529b\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u4fdd\u5b58\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { JSONWriter json ; json . startObject (); { json . key ( U \"Window\" ). startObject (); { json . key ( U \"title\" ). write ( U \"My application\" ); json . key ( U \"width\" ). write ( 800 ); json . key ( U \"height\" ). write ( 600 ); json . key ( U \"sizable\" ). write ( false ); } json . endObject (); json . key ( U \"Scene\" ). startObject (); { json . key ( U \"background\" ). write ( ColorF ( 0.8 , 0.9 , 1.0 )); } json . endObject (); json . key ( U \"Array\" ). startObject (); { json . key ( U \"values\" ). writeArray ({ 11 , 22 , 33 , 44 , 55 }); } json . endObject (); json . key ( U \"Items\" ). startArray (); { json . startObject (); { json . key ( U \"label\" ). write ( U \"Forest\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 100 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Ocean\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 300 ); json . key ( U \"y\" ). write ( 200 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Mountain\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 500 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); } json . endArray (); } json . endObject (); // \u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u4fdd\u5b58 json . save ( U \"test.json\" ); while ( System :: Update ()) { } } \u51fa\u529b\u3055\u308c\u308b JSON \u30d5\u30a1\u30a4\u30eb { \"Window\" : { \"title\" : \"My application\" , \"width\" : 800 , \"height\" : 600 , \"sizable\" : \"false\" }, \"Scene\" : { \"background\" : \"(0.8, 0.9, 1, 1)\" }, \"Array\" : { \"values\" : [ 11 , 22 , 33 , 44 , 55 ] }, \"Items\" : [ { \"label\" : \"Forest\" , \"pos\" : { \"x\" : 100 , \"y\" : 100 } }, { \"label\" : \"Ocean\" , \"pos\" : { \"x\" : 300 , \"y\" : 200 } }, { \"label\" : \"Mountain\" , \"pos\" : { \"x\" : 500 , \"y\" : 100 } } ] } 6. Geometry2D::IsClockwise() \u00b6 \u9802\u70b9\u306e\u914d\u5217\u304c\u6642\u8a08\u56de\u308a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.96 , 0.98 , 1.0 )); Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); } if ( MouseR . down ()) { points . clear (); } const bool isClockwise = Geometry2D :: IsClockwise ( points ); ClearPrint (); Print << isClockwise ; for ( const auto & point : points ) { Circle ( point , 10 ). draw ( Palette :: Orange ); } if ( points . size () > 2 ) { // \u6642\u8a08\u56de\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u77e2\u5370\u3067\u3064\u306a\u3050 if ( isClockwise ) { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . stretched ( -10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } else { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . reversed () . stretched ( -10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } } } } 7. Circle::draw(innerColor, outerColor) \u00b6 Circle \u3084 Ellipse \u3067\u4e2d\u5fc3\u306e\u8272\u3068\u5916\u5468\u306e\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u304c\u9ec4\u8272\u3001\u5916\u5468\u304c\u9ed2 Circle ( Scene :: Center (), 400 ). draw ( Palette :: Yellow , Palette :: Black ); } } 8. SimpleGUI::Headline / ColorPicker \u00b6 SimpleGUI \u306b\u3001\u898b\u51fa\u3057\u3092\u4ed8\u3051\u308b\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3068\u3001\u8272\u3092\u9078\u629e\u3059\u308b\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { double p0 = 1.0 , p1 = 0.4 , p2 = 0.5 ; HSV hsv = Palette :: Gray ; size_t index = 0 ; while ( System :: Update ()) { Scene :: SetBackground ( hsv ); // Headline SimpleGUI :: Headline ( U \"Config\" , Vec2 ( 20 , 20 )); { SimpleGUI :: Slider ( U \"Param1\" , p0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"Param2\" , p1 , Vec2 ( 20 , 100 )); SimpleGUI :: Slider ( U \"Param3\" , p2 , Vec2 ( 20 , 140 )); } SimpleGUI :: Headline ( U \"Background\" , Vec2 ( 240 , 20 )); { // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc SimpleGUI :: ColorPicker ( hsv , Vec2 ( 240 , 60 )); } SimpleGUI :: Headline ( U \"Terrain\" , Vec2 ( 420 , 20 )); { SimpleGUI :: RadioButtons ( index , { U \"Plain\" , U \"Hill\" , U \"Mountain\" }, Vec2 ( 420 , 60 ), 150 ); } } } 9. ToastNotification \u00b6 Windows \u3067\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 , 0.6 , 0.3 )); // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID NotificationID latest = -1 ; // \u753b\u50cf\u3092\u4f5c\u6210\u30fb\u4fdd\u5b58 Emoji :: CreateImage ( U \"\ud83c\udf55\" ). save ( U \"pizza.png\" ); while ( System :: Update ()) { ClearPrint (); // \u901a\u77e5\u306e\u72b6\u614b Print << ( int32 ) Platform :: Windows :: ToastNotification :: GetState ( latest ); // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\u306e\u7d50\u679c Print << U \"Action: \" << Platform :: Windows :: ToastNotification :: GetAction ( latest ); if ( SimpleGUI :: Button ( U \"Send a notification\" , Vec2 ( 10 , 70 ))) { ToastNotificationProperty toast { . title = U \"Title\" , // \u901a\u77e5\u306e\u30bf\u30a4\u30c8\u30eb . message = U \"Message\" , // \u901a\u77e5\u306e\u672c\u6587 . imagePath = U \"pizza.png\" , // \u5927\u304d\u3044\u753b\u50cf\u3060\u3068\u4f7f\u308f\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b . actions = { U \"Yes\" , U \"No\" } // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\uff08\u4e0d\u8981\u306a\u5834\u5408\u306f\u8a2d\u5b9a\u3057\u306a\u3044\uff09 }; // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID \u3092\u53d6\u5f97 latest = Platform :: Windows :: ToastNotification :: Show ( toast ); } } } 10. SimpleGUIManager \u00b6 TOML \u30d5\u30a1\u30a4\u30eb\u306b SimpleGUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u8a18\u8ff0\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u884c\u4e2d\u306b\u64cd\u4f5c\u3057\u305f\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // SimpleGUI \u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb const FilePath tomlPath = FileSystem :: FullPath ( U \"example/gui/gui.toml\" ); // \u66f4\u65b0\u3092\u691c\u77e5 const DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // GUI \u3092\u30ed\u30fc\u30c9 SimpleGUIManager gui ( tomlPath ); while ( System :: Update ()) { // TOML \u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 GUI \u3092\u518d\u30ed\u30fc\u30c9 for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) { ClearPrint (); gui . load ( tomlPath ); } } // GUI \u3092\u66f4\u65b0\u30fb\u63cf\u753b gui . draw (); if ( gui . button ( U \"bt-OK\" )) // \"bt-OK\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"OK\" ; } else if ( gui . button ( U \"bt-Cancel\" )) // \"bt-Cancel\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"Cancel\" ; } Scene :: SetBackground ( gui . colorPicker ( U \"cp-Color\" )); // \"cp-Color \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5024 } // \u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3068\u5024\u3092 save.toml \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3059\u308b // \u3053\u308c\u3092 SimpleGUIManager \u3067\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b //gui.save(U\"save.toml\"); } 11. Print \u306e\u6392\u4ed6\u5236\u5fa1 \u00b6 \u30c7\u30d0\u30c3\u30b0\u306a\u3069\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001 Print \u3092\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 // Siv3D \u306e\u4e26\u5217\u51e6\u7406\u95a2\u6570\u3092\u6709\u52b9\u5316\u3059\u308b\u30de\u30af\u30ed // \u30d8\u30c3\u30c0\u304c\u5897\u3048\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u5c11\u3057\u9577\u304f\u306a\u308b # define SIV3D_CONCURRENT # include <Siv3D.hpp> void Main () { // 0\uff5e15 \u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406 Range ( 0 , 15 ). parallel_each ([]( int32 i ) { // \u30b9\u30ec\u30c3\u30c9\u8b58\u5225\u5b50\u3092\u5408\u308f\u305b\u3066\u8868\u793a Print << U \"{}: {}\" _fmt ( std :: this_thread :: get_id (), i ); }); while ( System :: Update ()) { } } 12. 3D \u5f62\u72b6 \u00b6 Quaternion , OBB \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Ray \u3068\u5404\u7a2e 3D \u5f62\u72b6\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3082\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u305f\u3060\u3057 v0.4.1 \u3068\u540c\u69d8\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); Array < OBB > objects ; for ( auto x : Range ( -2 , 2 )) { for ( auto z : Range ( 2 , -2 , -1 )) { objects << OBB ( Vec3 ( x * 4 , 1 , z * 4 ), Vec3 ( 3 , 2 , 0.5 ), Quaternion :: RollPitchYaw ( 0 , x * 30 _deg , 0 )); objects << OBB ( Vec3 ( x * 4 , 5 , z * 4 ), Vec3 ( 2 , 1 , 2 ), Quaternion :: RollPitchYaw ( x * 30 _deg , 0 , 0 )); } } while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( -10 , 10 )) { Line3D ( Vec3 ( -10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , -10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } const Vec3 eyePos = camera . getEyePosition (); const Vec3 rayEnd = camera . screenToWorldPoint ( Cursor :: Pos (), 0.5f ); const Ray cursorRay ( eyePos , ( rayEnd - eyePos ). normalized ()); objects . sort_by ([ & ]( const OBB & a , const OBB & b ) { return ( eyePos . distanceFromSq ( a . center )) > ( eyePos . distanceFromSq ( b . center )); }); Optional < size_t > intersectionIndex ; for ( auto [ i , object ] : IndexedReversed ( objects )) { if ( cursorRay . intersects ( object )) { intersectionIndex = i ; Cursor :: RequestStyle ( CursorStyle :: Hand ); break ; } } for ( auto [ i , object ] : Indexed ( objects )) { const HSV color (( object . center . x * 50 + object . center . z * 10 ), 1.0 , ( i == intersectionIndex ) ? 1.0 : 0.3 ); object . draw ( mat , color ); } } } } v0.4.1 \u30b5\u30f3\u30d7\u30eb\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \u00b6 AABB , Triangle3D , Line3D \u306a\u3069\u304c\u3001 s3d::experimental \u540d\u524d\u7a7a\u9593\u304b\u3089 s3d \u540d\u524d\u7a7a\u9593\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( -1 , 1 , -1 ), Vec3 ( 1 , 1 , -1 ), Vec3 ( -1 , -1 , -1 ), Vec3 ( 1 , -1 , -1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( -1 , 1 , 1 ), Vec3 ( 1 , -1 , 1 ), Vec3 ( -1 , -1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( -10 , 10 )) { Line3D ( Vec3 ( -10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , -10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); AABB ( Vec3 ( -8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); AABB ( Vec3 ( 8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); AABB ( Vec3 ( -8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , -50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , -50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } } 13. Microphone \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 macOS \u306a\u3069\u4e00\u90e8\u306e\u74b0\u5883\u3067\u30de\u30a4\u30af\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); // unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u65e2\u5b9a\u306e\u97f3\u58f0\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); LineString points ( 800 ); FFTResult fft ; while ( System :: Update ()) { // \u6ce2\u5f62\u3092\u53ef\u8996\u5316 { const size_t pos = mic . posSample (); const Array < WaveSampleS16 >& buffer = mic . getBuffer (); const size_t bufferLength = buffer . size (); for ( size_t i = 0 ; i < points . size (); ++ i ) { const size_t bufferPos = ( pos + bufferLength - ( 800 - i )) % bufferLength ; const double value = buffer [ bufferPos ]. left / 32768.0 ; points [ i ]. set ( i , 300 - value * 300 ); } points . draw ( 2 ); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u53d6\u5f97 mic . fft ( fft ); // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u4e0a\u306b\u5468\u6ce2\u6570\u3092\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } 14. QRDecoder \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 \u8907\u6570\u306e QR \u30b3\u30fc\u30c9\u306e\u691c\u51fa\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // Web \u30ab\u30e1\u30e9\u3092\u8d77\u52d5 Webcam webcam ( 0 ); webcam . setResolution ( 1280 , 720 ); if ( ! webcam . start ()) { throw Error ( U \"\" ); } Image image ; DynamicTexture texture ; QRDecoder qrDecoder ; Array < std :: pair < Quad , bool >> quads ; while ( System :: Update ()) { // \u65b0\u3057\u3044\u64ae\u5f71\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u5f97 if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); Array < QRContent > qrs ; // QR \u30b3\u30fc\u30c9\u3092\u691c\u51fa qrDecoder . decode ( image , qrs ); quads . clear (); for ( const auto & qr : qrs ) { quads . emplace_back ( qr . quad , qr . isValid ()); // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a if ( qr . isValid ()) { Print << qr . text ; } } texture . fill ( image ); } texture . draw (); // QR \u30b3\u30fc\u30c9\u306e\u9818\u57df\u3092\u8868\u793a // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u8d64\u8272 for ( const auto & quad : quads ) { quad . first . drawFrame ( 6 , quad . second ? Palette :: Red : Palette :: Gray ); } } } 15. RenderTexture, MSRenderTexture \u6539\u5584 \u00b6 RenderTexture \u3084 MSRenderTexture \u306e .clear() , .read() , .resolve() \u304c const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u4fee\u6b63\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002 v0.4.1 | 2019-07-20 1. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u3053\u308c\u307e\u3067\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b7\u30fc\u30f3\u306b\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7528\u610f\u3057\u305f\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 RenderTexture \u3092\u4f5c\u6210\u3057\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3068\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\uff08\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5909\u66f4\uff09\u3002\u63cf\u753b\u3055\u308c\u305f\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u89e3\u9664\u3055\u308c\u305f\u3042\u3068\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u63cf\u753b\u306b\u8ee2\u7528\u3067\u304d\u307e\u3059\u3002 \u6ce8\u610f: \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u6700\u4e2d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u7d75\u6587\u5b57 const Texture emoji ( Emoji ( U \"\ud83d\ude07\" )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 600 , 600 , Palette :: White ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . drawAt ( Cursor :: Pos ()); } rt . draw (); emoji . drawAt ( Cursor :: Pos ()); // Clear \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 650 , 20 ))) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u767d\u3067\u30af\u30ea\u30a2 rt . clear ( Palette :: White ); } } } 2. \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u901a\u5e38\u306e RenderTexture \u3078\u306e\u63cf\u753b\u3067\u306f\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u304c\u6709\u52b9\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u56f3\u5f62\u3092\u63cf\u753b\u3057\u305f\u969b\u306b\u30b8\u30e3\u30ae\u30fc\u304c\u751f\u3058\u307e\u3059\u3002 MSRenderTexture \u3092\u4f7f\u3046\u3068\u3001\u901a\u5e38\u306e\u30b7\u30fc\u30f3\u3078\u306e\u63cf\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 MSRenderTexture \u306b\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u3001\u5225\u306e\u63cf\u753b\u3067\u4f7f\u3046\u969b\u306b\u306f\u3001 Graphics2D::Flush() \u306b\u3088\u3063\u3066\u305d\u306e\u6642\u70b9\u307e\u3067\u306e\u63cf\u753b\u51e6\u7406\u3092\u3059\u3079\u3066\u5b9f\u884c\uff08\u30d5\u30e9\u30c3\u30b7\u30e5\uff09\u3057\u3066 MSRenderTexture \u306b\u78ba\u5b9f\u306b\u63cf\u753b\u3057\u305f\u3042\u3068\u306b\u3001 MSRenderTexture::resolve() \u3092\u884c\u3044\u3001 MSRenderTexture \u5185\u306e\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 200 , 200 ); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture msrt ( 200 , 200 ); while ( System :: Update ()) { rt . clear ( ColorF ( 0.0 , 1.0 )); { ScopedRenderTarget2D target ( rt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } msrt . clear ( ColorF ( 0.0 , 1.0 )); { { ScopedRenderTarget2D target ( msrt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } // 2D \u63cf\u753b\u3092\u30d5\u30e9\u30c3\u30b7\u30e5 Graphics2D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db msrt . resolve (); } rt . draw ( 100 , 0 ); msrt . draw ( 400 , 0 ); } } 3. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u30b7\u30a7\u30fc\u30c0\u51e6\u7406 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u69d8\u3005\u306a\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570 1 \u3064\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u5909\u66f4\u3082\u4e0d\u8981\u3067\u3059\u3002\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 void Copy(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void Downsample(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u7e2e\u5c0f\u3057\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurH(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurV(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u7e26\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur(const TextureRegion& from, RenderTexture& to, const Vec2& direction); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 direction: \u30d6\u30e9\u30fc\u306e\u65b9\u5411 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6307\u5b9a\u3057\u305f\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur(const TextureRegion& from, RenderTexture& internalBuffer, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 internalBuffer: \u4e2d\u9593\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u306b\u7e26\u65b9\u5411\u3068\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from , internalBuffer , to \u306f\u3044\u305a\u308c\u3082\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u96a3\u308a\u5408\u3046\u3082\u306e\u540c\u58eb\u306f\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 GaussianBlurH(from, internalBuffer); GaussianBlurV(internalBuffer, to); \u3068\u7b49\u4fa1\u3067\u3059\u3002 \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 \u00b6 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // \u7e26\u3001\u6a2a\u304c 4 \u5206\u306e 1 \u30b5\u30a4\u30ba\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( texture . size () / 4 ); // \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 Shader :: Downsample ( texture , rt ); while ( System :: Update ()) { rt . draw (); } } \u30ac\u30a6\u30b9\u307c\u304b\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // bay.jpg \u306f 2560x1440 \u306a\u306e\u3067\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3057\u3066\u30ed\u30fc\u30c9 const Texture texture ( Image ( U \"example/bay.jpg\" ). scale ( 1280 , 720 )); // \u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba constexpr Size blurAreaSize ( 480 , 320 ); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f RenderTexture rtA ( blurAreaSize ), rtB ( blurAreaSize ); RenderTexture rtA4 ( blurAreaSize / 4 ), rtB4 ( blurAreaSize / 4 ); RenderTexture rtA8 ( blurAreaSize / 8 ), rtB8 ( blurAreaSize / 8 ); while ( System :: Update ()) { const Point cursorPos = Cursor :: Pos (); // \u80cc\u666f\u753b\u50cf\u306e\u3046\u3061\u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df const Rect blurArea ( cursorPos , blurAreaSize ); // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/8\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( texture ( blurArea ), rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); // \u80cc\u666f\u3092\u63cf\u753b texture . draw (); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u5f8c\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 RoundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b RoundRect ( cursorPos , blurAreaSize , 40 )( rtA8 . resized ( blurAreaSize )). draw (); } } 4. \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 \u00b6 2D \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u56f3\u5f62\u304c\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u63cf\u304b\u308c\u308b\u3068\u304d\u3001\u3069\u306e\u3088\u3046\u306a\u8272\u3092\u51fa\u529b\u3059\u308b\u304b\u306f\u3001\u300c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u2015\u30c0\u300d\u3068\u547c\u3070\u308c\u308b\u3001\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b GPU \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u901a\u3057\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 5. \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210 \u00b6 \u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u300c\u5b50\u30d7\u30ed\u30bb\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\u3001\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u305f\u308a\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u969b\u306b\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"C:/Windows/System32/notepad.exe\" ; # elif SIV3D_PLATFORM(MACOS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210 ChildProcess child = Process :: Spawn ( path ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } while ( System :: Update ()) { ClearPrint (); // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u304b\u3092\u53d6\u5f97 Print << child . isRunning (); // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u30b3\u30fc\u30c9 Print << child . getExitCode (); if ( child . isRunning ()) { if ( SimpleGUI :: Button ( U \"Terminate\" , Vec2 ( 100 , 20 ))) { // \u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86 child . terminate (); } } } } \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406 \u00b6 \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u4e00\u65b9\u306e\u6a19\u6e96\u51fa\u529b\u3092\u4ed6\u65b9\u306e\u6a19\u6e96\u5165\u529b\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\"Console\" \u306f\u901a\u5e38\u306e C++ \u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 # include <iostream> int main () { int a , b ; std :: cin >> a >> b ; std :: cout << ( a + b ) << std :: endl ; } # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console.exe\" ; # else // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff09 ChildProcess child = Process :: Spawn ( path , Pipe :: StdInOut ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } child . ostream () << 10 << std :: endl ; child . ostream () << 20 << std :: endl ; int32 result ; child . istream () >> result ; Print << U \"result: \" << result ; while ( System :: Update ()) { } } 6. \u5b9f\u9a13\u7684\u306a 3D \u63cf\u753b\u5bfe\u5fdc \u00b6 \u5b9f\u9a13\u7684\u306a 3D \u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( -1 , 1 , -1 ), Vec3 ( 1 , 1 , -1 ), Vec3 ( -1 , -1 , -1 ), Vec3 ( 1 , -1 , -1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( -1 , 1 , 1 ), Vec3 ( 1 , -1 , 1 ), Vec3 ( -1 , -1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); experimental :: Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( -10 , 10 )) { experimental :: Line3D ( Vec3 ( -10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); experimental :: Line3D ( Vec3 ( i , 0 , -10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } experimental :: AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); experimental :: AABB ( Vec3 ( -8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); experimental :: AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); experimental :: AABB ( Vec3 ( 8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); experimental :: AABB ( Vec3 ( -8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 \u30de\u30a6\u30b9\u30af\u30ea\u30c3\u30af\u3067\u3001\u5de6\u4e0a\u306e\u9ad8\u3055\u30de\u30c3\u30d7\u306b\u5c71\u3092\u63cf\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , -50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , -50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } } v0.0\uff5ev0.3 \u00b6 old Siv3D \u00b6 \u65e7 Siv3D \u66f4\u65b0\u5c65\u6b74","title":"Release Notes"},{"location":"releases/#release-notes","text":"","title":"Release Notes"},{"location":"releases/#v06","text":"v0.6.6 | 2022-11-22","title":"v0.6"},{"location":"releases/#v04","text":"v0.4.3 | 2020-04-11","title":"v0.4"},{"location":"releases/#v00v03","text":"","title":"v0.0\uff5ev0.3"},{"location":"releases/#old-siv3d","text":"\u65e7 Siv3D \u66f4\u65b0\u5c65\u6b74","title":"old Siv3D"},{"location":"api/classes/","text":"Siv3D \u306e\u30af\u30e9\u30b9\u4e00\u89a7 \u00b6 \u3088\u304f\u4f7f\u3046\u91cd\u8981\u306a\u3082\u306e\u306b \u2605 \u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002 \u6570\u5024 \u00b6 \u578b\u540d \u8aac\u660e bool \u2605 \u30d6\u30fc\u30ea\u30a2\u30f3\u578b\uff08 false \u307e\u305f\u306f true \uff09 int8 \u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u578b\uff08-128 \uff5e 127\uff09 uint8 \u7b26\u53f7\u7121\u3057 8-bit \u6574\u6570\u578b\uff080 \uff5e 255\uff09 int16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u578b\uff08-32,768 \uff5e 32,767\uff09 uint16 \u7b26\u53f7\u7121\u3057 16-bit \u6574\u6570\u578b\uff080 \uff5e 65,535\uff09 int32 \u2605 \u7b26\u53f7\u4ed8\u304d 32-bit \u6574\u6570\u578b\uff08-2,147,483,648 \uff5e 2,147,483,647\uff09 uint32 \u2605 \u7b26\u53f7\u7121\u3057 32-bit \u6574\u6570\u578b\uff080 \uff5e 4,294,967,295\uff09 int64 \u7b26\u53f7\u4ed8\u304d 64-bit \u6574\u6570\u578b\uff08-9,223,372,036,854,775,808 \uff5e 9,223,372,036,854,775,807\uff09 uint64 \u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 int128 \u7b26\u53f7\u4ed8\u304d 128-bit \u6574\u6570\u578b uint128 \u7b26\u53f7\u7121\u3057 128-bit \u6574\u6570\u578b float \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b double \u2605 \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b size_t \u2605 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u8868\u73fe\u3059\u308b\u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 BigInt \u4efb\u610f\u7cbe\u5ea6\u591a\u500d\u9577\u6574\u6570\u578b HalfFloat \u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b BigFloat \u6709\u52b9\u6570\u5b57 100 \u6841\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b \u6587\u5b57\u3084\u6587\u5b57\u5217 \u00b6 \u578b\u540d \u8aac\u660e char8 UTF-8 \u306e 1 \u8981\u7d20\uff08 char \u306e\u5225\u540d\uff09 char16 UTF-16 \u306e 1 \u8981\u7d20\uff08 char16_t \u306e\u5225\u540d\uff09 char32 \u2605 UTF-32 \u306e 1 \u8981\u7d20\uff08 char32_t \u306e\u5225\u540d\uff09 String \u2605 \u6587\u5b57\u5217\u30af\u30e9\u30b9\u3002\u8981\u7d20\u306f char32 StringView \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 FilePath \u2605 \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 FilePathView \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 URL URL \u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 URLView URL \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 \u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u578b\u540d \u8aac\u660e Array<Type, Allocator> \u2605 \u52d5\u7684\u914d\u5217\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::vector \u306e\u7f6e\u304d\u63db\u3048\uff09 DisjointSet<IndexType> Union-Find \u6728 Grid<Type, Allocator> \u2605 \u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217 HashSet<Type, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Set\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_set \u306e\u7f6e\u304d\u63db\u3048\uff09 HashTable<Key, Value, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Map\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_map \u306e\u7f6e\u304d\u63db\u3048\uff09 KDTree<DatasetAdapter> KD \u6728 KDTreeAdapter<Dataset, PointType, ElementType, Dim> KD \u6728 \u306e\u60c5\u5831 None_t Optional \u578b\u3067\u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\uff08 std::nullopt_t \u306e\u5225\u540d\uff09 NonNull<Pointer> \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u305f\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 Optional<Type> \u2605 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u578b\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::optional \u306e\u7f6e\u304d\u63db\u3048\uff09 std::array<Type, size_t> \u2605 \u56fa\u5b9a\u9577\u914d\u5217 StringCompare \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9 StringHash \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9 2D \u56f3\u5f62 \u00b6 \u578b\u540d \u8aac\u660e Bezier2 \u2605 \u4e8c\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 \u2605 \u4e09\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Circle \u2605 \u5186 Circular \u2605 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Circular3 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 Circular3F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 Circular6 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 Circular6F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 Circular9 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 Circular9F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 CircularBase<Float, int32> \u5186\u5ea7\u6a19 CircularF \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Ellipse \u2605 \u6955\u5186 Float2 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 FloatQuad \u51f8\u56db\u89d2\u5f62\uff08\u8981\u7d20\u306f float \uff09 FloatRect \u4e0a\u4e0b\u5de6\u53f3\u3067\u5b9a\u7fa9\u3059\u308b\u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f float \uff09 Line \u2605 \u7dda\u5206 LineString \u2605 \u9023\u7d9a\u3059\u308b\u7dda\u5206\uff08 Array<Vec2> \u306e\u7f6e\u304d\u63db\u3048\uff09 Mat3x2 \u2605 \u30a2\u30d5\u30a3\u30f3\u5909\u63db\u7528\u306e 3x2 \u884c\u5217 Mat3x3 \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u5909\u63db\u7528\u306e 3x3 \u884c\u5217 MultiPolygon \u591a\u89d2\u5f62\u306e\u96c6\u5408\uff08 Array<Polygon> \u306e\u7f6e\u304d\u63db\u3048\uff09 OffsetCircular \u2605 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 OffsetCircular3 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 OffsetCircular3F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 OffsetCircular6 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 OffsetCircular6F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 OffsetCircular9 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 OffsetCircular9F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 OffsetCircularBase \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19 OffsetCircularF \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Point \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f int32 \uff09 Polygon \u2605 \u591a\u89d2\u5f62\uff08\u7a74\u3082\u6301\u3066\u308b\uff09 Quad \u2605 \u51f8\u56db\u89d2\u5f62 Rect \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f int32 \uff09 RectF \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f double \uff09 RoundRect \u2605 \u89d2\u4e38\u9577\u65b9\u5f62 Shape2D \u2605 \u591a\u89d2\u5f62\u4f5c\u6210\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Size \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f int32 \uff09 \uff08 Point \u306e\u5225\u540d\uff09 SizeF \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f double \uff09 \uff08 Vec2 \u306e\u5225\u540d\uff09 Spline2D \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda Triangle \u2605 \u4e09\u89d2\u5f62 Vec2 \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 3D \u5f62\u72b6 \u00b6 \u578b\u540d \u8aac\u660e Box \u2605 \u5404\u8fba\u304c XYZ \u8ef8\u306b\u5e73\u884c\u306a\u76f4\u65b9\u4f53 Cone \u5186\u9310 Cylinder \u2605 \u5186\u67f1 Cylindrical \u2605 \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<double> \u306e\u5225\u540d\uff09 CylindricalBase<Float> \u5186\u67f1\u5ea7\u6a19 CylindricalF \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<float> \u306e\u5225\u540d\uff09 Disc \u5186\u76e4 Float3 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 Float4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 InfinitePlane \u5e73\u9762 Line3D \u2605 3D \u7dda\u5206 Mat4x4 \u2605 4x4 \u884c\u5217 OrientedBox \u2605 \u5411\u304d\u306e\u3042\u308b\u76f4\u65b9\u4f53 Plane \u2605 \u5927\u304d\u3055\u304c\u6709\u9650\u306e XZ \u5e73\u9762 Quaternion \u2605 \u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3 Ray \u2605 \u30ec\u30a4 Sphere \u2605 \u7403 Spherical \u2605 \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<double> \u306e\u5225\u540d\uff09 SphericalBase<Float> \u7403\u9762\u5ea7\u6a19 SphericalF \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<float> \u306e\u5225\u540d\uff09 Triangle3D 3D \u4e09\u89d2\u5f62 Vec3 \u2605 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 Vec4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 ViewFrustum \u8996\u9310\u53f0 \u8272 \u00b6 \u578b\u540d \u8aac\u660e Color \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f uint8 \uff09 ColorF \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f double \uff09 ColormapType \u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u306e\u7a2e\u985e ColorOption \u8272\u7a7a\u9593\u306e\u8a2d\u5b9a HSV \u2605 HSVA \u30ab\u30e9\u30fc \u6642\u9593\u306e\u5358\u4f4d \u00b6 \u578b\u540d \u8aac\u660e Days \u6642\u9593\uff08\u65e5\uff09\uff08\u6574\u6570\uff09 DaysF \u6642\u9593\uff08\u65e5\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Hours \u6642\u9593\uff08\u6642\uff09\uff08\u6574\u6570\uff09 HoursF \u6642\u9593\uff08\u6642\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Minutes \u6642\u9593\uff08\u5206\uff09\uff08\u6574\u6570\uff09 MinutesF \u6642\u9593\uff08\u5206\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Seconds \u6642\u9593\uff08\u79d2\uff09\uff08\u6574\u6570\uff09 SecondsF \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Milliseconds \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6574\u6570\uff09 MillisecondsF \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Microseconds \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6574\u6570\uff09 MicrosecondsF \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Nanoseconds \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6574\u6570\uff09 NanosecondsF \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Duration \u2605 \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09\uff08 SecondsF \u306e\u5225\u540d\uff09 \u30a8\u30e9\u30fc \u00b6 \u578b\u540d \u8aac\u660e BadOptionalAccess \u7121\u52b9\u306a Optional \u3078\u306e\u30a2\u30af\u30bb\u30b9\u30a8\u30e9\u30fc EngineError \u30a8\u30f3\u30b8\u30f3\u5185\u90e8\u306e\u30a8\u30e9\u30fc Error \u2605 \u30a8\u30e9\u30fc NotImplementedError \u672a\u5b9f\u88c5\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u305f\u30a8\u30e9\u30fc ParseError \u30d1\u30fc\u30b9\u95a2\u6570\u306e\u30a8\u30e9\u30fc \u69d8\u3005\u306a\u30af\u30e9\u30b9 \u00b6 \u578b\u540d \u8aac\u660e ACLineStatus \u96fb\u6e90\u306e\u63a5\u7d9a\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b AdaptiveThresholdMethod \u9069\u5fdc\u7684\u95be\u5024\u51e6\u7406\u306b\u304a\u3044\u3066\u95be\u5024\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b aligned_float4 \u30cd\u30a4\u30c6\u30a3\u30d6\u306e SIMD Float4 \u578b Allocator<Type, size_t> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u5bfe\u5fdc\u30a2\u30ed\u30b1\u30fc\u30bf AnimatedGIFReader GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3046\u30af\u30e9\u30b9 AnimatedGIFWriter GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u51fa\u3057\u3092\u884c\u3046\u30af\u30e9\u30b9 ArcEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f27\u5f62\u72b6\uff09 AssetHandle<AssetType> \u30a2\u30bb\u30c3\u30c8\u30cf\u30f3\u30c9\u30eb AssetID<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetIDWrapper<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetState \u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b AsyncHTTPTask \u975e\u540c\u671f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 AsyncTask<Type> \u975e\u540c\u671f\u51e6\u7406\u30af\u30e9\u30b9\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::future \u306e\u7f6e\u304d\u63db\u3048\uff09 Audio \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30af\u30e9\u30b9 AudioAsset \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8 AudioAssetData \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 AudioFormat \u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b AudioGroup \u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u30aa\u30fc\u30c7\u30a3\u30aa AudioLoopTiming \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30eb\u30fc\u30d7\u4f4d\u7f6e\u6307\u5b9a BasicCamera2D 2D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicCamera3D 3D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicPerlinNoise<Float> Perlin \u30ce\u30a4\u30ba BatteryStatus \u30d0\u30c3\u30c6\u30ea\u30fc\u306e\u6b8b\u91cf\u3092\u8868\u3059\u5217\u6319\u578b BinaryReader \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 BinaryWriter \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 BitmapGlyph \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30b0\u30ea\u30d5 Blend \u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b BlendOp \u30d6\u30ec\u30f3\u30c9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b BlendState \u2605 \u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 Blob \u2605 \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf BorderType \u753b\u50cf\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u6642\u306e\u5883\u754c\u7dda\u306e\u6271\u3044\u3092\u8868\u3059\u5217\u6319\u578b Buffer2D 2D \u63cf\u753b\u30d0\u30c3\u30d5\u30a1 Byte 1 \u30d0\u30a4\u30c8\u3092\u8868\u73fe\u3059\u308b\u578b Camera2D \u2605 2D \u30ab\u30e1\u30e9 Camera2DParameters 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a CameraControl \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b CascadeClassifier Cascade \u306b\u3088\u308b\u753b\u50cf\u5206\u985e\u5668 ChildProcess \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u3068\u7ba1\u7406\u30af\u30e9\u30b9 CircleEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f62\u72b6\uff09 CommonFloat<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonFloat_t<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonVector<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b CommonVector_t<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b ConstantBuffer<Type> \u2605 \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBufferBase \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u8a73\u7d30\u60c5\u5831 ConstantBufferBinding \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 CopyOption \u30d5\u30a1\u30a4\u30eb\u30b3\u30d4\u30fc\u6642\u306e\u52d5\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b CPUInfo CPU \u60c5\u5831 CSV \u2605 CSV \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 CursorStyle \u2605 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3059\u5217\u6319\u578b Date \u2605 \u65e5\u4ed8 DateTime \u2605 \u65e5\u4ed8\u3068\u6642\u523b DayOfWeek \u66dc\u65e5\u3092\u8868\u3059\u5217\u6319\u578b DeadZone \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a2d\u5b9a DeadZoneType \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b DebugCamera3D \u2605 \u30c7\u30d0\u30c3\u30b0\u7528\u306e 3D \u30ab\u30e1\u30e9 DefaultAllocator<Type> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u8003\u616e\u3057\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ed\u30b1\u30fc\u30bf DepthFunc \u30c7\u30d7\u30b9\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u8868\u3059\u5217\u6319\u578b DepthStencilState \u30c7\u30d7\u30b9\u30fb\u30b9\u30c6\u30f3\u30b7\u30eb\u30b9\u30c6\u30fc\u30c8 Deserializer<Reader> \u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 detail::Gamepad_impl \u2605 \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 Gamepad(\u2026) \u306e\u623b\u308a\u5024 detail::XInput_impl \u2605 Xinput \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 XInput(\u2026) \u306e\u623b\u308a\u5024 DirectoryWatcher \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u306e\u76e3\u8996\u30af\u30e9\u30b9 DragItemType \u30c9\u30e9\u30c3\u30b0\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b DragStatus \u30c9\u30e9\u30c3\u30b0\u306e\u72b6\u614b DrawableText \u2605 \u63cf\u753b\u30c6\u30ad\u30b9\u30c8\u3002 font(\u2026) \u306e\u623b\u308a\u5024 DroppedFilePath \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u60c5\u5831 DroppedText \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u60c5\u5831 DynamicMesh \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30e1\u30c3\u30b7\u30e5 DynamicTexture \u2605 \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 EdgePreservingFilterType EdgePreservingFilter \u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Effect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8 Emission2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306b\u304a\u3051\u308b\u653e\u51fa Emoji \u6a19\u6e96\u7d75\u6587\u5b57 EngineOption \u30a8\u30f3\u30b8\u30f3\u306e\u8a2d\u5b9a ESSL OpenGL ES Shading Language \u30d5\u30a1\u30a4\u30eb Exif Exif \u30c7\u30fc\u30bf FFTResult \u2605 FFT \u306e\u7d50\u679c FFTSampleLength FFT \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u8868\u3059\u5217\u6319\u578b FileAction \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b FileChange \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3068\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 FileFilter \u30d5\u30a1\u30a4\u30eb\u62e1\u5f35\u5b50\u30d5\u30a3\u30eb\u30bf FloodFillConnectivity \u753b\u50cf\u5857\u308a\u3064\u3076\u3057\u306e\u9023\u7d50\u6027\u3092\u8868\u3059\u5217\u6319\u578b Font \u2605 \u30d5\u30a9\u30f3\u30c8 FontAsset \u2605 \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8 FontAssetData \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 FontMethod \u2605 \u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b FontStyle \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b FormatData \u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u60c5\u5831\u683c\u7d0d\u30d0\u30c3\u30d5\u30a1 GamepadInfo \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831 GeoJSONBase GeoJSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 GeoJSONFeature GeoJSON Feature \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONFeatureCollection GeoJSON FeatureCollection \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONGeometry GeoJSON Geometry \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONType GeoJSON\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b GLSL \u2605 GLSL \u30d5\u30a1\u30a4\u30eb Glyph \u30b0\u30ea\u30d5 GlyphCluster \u30b0\u30ea\u30d5\u30af\u30e9\u30b9\u30bf GlyphIndex \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30b0\u30ea\u30d5\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08 uint32 \u306e\u5225\u540d\uff09 GlyphInfo \u30b0\u30ea\u30d5\u60c5\u5831 GMInstrument \u2605 General MIDI (GM) \u306b\u304a\u3051\u308b\u697d\u5668\u3092\u8868\u3059\u5217\u6319\u578b GrabCut \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa GrabCutClass \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa\u306b\u304a\u3051\u308b\u80cc\u666f\u3068\u524d\u666f\u3092\u8868\u3059\u5217\u6319\u578b HLSL \u2605 HLSL \u30d5\u30a1\u30a4\u30eb HTMLWriter HTML \u6587\u66f8\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 HTTPAsyncStatus \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u9032\u884c\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b HTTPProgress HTTP \u901a\u4fe1\u306e\u9032\u6357 HTTPResponse HTTP \u30ec\u30b9\u30dd\u30f3\u30b9 HTTPStatusCode HTTP \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b IAddon \u30a2\u30c9\u30aa\u30f3\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAsset \u30a2\u30bb\u30c3\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 IAudioDecoder \u97f3\u58f0\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioEncoder \u97f3\u58f0\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioStream \u52d5\u7684\u66f4\u65b0\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Icon \u6a19\u6e96\u30a2\u30a4\u30b3\u30f3 IEffect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageDecoder \u753b\u50cf\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageEncoder \u753b\u50cf\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Image \u2605 \u753b\u50cf\u30c7\u30fc\u30bf ImageAddressMode \u753b\u50cf\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ImageFormat \u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageInfo \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831 ImagePixelFormat \u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageROI \u753b\u50cf\u30c7\u30fc\u30bf\u5185\u306e\u9818\u57df InfiniteList<Type> \u7121\u9650\u30ea\u30b9\u30c8 INI \u2605 INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d INIKey INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30ad\u30fc INISection INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30bb\u30af\u30b7\u30e7\u30f3 INIValueWrapper INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 Input \u2605 \u5165\u529b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 InputCombination Input \u306e\u7d44\u307f\u5408\u308f\u305b InputDeviceType \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b InputGroup Input \u306e\u7d44\u307f\u5408\u308f\u305b InterpolationAlgorithm \u753b\u50cf\u62e1\u5927\u7e2e\u5c0f\u306e\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b IPv4Address IPv4 \u30a2\u30c9\u30ec\u30b9 IReader Reader \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IScene<State, Data> \u2605 \u30b7\u30fc\u30f3\u7ba1\u7406\u7528\u306e\u30b7\u30fc\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ISteadyClock \u6642\u523b\u63d0\u4f9b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IWriter Writer \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 JoyCon Joy-Con KahanSummation<Float> \u30ab\u30cf\u30f3\u306e\u52a0\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7528\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 KeyEvent \u30ad\u30fc\u5165\u529b\u306e\u8a73\u7d30 KlattTTSParameters Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u8a2d\u5b9a KlattWaveform Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u6ce2\u5f62\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b LanguageCode \u8a00\u8a9e\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Leap::Bone Leap Motion \u306b\u304a\u3051\u308b\u30dc\u30fc\u30f3\u306e\u60c5\u5831 Leap::Connection \u63a5\u7d9a\u3055\u308c\u305f Leap \u30c7\u30d0\u30a4\u30b9\u306e\u30cf\u30f3\u30c9\u30eb Leap::Hand Leap Motion \u306b\u304a\u3051\u308b\u624b\u306e\u60c5\u5831 Leap::TrackingMode Leap Motion \u306b\u304a\u3051\u308b\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b LetterCase \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u8868\u3059\u5217\u6319\u578b LicenseInfo \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831 LineStyle \u7dda\u306e\u30b9\u30bf\u30a4\u30eb ListBoxState \u2605 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u72b6\u614b LogLevel \u51fa\u529b\u3055\u308c\u308b\u30ed\u30b0\u306e\u8a73\u7d30\u5ea6\u3092\u8868\u3059\u5217\u6319\u578b LogType \u30ed\u30b0\u51fa\u529b\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b ManagedScript \u81ea\u52d5\u7ba1\u7406\u3055\u308c\u305f\u30b9\u30af\u30ea\u30d7\u30c8 MatchResults \u6b63\u898f\u8868\u73fe\u306e\u30de\u30c3\u30c1\u7d50\u679c Material 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30de\u30c6\u30ea\u30a2\u30eb MathParser \u6570\u5f0f\u30d1\u30fc\u30b5 MD5Value MD5 MemoryMappedFile \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30af\u30e9\u30b9 MemoryMappedFileView \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 MemoryReader \u30e1\u30e2\u30ea\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryViewReader \u30e1\u30e2\u30ea\u30d3\u30e5\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryWriter \u30e1\u30e2\u30ea\u3078\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 Mesh \u2605 3D \u30e1\u30c3\u30b7\u30e5 MeshData \u2605 3D \u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u30d0\u30c3\u30d5\u30a1\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d0\u30c3\u30d5\u30a1 MeshGlyph \u30e1\u30c3\u30b7\u30e5\u30b0\u30ea\u30d5 MessageBoxResult \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u7d50\u679c\u3092\u8868\u3059\u5217\u6319\u578b MessageBoxStyle \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b Microphone \u2605 \u30de\u30a4\u30af MicrophoneInfo \u30de\u30a4\u30af\u306e\u60c5\u5831 MicrosecClock \u30de\u30a4\u30af\u30ed\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MIDINote MIDI \u30ce\u30fc\u30c8 MillisecClock \u30df\u30ea\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MiniScene<State> \u7c21\u6613\u7248\u306e\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc MixBus \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30df\u30c3\u30af\u30b9\u30d0\u30b9\u756a\u53f7\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_Exists \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_NotFound \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Model \u2605 3D \u30e2\u30c7\u30eb ModelMeshPart 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4\u306e\u69cb\u6210\u8981\u7d20 ModelObject 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4 MonitorInfo \u30e2\u30cb\u30bf\u30fc\u306e\u60c5\u5831 MSDFGlyph MSDF \u65b9\u5f0f\u306e\u30b0\u30ea\u30d5 MSL Metal Shading Language \u30d5\u30a1\u30a4\u30eb\uff08\u672a\u5b9f\u88c5\uff09 MSRenderTexture \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\uff08\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u4ed8\u304d\uff09\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 NamedParameter<Tag, Type> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NamedParameterHelper<Tag> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NativeFilePath OS \u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u8868\u73fe\u578b NavMesh \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMeshConfig \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u306e\u8a2d\u5b9a NormalComputation \u6cd5\u7dda\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b OpenMode \u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b OutlineGlyph \u8f2a\u90ed\u30b0\u30ea\u30d5 Particle2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb ParticleSystem2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2DParameters 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a PerlinNoise Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<double> \u306e\u5225\u540d\uff09 PerlinNoiseF Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<float> \u306e\u5225\u540d\uff09 PhongMaterial Phong \u30e2\u30c7\u30eb\u306e Material PhongMaterialInternal Phong \u30e2\u30c7\u30eb\u306e Material \u306e\u5185\u90e8\u5f62\u5f0f PianoKey \u2605 \u97f3\u540d\u3092\u8868\u3059\u5217\u6319\u578b Pipe \u30d1\u30a4\u30d7\u901a\u4fe1\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b PixelShader \u2605 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 PixelShaderAsset \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 PixelShaderAssetData \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 PlaceHolder_t \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u578b Platform::Windows::HLSLCompileOption HLSL \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 PlayingCard::Card \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u756a\u53f7\u3001\u30b9\u30fc\u30c8\u3001\u88cf\u8868\u306a\u3069\u306e\u30c7\u30fc\u30bf PlayingCard::CardInfo \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u63cf\u753b\u7528\u306e\u60c5\u5831 PlayingCard::Pack \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30af\u30e9\u30b9 PlayingCard::Suit \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u30b9\u30fc\u30c8\uff08\u7d75\u67c4\u306e\u30de\u30fc\u30af\uff09\u3092\u8868\u3059\u5217\u6319\u578b PoissonDisk2D 2D \u30dd\u30ef\u30bd\u30f3\u5206\u5e03\u30af\u30e9\u30b9 PolygonEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u591a\u89d2\u5f62\uff09 PolygonFailureType Polygon \u306e\u5165\u529b\u9802\u70b9\u306e\u691c\u8a3c\u7d50\u679c PolygonGlyph \u591a\u89d2\u5f62\u306b\u3088\u308b\u30b0\u30ea\u30d5 PowerStatus \u30b7\u30b9\u30c6\u30e0\u306e\u96fb\u6e90\u306e\u72b6\u614b ProController Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u306e Gamepad \u30a2\u30c0\u30d7\u30bf ProfilerStat \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u60c5\u5831 QRContent QR \u30b3\u30fc\u30c9\u306e\u30b9\u30ad\u30e3\u30f3\u7d50\u679c QRErrorCorrection QR \u30b3\u30fc\u30c9\u306e\u8aa4\u308a\u8a02\u6b63\u30ec\u30d9\u30eb\u3092\u8868\u3059\u5217\u6319\u578b QRMode QR \u30b3\u30fc\u30c9\u306e\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b QRScanner QR \u30b3\u30fc\u30c9\u306e\u8aad\u307f\u53d6\u308a\u30af\u30e9\u30b9 RDTSCClock CPU \u30b5\u30a4\u30af\u30eb\u6570\u30ab\u30a6\u30f3\u30bf\u30fc RectanglePack \u9577\u65b9\u5f62\u8a70\u8fbc\u307f\u7d50\u679c RectEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u9577\u65b9\u5f62\uff09 RegExp \u6b63\u898f\u8868\u73fe RenderTexture \u2605 \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 ResizeMode \u2605 \u30b7\u30fc\u30f3\u306e\u81ea\u52d5\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ResourceOption \u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u4f7f\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b SamplerState \u2605 \u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SaturatedLinework<TargetShape, URNG> \u96c6\u4e2d\u7dda\u63cf\u753b\u30af\u30e9\u30b9 SceneManager<State, Data> \u2605 \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc ScopedColorAdd2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u52a0\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedColorMul2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u4e57\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader2D 2D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader3D 3D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport2D 2D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport3D 3D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopeGuard<Callback> \u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9 Script \u30b9\u30af\u30ea\u30d7\u30c8 ScriptCompileOption \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b ScriptFunction<Ret(Args\u2026)> \u30b9\u30af\u30ea\u30d7\u30c8\u95a2\u6570 ScriptModule \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30e2\u30b8\u30e5\u30fc\u30eb SDFGlyph SDF \u65b9\u5f0f\u306b\u3088\u308b\u30b0\u30ea\u30d5 Serial \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 Serializer<Writer> \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ShaderGroup \u30b7\u30a7\u30fc\u30c0\u8a00\u8a9e\u306e\u5dee\u3092\u5438\u53ce\u3059\u308b\u30af\u30e9\u30b9 ShaderStage \u30b7\u30a7\u30fc\u30c0\u30b9\u30c6\u30fc\u30b8\u3092\u8868\u3059\u5217\u6319\u578b SIMD_Float4 SIMD \u5bfe\u5fdc Float4 SimpleAnimation \u30ad\u30fc\u30d5\u30ec\u30fc\u30e0\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u88dc\u52a9\u30af\u30e9\u30b9 Sky \u5929\u7a7a\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30f3\u30b8\u30f3\uff08\u5b9f\u9a13\u7684\uff09 SoundFont \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8 SpecialFolder \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3059\u5217\u6319\u578b SplineIndex Spline2D \u4e0a\u306e\u4f4d\u7f6e Step<T, N, S> \u2605 \u30eb\u30fc\u30d7\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Step2D \u2605 2D \u30eb\u30fc\u30d7\u306e\u4e00\u5143\u5316\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Stopwatch \u2605 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Subdivision2D 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30af\u30e9\u30b9 Subdivision2DEdgeType 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u30a8\u30c3\u30b8\u306e\u60c5\u5831 Subdivision2DPointLocation 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u70b9\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5217\u6319\u578b SVG SVG \u30c7\u30fc\u30bf TCPClient TCP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 TCPError TCP \u901a\u4fe1\u306e\u30a8\u30e9\u30fc\u3092\u8868\u3059\u5217\u6319\u578b TCPServer TCP \u30b5\u30fc\u30d0 TCPSessionID TCP \u306e\u30bb\u30c3\u30b7\u30e7\u30f3 ID\uff08 uint64 \u306e\u5225\u540d\uff09 TextEditState \u2605 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u72b6\u614b TextEncoding \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5f62\u5f0f TextInputMode \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u30e2\u30fc\u30c9 TextReader \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TextStyle \u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30bf\u30a4\u30eb Texture \u2605 \u30c6\u30af\u30b9\u30c1\u30e3 TextureAddressMode \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b TextureAsset \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8 TextureAssetData \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 TexturedCircle \u5186\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TextureDesc \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b TexturedQuad \u51f8\u56db\u89d2\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TexturedRoundRect \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u9818\u57df TextureFilter \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf TextureFormat \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 TexturePixelFormat \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b TextureRegion \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df TextWriter \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 TimeProfiler \u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30af\u30e9\u30b9 Timer \u30bf\u30a4\u30de\u30fc ToastNotificationID \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e ID\uff08 int64 \u306e\u5225\u540d\uff09 ToastNotificationItem \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u8a2d\u5b9a ToastNotificationState \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b Transformer2D \u2605 2D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transformer3D 3D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transition \u5024\u306e\u9077\u79fb\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 TriangleIndex \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint16 \uff09 TriangleIndex32 \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint32 \uff09 Typeface \u2605 \u6a19\u6e96\u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Uncopyable \u30b3\u30d4\u30fc\u7981\u6b62 Mixin UnderlineStyle \u4e0b\u7dda\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b unique_resource \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7834\u68c4\u6642\u306b\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30ea\u30fc\u30bf\u3092\u547c\u3076 RAII \u30e9\u30c3\u30d1\u30fc UserAction \u2605 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b UTF16toUTF32_Converter UTF-8 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF16_Converter UTF-16 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF8_Converter UTF-32 \u304b\u3089 UTF-8 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF8toUTF32_Converter UTF-32 \u304b\u3089 UTF-16 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UUIDValue UUID VariableSpeedStopwatch \u901f\u5ea6\u3092\u5909\u66f4\u53ef\u80fd\u306a\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Vertex2D 2D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf Vertex3D 3D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf VertexShader \u2605 \u9802\u70b9\u30b7\u30a7\u30fc\u30c0 VertexShaderAsset \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 VertexShaderAssetData \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 VideoReader \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 VideoTexture \u52d5\u753b\u3092 Texture \u306e\u3088\u3046\u306b\u6271\u3048\u308b\u30af\u30e9\u30b9 VideoWriter \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 VoronoiFacet \u30dc\u30ed\u30ce\u30a4 Facets Wave \u2605 \u97f3\u58f0\u6ce2\u5f62\u30c7\u30fc\u30bf WaveSample \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb WaveSampleS16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb Webcam \u2605 Web \u30ab\u30e1\u30e9 WebcamInfo Web \u30ab\u30e1\u30e9\u306e\u60c5\u5831 WGSL WebGPU Shading Language \u30d5\u30a1\u30a4\u30eb WindowState \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u72b6\u614b WindowStyle \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b X86Features CPU \u306e\u5bfe\u5fdc\u547d\u4ee4\u30bb\u30c3\u30c8 XInputVibration XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30d0\u30a4\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a XMLElement XML \u306e\u8981\u7d20 XMLReader XML \u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 YesNo<Tag> YesNo \u7528\u306e\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ZIPReader ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 \u4e71\u6570\u3068\u5206\u5e03 \u00b6 \u578b\u540d \u8aac\u660e BernoulliDistribution \u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u30af\u30e9\u30b9 DefaultRNG \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::SFMT19937_64 \u306e\u5225\u540d\uff09 DiscreteDistribution \u78ba\u7387\u5206\u5e03\u3092\u751f\u6210\u3059\u308b\u30af\u30e9\u30b9 HardwareRNG \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u3088\u308b\u975e\u6c7a\u5b9a\u7684\u4e71\u6570\u751f\u6210\u5668 NormalDistribution \u6b63\u898f\u5206\u5e03\u30af\u30e9\u30b9 PRNG::SFMT19937_64 SIMD-oriented Fast Mersenne Twister \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::SplitMix64 SplitMix64 \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128PlusPlus xoroshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128StarStar xoroshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128PlusPlus xoshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128StarStar xoshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256Plus xoshiro256+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256PlusPlus xoshiro256++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256StarStar xoshiro256** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 SmallRNG \u7701\u30b5\u30a4\u30ba\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::Xoshiro256PlusPlus \u306e\u5225\u540d\uff09 UniformDistribution \u6574\u6570\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u4f7f\u3048\u308b\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformIntDistribution \u6574\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformRealDistribution \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 2D \u7269\u7406\u6f14\u7b97 \u00b6 \u578b\u540d \u8aac\u660e P2Body \u2605 \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u306b\u5b58\u5728\u3059\u308b\u7269\u4f53\u306e 1 \u5358\u4f4d\u30020 \u500b\u4ee5\u4e0a\uff08\u901a\u5e38\u306f 1 \u500b\u4ee5\u4e0a\uff09\u306e\u90e8\u54c1\uff08 P2Shape \uff09\u304b\u3089\u69cb\u6210\u3055\u308c\u308b P2BodyID \u7269\u4f53 P2Body \u306b\u4e0e\u3048\u3089\u308c\u308b\u4e00\u610f\u306e ID \u306e\u578b\uff08 uint32 \u306e\u5225\u540d\uff09 P2BodyType \u2605 \u7269\u4f53\u306e\u7a2e\u985e\u306b\u95a2\u3059\u308b\u5217\u6319\u578b P2Circle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u5186\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Collision 2 \u3064\u306e\u7269\u4f53\u306b\u306f\u305f\u3089\u304f\u5168\u3066\u306e\u63a5\u89e6\u306b\u95a2\u3059\u308b\u60c5\u5831\u3067\u3001\u6700\u5927 2 \u3064\u306e P2Contact \u3092\u6301\u3064 P2Contact 2 \u3064\u306e\u7269\u4f53\u306b\u767a\u751f\u3057\u305f\u885d\u7a81\u306b\u95a2\u3059\u308b\u60c5\u5831 P2ContactPair 2 \u3064\u306e\u7269\u4f53\u304c\u63a5\u89e6\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u305d\u308c\u3089\u306e ID (P2BodyID) \u306e\u30da\u30a2 P2DistanceJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u8ddd\u96e2\u30b8\u30e7\u30a4\u30f3\u30c8 P2Filter \u90e8\u54c1\uff08 P2Shape \uff09\u306b\u30ab\u30c6\u30b4\u30ea\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3057\u3001\u7279\u5b9a\u306e\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6301\u3064\u90e8\u54c1\u3068\u5e72\u6e09\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b P2Line \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2LineString \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9023\u7d9a\u3057\u305f\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Material \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u6750\u8cea\u3092\u5b9a\u7fa9\u3059\u308b P2MouseJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30de\u30a6\u30b9\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30d4\u30dc\u30c3\u30c8\u30b8\u30e7\u30a4\u30f3\u30c8 P2Polygon \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u591a\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Quad \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u51f8\u56db\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Rect \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Shape \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 P2ShapeType \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u5f62\u72b6\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b P2SliderJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30b9\u30e9\u30a4\u30c0\u30fc\u30b8\u30e7\u30a4\u30f3\u30c8 P2Triangle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u4e09\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2WheelJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30db\u30a4\u30fc\u30eb\u30b8\u30e7\u30a4\u30f3\u30c8 P2World \u2605 \u7269\u7406\u6f14\u7b97\u3092\u884c\u3046\u30ef\u30fc\u30eb\u30c9 JSON \u30c7\u30fc\u30bf \u00b6 \u578b\u540d \u8aac\u660e JSON \u2605 JSON \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 JSONArrayView JSON \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc JSONConstIterator JSON const \u30a4\u30c6\u30ec\u30fc\u30bf JSONItem JSON \u306e\u8981\u7d20 JSONIterationProxy JSON \u30a4\u30c6\u30ec\u30fc\u30bf\u88dc\u52a9\u30af\u30e9\u30b9 JSONIterator JSON \u30a4\u30c6\u30ec\u30fc\u30bf JSONValueType JSON \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b TOML \u30c7\u30fc\u30bf \u00b6 \u578b\u540d \u8aac\u660e TOMLArrayIterator TOML \u306e\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLArrayView TOML \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLReader \u2605 TOML \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TOMLTableArrayIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableArrayView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLTableIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableMember TOML \u306e\u30c6\u30fc\u30d6\u30eb\u30e1\u30f3\u30d0 TOMLTableView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30d3\u30e5\u30fc TOMLValue TOML \u306e\u8981\u7d20 TOMLValueType TOML \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b \u753b\u50cf\u30b3\u30fc\u30c7\u30c3\u30af \u00b6 \u578b\u540d \u8aac\u660e BMPDecoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 BMPEncoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 GIFDecoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 GIFEncoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 JPEGDecoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 JPEGEncoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGDecoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PNGEncoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGFilter PNG \u5727\u7e2e\u6642\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u8868\u3059\u5217\u6319\u578b PPMDecoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PPMEncoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PPMType PPM \u753b\u50cf\u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b SVGDecoder SVG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGADecoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGAEncoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 TIFFDecoder TIFF \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPDecoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPEncoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WebPMethod WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b \u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af \u00b6 \u578b\u540d \u8aac\u660e AACDecoder AAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 AIFFDecoder AIFF \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 FLACDecoder FLAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MIDIDecoder MIDI \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MP3Decoder MP3 \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisDecoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisEncoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 OpusDecoder Opus \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEDecoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEEncoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WAVEFormat WAVE \u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b WMADecoder WMA \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0","title":"Classes"},{"location":"api/classes/#siv3d-\u306e\u30af\u30e9\u30b9\u4e00\u89a7","text":"\u3088\u304f\u4f7f\u3046\u91cd\u8981\u306a\u3082\u306e\u306b \u2605 \u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002","title":"Siv3D \u306e\u30af\u30e9\u30b9\u4e00\u89a7"},{"location":"api/classes/#\u6570\u5024","text":"\u578b\u540d \u8aac\u660e bool \u2605 \u30d6\u30fc\u30ea\u30a2\u30f3\u578b\uff08 false \u307e\u305f\u306f true \uff09 int8 \u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u578b\uff08-128 \uff5e 127\uff09 uint8 \u7b26\u53f7\u7121\u3057 8-bit \u6574\u6570\u578b\uff080 \uff5e 255\uff09 int16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u578b\uff08-32,768 \uff5e 32,767\uff09 uint16 \u7b26\u53f7\u7121\u3057 16-bit \u6574\u6570\u578b\uff080 \uff5e 65,535\uff09 int32 \u2605 \u7b26\u53f7\u4ed8\u304d 32-bit \u6574\u6570\u578b\uff08-2,147,483,648 \uff5e 2,147,483,647\uff09 uint32 \u2605 \u7b26\u53f7\u7121\u3057 32-bit \u6574\u6570\u578b\uff080 \uff5e 4,294,967,295\uff09 int64 \u7b26\u53f7\u4ed8\u304d 64-bit \u6574\u6570\u578b\uff08-9,223,372,036,854,775,808 \uff5e 9,223,372,036,854,775,807\uff09 uint64 \u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 int128 \u7b26\u53f7\u4ed8\u304d 128-bit \u6574\u6570\u578b uint128 \u7b26\u53f7\u7121\u3057 128-bit \u6574\u6570\u578b float \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b double \u2605 \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b size_t \u2605 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u8868\u73fe\u3059\u308b\u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 BigInt \u4efb\u610f\u7cbe\u5ea6\u591a\u500d\u9577\u6574\u6570\u578b HalfFloat \u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b BigFloat \u6709\u52b9\u6570\u5b57 100 \u6841\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b","title":"\u6570\u5024"},{"location":"api/classes/#\u6587\u5b57\u3084\u6587\u5b57\u5217","text":"\u578b\u540d \u8aac\u660e char8 UTF-8 \u306e 1 \u8981\u7d20\uff08 char \u306e\u5225\u540d\uff09 char16 UTF-16 \u306e 1 \u8981\u7d20\uff08 char16_t \u306e\u5225\u540d\uff09 char32 \u2605 UTF-32 \u306e 1 \u8981\u7d20\uff08 char32_t \u306e\u5225\u540d\uff09 String \u2605 \u6587\u5b57\u5217\u30af\u30e9\u30b9\u3002\u8981\u7d20\u306f char32 StringView \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 FilePath \u2605 \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 FilePathView \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 URL URL \u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 URLView URL \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09","title":"\u6587\u5b57\u3084\u6587\u5b57\u5217"},{"location":"api/classes/#\u30c7\u30fc\u30bf\u69cb\u9020","text":"\u578b\u540d \u8aac\u660e Array<Type, Allocator> \u2605 \u52d5\u7684\u914d\u5217\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::vector \u306e\u7f6e\u304d\u63db\u3048\uff09 DisjointSet<IndexType> Union-Find \u6728 Grid<Type, Allocator> \u2605 \u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217 HashSet<Type, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Set\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_set \u306e\u7f6e\u304d\u63db\u3048\uff09 HashTable<Key, Value, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Map\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_map \u306e\u7f6e\u304d\u63db\u3048\uff09 KDTree<DatasetAdapter> KD \u6728 KDTreeAdapter<Dataset, PointType, ElementType, Dim> KD \u6728 \u306e\u60c5\u5831 None_t Optional \u578b\u3067\u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\uff08 std::nullopt_t \u306e\u5225\u540d\uff09 NonNull<Pointer> \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u305f\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 Optional<Type> \u2605 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u578b\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::optional \u306e\u7f6e\u304d\u63db\u3048\uff09 std::array<Type, size_t> \u2605 \u56fa\u5b9a\u9577\u914d\u5217 StringCompare \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9 StringHash \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9","title":"\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"api/classes/#2d-\u56f3\u5f62","text":"\u578b\u540d \u8aac\u660e Bezier2 \u2605 \u4e8c\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 \u2605 \u4e09\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Circle \u2605 \u5186 Circular \u2605 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Circular3 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 Circular3F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 Circular6 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 Circular6F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 Circular9 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 Circular9F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 CircularBase<Float, int32> \u5186\u5ea7\u6a19 CircularF \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Ellipse \u2605 \u6955\u5186 Float2 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 FloatQuad \u51f8\u56db\u89d2\u5f62\uff08\u8981\u7d20\u306f float \uff09 FloatRect \u4e0a\u4e0b\u5de6\u53f3\u3067\u5b9a\u7fa9\u3059\u308b\u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f float \uff09 Line \u2605 \u7dda\u5206 LineString \u2605 \u9023\u7d9a\u3059\u308b\u7dda\u5206\uff08 Array<Vec2> \u306e\u7f6e\u304d\u63db\u3048\uff09 Mat3x2 \u2605 \u30a2\u30d5\u30a3\u30f3\u5909\u63db\u7528\u306e 3x2 \u884c\u5217 Mat3x3 \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u5909\u63db\u7528\u306e 3x3 \u884c\u5217 MultiPolygon \u591a\u89d2\u5f62\u306e\u96c6\u5408\uff08 Array<Polygon> \u306e\u7f6e\u304d\u63db\u3048\uff09 OffsetCircular \u2605 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 OffsetCircular3 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 OffsetCircular3F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 OffsetCircular6 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 OffsetCircular6F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 OffsetCircular9 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 OffsetCircular9F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 OffsetCircularBase \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19 OffsetCircularF \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Point \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f int32 \uff09 Polygon \u2605 \u591a\u89d2\u5f62\uff08\u7a74\u3082\u6301\u3066\u308b\uff09 Quad \u2605 \u51f8\u56db\u89d2\u5f62 Rect \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f int32 \uff09 RectF \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f double \uff09 RoundRect \u2605 \u89d2\u4e38\u9577\u65b9\u5f62 Shape2D \u2605 \u591a\u89d2\u5f62\u4f5c\u6210\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Size \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f int32 \uff09 \uff08 Point \u306e\u5225\u540d\uff09 SizeF \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f double \uff09 \uff08 Vec2 \u306e\u5225\u540d\uff09 Spline2D \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda Triangle \u2605 \u4e09\u89d2\u5f62 Vec2 \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09","title":"2D \u56f3\u5f62"},{"location":"api/classes/#3d-\u5f62\u72b6","text":"\u578b\u540d \u8aac\u660e Box \u2605 \u5404\u8fba\u304c XYZ \u8ef8\u306b\u5e73\u884c\u306a\u76f4\u65b9\u4f53 Cone \u5186\u9310 Cylinder \u2605 \u5186\u67f1 Cylindrical \u2605 \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<double> \u306e\u5225\u540d\uff09 CylindricalBase<Float> \u5186\u67f1\u5ea7\u6a19 CylindricalF \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<float> \u306e\u5225\u540d\uff09 Disc \u5186\u76e4 Float3 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 Float4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 InfinitePlane \u5e73\u9762 Line3D \u2605 3D \u7dda\u5206 Mat4x4 \u2605 4x4 \u884c\u5217 OrientedBox \u2605 \u5411\u304d\u306e\u3042\u308b\u76f4\u65b9\u4f53 Plane \u2605 \u5927\u304d\u3055\u304c\u6709\u9650\u306e XZ \u5e73\u9762 Quaternion \u2605 \u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3 Ray \u2605 \u30ec\u30a4 Sphere \u2605 \u7403 Spherical \u2605 \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<double> \u306e\u5225\u540d\uff09 SphericalBase<Float> \u7403\u9762\u5ea7\u6a19 SphericalF \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<float> \u306e\u5225\u540d\uff09 Triangle3D 3D \u4e09\u89d2\u5f62 Vec3 \u2605 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 Vec4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 ViewFrustum \u8996\u9310\u53f0","title":"3D \u5f62\u72b6"},{"location":"api/classes/#\u8272","text":"\u578b\u540d \u8aac\u660e Color \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f uint8 \uff09 ColorF \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f double \uff09 ColormapType \u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u306e\u7a2e\u985e ColorOption \u8272\u7a7a\u9593\u306e\u8a2d\u5b9a HSV \u2605 HSVA \u30ab\u30e9\u30fc","title":"\u8272"},{"location":"api/classes/#\u6642\u9593\u306e\u5358\u4f4d","text":"\u578b\u540d \u8aac\u660e Days \u6642\u9593\uff08\u65e5\uff09\uff08\u6574\u6570\uff09 DaysF \u6642\u9593\uff08\u65e5\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Hours \u6642\u9593\uff08\u6642\uff09\uff08\u6574\u6570\uff09 HoursF \u6642\u9593\uff08\u6642\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Minutes \u6642\u9593\uff08\u5206\uff09\uff08\u6574\u6570\uff09 MinutesF \u6642\u9593\uff08\u5206\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Seconds \u6642\u9593\uff08\u79d2\uff09\uff08\u6574\u6570\uff09 SecondsF \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Milliseconds \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6574\u6570\uff09 MillisecondsF \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Microseconds \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6574\u6570\uff09 MicrosecondsF \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Nanoseconds \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6574\u6570\uff09 NanosecondsF \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Duration \u2605 \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09\uff08 SecondsF \u306e\u5225\u540d\uff09","title":"\u6642\u9593\u306e\u5358\u4f4d"},{"location":"api/classes/#\u30a8\u30e9\u30fc","text":"\u578b\u540d \u8aac\u660e BadOptionalAccess \u7121\u52b9\u306a Optional \u3078\u306e\u30a2\u30af\u30bb\u30b9\u30a8\u30e9\u30fc EngineError \u30a8\u30f3\u30b8\u30f3\u5185\u90e8\u306e\u30a8\u30e9\u30fc Error \u2605 \u30a8\u30e9\u30fc NotImplementedError \u672a\u5b9f\u88c5\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u305f\u30a8\u30e9\u30fc ParseError \u30d1\u30fc\u30b9\u95a2\u6570\u306e\u30a8\u30e9\u30fc","title":"\u30a8\u30e9\u30fc"},{"location":"api/classes/#\u69d8\u3005\u306a\u30af\u30e9\u30b9","text":"\u578b\u540d \u8aac\u660e ACLineStatus \u96fb\u6e90\u306e\u63a5\u7d9a\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b AdaptiveThresholdMethod \u9069\u5fdc\u7684\u95be\u5024\u51e6\u7406\u306b\u304a\u3044\u3066\u95be\u5024\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b aligned_float4 \u30cd\u30a4\u30c6\u30a3\u30d6\u306e SIMD Float4 \u578b Allocator<Type, size_t> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u5bfe\u5fdc\u30a2\u30ed\u30b1\u30fc\u30bf AnimatedGIFReader GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3046\u30af\u30e9\u30b9 AnimatedGIFWriter GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u51fa\u3057\u3092\u884c\u3046\u30af\u30e9\u30b9 ArcEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f27\u5f62\u72b6\uff09 AssetHandle<AssetType> \u30a2\u30bb\u30c3\u30c8\u30cf\u30f3\u30c9\u30eb AssetID<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetIDWrapper<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetState \u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b AsyncHTTPTask \u975e\u540c\u671f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 AsyncTask<Type> \u975e\u540c\u671f\u51e6\u7406\u30af\u30e9\u30b9\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::future \u306e\u7f6e\u304d\u63db\u3048\uff09 Audio \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30af\u30e9\u30b9 AudioAsset \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8 AudioAssetData \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 AudioFormat \u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b AudioGroup \u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u30aa\u30fc\u30c7\u30a3\u30aa AudioLoopTiming \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30eb\u30fc\u30d7\u4f4d\u7f6e\u6307\u5b9a BasicCamera2D 2D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicCamera3D 3D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicPerlinNoise<Float> Perlin \u30ce\u30a4\u30ba BatteryStatus \u30d0\u30c3\u30c6\u30ea\u30fc\u306e\u6b8b\u91cf\u3092\u8868\u3059\u5217\u6319\u578b BinaryReader \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 BinaryWriter \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 BitmapGlyph \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30b0\u30ea\u30d5 Blend \u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b BlendOp \u30d6\u30ec\u30f3\u30c9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b BlendState \u2605 \u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 Blob \u2605 \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf BorderType \u753b\u50cf\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u6642\u306e\u5883\u754c\u7dda\u306e\u6271\u3044\u3092\u8868\u3059\u5217\u6319\u578b Buffer2D 2D \u63cf\u753b\u30d0\u30c3\u30d5\u30a1 Byte 1 \u30d0\u30a4\u30c8\u3092\u8868\u73fe\u3059\u308b\u578b Camera2D \u2605 2D \u30ab\u30e1\u30e9 Camera2DParameters 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a CameraControl \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b CascadeClassifier Cascade \u306b\u3088\u308b\u753b\u50cf\u5206\u985e\u5668 ChildProcess \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u3068\u7ba1\u7406\u30af\u30e9\u30b9 CircleEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f62\u72b6\uff09 CommonFloat<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonFloat_t<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonVector<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b CommonVector_t<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b ConstantBuffer<Type> \u2605 \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBufferBase \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u8a73\u7d30\u60c5\u5831 ConstantBufferBinding \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 CopyOption \u30d5\u30a1\u30a4\u30eb\u30b3\u30d4\u30fc\u6642\u306e\u52d5\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b CPUInfo CPU \u60c5\u5831 CSV \u2605 CSV \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 CursorStyle \u2605 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3059\u5217\u6319\u578b Date \u2605 \u65e5\u4ed8 DateTime \u2605 \u65e5\u4ed8\u3068\u6642\u523b DayOfWeek \u66dc\u65e5\u3092\u8868\u3059\u5217\u6319\u578b DeadZone \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a2d\u5b9a DeadZoneType \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b DebugCamera3D \u2605 \u30c7\u30d0\u30c3\u30b0\u7528\u306e 3D \u30ab\u30e1\u30e9 DefaultAllocator<Type> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u8003\u616e\u3057\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ed\u30b1\u30fc\u30bf DepthFunc \u30c7\u30d7\u30b9\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u8868\u3059\u5217\u6319\u578b DepthStencilState \u30c7\u30d7\u30b9\u30fb\u30b9\u30c6\u30f3\u30b7\u30eb\u30b9\u30c6\u30fc\u30c8 Deserializer<Reader> \u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 detail::Gamepad_impl \u2605 \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 Gamepad(\u2026) \u306e\u623b\u308a\u5024 detail::XInput_impl \u2605 Xinput \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 XInput(\u2026) \u306e\u623b\u308a\u5024 DirectoryWatcher \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u306e\u76e3\u8996\u30af\u30e9\u30b9 DragItemType \u30c9\u30e9\u30c3\u30b0\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b DragStatus \u30c9\u30e9\u30c3\u30b0\u306e\u72b6\u614b DrawableText \u2605 \u63cf\u753b\u30c6\u30ad\u30b9\u30c8\u3002 font(\u2026) \u306e\u623b\u308a\u5024 DroppedFilePath \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u60c5\u5831 DroppedText \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u60c5\u5831 DynamicMesh \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30e1\u30c3\u30b7\u30e5 DynamicTexture \u2605 \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 EdgePreservingFilterType EdgePreservingFilter \u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Effect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8 Emission2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306b\u304a\u3051\u308b\u653e\u51fa Emoji \u6a19\u6e96\u7d75\u6587\u5b57 EngineOption \u30a8\u30f3\u30b8\u30f3\u306e\u8a2d\u5b9a ESSL OpenGL ES Shading Language \u30d5\u30a1\u30a4\u30eb Exif Exif \u30c7\u30fc\u30bf FFTResult \u2605 FFT \u306e\u7d50\u679c FFTSampleLength FFT \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u8868\u3059\u5217\u6319\u578b FileAction \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b FileChange \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3068\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 FileFilter \u30d5\u30a1\u30a4\u30eb\u62e1\u5f35\u5b50\u30d5\u30a3\u30eb\u30bf FloodFillConnectivity \u753b\u50cf\u5857\u308a\u3064\u3076\u3057\u306e\u9023\u7d50\u6027\u3092\u8868\u3059\u5217\u6319\u578b Font \u2605 \u30d5\u30a9\u30f3\u30c8 FontAsset \u2605 \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8 FontAssetData \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 FontMethod \u2605 \u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b FontStyle \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b FormatData \u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u60c5\u5831\u683c\u7d0d\u30d0\u30c3\u30d5\u30a1 GamepadInfo \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831 GeoJSONBase GeoJSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 GeoJSONFeature GeoJSON Feature \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONFeatureCollection GeoJSON FeatureCollection \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONGeometry GeoJSON Geometry \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONType GeoJSON\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b GLSL \u2605 GLSL \u30d5\u30a1\u30a4\u30eb Glyph \u30b0\u30ea\u30d5 GlyphCluster \u30b0\u30ea\u30d5\u30af\u30e9\u30b9\u30bf GlyphIndex \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30b0\u30ea\u30d5\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08 uint32 \u306e\u5225\u540d\uff09 GlyphInfo \u30b0\u30ea\u30d5\u60c5\u5831 GMInstrument \u2605 General MIDI (GM) \u306b\u304a\u3051\u308b\u697d\u5668\u3092\u8868\u3059\u5217\u6319\u578b GrabCut \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa GrabCutClass \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa\u306b\u304a\u3051\u308b\u80cc\u666f\u3068\u524d\u666f\u3092\u8868\u3059\u5217\u6319\u578b HLSL \u2605 HLSL \u30d5\u30a1\u30a4\u30eb HTMLWriter HTML \u6587\u66f8\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 HTTPAsyncStatus \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u9032\u884c\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b HTTPProgress HTTP \u901a\u4fe1\u306e\u9032\u6357 HTTPResponse HTTP \u30ec\u30b9\u30dd\u30f3\u30b9 HTTPStatusCode HTTP \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b IAddon \u30a2\u30c9\u30aa\u30f3\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAsset \u30a2\u30bb\u30c3\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 IAudioDecoder \u97f3\u58f0\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioEncoder \u97f3\u58f0\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioStream \u52d5\u7684\u66f4\u65b0\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Icon \u6a19\u6e96\u30a2\u30a4\u30b3\u30f3 IEffect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageDecoder \u753b\u50cf\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageEncoder \u753b\u50cf\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Image \u2605 \u753b\u50cf\u30c7\u30fc\u30bf ImageAddressMode \u753b\u50cf\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ImageFormat \u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageInfo \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831 ImagePixelFormat \u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageROI \u753b\u50cf\u30c7\u30fc\u30bf\u5185\u306e\u9818\u57df InfiniteList<Type> \u7121\u9650\u30ea\u30b9\u30c8 INI \u2605 INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d INIKey INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30ad\u30fc INISection INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30bb\u30af\u30b7\u30e7\u30f3 INIValueWrapper INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 Input \u2605 \u5165\u529b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 InputCombination Input \u306e\u7d44\u307f\u5408\u308f\u305b InputDeviceType \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b InputGroup Input \u306e\u7d44\u307f\u5408\u308f\u305b InterpolationAlgorithm \u753b\u50cf\u62e1\u5927\u7e2e\u5c0f\u306e\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b IPv4Address IPv4 \u30a2\u30c9\u30ec\u30b9 IReader Reader \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IScene<State, Data> \u2605 \u30b7\u30fc\u30f3\u7ba1\u7406\u7528\u306e\u30b7\u30fc\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ISteadyClock \u6642\u523b\u63d0\u4f9b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IWriter Writer \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 JoyCon Joy-Con KahanSummation<Float> \u30ab\u30cf\u30f3\u306e\u52a0\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7528\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 KeyEvent \u30ad\u30fc\u5165\u529b\u306e\u8a73\u7d30 KlattTTSParameters Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u8a2d\u5b9a KlattWaveform Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u6ce2\u5f62\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b LanguageCode \u8a00\u8a9e\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Leap::Bone Leap Motion \u306b\u304a\u3051\u308b\u30dc\u30fc\u30f3\u306e\u60c5\u5831 Leap::Connection \u63a5\u7d9a\u3055\u308c\u305f Leap \u30c7\u30d0\u30a4\u30b9\u306e\u30cf\u30f3\u30c9\u30eb Leap::Hand Leap Motion \u306b\u304a\u3051\u308b\u624b\u306e\u60c5\u5831 Leap::TrackingMode Leap Motion \u306b\u304a\u3051\u308b\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b LetterCase \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u8868\u3059\u5217\u6319\u578b LicenseInfo \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831 LineStyle \u7dda\u306e\u30b9\u30bf\u30a4\u30eb ListBoxState \u2605 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u72b6\u614b LogLevel \u51fa\u529b\u3055\u308c\u308b\u30ed\u30b0\u306e\u8a73\u7d30\u5ea6\u3092\u8868\u3059\u5217\u6319\u578b LogType \u30ed\u30b0\u51fa\u529b\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b ManagedScript \u81ea\u52d5\u7ba1\u7406\u3055\u308c\u305f\u30b9\u30af\u30ea\u30d7\u30c8 MatchResults \u6b63\u898f\u8868\u73fe\u306e\u30de\u30c3\u30c1\u7d50\u679c Material 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30de\u30c6\u30ea\u30a2\u30eb MathParser \u6570\u5f0f\u30d1\u30fc\u30b5 MD5Value MD5 MemoryMappedFile \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30af\u30e9\u30b9 MemoryMappedFileView \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 MemoryReader \u30e1\u30e2\u30ea\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryViewReader \u30e1\u30e2\u30ea\u30d3\u30e5\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryWriter \u30e1\u30e2\u30ea\u3078\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 Mesh \u2605 3D \u30e1\u30c3\u30b7\u30e5 MeshData \u2605 3D \u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u30d0\u30c3\u30d5\u30a1\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d0\u30c3\u30d5\u30a1 MeshGlyph \u30e1\u30c3\u30b7\u30e5\u30b0\u30ea\u30d5 MessageBoxResult \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u7d50\u679c\u3092\u8868\u3059\u5217\u6319\u578b MessageBoxStyle \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b Microphone \u2605 \u30de\u30a4\u30af MicrophoneInfo \u30de\u30a4\u30af\u306e\u60c5\u5831 MicrosecClock \u30de\u30a4\u30af\u30ed\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MIDINote MIDI \u30ce\u30fc\u30c8 MillisecClock \u30df\u30ea\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MiniScene<State> \u7c21\u6613\u7248\u306e\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc MixBus \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30df\u30c3\u30af\u30b9\u30d0\u30b9\u756a\u53f7\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_Exists \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_NotFound \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Model \u2605 3D \u30e2\u30c7\u30eb ModelMeshPart 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4\u306e\u69cb\u6210\u8981\u7d20 ModelObject 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4 MonitorInfo \u30e2\u30cb\u30bf\u30fc\u306e\u60c5\u5831 MSDFGlyph MSDF \u65b9\u5f0f\u306e\u30b0\u30ea\u30d5 MSL Metal Shading Language \u30d5\u30a1\u30a4\u30eb\uff08\u672a\u5b9f\u88c5\uff09 MSRenderTexture \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\uff08\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u4ed8\u304d\uff09\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 NamedParameter<Tag, Type> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NamedParameterHelper<Tag> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NativeFilePath OS \u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u8868\u73fe\u578b NavMesh \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMeshConfig \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u306e\u8a2d\u5b9a NormalComputation \u6cd5\u7dda\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b OpenMode \u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b OutlineGlyph \u8f2a\u90ed\u30b0\u30ea\u30d5 Particle2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb ParticleSystem2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2DParameters 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a PerlinNoise Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<double> \u306e\u5225\u540d\uff09 PerlinNoiseF Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<float> \u306e\u5225\u540d\uff09 PhongMaterial Phong \u30e2\u30c7\u30eb\u306e Material PhongMaterialInternal Phong \u30e2\u30c7\u30eb\u306e Material \u306e\u5185\u90e8\u5f62\u5f0f PianoKey \u2605 \u97f3\u540d\u3092\u8868\u3059\u5217\u6319\u578b Pipe \u30d1\u30a4\u30d7\u901a\u4fe1\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b PixelShader \u2605 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 PixelShaderAsset \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 PixelShaderAssetData \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 PlaceHolder_t \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u578b Platform::Windows::HLSLCompileOption HLSL \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 PlayingCard::Card \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u756a\u53f7\u3001\u30b9\u30fc\u30c8\u3001\u88cf\u8868\u306a\u3069\u306e\u30c7\u30fc\u30bf PlayingCard::CardInfo \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u63cf\u753b\u7528\u306e\u60c5\u5831 PlayingCard::Pack \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30af\u30e9\u30b9 PlayingCard::Suit \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u30b9\u30fc\u30c8\uff08\u7d75\u67c4\u306e\u30de\u30fc\u30af\uff09\u3092\u8868\u3059\u5217\u6319\u578b PoissonDisk2D 2D \u30dd\u30ef\u30bd\u30f3\u5206\u5e03\u30af\u30e9\u30b9 PolygonEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u591a\u89d2\u5f62\uff09 PolygonFailureType Polygon \u306e\u5165\u529b\u9802\u70b9\u306e\u691c\u8a3c\u7d50\u679c PolygonGlyph \u591a\u89d2\u5f62\u306b\u3088\u308b\u30b0\u30ea\u30d5 PowerStatus \u30b7\u30b9\u30c6\u30e0\u306e\u96fb\u6e90\u306e\u72b6\u614b ProController Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u306e Gamepad \u30a2\u30c0\u30d7\u30bf ProfilerStat \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u60c5\u5831 QRContent QR \u30b3\u30fc\u30c9\u306e\u30b9\u30ad\u30e3\u30f3\u7d50\u679c QRErrorCorrection QR \u30b3\u30fc\u30c9\u306e\u8aa4\u308a\u8a02\u6b63\u30ec\u30d9\u30eb\u3092\u8868\u3059\u5217\u6319\u578b QRMode QR \u30b3\u30fc\u30c9\u306e\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b QRScanner QR \u30b3\u30fc\u30c9\u306e\u8aad\u307f\u53d6\u308a\u30af\u30e9\u30b9 RDTSCClock CPU \u30b5\u30a4\u30af\u30eb\u6570\u30ab\u30a6\u30f3\u30bf\u30fc RectanglePack \u9577\u65b9\u5f62\u8a70\u8fbc\u307f\u7d50\u679c RectEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u9577\u65b9\u5f62\uff09 RegExp \u6b63\u898f\u8868\u73fe RenderTexture \u2605 \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 ResizeMode \u2605 \u30b7\u30fc\u30f3\u306e\u81ea\u52d5\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ResourceOption \u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u4f7f\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b SamplerState \u2605 \u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SaturatedLinework<TargetShape, URNG> \u96c6\u4e2d\u7dda\u63cf\u753b\u30af\u30e9\u30b9 SceneManager<State, Data> \u2605 \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc ScopedColorAdd2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u52a0\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedColorMul2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u4e57\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader2D 2D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader3D 3D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport2D 2D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport3D 3D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopeGuard<Callback> \u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9 Script \u30b9\u30af\u30ea\u30d7\u30c8 ScriptCompileOption \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b ScriptFunction<Ret(Args\u2026)> \u30b9\u30af\u30ea\u30d7\u30c8\u95a2\u6570 ScriptModule \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30e2\u30b8\u30e5\u30fc\u30eb SDFGlyph SDF \u65b9\u5f0f\u306b\u3088\u308b\u30b0\u30ea\u30d5 Serial \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 Serializer<Writer> \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ShaderGroup \u30b7\u30a7\u30fc\u30c0\u8a00\u8a9e\u306e\u5dee\u3092\u5438\u53ce\u3059\u308b\u30af\u30e9\u30b9 ShaderStage \u30b7\u30a7\u30fc\u30c0\u30b9\u30c6\u30fc\u30b8\u3092\u8868\u3059\u5217\u6319\u578b SIMD_Float4 SIMD \u5bfe\u5fdc Float4 SimpleAnimation \u30ad\u30fc\u30d5\u30ec\u30fc\u30e0\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u88dc\u52a9\u30af\u30e9\u30b9 Sky \u5929\u7a7a\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30f3\u30b8\u30f3\uff08\u5b9f\u9a13\u7684\uff09 SoundFont \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8 SpecialFolder \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3059\u5217\u6319\u578b SplineIndex Spline2D \u4e0a\u306e\u4f4d\u7f6e Step<T, N, S> \u2605 \u30eb\u30fc\u30d7\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Step2D \u2605 2D \u30eb\u30fc\u30d7\u306e\u4e00\u5143\u5316\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Stopwatch \u2605 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Subdivision2D 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30af\u30e9\u30b9 Subdivision2DEdgeType 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u30a8\u30c3\u30b8\u306e\u60c5\u5831 Subdivision2DPointLocation 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u70b9\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5217\u6319\u578b SVG SVG \u30c7\u30fc\u30bf TCPClient TCP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 TCPError TCP \u901a\u4fe1\u306e\u30a8\u30e9\u30fc\u3092\u8868\u3059\u5217\u6319\u578b TCPServer TCP \u30b5\u30fc\u30d0 TCPSessionID TCP \u306e\u30bb\u30c3\u30b7\u30e7\u30f3 ID\uff08 uint64 \u306e\u5225\u540d\uff09 TextEditState \u2605 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u72b6\u614b TextEncoding \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5f62\u5f0f TextInputMode \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u30e2\u30fc\u30c9 TextReader \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TextStyle \u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30bf\u30a4\u30eb Texture \u2605 \u30c6\u30af\u30b9\u30c1\u30e3 TextureAddressMode \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b TextureAsset \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8 TextureAssetData \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 TexturedCircle \u5186\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TextureDesc \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b TexturedQuad \u51f8\u56db\u89d2\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TexturedRoundRect \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u9818\u57df TextureFilter \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf TextureFormat \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 TexturePixelFormat \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b TextureRegion \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df TextWriter \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 TimeProfiler \u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30af\u30e9\u30b9 Timer \u30bf\u30a4\u30de\u30fc ToastNotificationID \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e ID\uff08 int64 \u306e\u5225\u540d\uff09 ToastNotificationItem \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u8a2d\u5b9a ToastNotificationState \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b Transformer2D \u2605 2D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transformer3D 3D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transition \u5024\u306e\u9077\u79fb\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 TriangleIndex \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint16 \uff09 TriangleIndex32 \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint32 \uff09 Typeface \u2605 \u6a19\u6e96\u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Uncopyable \u30b3\u30d4\u30fc\u7981\u6b62 Mixin UnderlineStyle \u4e0b\u7dda\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b unique_resource \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7834\u68c4\u6642\u306b\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30ea\u30fc\u30bf\u3092\u547c\u3076 RAII \u30e9\u30c3\u30d1\u30fc UserAction \u2605 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b UTF16toUTF32_Converter UTF-8 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF16_Converter UTF-16 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF8_Converter UTF-32 \u304b\u3089 UTF-8 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF8toUTF32_Converter UTF-32 \u304b\u3089 UTF-16 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UUIDValue UUID VariableSpeedStopwatch \u901f\u5ea6\u3092\u5909\u66f4\u53ef\u80fd\u306a\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Vertex2D 2D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf Vertex3D 3D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf VertexShader \u2605 \u9802\u70b9\u30b7\u30a7\u30fc\u30c0 VertexShaderAsset \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 VertexShaderAssetData \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 VideoReader \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 VideoTexture \u52d5\u753b\u3092 Texture \u306e\u3088\u3046\u306b\u6271\u3048\u308b\u30af\u30e9\u30b9 VideoWriter \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 VoronoiFacet \u30dc\u30ed\u30ce\u30a4 Facets Wave \u2605 \u97f3\u58f0\u6ce2\u5f62\u30c7\u30fc\u30bf WaveSample \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb WaveSampleS16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb Webcam \u2605 Web \u30ab\u30e1\u30e9 WebcamInfo Web \u30ab\u30e1\u30e9\u306e\u60c5\u5831 WGSL WebGPU Shading Language \u30d5\u30a1\u30a4\u30eb WindowState \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u72b6\u614b WindowStyle \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b X86Features CPU \u306e\u5bfe\u5fdc\u547d\u4ee4\u30bb\u30c3\u30c8 XInputVibration XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30d0\u30a4\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a XMLElement XML \u306e\u8981\u7d20 XMLReader XML \u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 YesNo<Tag> YesNo \u7528\u306e\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ZIPReader ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9","title":"\u69d8\u3005\u306a\u30af\u30e9\u30b9"},{"location":"api/classes/#\u4e71\u6570\u3068\u5206\u5e03","text":"\u578b\u540d \u8aac\u660e BernoulliDistribution \u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u30af\u30e9\u30b9 DefaultRNG \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::SFMT19937_64 \u306e\u5225\u540d\uff09 DiscreteDistribution \u78ba\u7387\u5206\u5e03\u3092\u751f\u6210\u3059\u308b\u30af\u30e9\u30b9 HardwareRNG \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u3088\u308b\u975e\u6c7a\u5b9a\u7684\u4e71\u6570\u751f\u6210\u5668 NormalDistribution \u6b63\u898f\u5206\u5e03\u30af\u30e9\u30b9 PRNG::SFMT19937_64 SIMD-oriented Fast Mersenne Twister \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::SplitMix64 SplitMix64 \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128PlusPlus xoroshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128StarStar xoroshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128PlusPlus xoshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128StarStar xoshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256Plus xoshiro256+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256PlusPlus xoshiro256++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256StarStar xoshiro256** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 SmallRNG \u7701\u30b5\u30a4\u30ba\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::Xoshiro256PlusPlus \u306e\u5225\u540d\uff09 UniformDistribution \u6574\u6570\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u4f7f\u3048\u308b\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformIntDistribution \u6574\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformRealDistribution \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9","title":"\u4e71\u6570\u3068\u5206\u5e03"},{"location":"api/classes/#2d-\u7269\u7406\u6f14\u7b97","text":"\u578b\u540d \u8aac\u660e P2Body \u2605 \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u306b\u5b58\u5728\u3059\u308b\u7269\u4f53\u306e 1 \u5358\u4f4d\u30020 \u500b\u4ee5\u4e0a\uff08\u901a\u5e38\u306f 1 \u500b\u4ee5\u4e0a\uff09\u306e\u90e8\u54c1\uff08 P2Shape \uff09\u304b\u3089\u69cb\u6210\u3055\u308c\u308b P2BodyID \u7269\u4f53 P2Body \u306b\u4e0e\u3048\u3089\u308c\u308b\u4e00\u610f\u306e ID \u306e\u578b\uff08 uint32 \u306e\u5225\u540d\uff09 P2BodyType \u2605 \u7269\u4f53\u306e\u7a2e\u985e\u306b\u95a2\u3059\u308b\u5217\u6319\u578b P2Circle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u5186\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Collision 2 \u3064\u306e\u7269\u4f53\u306b\u306f\u305f\u3089\u304f\u5168\u3066\u306e\u63a5\u89e6\u306b\u95a2\u3059\u308b\u60c5\u5831\u3067\u3001\u6700\u5927 2 \u3064\u306e P2Contact \u3092\u6301\u3064 P2Contact 2 \u3064\u306e\u7269\u4f53\u306b\u767a\u751f\u3057\u305f\u885d\u7a81\u306b\u95a2\u3059\u308b\u60c5\u5831 P2ContactPair 2 \u3064\u306e\u7269\u4f53\u304c\u63a5\u89e6\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u305d\u308c\u3089\u306e ID (P2BodyID) \u306e\u30da\u30a2 P2DistanceJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u8ddd\u96e2\u30b8\u30e7\u30a4\u30f3\u30c8 P2Filter \u90e8\u54c1\uff08 P2Shape \uff09\u306b\u30ab\u30c6\u30b4\u30ea\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3057\u3001\u7279\u5b9a\u306e\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6301\u3064\u90e8\u54c1\u3068\u5e72\u6e09\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b P2Line \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2LineString \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9023\u7d9a\u3057\u305f\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Material \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u6750\u8cea\u3092\u5b9a\u7fa9\u3059\u308b P2MouseJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30de\u30a6\u30b9\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30d4\u30dc\u30c3\u30c8\u30b8\u30e7\u30a4\u30f3\u30c8 P2Polygon \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u591a\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Quad \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u51f8\u56db\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Rect \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Shape \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 P2ShapeType \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u5f62\u72b6\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b P2SliderJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30b9\u30e9\u30a4\u30c0\u30fc\u30b8\u30e7\u30a4\u30f3\u30c8 P2Triangle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u4e09\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2WheelJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30db\u30a4\u30fc\u30eb\u30b8\u30e7\u30a4\u30f3\u30c8 P2World \u2605 \u7269\u7406\u6f14\u7b97\u3092\u884c\u3046\u30ef\u30fc\u30eb\u30c9","title":"2D \u7269\u7406\u6f14\u7b97"},{"location":"api/classes/#json-\u30c7\u30fc\u30bf","text":"\u578b\u540d \u8aac\u660e JSON \u2605 JSON \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 JSONArrayView JSON \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc JSONConstIterator JSON const \u30a4\u30c6\u30ec\u30fc\u30bf JSONItem JSON \u306e\u8981\u7d20 JSONIterationProxy JSON \u30a4\u30c6\u30ec\u30fc\u30bf\u88dc\u52a9\u30af\u30e9\u30b9 JSONIterator JSON \u30a4\u30c6\u30ec\u30fc\u30bf JSONValueType JSON \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b","title":"JSON \u30c7\u30fc\u30bf"},{"location":"api/classes/#toml-\u30c7\u30fc\u30bf","text":"\u578b\u540d \u8aac\u660e TOMLArrayIterator TOML \u306e\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLArrayView TOML \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLReader \u2605 TOML \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TOMLTableArrayIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableArrayView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLTableIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableMember TOML \u306e\u30c6\u30fc\u30d6\u30eb\u30e1\u30f3\u30d0 TOMLTableView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30d3\u30e5\u30fc TOMLValue TOML \u306e\u8981\u7d20 TOMLValueType TOML \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b","title":"TOML \u30c7\u30fc\u30bf"},{"location":"api/classes/#\u753b\u50cf\u30b3\u30fc\u30c7\u30c3\u30af","text":"\u578b\u540d \u8aac\u660e BMPDecoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 BMPEncoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 GIFDecoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 GIFEncoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 JPEGDecoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 JPEGEncoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGDecoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PNGEncoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGFilter PNG \u5727\u7e2e\u6642\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u8868\u3059\u5217\u6319\u578b PPMDecoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PPMEncoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PPMType PPM \u753b\u50cf\u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b SVGDecoder SVG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGADecoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGAEncoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 TIFFDecoder TIFF \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPDecoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPEncoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WebPMethod WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b","title":"\u753b\u50cf\u30b3\u30fc\u30c7\u30c3\u30af"},{"location":"api/classes/#\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af","text":"\u578b\u540d \u8aac\u660e AACDecoder AAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 AIFFDecoder AIFF \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 FLACDecoder FLAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MIDIDecoder MIDI \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MP3Decoder MP3 \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisDecoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisEncoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 OpusDecoder Opus \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEDecoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEEncoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WAVEFormat WAVE \u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b WMADecoder WMA \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0","title":"\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af"},{"location":"community/community/","text":"Community \u00b6 1. Discord & Slack \u00b6 Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3082\u3042\u308a\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u52dd\u624b\u306b\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002\u73fe\u5728 Discord \u3068 Slack \u5408\u308f\u305b\u3066 700 \u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002 Join Siv3D Discord Join Siv3D Slack 2. Dev-day (\u5b9f\u88c5\u4f1a: Jissoukai) \u00b6 Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001Siv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u958b\u50ac\u5834\u6240\uff08\u30aa\u30f3\u30e9\u30a4\u30f3\uff09: Discord Siv3D Server Dev-day (Jissoukai) \u6bce\u6708 1\uff5e2 \u56de\u958b\u50ac 3. Lectures \u00b6 \u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002 Siv3D Lectures 4. OpenSiv3D Challenge \u00b6 Siv3D \u306e\u65b0\u6a5f\u80fd\u3092\u4f5c\u308b\u3044\u304f\u3064\u304b\u306e\u30c1\u30e3\u30ec\u30f3\u30b8\u8ab2\u984c\u306e\u4e2d\u304b\u3089\u597d\u304d\u306a\u3082\u306e\u3092\u9078\u3073\u3001Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u5185\u306e\u5c02\u7528\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u53c2\u52a0\u3057\u3001\u30e1\u30f3\u30d0\u30fc\u3069\u3046\u3057\u5354\u529b or \u7af6\u4e89\u3057\u306a\u304c\u3089\u5b9f\u88c5\u306e\u5b8c\u6210\u3092\u76ee\u6307\u3059\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\u512a\u5148\u7684\u306a\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u3084\u5b9f\u88c5\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u306a\u3069\u3001\u6280\u8853\u30b5\u30dd\u30fc\u30c8\u3092\u53d7\u3051\u3089\u308c\u307e\u3059\u3002 OpenSiv3D Challenge 2021 5. Twitter \u00b6 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #Siv3D \u3084 #OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 6. GitHub \u00b6 \u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues 7. BBS \u00b6 \u533f\u540d\u3067\u8cea\u554f\u3092\u6295\u7a3f\u3067\u304d\u308b\u65e7\u5f0f\u306e\u63b2\u793a\u677f\u3067\u3059\u3002\u5de1\u56de\u983b\u5ea6\u304c\u4f4e\u3044\u306e\u3067 Slack \u3084 Twitter \u3088\u308a\u3082\u56de\u7b54\u304c\u4ed8\u304f\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"Community"},{"location":"community/community/#community","text":"","title":"Community"},{"location":"community/community/#1-discord--slack","text":"Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3082\u3042\u308a\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u52dd\u624b\u306b\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002\u73fe\u5728 Discord \u3068 Slack \u5408\u308f\u305b\u3066 700 \u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002 Join Siv3D Discord Join Siv3D Slack","title":"1. Discord &amp; Slack"},{"location":"community/community/#2-dev-day-\u5b9f\u88c5\u4f1a-jissoukai","text":"Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001Siv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u958b\u50ac\u5834\u6240\uff08\u30aa\u30f3\u30e9\u30a4\u30f3\uff09: Discord Siv3D Server Dev-day (Jissoukai) \u6bce\u6708 1\uff5e2 \u56de\u958b\u50ac","title":"2. Dev-day (\u5b9f\u88c5\u4f1a: Jissoukai)"},{"location":"community/community/#3-lectures","text":"\u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002 Siv3D Lectures","title":"3. Lectures"},{"location":"community/community/#4-opensiv3d-challenge","text":"Siv3D \u306e\u65b0\u6a5f\u80fd\u3092\u4f5c\u308b\u3044\u304f\u3064\u304b\u306e\u30c1\u30e3\u30ec\u30f3\u30b8\u8ab2\u984c\u306e\u4e2d\u304b\u3089\u597d\u304d\u306a\u3082\u306e\u3092\u9078\u3073\u3001Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u5185\u306e\u5c02\u7528\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u53c2\u52a0\u3057\u3001\u30e1\u30f3\u30d0\u30fc\u3069\u3046\u3057\u5354\u529b or \u7af6\u4e89\u3057\u306a\u304c\u3089\u5b9f\u88c5\u306e\u5b8c\u6210\u3092\u76ee\u6307\u3059\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\u512a\u5148\u7684\u306a\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u3084\u5b9f\u88c5\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u306a\u3069\u3001\u6280\u8853\u30b5\u30dd\u30fc\u30c8\u3092\u53d7\u3051\u3089\u308c\u307e\u3059\u3002 OpenSiv3D Challenge 2021","title":"4. OpenSiv3D Challenge"},{"location":"community/community/#5-twitter","text":"\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #Siv3D \u3084 #OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22","title":"5. Twitter"},{"location":"community/community/#6-github","text":"\u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues","title":"6. GitHub"},{"location":"community/community/#7-bbs","text":"\u533f\u540d\u3067\u8cea\u554f\u3092\u6295\u7a3f\u3067\u304d\u308b\u65e7\u5f0f\u306e\u63b2\u793a\u677f\u3067\u3059\u3002\u5de1\u56de\u983b\u5ea6\u304c\u4f4e\u3044\u306e\u3067 Slack \u3084 Twitter \u3088\u308a\u3082\u56de\u7b54\u304c\u4ed8\u304f\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"7. BBS"},{"location":"community/dev-day/","text":"OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u81ea\u7531\u306b\u9032\u307f\u307e\u3059\u30022020 \u5e74\u4ee5\u964d\u306f\u30aa\u30f3\u30e9\u30a4\u30f3 (Discord) \u3067\u6bce\u6708\u958b\u50ac\u3057\u3066\u3044\u307e\u3059\u3002 \u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u958b\u50ac\u3055\u308c\u305f\u5b9f\u88c5\u4f1a \u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #42 2020-02-16 \u65e9\u7a32\u7530\u5927\u5b66 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66 \u4e3b\u306a\u6d3b\u52d5\u5185\u5bb9 \u00b6 \u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u3067\u898b\u3064\u3051\u3089\u308c\u307e\u3059\u3002 \u53c2\u52a0\u65b9\u6cd5\u306f\uff1f \u00b6 Discord Siv3D \u30b5\u30fc\u30d0\u30fc \u4e0a\u3067\u958b\u50ac\u3055\u308c\u307e\u3059 \u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8 \u00b6 \u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"Dev-day (Jissoukai)"},{"location":"community/dev-day/#opensiv3d-\u5b9f\u88c5\u4f1a","text":"Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u81ea\u7531\u306b\u9032\u307f\u307e\u3059\u30022020 \u5e74\u4ee5\u964d\u306f\u30aa\u30f3\u30e9\u30a4\u30f3 (Discord) \u3067\u6bce\u6708\u958b\u50ac\u3057\u3066\u3044\u307e\u3059\u3002 \u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u958b\u50ac\u3055\u308c\u305f\u5b9f\u88c5\u4f1a \u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #42 2020-02-16 \u65e9\u7a32\u7530\u5927\u5b66 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66","title":"OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"community/dev-day/#\u4e3b\u306a\u6d3b\u52d5\u5185\u5bb9","text":"\u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u3067\u898b\u3064\u3051\u3089\u308c\u307e\u3059\u3002","title":"\u4e3b\u306a\u6d3b\u52d5\u5185\u5bb9"},{"location":"community/dev-day/#\u53c2\u52a0\u65b9\u6cd5\u306f","text":"Discord Siv3D \u30b5\u30fc\u30d0\u30fc \u4e0a\u3067\u958b\u50ac\u3055\u308c\u307e\u3059","title":"\u53c2\u52a0\u65b9\u6cd5\u306f\uff1f"},{"location":"community/dev-day/#\u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8","text":"\u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8"},{"location":"community/study-meeting/","text":"Siv3D \u52c9\u5f37\u4f1a \u00b6 \u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002 \u904e\u53bb\u306e Siv3D \u52c9\u5f37\u4f1a \u00b6 \u5834\u6240 \u958b\u50ac\u65e5 \u4e3b\u50ac \u4f1a\u5834 \u30aa\u30f3\u30e9\u30a4\u30f3 2022-03-28 Siv3D \u30aa\u30f3\u30e9\u30a4\u30f3 \u5343\u8449 2020-02-21 \u5343\u8449\u5927\u5b66\u96fb\u5b50\u8a08\u7b97\u6a5f\u7814\u7a76\u4f1a\uff08CCS\uff09 \u5343\u8449\u5e02\u751f\u6daf\u5b66\u7fd2\u30bb\u30f3\u30bf\u30fc \u4ed9\u53f0 2020-01-25 \u4ed9\u53f0\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u7814\u7a76\u90e8\u4f1a \u540d\u53d6\u5e02 \u5897\u7530\u516c\u6c11\u9928 \u6c96\u7e04 2019-08-15 \u6c96\u7e04\u9ad8\u5c02 \u6709\u5fd7 \u6c96\u7e04\u9ad8\u5c02 \u9759\u5ca1 2019-03-03 CoderDojo \u9759\u5ca1 \u9759\u5ca1\u5e02\u756a\u753a\u5e02\u6c11\u6d3b\u52d5\u30bb\u30f3\u30bf\u30fc \u77f3\u5ddd 2018-12-08 Siv3D \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 \u9577\u91ce 2018-09-30 \u9577\u91ce\u9ad8\u5c02 \u60c5\u5831\u6280\u8853\u7814\u7a76\u90e8 \u9577\u91ce\u9ad8\u5c02 \u7b51\u6ce2 2018-07-07 \u7b51\u6ce2\u5927\u5b66 Amusement Creators \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 \u5e83\u5cf6 2018-05-12 Hiroshima Student Community (HSC) \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e \u77f3\u5ddd 2017-05-01 \u77f3\u5ddd\u9ad8\u5c02 \u96fb\u5b50\u60c5\u5831\u7814\u7a76\u90e8 \u77f3\u5ddd\u9ad8\u5c02 \u6771\u4eac 2014-11-09 Siv3D \u8305\u5834\u753a Co-Edo \u52c9\u5f37\u4f1a\u3092\u958b\u50ac\u3057\u305f\u3044\u65b9\u3078 \u00b6 DM \u307e\u305f\u306f\u30e1\u30fc\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044\u3002 \u5b66\u6821\u3084\u5730\u57df\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u7121\u6599\u3067\u306e\u8a2a\u554f\u52c9\u5f37\u4f1a \u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059","title":"Lectures"},{"location":"community/study-meeting/#siv3d-\u52c9\u5f37\u4f1a","text":"\u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002","title":"Siv3D \u52c9\u5f37\u4f1a"},{"location":"community/study-meeting/#\u904e\u53bb\u306e-siv3d-\u52c9\u5f37\u4f1a","text":"\u5834\u6240 \u958b\u50ac\u65e5 \u4e3b\u50ac \u4f1a\u5834 \u30aa\u30f3\u30e9\u30a4\u30f3 2022-03-28 Siv3D \u30aa\u30f3\u30e9\u30a4\u30f3 \u5343\u8449 2020-02-21 \u5343\u8449\u5927\u5b66\u96fb\u5b50\u8a08\u7b97\u6a5f\u7814\u7a76\u4f1a\uff08CCS\uff09 \u5343\u8449\u5e02\u751f\u6daf\u5b66\u7fd2\u30bb\u30f3\u30bf\u30fc \u4ed9\u53f0 2020-01-25 \u4ed9\u53f0\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u7814\u7a76\u90e8\u4f1a \u540d\u53d6\u5e02 \u5897\u7530\u516c\u6c11\u9928 \u6c96\u7e04 2019-08-15 \u6c96\u7e04\u9ad8\u5c02 \u6709\u5fd7 \u6c96\u7e04\u9ad8\u5c02 \u9759\u5ca1 2019-03-03 CoderDojo \u9759\u5ca1 \u9759\u5ca1\u5e02\u756a\u753a\u5e02\u6c11\u6d3b\u52d5\u30bb\u30f3\u30bf\u30fc \u77f3\u5ddd 2018-12-08 Siv3D \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 \u9577\u91ce 2018-09-30 \u9577\u91ce\u9ad8\u5c02 \u60c5\u5831\u6280\u8853\u7814\u7a76\u90e8 \u9577\u91ce\u9ad8\u5c02 \u7b51\u6ce2 2018-07-07 \u7b51\u6ce2\u5927\u5b66 Amusement Creators \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 \u5e83\u5cf6 2018-05-12 Hiroshima Student Community (HSC) \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e \u77f3\u5ddd 2017-05-01 \u77f3\u5ddd\u9ad8\u5c02 \u96fb\u5b50\u60c5\u5831\u7814\u7a76\u90e8 \u77f3\u5ddd\u9ad8\u5c02 \u6771\u4eac 2014-11-09 Siv3D \u8305\u5834\u753a Co-Edo","title":"\u904e\u53bb\u306e Siv3D \u52c9\u5f37\u4f1a"},{"location":"community/study-meeting/#\u52c9\u5f37\u4f1a\u3092\u958b\u50ac\u3057\u305f\u3044\u65b9\u3078","text":"DM \u307e\u305f\u306f\u30e1\u30fc\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044\u3002 \u5b66\u6821\u3084\u5730\u57df\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u7121\u6599\u3067\u306e\u8a2a\u554f\u52c9\u5f37\u4f1a \u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059","title":"\u52c9\u5f37\u4f1a\u3092\u958b\u50ac\u3057\u305f\u3044\u65b9\u3078"},{"location":"download/macos/","text":"Getting Started with Siv3D on macOS \u00b6 1. System requirements \u00b6 1.1 System requirements for development \u00b6 Here are the system requirements for OpenSiv3D v0.6.6 programming on macOS. OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel CPU / Apple Silicon (Rosetta mode)* GPU OpenGL 4.1 compatible hardware Output Devices Monitors IDE Xcode 11.3 -13.2 (Big Sur requires Xcode 12.5 - 13.2) Native Apple Silicon support will be added in the future release. You can build and run Siv3D in Rosetta mode 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u5834\u5408 \u4f7f\u7528\u3057\u3066\u3044\u308b macOS \u306e OS \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6700\u65b0\u3067\u306a\u3044\u5834\u5408\u3001App Store \u7d4c\u7531\u3067 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f Apple Developer \u30b5\u30a4\u30c8 \u304b\u3089\u3001Xcode 12.4 \u306a\u3069\u904e\u53bb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Xcode \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1.2 System requirements for running Siv3D application \u00b6 This is the environment required to run applications developed with OpenSiv3D v0.6.6 on macOS. You may want to include it in your instructions when distributing your game or application. OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel CPU / Apple Silicon (Rosetta mode)* GPU OpenGL 4.1 compatible hardware Output Devices Monitors Native Apple Silicon support will be added in the future release. You can run Siv3D Application in Rosetta mode 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 2. Downloading the Siv3D project template \u00b6 Download and extract OpenSiv3D v0.6.6 Project Templates for macOS . (On macOS Catalina or later) Move the SDK folder into (User name)/Applications folder to prevent a file access permissions dialog from being displayed when your program launches. Some folders such as (User name)/Desktop and (User name)/Downloads require an access permission for every build. 3. Building your first application with Siv3D \u00b6 Open the project file examples/empty/empty.xcodeproj in Xcode. Open Main.cpp from the project menu Click Run button \u25b6\ufe0f to build and run the application. The running program can be terminated by pressing the Esc key or by closing the window. \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u56de\u907f macOS Catalina \u4ee5\u964d\u3067\u5b9f\u884c\u306e\u305f\u3073\u306b\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u5168\u4f53\u3092\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 (\u30e6\u30fc\u30b6\u540d)/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\uff08root \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001\u30e6\u30fc\u30b6\u30db\u30fc\u30e0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\uff09\u4ee5\u4e0b\u3078\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u56de\u907f\u3067\u304d\u307e\u3059\u3002 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5897\u3084\u3057\u305f\u3044\u5834\u5408\u306f \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3042\u308b empty \u30d5\u30a9\u30eb\u30c0\u3092\u540c\u3058\u968e\u5c64\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5c06\u6765\u63d0\u4f9b\u4e88\u5b9a\u3067\u3059\u3002","title":"macOS"},{"location":"download/macos/#getting-started-with-siv3d-on-macos","text":"","title":"Getting Started with Siv3D on macOS"},{"location":"download/macos/#1-system-requirements","text":"","title":"1. System requirements"},{"location":"download/macos/#11-system-requirements-for-development","text":"Here are the system requirements for OpenSiv3D v0.6.6 programming on macOS. OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel CPU / Apple Silicon (Rosetta mode)* GPU OpenGL 4.1 compatible hardware Output Devices Monitors IDE Xcode 11.3 -13.2 (Big Sur requires Xcode 12.5 - 13.2) Native Apple Silicon support will be added in the future release. You can build and run Siv3D in Rosetta mode 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u5834\u5408 \u4f7f\u7528\u3057\u3066\u3044\u308b macOS \u306e OS \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6700\u65b0\u3067\u306a\u3044\u5834\u5408\u3001App Store \u7d4c\u7531\u3067 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f Apple Developer \u30b5\u30a4\u30c8 \u304b\u3089\u3001Xcode 12.4 \u306a\u3069\u904e\u53bb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Xcode \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1.1 System requirements for development"},{"location":"download/macos/#12-system-requirements-for-running-siv3d-application","text":"This is the environment required to run applications developed with OpenSiv3D v0.6.6 on macOS. You may want to include it in your instructions when distributing your game or application. OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel CPU / Apple Silicon (Rosetta mode)* GPU OpenGL 4.1 compatible hardware Output Devices Monitors Native Apple Silicon support will be added in the future release. You can run Siv3D Application in Rosetta mode 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059","title":"1.2 System requirements for running Siv3D application"},{"location":"download/macos/#2-downloading-the-siv3d-project-template","text":"Download and extract OpenSiv3D v0.6.6 Project Templates for macOS . (On macOS Catalina or later) Move the SDK folder into (User name)/Applications folder to prevent a file access permissions dialog from being displayed when your program launches. Some folders such as (User name)/Desktop and (User name)/Downloads require an access permission for every build.","title":"2. Downloading the Siv3D project template"},{"location":"download/macos/#3-building-your-first-application-with-siv3d","text":"Open the project file examples/empty/empty.xcodeproj in Xcode. Open Main.cpp from the project menu Click Run button \u25b6\ufe0f to build and run the application. The running program can be terminated by pressing the Esc key or by closing the window. \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u56de\u907f macOS Catalina \u4ee5\u964d\u3067\u5b9f\u884c\u306e\u305f\u3073\u306b\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u5168\u4f53\u3092\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 (\u30e6\u30fc\u30b6\u540d)/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\uff08root \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001\u30e6\u30fc\u30b6\u30db\u30fc\u30e0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\uff09\u4ee5\u4e0b\u3078\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u56de\u907f\u3067\u304d\u307e\u3059\u3002 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5897\u3084\u3057\u305f\u3044\u5834\u5408\u306f \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3042\u308b empty \u30d5\u30a9\u30eb\u30c0\u3092\u540c\u3058\u968e\u5c64\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5c06\u6765\u63d0\u4f9b\u4e88\u5b9a\u3067\u3059\u3002","title":"3. Building your first application with Siv3D"},{"location":"download/ubuntu/","text":"Getting Started with Siv3D on Ubuntu \u00b6 1. System requirements \u00b6 Here are the system requirements for OpenSiv3D v0.6.6 programming on Ubuntu. OS Ubuntu 20.04 LTS / Ubuntu 22.04 LTS CPU Intel / AMD CPU GPU OpenGL 4.1 compatible hardware Output Devices Monitors Compilers GCC 9.3.0 (+ Boost 1.71.0) / GCC 11.2 (+ Boost 1.74.0) / Clang 14.0.0 (+ Boost 1.74.0) \u975e\u516c\u5f0f\u306e ARM \u5bfe\u5fdc\u7248\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #linux \u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u3054\u89a7\u304f\u3060\u3055\u3044 2. Getting the latest source code from the official OpenSiv3D repository \u00b6 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002 3. Building the Siv3D library and the sample application \u00b6 \u6b21\u3092\u53c2\u8003\u306b\u3001\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3084\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L26-L49 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u3001 libSiv3D.a \u3092\u4f5c\u6210\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L51-L60 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L65 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L67-L76 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e Main.cpp \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300c\u3059\u3050\u7d42\u4e86\u3059\u308b\u7a7a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306a\u306e\u3067\u3001\u4f55\u3082\u9762\u767d\u3044\u3082\u306e\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\u6b21\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 # include <Siv3D.hpp> // OpenSiv3D v0.6.6 void Main () { // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; // \u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new emoji font const Font emojiFont { 60 , Typeface :: ColorEmoji }; // `font` \u304c\u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b | Set emojiFont as a fallback font . addFallback ( emojiFont ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an image file const Texture texture { U \"example/windmill.png\" }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; // \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b\u5ea7\u6a19 | Coordinates of the emoji Vec2 emojiPos { 300 , 150 }; // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306b\u30c7\u30d0\u30c3\u30b0\u51fa\u529b | Print a text Print << U \"Push [A] key\" ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u30b5\u30a4\u30ba\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u7d75\u6587\u5b57\u3092\u63cf\u304f | Draw a texture with animated size emoji . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( emojiPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); // \u3082\u3057 [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 | When [A] key is down if ( KeyA . down ()) { // \u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30d0\u30c3\u30b0\u8868\u793a | Print a randomly selected text Print << Sample ({ U \"Hello!\" , U \"\u3053\u3093\u306b\u3061\u306f\" , U \"\u4f60\u597d\" , U \"\uc548\ub155\ud558\uc138\uc694?\" }); } // \u3082\u3057 [Button] \u304c\u62bc\u3055\u308c\u305f\u3089 | When [Button] is pushed if ( SimpleGUI :: Button ( U \"Button\" , Vec2 { 640 , 40 })) { // \u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u5ea7\u6a19\u3092\u79fb\u52d5 // Move the coordinates to a random position in the screen emojiPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Ubuntu"},{"location":"download/ubuntu/#getting-started-with-siv3d-on-ubuntu","text":"","title":"Getting Started with Siv3D on Ubuntu"},{"location":"download/ubuntu/#1-system-requirements","text":"Here are the system requirements for OpenSiv3D v0.6.6 programming on Ubuntu. OS Ubuntu 20.04 LTS / Ubuntu 22.04 LTS CPU Intel / AMD CPU GPU OpenGL 4.1 compatible hardware Output Devices Monitors Compilers GCC 9.3.0 (+ Boost 1.71.0) / GCC 11.2 (+ Boost 1.74.0) / Clang 14.0.0 (+ Boost 1.74.0) \u975e\u516c\u5f0f\u306e ARM \u5bfe\u5fdc\u7248\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #linux \u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u3054\u89a7\u304f\u3060\u3055\u3044","title":"1. System requirements"},{"location":"download/ubuntu/#2-getting-the-latest-source-code-from-the-official-opensiv3d-repository","text":"OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002","title":"2. Getting the latest source code from the official OpenSiv3D repository"},{"location":"download/ubuntu/#3-building-the-siv3d-library-and-the-sample-application","text":"\u6b21\u3092\u53c2\u8003\u306b\u3001\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3084\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L26-L49 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u3001 libSiv3D.a \u3092\u4f5c\u6210\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L51-L60 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L65 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L67-L76 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e Main.cpp \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300c\u3059\u3050\u7d42\u4e86\u3059\u308b\u7a7a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306a\u306e\u3067\u3001\u4f55\u3082\u9762\u767d\u3044\u3082\u306e\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\u6b21\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 # include <Siv3D.hpp> // OpenSiv3D v0.6.6 void Main () { // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; // \u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new emoji font const Font emojiFont { 60 , Typeface :: ColorEmoji }; // `font` \u304c\u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b | Set emojiFont as a fallback font . addFallback ( emojiFont ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an image file const Texture texture { U \"example/windmill.png\" }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; // \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b\u5ea7\u6a19 | Coordinates of the emoji Vec2 emojiPos { 300 , 150 }; // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306b\u30c7\u30d0\u30c3\u30b0\u51fa\u529b | Print a text Print << U \"Push [A] key\" ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u30b5\u30a4\u30ba\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u7d75\u6587\u5b57\u3092\u63cf\u304f | Draw a texture with animated size emoji . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( emojiPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); // \u3082\u3057 [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 | When [A] key is down if ( KeyA . down ()) { // \u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30d0\u30c3\u30b0\u8868\u793a | Print a randomly selected text Print << Sample ({ U \"Hello!\" , U \"\u3053\u3093\u306b\u3061\u306f\" , U \"\u4f60\u597d\" , U \"\uc548\ub155\ud558\uc138\uc694?\" }); } // \u3082\u3057 [Button] \u304c\u62bc\u3055\u308c\u305f\u3089 | When [Button] is pushed if ( SimpleGUI :: Button ( U \"Button\" , Vec2 { 640 , 40 })) { // \u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u5ea7\u6a19\u3092\u79fb\u52d5 // Move the coordinates to a random position in the screen emojiPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"3. Building the Siv3D library and the sample application"},{"location":"download/web-vs/","text":"Windows + Visual Studio \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9 \u00b6 OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002 2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805 \u00b6 Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"Web (VS)"},{"location":"download/web-vs/#windows--visual-studio-\u3067-siv3d-for-web-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Windows + Visual Studio \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"download/web-vs/#1-\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9","text":"OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002","title":"1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9"},{"location":"download/web-vs/#2-web-\u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805","text":"Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805"},{"location":"download/web-vscode/","text":"Visual Studio Code \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9 \u00b6 OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002 2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805 \u00b6 Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"Web (VSCode)"},{"location":"download/web-vscode/#visual-studio-code-\u3067-siv3d-for-web-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Visual Studio Code \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"download/web-vscode/#1-\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9","text":"OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002","title":"1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9"},{"location":"download/web-vscode/#2-web-\u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805","text":"Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805"},{"location":"download/windows/","text":"Getting Started with Siv3D on Windows \u00b6 1. System requirements \u00b6 1.1 System requirements for development \u00b6 Here are the system requirements for OpenSiv3D v0.6.6 programming on Windows. OS Windows 10 (64-bit) / Windows 11 CPU Intel / AMD CPU Output Devices Monitors and speakers IDE Microsoft Visual C++ 2022 17.4 (Install \"Desktop development with C++\" from the Visual Studio Installer) Visual Studio \u306e\u30a8\u30c7\u30a3\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066 Windows 10, Windows 11 \u306e\u30d1\u30bd\u30b3\u30f3\u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u5834\u5408\u306f \u300cVisual Studio Community 2022\uff08\u30d3\u30b8\u30e5\u30a2\u30eb\u30fb\u30b9\u30bf\u30b8\u30aa\u30fb\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 2022\uff09\u300d \u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306f\u4e16\u754c\u4e2d\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u8005\u304c\u4f7f\u3046\u300cVisual Studio\u300d\u3068\u3044\u3046\u7d71\u5408\u958b\u767a\u74b0\u5883\u306e\u7121\u6599\u7248\u3067\u3059\u3002\u5b66\u751f\u3001\u500b\u4eba\u3001\u5c11\u898f\u6a21\u306e\u958b\u767a\u3067\u3042\u308c\u3070\u3001Visual Studio \u306e\u6709\u6599\u7248\u3068\u540c\u3058\u6a5f\u80fd\u3092\u7121\u6599\u3067\u4f7f\u3048\u307e\u3059\u3002 Visual Studio \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306b\u3064\u3044\u3066 Visual Studio \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30da\u30fc\u30b8 \u304b\u3089 \u300cVisual Studio 2022 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u300d \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3084\u958b\u767a\u30c4\u30fc\u30eb\u3092\u9078\u629e\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u9805\u76ee\u306e\u9078\u629e\u753b\u9762\u304b\u3089 \u300cC++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a\u300d \u3092\u9078\u629e\u3057\u307e\u3059\uff08\u53f3\u5074\u306e\u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u8a73\u7d30\u300d\u306b\u8868\u793a\u3055\u308c\u308b\u9805\u76ee\u306f Visual Studio \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305f\u3081\u3001\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002 \u305d\u306e\u307e\u307e\u53f3\u4e0b\u306e \u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u300d \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u306f\u3058\u307e\u308a\u307e\u3059\u3002 1.2 System requirements for running Siv3D application \u00b6 This is the environment required to run applications developed with OpenSiv3D v0.6.6 on Windows. You may want to include it in your instructions when distributing your game or application. OS Windows 7 SP1 (64-bit) / Windows 8.1 (64-bit) / Windows 10 (64-bit) / Windows 11 CPU Intel / AMD Output Devices Monitors and speakers 2. Installing the Siv3D SDK \u00b6 Download and run OpenSiv3D v0.6.6 Installer for Windows Desktop . \u3069\u3046\u3057\u3066\u3082\u5931\u6557\u3059\u308b\u5834\u5408\u306f \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u5b9f\u884c\u306b\u5931\u6557\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30da\u30fc\u30b8\u306e\u300c(\u88dc\u8db3) SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u300d\u306e\u65b9\u6cd5\u3067 SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 The installer will automatically do the following: Create a SDK folder (The default location is Documents ). Set a user environment variable \"SIV3D_0_6_6\" with the path to the SDK folder. Copy the Visual Studio project template for the Siv3D project (The default locations is Documents/Visual Studio 2022/Templates/ProjectTemplates/ ). Register the uninstaller. If you want to uninstall OpenSiv3D SDK \u306f\u3001\u901a\u5e38\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u69d8\u3001Windows \u306e\u300c\u8a2d\u5b9a\u300d\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 3. Creating a new Siv3D project \u00b6 Lanuch Visual Studio and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project and click OK to create the project. 4. Building your first application with Siv3D \u00b6 After creating a project, a sample code (Main.cpp) will appear. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging . The running program can be terminated by pressing the Esc key or by closing the window. (Appendix) Manually installing the Siv3D SDK \u00b6 If you have trouble with the SDK installer in Windows, you can manually install the Siv3D SDK. SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306e\u624b\u9806 Getting the Siv3D SDK and setting the SDK folder path to the environment variable \u00b6 Download and extract OpenSiv3D_SDK_0.6.6.zip (File size: 88 MB), and place the contents in your documents folder as follows: .../Documents/OpenSiv3D_SDK_0.6.6/addon .../Documents/OpenSiv3D_SDK_0.6.6/include .../Documents/OpenSiv3D_SDK_0.6.6/lib Create a new environment variable SIV3D_0_6_6 and set the path to the SDK folder (the parent folder of the addon/ , include/ , and lib/ folders) Example: If you have placed C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6/include , set C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6 to the environment variable SIV3D_0_6_6 . Deploying the OpenSiv3D project template (ZIP) \u00b6 Visual Studio \u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 OpenSiv3D_0.6.6.zip (\u30b5\u30a4\u30ba: \u7d04 63 MB) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092 \u5c55\u958b\u305b\u305a ZIP \u30d5\u30a1\u30a4\u30eb\u306e\u307e\u307e \u3001Visual Studio 2022 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u4f5c\u6210\u3055\u308c\u308b Visual Studio 2022/Templates/ProjectTemplates/ \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u914d\u7f6e\u3057\u307e\u3059 \u4ee5\u4e0a\u3067\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u624b\u9806\u306f\u5b8c\u4e86\u3067\u3059\u3002\u74b0\u5883\u5909\u6570\u306e\u9069\u7528\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u306b PC \u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001\u672c\u30da\u30fc\u30b8\u306e 3. \u306e\u624b\u9806\u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044","title":"Windows"},{"location":"download/windows/#getting-started-with-siv3d-on-windows","text":"","title":"Getting Started with Siv3D on Windows"},{"location":"download/windows/#1-system-requirements","text":"","title":"1. System requirements"},{"location":"download/windows/#11-system-requirements-for-development","text":"Here are the system requirements for OpenSiv3D v0.6.6 programming on Windows. OS Windows 10 (64-bit) / Windows 11 CPU Intel / AMD CPU Output Devices Monitors and speakers IDE Microsoft Visual C++ 2022 17.4 (Install \"Desktop development with C++\" from the Visual Studio Installer) Visual Studio \u306e\u30a8\u30c7\u30a3\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066 Windows 10, Windows 11 \u306e\u30d1\u30bd\u30b3\u30f3\u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u5834\u5408\u306f \u300cVisual Studio Community 2022\uff08\u30d3\u30b8\u30e5\u30a2\u30eb\u30fb\u30b9\u30bf\u30b8\u30aa\u30fb\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 2022\uff09\u300d \u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306f\u4e16\u754c\u4e2d\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u8005\u304c\u4f7f\u3046\u300cVisual Studio\u300d\u3068\u3044\u3046\u7d71\u5408\u958b\u767a\u74b0\u5883\u306e\u7121\u6599\u7248\u3067\u3059\u3002\u5b66\u751f\u3001\u500b\u4eba\u3001\u5c11\u898f\u6a21\u306e\u958b\u767a\u3067\u3042\u308c\u3070\u3001Visual Studio \u306e\u6709\u6599\u7248\u3068\u540c\u3058\u6a5f\u80fd\u3092\u7121\u6599\u3067\u4f7f\u3048\u307e\u3059\u3002 Visual Studio \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306b\u3064\u3044\u3066 Visual Studio \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30da\u30fc\u30b8 \u304b\u3089 \u300cVisual Studio 2022 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u300d \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3084\u958b\u767a\u30c4\u30fc\u30eb\u3092\u9078\u629e\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u9805\u76ee\u306e\u9078\u629e\u753b\u9762\u304b\u3089 \u300cC++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a\u300d \u3092\u9078\u629e\u3057\u307e\u3059\uff08\u53f3\u5074\u306e\u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u8a73\u7d30\u300d\u306b\u8868\u793a\u3055\u308c\u308b\u9805\u76ee\u306f Visual Studio \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305f\u3081\u3001\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002 \u305d\u306e\u307e\u307e\u53f3\u4e0b\u306e \u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u300d \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u306f\u3058\u307e\u308a\u307e\u3059\u3002","title":"1.1 System requirements for development"},{"location":"download/windows/#12-system-requirements-for-running-siv3d-application","text":"This is the environment required to run applications developed with OpenSiv3D v0.6.6 on Windows. You may want to include it in your instructions when distributing your game or application. OS Windows 7 SP1 (64-bit) / Windows 8.1 (64-bit) / Windows 10 (64-bit) / Windows 11 CPU Intel / AMD Output Devices Monitors and speakers","title":"1.2 System requirements for running Siv3D application"},{"location":"download/windows/#2-installing-the-siv3d-sdk","text":"Download and run OpenSiv3D v0.6.6 Installer for Windows Desktop . \u3069\u3046\u3057\u3066\u3082\u5931\u6557\u3059\u308b\u5834\u5408\u306f \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u5b9f\u884c\u306b\u5931\u6557\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30da\u30fc\u30b8\u306e\u300c(\u88dc\u8db3) SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u300d\u306e\u65b9\u6cd5\u3067 SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 The installer will automatically do the following: Create a SDK folder (The default location is Documents ). Set a user environment variable \"SIV3D_0_6_6\" with the path to the SDK folder. Copy the Visual Studio project template for the Siv3D project (The default locations is Documents/Visual Studio 2022/Templates/ProjectTemplates/ ). Register the uninstaller. If you want to uninstall OpenSiv3D SDK \u306f\u3001\u901a\u5e38\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u69d8\u3001Windows \u306e\u300c\u8a2d\u5b9a\u300d\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"2. Installing the Siv3D SDK"},{"location":"download/windows/#3-creating-a-new-siv3d-project","text":"Lanuch Visual Studio and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project and click OK to create the project.","title":"3. Creating a new Siv3D project"},{"location":"download/windows/#4-building-your-first-application-with-siv3d","text":"After creating a project, a sample code (Main.cpp) will appear. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging . The running program can be terminated by pressing the Esc key or by closing the window.","title":"4. Building your first application with Siv3D"},{"location":"download/windows/#appendix-manually-installing-the-siv3d-sdk","text":"If you have trouble with the SDK installer in Windows, you can manually install the Siv3D SDK. SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306e\u624b\u9806","title":"(Appendix) Manually installing the Siv3D SDK"},{"location":"download/windows/#getting-the-siv3d-sdk-and-setting-the-sdk-folder-path-to-the-environment-variable","text":"Download and extract OpenSiv3D_SDK_0.6.6.zip (File size: 88 MB), and place the contents in your documents folder as follows: .../Documents/OpenSiv3D_SDK_0.6.6/addon .../Documents/OpenSiv3D_SDK_0.6.6/include .../Documents/OpenSiv3D_SDK_0.6.6/lib Create a new environment variable SIV3D_0_6_6 and set the path to the SDK folder (the parent folder of the addon/ , include/ , and lib/ folders) Example: If you have placed C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6/include , set C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6 to the environment variable SIV3D_0_6_6 .","title":"Getting the Siv3D SDK and setting the SDK folder path to the environment variable"},{"location":"download/windows/#deploying-the-opensiv3d-project-template-zip","text":"Visual Studio \u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 OpenSiv3D_0.6.6.zip (\u30b5\u30a4\u30ba: \u7d04 63 MB) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092 \u5c55\u958b\u305b\u305a ZIP \u30d5\u30a1\u30a4\u30eb\u306e\u307e\u307e \u3001Visual Studio 2022 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u4f5c\u6210\u3055\u308c\u308b Visual Studio 2022/Templates/ProjectTemplates/ \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u914d\u7f6e\u3057\u307e\u3059 \u4ee5\u4e0a\u3067\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u624b\u9806\u306f\u5b8c\u4e86\u3067\u3059\u3002\u74b0\u5883\u5909\u6570\u306e\u9069\u7528\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u306b PC \u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001\u672c\u30da\u30fc\u30b8\u306e 3. \u306e\u624b\u9806\u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044","title":"Deploying the OpenSiv3D project template (ZIP)"},{"location":"ja-jp/","text":"\u5275\u9020\u306e\u305f\u3081\u306e C++ \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Siv3D \u00b6 Siv3D (\u30b7\u30d6\u30b9\u30ea\u30fc\u30c7\u30a3\u30fc) \u306f\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092 \u697d\u3057\u304f\u7c21\u5358\u306a C++ \u30b3\u30fc\u30c9 \u3067\u958b\u767a\u3067\u304d\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002MIT \u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u914d\u5e03\u3055\u308c\u3001Windows / macOS / Linux / Web \u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 Siv3D \u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 | v0.6.6 \u00b6 Windows macOS Ubuntu Web \u5411\u3051 Siv3D \u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 (\u8a66\u9a13\u7684) | v0.6.6 \u00b6 for Web (Windows + Visual Studio) for Web (Visual Studio Code) \u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u958b\u767a\u3092\u52b9\u7387\u5316\u3059\u308b\u3001\u5727\u5012\u7684\u306a\u6a5f\u80fd \u00b6 2D / 3D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\uff08\u56f3\u5f62\u3001\u753b\u50cf\u3001\u30c6\u30ad\u30b9\u30c8\u3001\u30a2\u30a4\u30b3\u30f3\u3001\u52d5\u753b\u30013D\u30e2\u30c7\u30eb\u306a\u3069\uff09 \u30aa\u30fc\u30c7\u30a3\u30aa\uff08BGM, \u52b9\u679c\u97f3\u3001\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u306a\u3069\uff09 \u5165\u529b\u30c7\u30d0\u30a4\u30b9\uff08\u30de\u30a6\u30b9\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001Web\u30ab\u30e1\u30e9\u3001\u30de\u30a4\u30af\u3001\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306a\u3069\uff09 \u30a6\u30a3\u30f3\u30c9\u30a6\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af \u753b\u50cf\u51e6\u7406\u3001\u97f3\u58f0\u51e6\u7406\u3001\u7269\u7406\u6f14\u7b97\u3001\u7d4c\u8def\u63a2\u7d22\u3001\u5e7e\u4f55\u306a\u3069\u306e\u8a08\u7b97 \u8c4a\u5bcc\u306a\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30012D / 3D \u30b2\u30fc\u30e0\u3001\u30e1\u30c7\u30a3\u30a2\u30a2\u30fc\u30c8\u3001\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306a\u3069\u306e\u30a2\u30d7\u30ea\u3092\u3001\u77ed\u3044\u30b3\u30fc\u30c9\u3067\u52b9\u7387\u7684\u306b\u958b\u767a\u3067\u304d\u307e\u3059\u3002 Siv3D \u306e\u8c4a\u5bcc\u306a\u6a5f\u80fd\u3092\u8a73\u3057\u304f\u898b\u308b C++ \u30b3\u30fc\u30c9\u3060\u3051\u3067\u3001\u5b8c\u6210\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2 \u00b6 \u6a19\u6e96\u7684\u306a C++ \u306e\u6587\u6cd5\u3068\u3001\u7dbf\u5bc6\u306b\u8a2d\u8a08\u3055\u308c\u305f Siv3D \u306e\u4fbf\u5229\u306a\u578b\u3084\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30a2\u30d7\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3057\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u7c21\u6f54\u306a\u30b3\u30fc\u30c9\u3067\u4e16\u754c\u304c\u52d5\u304d\u59cb\u3081\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a const Texture food { U \"\ud83c\udf7f\" _emoji }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture chick { U \"\ud83d\udc25\" _emoji }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 while ( System :: Update ()) // \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 { Circle { Scene :: Center (), 100 }. draw (); // \u753b\u9762\u306e\u4e2d\u5fc3\u306b\u5186\u3092\u63cf\u304f food . drawAt ( Scene :: Center ()); // \u753b\u9762\u306e\u4e2d\u5fc3\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f chick . drawAt ( Cursor :: Pos ()); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f } } Siv3D \u3092\u4f7f\u3046 7 \u3064\u306e\u7406\u7531 \u00b6 1. \u26a1 \u975e\u5e38\u306b\u77ed\u3044\u30b3\u30fc\u30c9 \u00b6 Siv3D \u306e\u30b3\u30fc\u30c9\u306f\u6700\u77ed 2 \u884c\u3067\u3059\u3002\u63cf\u753b\u3084\u5165\u51fa\u529b\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u95a2\u6570\u3068\u30af\u30e9\u30b9\u304c\u63c3\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u307b\u3068\u3093\u3069\u306f 1 \u3064\u306e .cpp \u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u5b8c\u6210\u3057\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u3001 GitHub \u3084 GitHub Gist \u306a\u3069\u306e\u30b3\u30fc\u30c9\u5171\u6709\u30b5\u30a4\u30c8\u3092\u4f7f\u3063\u3066\u624b\u8efd\u306b\u4fdd\u5b58\u30fb\u30b7\u30a7\u30a2\u3057\u3066\u3001\u4e16\u754c\u4e2d\u306e Siv3D \u30e6\u30fc\u30b6\u3068\u6280\u8853\u3092\u4ea4\u63db\u3057\u3001\u5b66\u3073\u5408\u3044\u307e\u3057\u3087\u3046\u3002 2. \ud83d\udef8 \u6700\u65b0\u306e C++ \u304c\u8eab\u306b\u3064\u304f \u00b6 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea API \u306f\u3001\u6700\u65b0\u306e C++20 \u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001Siv3D \u3092\u4f7f\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3001\u30e2\u30c0\u30f3\u306a C++ \u306e\u66f8\u304d\u65b9\u3084\u30c6\u30af\u30cb\u30c3\u30af\u304c\u81ea\u7136\u3068\u8eab\u306b\u4ed8\u304d\u307e\u3059\u3002Siv3D \u306e\u4f5c\u8005\u306f\u3001\u65e5\u672c\u6700\u5927\u306e\u30b2\u30fc\u30e0\u958b\u767a\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 CEDEC \u3067 \u6700\u65b0 C++ \u306e\u6d3b\u7528\u306b\u95a2\u3059\u308b\u8b1b\u6f14 \u3092\u3057\u305f\u308a\u3001 C++ \u306e\u60c5\u5831\u30dd\u30fc\u30bf\u30eb \u3092\u4f5c\u6210\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u6700\u5148\u7aef\u306e C++ \u306e\u666e\u53ca\u6d3b\u52d5\u306b\u52aa\u3081\u3066\u3044\u307e\u3059\u3002 3. \ud83c\udfec \u5c0f\u3055\u306a\u5b66\u7fd2\u3001\u5927\u304d\u306a\u529b \u00b6 Siv3D \u306f 2,200 \u30d5\u30a1\u30a4\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068 90 \u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u5927\u898f\u6a21\u306a\u30a8\u30f3\u30b8\u30f3\u3067\u3059\u304c\u3001\u5229\u7528\u8005\u306f\u305d\u306e\u30d1\u30ef\u30d5\u30eb\u306a\u6a5f\u80fd\u3092\u3001\u4f7f\u3044\u3084\u3059\u304f\u4e00\u8cab\u3057\u305f Siv3D \u306e API \u3092\u899a\u3048\u308b\u3060\u3051\u3067\u81ea\u5728\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u52c9\u5f37\u306e\u30b3\u30b9\u30c8\u3092\u6e1b\u3089\u3057\u3001\u81ea\u5206\u306e\u4f5c\u308a\u305f\u3044\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5c02\u5ff5\u3067\u304d\u307e\u3059\u3002 4. \u26f0\ufe0f \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9 \u00b6 Siv3D \u306f MIT \u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u3082\u3068 GitHub \u4e0a\u3067\u958b\u767a \u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3044\u3064\u3067\u3082\u5185\u90e8\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u305f\u308a\u3001\u6539\u9020\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u542b\u3081\u3001\u5546\u7528\u5229\u7528\u3092\u59a8\u3052\u308b\u6761\u4ef6\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u958b\u767a\u3057\u305f\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u53ce\u76ca\u306f 100% \u958b\u767a\u8005\u304c\u7372\u5f97\u3067\u304d\u307e\u3059\u3002 5. \ud83d\udee9\ufe0f \u8efd\u91cf\u3067\u8fc5\u901f\u306b\u30b9\u30bf\u30fc\u30c8 \u00b6 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u305f\u3081\u306e OpenSiv3D SDK \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f\u308f\u305a\u304b 120 MB \u3067\u3059\uff08Windows \u7248\uff09\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6570\u30af\u30ea\u30c3\u30af\u3067\u5b8c\u4e86\u3057\u3001Visual Studio \u3092\u8d77\u52d5\u3059\u308c\u3070\u30e1\u30cb\u30e5\u30fc\u306b Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3059\u3050\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002 6. \ud83d\udc97 \u89aa\u5207\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u00b6 Siv3D \u3067\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u3001 Siv3D \u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\u307e\u305f\u3001\u5168\u56fd\u306e\u5b66\u6821\u3084\u5730\u57df\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e \u7121\u6599\u51fa\u5f35\u52c9\u5f37\u4f1a \u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u5b66\u751f\u306b\u306f\u3001Siv3D \u3092\u7df4\u7fd2\u5834\u306b\u3057\u305f\u30b5\u30dd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6bce\u5e74\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 7. \ud83c\udf10 Web \u30d6\u30e9\u30a6\u30b6\u3067\u52d5\u304f \u00b6 \u73fe\u5728\u8a66\u9a13\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b Web \u7248\uff08 OpenSiv3D for Web \uff09\u3092\u4f7f\u3046\u3068\u3001Siv3D \u3067\u4f5c\u3063\u305f C++ \u30a2\u30d7\u30ea\u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u30b9\u30de\u30db\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u3082\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u3088\u308a\u3082\u305f\u304f\u3055\u3093\u306e\u4eba\u306b\u3042\u306a\u305f\u306e\u4f5c\u54c1\u3092\u5c4a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Siv3D \u306e\u30b9\u30dd\u30f3\u30b5\u30fc \u00b6 Siv3D \u306e\u30d3\u30b8\u30e7\u30f3\u306b\u5171\u611f\u3057\u3001\u958b\u767a\u3084\u6539\u5584\u3092\u5fdc\u63f4\u3057\u3066\u304f\u3060\u3055\u308b\u65b9\u306f\u3001Siv3D \u3078\u306e\u30b9\u30dd\u30f3\u30b5\u30fc\uff08\u500b\u4eba\u30fb\u6cd5\u4eba\uff09\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3044\u304f\u3064\u304b\u306e\u7279\u5178\u3082\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002 Siv3D \u306e\u30b9\u30dd\u30f3\u30b5\u30fc Gold Sponsor \u00b6 TOMOAKI12345 CubeSoft, Inc. Silver Sponsor \u00b6 sknjpn Bronze Sponsor \u00b6 \u30a2\u30b2\u30cf\u30de, \ud83d\ude00, minachun, Fuyutsubaki, \ud83d\ude0a, \ud83d\udc1d, \ud83d\udc20, \u91ce\u83dc\u30b8\u30e5\u30fc\u30b9, MawkishWaffle, jacking75, Chris Ohk, IZUNA, qppon, k-sunako, ysaito, \u304a\u304a\u3084\u307e, tumf, \ud83c\udf75, lamuda, \ud83d\udc27 \uff08*\u533f\u540d\u306e\u65b9\u306f\u7d75\u6587\u5b57\uff09 GitHub Sponsors \u3067 Siv3D \u306e\u30b9\u30dd\u30f3\u30b5\u30fc\u306b\u306a\u308b","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#\u5275\u9020\u306e\u305f\u3081\u306e-c-\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af-siv3d","text":"Siv3D (\u30b7\u30d6\u30b9\u30ea\u30fc\u30c7\u30a3\u30fc) \u306f\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092 \u697d\u3057\u304f\u7c21\u5358\u306a C++ \u30b3\u30fc\u30c9 \u3067\u958b\u767a\u3067\u304d\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002MIT \u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u914d\u5e03\u3055\u308c\u3001Windows / macOS / Linux / Web \u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002","title":"\u5275\u9020\u306e\u305f\u3081\u306e C++ \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Siv3D"},{"location":"ja-jp/#\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u958b\u767a\u3092\u52b9\u7387\u5316\u3059\u308b\u5727\u5012\u7684\u306a\u6a5f\u80fd","text":"2D / 3D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\uff08\u56f3\u5f62\u3001\u753b\u50cf\u3001\u30c6\u30ad\u30b9\u30c8\u3001\u30a2\u30a4\u30b3\u30f3\u3001\u52d5\u753b\u30013D\u30e2\u30c7\u30eb\u306a\u3069\uff09 \u30aa\u30fc\u30c7\u30a3\u30aa\uff08BGM, \u52b9\u679c\u97f3\u3001\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u306a\u3069\uff09 \u5165\u529b\u30c7\u30d0\u30a4\u30b9\uff08\u30de\u30a6\u30b9\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001Web\u30ab\u30e1\u30e9\u3001\u30de\u30a4\u30af\u3001\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306a\u3069\uff09 \u30a6\u30a3\u30f3\u30c9\u30a6\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af \u753b\u50cf\u51e6\u7406\u3001\u97f3\u58f0\u51e6\u7406\u3001\u7269\u7406\u6f14\u7b97\u3001\u7d4c\u8def\u63a2\u7d22\u3001\u5e7e\u4f55\u306a\u3069\u306e\u8a08\u7b97 \u8c4a\u5bcc\u306a\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30012D / 3D \u30b2\u30fc\u30e0\u3001\u30e1\u30c7\u30a3\u30a2\u30a2\u30fc\u30c8\u3001\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306a\u3069\u306e\u30a2\u30d7\u30ea\u3092\u3001\u77ed\u3044\u30b3\u30fc\u30c9\u3067\u52b9\u7387\u7684\u306b\u958b\u767a\u3067\u304d\u307e\u3059\u3002 Siv3D \u306e\u8c4a\u5bcc\u306a\u6a5f\u80fd\u3092\u8a73\u3057\u304f\u898b\u308b","title":"\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u958b\u767a\u3092\u52b9\u7387\u5316\u3059\u308b\u3001\u5727\u5012\u7684\u306a\u6a5f\u80fd"},{"location":"ja-jp/#c-\u30b3\u30fc\u30c9\u3060\u3051\u3067\u5b8c\u6210\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2","text":"\u6a19\u6e96\u7684\u306a C++ \u306e\u6587\u6cd5\u3068\u3001\u7dbf\u5bc6\u306b\u8a2d\u8a08\u3055\u308c\u305f Siv3D \u306e\u4fbf\u5229\u306a\u578b\u3084\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30a2\u30d7\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3057\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u7c21\u6f54\u306a\u30b3\u30fc\u30c9\u3067\u4e16\u754c\u304c\u52d5\u304d\u59cb\u3081\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a const Texture food { U \"\ud83c\udf7f\" _emoji }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture chick { U \"\ud83d\udc25\" _emoji }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 while ( System :: Update ()) // \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 { Circle { Scene :: Center (), 100 }. draw (); // \u753b\u9762\u306e\u4e2d\u5fc3\u306b\u5186\u3092\u63cf\u304f food . drawAt ( Scene :: Center ()); // \u753b\u9762\u306e\u4e2d\u5fc3\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f chick . drawAt ( Cursor :: Pos ()); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f } }","title":"C++ \u30b3\u30fc\u30c9\u3060\u3051\u3067\u3001\u5b8c\u6210\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2"},{"location":"ja-jp/#siv3d-\u3092\u4f7f\u3046-7-\u3064\u306e\u7406\u7531","text":"","title":"Siv3D \u3092\u4f7f\u3046 7 \u3064\u306e\u7406\u7531"},{"location":"ja-jp/#1--\u975e\u5e38\u306b\u77ed\u3044\u30b3\u30fc\u30c9","text":"Siv3D \u306e\u30b3\u30fc\u30c9\u306f\u6700\u77ed 2 \u884c\u3067\u3059\u3002\u63cf\u753b\u3084\u5165\u51fa\u529b\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u95a2\u6570\u3068\u30af\u30e9\u30b9\u304c\u63c3\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u307b\u3068\u3093\u3069\u306f 1 \u3064\u306e .cpp \u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u5b8c\u6210\u3057\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u3001 GitHub \u3084 GitHub Gist \u306a\u3069\u306e\u30b3\u30fc\u30c9\u5171\u6709\u30b5\u30a4\u30c8\u3092\u4f7f\u3063\u3066\u624b\u8efd\u306b\u4fdd\u5b58\u30fb\u30b7\u30a7\u30a2\u3057\u3066\u3001\u4e16\u754c\u4e2d\u306e Siv3D \u30e6\u30fc\u30b6\u3068\u6280\u8853\u3092\u4ea4\u63db\u3057\u3001\u5b66\u3073\u5408\u3044\u307e\u3057\u3087\u3046\u3002","title":"1. \u26a1 \u975e\u5e38\u306b\u77ed\u3044\u30b3\u30fc\u30c9"},{"location":"ja-jp/#2--\u6700\u65b0\u306e-c-\u304c\u8eab\u306b\u3064\u304f","text":"Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea API \u306f\u3001\u6700\u65b0\u306e C++20 \u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001Siv3D \u3092\u4f7f\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3001\u30e2\u30c0\u30f3\u306a C++ \u306e\u66f8\u304d\u65b9\u3084\u30c6\u30af\u30cb\u30c3\u30af\u304c\u81ea\u7136\u3068\u8eab\u306b\u4ed8\u304d\u307e\u3059\u3002Siv3D \u306e\u4f5c\u8005\u306f\u3001\u65e5\u672c\u6700\u5927\u306e\u30b2\u30fc\u30e0\u958b\u767a\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 CEDEC \u3067 \u6700\u65b0 C++ \u306e\u6d3b\u7528\u306b\u95a2\u3059\u308b\u8b1b\u6f14 \u3092\u3057\u305f\u308a\u3001 C++ \u306e\u60c5\u5831\u30dd\u30fc\u30bf\u30eb \u3092\u4f5c\u6210\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u6700\u5148\u7aef\u306e C++ \u306e\u666e\u53ca\u6d3b\u52d5\u306b\u52aa\u3081\u3066\u3044\u307e\u3059\u3002","title":"2. \ud83d\udef8 \u6700\u65b0\u306e C++ \u304c\u8eab\u306b\u3064\u304f"},{"location":"ja-jp/#3--\u5c0f\u3055\u306a\u5b66\u7fd2\u5927\u304d\u306a\u529b","text":"Siv3D \u306f 2,200 \u30d5\u30a1\u30a4\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068 90 \u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u5927\u898f\u6a21\u306a\u30a8\u30f3\u30b8\u30f3\u3067\u3059\u304c\u3001\u5229\u7528\u8005\u306f\u305d\u306e\u30d1\u30ef\u30d5\u30eb\u306a\u6a5f\u80fd\u3092\u3001\u4f7f\u3044\u3084\u3059\u304f\u4e00\u8cab\u3057\u305f Siv3D \u306e API \u3092\u899a\u3048\u308b\u3060\u3051\u3067\u81ea\u5728\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u52c9\u5f37\u306e\u30b3\u30b9\u30c8\u3092\u6e1b\u3089\u3057\u3001\u81ea\u5206\u306e\u4f5c\u308a\u305f\u3044\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5c02\u5ff5\u3067\u304d\u307e\u3059\u3002","title":"3. \ud83c\udfec \u5c0f\u3055\u306a\u5b66\u7fd2\u3001\u5927\u304d\u306a\u529b"},{"location":"ja-jp/#4--\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9","text":"Siv3D \u306f MIT \u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u3082\u3068 GitHub \u4e0a\u3067\u958b\u767a \u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3044\u3064\u3067\u3082\u5185\u90e8\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u305f\u308a\u3001\u6539\u9020\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u542b\u3081\u3001\u5546\u7528\u5229\u7528\u3092\u59a8\u3052\u308b\u6761\u4ef6\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u958b\u767a\u3057\u305f\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u53ce\u76ca\u306f 100% \u958b\u767a\u8005\u304c\u7372\u5f97\u3067\u304d\u307e\u3059\u3002","title":"4. \u26f0\ufe0f \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9"},{"location":"ja-jp/#5--\u8efd\u91cf\u3067\u8fc5\u901f\u306b\u30b9\u30bf\u30fc\u30c8","text":"Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u305f\u3081\u306e OpenSiv3D SDK \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f\u308f\u305a\u304b 120 MB \u3067\u3059\uff08Windows \u7248\uff09\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6570\u30af\u30ea\u30c3\u30af\u3067\u5b8c\u4e86\u3057\u3001Visual Studio \u3092\u8d77\u52d5\u3059\u308c\u3070\u30e1\u30cb\u30e5\u30fc\u306b Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3059\u3050\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002","title":"5. \ud83d\udee9\ufe0f \u8efd\u91cf\u3067\u8fc5\u901f\u306b\u30b9\u30bf\u30fc\u30c8"},{"location":"ja-jp/#6--\u89aa\u5207\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","text":"Siv3D \u3067\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u3001 Siv3D \u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\u307e\u305f\u3001\u5168\u56fd\u306e\u5b66\u6821\u3084\u5730\u57df\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e \u7121\u6599\u51fa\u5f35\u52c9\u5f37\u4f1a \u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u5b66\u751f\u306b\u306f\u3001Siv3D \u3092\u7df4\u7fd2\u5834\u306b\u3057\u305f\u30b5\u30dd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6bce\u5e74\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002","title":"6. \ud83d\udc97 \u89aa\u5207\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/#7--web-\u30d6\u30e9\u30a6\u30b6\u3067\u52d5\u304f","text":"\u73fe\u5728\u8a66\u9a13\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b Web \u7248\uff08 OpenSiv3D for Web \uff09\u3092\u4f7f\u3046\u3068\u3001Siv3D \u3067\u4f5c\u3063\u305f C++ \u30a2\u30d7\u30ea\u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u30b9\u30de\u30db\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u3082\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u3088\u308a\u3082\u305f\u304f\u3055\u3093\u306e\u4eba\u306b\u3042\u306a\u305f\u306e\u4f5c\u54c1\u3092\u5c4a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"7. \ud83c\udf10 Web \u30d6\u30e9\u30a6\u30b6\u3067\u52d5\u304f"},{"location":"ja-jp/#siv3d-\u306e\u30b9\u30dd\u30f3\u30b5\u30fc","text":"Siv3D \u306e\u30d3\u30b8\u30e7\u30f3\u306b\u5171\u611f\u3057\u3001\u958b\u767a\u3084\u6539\u5584\u3092\u5fdc\u63f4\u3057\u3066\u304f\u3060\u3055\u308b\u65b9\u306f\u3001Siv3D \u3078\u306e\u30b9\u30dd\u30f3\u30b5\u30fc\uff08\u500b\u4eba\u30fb\u6cd5\u4eba\uff09\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3044\u304f\u3064\u304b\u306e\u7279\u5178\u3082\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002 Siv3D \u306e\u30b9\u30dd\u30f3\u30b5\u30fc","title":"Siv3D \u306e\u30b9\u30dd\u30f3\u30b5\u30fc"},{"location":"ja-jp/acknowledgments/","text":"\u8b1d\u8f9e \u00b6 Siv3D \u306e\u958b\u767a\u306f\u3001\u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb (IPA) \u306b\u3088\u308b \u672a\u8e0fIT\u4eba\u6750\u767a\u6398\u30fb\u80b2\u6210\u4e8b\u696d \u53ca\u3073 \u672a\u8e0f\u30a2\u30c9\u30d0\u30f3\u30b9\u30c8\u4e8b\u696d \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u3092\u6d3b\u7528\u3057\u305f\u30d3\u30b8\u30e5\u30a2\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u958b\u767a\u306f\u3001\u79d1\u5b66\u6280\u8853\u632f\u8208\u6a5f\u69cb (JST) \u6226\u7565\u7684\u5275\u9020\u7814\u7a76\u63a8\u9032\u4e8b\u696d (ACT-I) \u53ca\u3073 \u516c\u76ca\u8ca1\u56e3\u6cd5\u4eba I-O DATA \u8ca1\u56e3 \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u306f \u65e9\u7a32\u7530\u5927\u5b66\u5b9f\u4f53\u60c5\u5831\u5b66\u535a\u58eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u306b\u3088\u308b\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002","title":"\u8b1d\u8f9e"},{"location":"ja-jp/acknowledgments/#\u8b1d\u8f9e","text":"Siv3D \u306e\u958b\u767a\u306f\u3001\u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb (IPA) \u306b\u3088\u308b \u672a\u8e0fIT\u4eba\u6750\u767a\u6398\u30fb\u80b2\u6210\u4e8b\u696d \u53ca\u3073 \u672a\u8e0f\u30a2\u30c9\u30d0\u30f3\u30b9\u30c8\u4e8b\u696d \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u3092\u6d3b\u7528\u3057\u305f\u30d3\u30b8\u30e5\u30a2\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u958b\u767a\u306f\u3001\u79d1\u5b66\u6280\u8853\u632f\u8208\u6a5f\u69cb (JST) \u6226\u7565\u7684\u5275\u9020\u7814\u7a76\u63a8\u9032\u4e8b\u696d (ACT-I) \u53ca\u3073 \u516c\u76ca\u8ca1\u56e3\u6cd5\u4eba I-O DATA \u8ca1\u56e3 \u306e\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002Siv3D \u306f \u65e9\u7a32\u7530\u5927\u5b66\u5b9f\u4f53\u60c5\u5831\u5b66\u535a\u58eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u306b\u3088\u308b\u652f\u63f4\u3092\u53d7\u3051\u307e\u3057\u305f\u3002","title":"\u8b1d\u8f9e"},{"location":"ja-jp/faq/","text":"\u3088\u304f\u3042\u308b\u8cea\u554f \u00b6 1. Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u00b6 2. OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 3. Siv3D \u52c9\u5f37\u4f1a \u00b6 4. \u00b6","title":"\u3088\u304f\u3042\u308b\u8cea\u554f"},{"location":"ja-jp/faq/#\u3088\u304f\u3042\u308b\u8cea\u554f","text":"","title":"\u3088\u304f\u3042\u308b\u8cea\u554f"},{"location":"ja-jp/faq/#1-siv3d-\u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3-slack","text":"","title":"1. Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack"},{"location":"ja-jp/faq/#2-opensiv3d-\u5b9f\u88c5\u4f1a","text":"","title":"2. OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/faq/#3-siv3d-\u52c9\u5f37\u4f1a","text":"","title":"3. Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/faq/#4","text":"","title":"4."},{"location":"ja-jp/features/","text":"Siv3D \u306e\u6a5f\u80fd \u00b6 Siv3D \u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u306e\u4e00\u89a7\u3067\u3059\u3002 \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 \u00b6 \u767a\u5c55\u7684\u306a 2D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 \u57fa\u672c\u7684\u306a 3D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 (Wavefront OBJ, \u3044\u304f\u3064\u304b\u306e\u57fa\u672c\u5f62\u72b6) \u30ab\u30b9\u30bf\u30e0\u9802\u70b9\u30fb\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 (HLSL, GLSL) \u30c6\u30ad\u30b9\u30c8\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0 (Bitmap, SDF, MSDF) \u753b\u50cf\u5f62\u5f0f (PNG, JPEG, BMP, SVG, GIF, Animated GIF, TGA, PPM, WebP, TIFF) Unicode 14.0 \u7d75\u6587\u5b57\u3068 7,000 \u7a2e\u985e\u4ee5\u4e0a\u306e\u30a2\u30a4\u30b3\u30f3 \u753b\u50cf\u51e6\u7406 \u30d3\u30c7\u30aa\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0 \u30aa\u30fc\u30c7\u30a3\u30aa \u00b6 \u97f3\u58f0\u5f62\u5f0f (WAVE, MP3, AAC, OggVorbis, Opus, MIDI, WMA*, FLAC*, AIFF*) \u97f3\u91cf\u3084\u30d1\u30f3\uff0c\u30b9\u30d4\u30fc\u30c9\uff0c\u30d4\u30c3\u30c1\u306e\u8abf\u6574 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f (WAVE, MP3, OggVorbis) \u518d\u751f\u4e2d\u306e\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u6ce2\u5f62\u66f8\u304d\u8fbc\u307f \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\uff0c\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8 \u30eb\u30fc\u30d7 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9 \u30d5\u30a3\u30eb\u30bf\u51e6\u7406 (\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\uff0c\u30cf\u30a4\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf, \u30a8\u30b3\u30fc, \u30ea\u30d0\u30fc\u30d6) FFT \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0 \u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052* \u5165\u529b\u30c7\u30d0\u30a4\u30b9 \u00b6 \u30de\u30a6\u30b9 \u30ad\u30fc\u30dc\u30fc\u30c9 \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \u30a6\u30a7\u30d6\u30ab\u30e1\u30e9 \u30de\u30a4\u30af Joy-Con / Pro Controller XInput \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9* \u30da\u30f3\u30bf\u30d6\u30ec\u30c3\u30c8* Leap Motion* \u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9 \u9ad8 DPI \u30b5\u30dd\u30fc\u30c8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b9\u30bf\u30a4\u30eb\uff08\u30b5\u30a4\u30ba\u5909\u66f4\u3001\u67a0\u7121\u3057\uff09 \u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0 \u30c9\u30e9\u30c3\u30b0 & \u30c9\u30ed\u30c3\u30d7 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9 \u30c8\u30fc\u30b9\u30c8\u901a\u77e5* \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u901a\u4fe1 \u00b6 HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 \u30de\u30eb\u30c1\u30d7\u30ec\u30a4 (Photon SDK) TCP \u901a\u4fe1 \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1 (pipe) \u6570\u5b66 \u00b6 \u30d9\u30af\u30c8\u30eb\u3068\u884c\u5217\u30af\u30e9\u30b9 ( Point , Float2 , Vec2 , Float3 , Vec3 , Float4 , Vec4 , Mat3x2 , Mat3x3 , Mat4x4 , SIMD_Float4 , Quaternion ) 2D \u5f62\u72b6\u30af\u30e9\u30b9 ( Line , Circle , Ellipse , Rect , RectF , Triangle , Quad , RoundRect , Polygon , MultiPolygon , LineString , Spline2D , Bezier2 , Bezier3 ) 3D \u5f62\u72b6\u30af\u30e9\u30b9 ( Plane , InfinitePlane , Sphere , Box , OrientedBox , Ray , Line3D , Triangle3D , ViewFrustum , Disc , Cylinder , Cone ) \u8272\u30af\u30e9\u30b9 ( Color , ColorF , HSV ) \u66f2\u5ea7\u6a19\u7cfb\u30af\u30e9\u30b9 2D / 3D \u4ea4\u5dee\u5224\u5b9a\u30fb\u4ea4\u70b9\u8a08\u7b97 2D / 3D \u5e7e\u4f55\u8a08\u7b97 \u9577\u65b9\u5f62\u8a70\u8fbc\u307f \u5e73\u9762\u7d30\u5206\u5272 \u30ea\u30cb\u30a2\u8272\u7a7a\u9593\u3068\u30ac\u30f3\u30de\u8272\u7a7a\u9593 \u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 \u88dc\u9593\uff0c\u30a4\u30fc\u30b8\u30f3\u30b0\uff0c\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0 \u30d1\u30fc\u30ea\u30f3\u30ce\u30a4\u30ba \u6570\u5f0f\u30d1\u30fc\u30b5 \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 \u62e1\u5f35\u6570\u5024\u578b ( HalfFloat , int128 , uint128 , BigInt , BigFloat ) \u6587\u5b57\u5217\u51e6\u7406 \u00b6 \u6587\u5b57\u5217\u30af\u30e9\u30b9 ( String , StringView ) Unicode \u5909\u63db (UTF-8 / UTF-16 / UTF-32) \u6b63\u898f\u8868\u73fe {fmt} \u30b9\u30bf\u30a4\u30eb\u306e\u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u66f8\u304d CSV / INI / JSON / XML / TOML \u30d1\u30fc\u30b5 CSV / INI / JSON \u51fa\u529b \u305d\u306e\u4ed6 \u00b6 \u57fa\u672c\u7684\u306aGUI (\u30dc\u30bf\u30f3\uff0c\u30b9\u30e9\u30a4\u30c0\u30fc\uff0c\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\uff0c\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\uff0c\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\uff0c\u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\uff0c\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc) 2D \u7269\u7406\u30a8\u30f3\u30b8\u30f3\u306e\u7d71\u5408 (Box2D) \u914d\u5217\u30af\u30e9\u30b9 ( Array , Grid ) Kd-tree Disjoint Set Union \u975e\u540c\u671f\u30d5\u30a1\u30a4\u30eb\u30ed\u30fc\u30c9 \u30c7\u30fc\u30bf\u5727\u7e2e (zlib, Zstandard) \u30b7\u30fc\u30f3\u9077\u79fb \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76e3\u8996 QR \u30b3\u30fc\u30c9 GeoJSON \u65e5\u4ed8\u3068\u6642\u523b \u6642\u9593\u8a08\u6e2c \u30ed\u30ae\u30f3\u30b0 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba UUID \u5b50\u30d7\u30ed\u30bb\u30b9\u7ba1\u7406 \u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9 \u96fb\u6e90\u7ba1\u7406 \u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0 (AngelScript) \uff08*\u4e00\u90e8\u306e\u6a5f\u80fd\u306f\u7279\u5b9a\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u307f\u3067\u306e\u30b5\u30dd\u30fc\u30c8\u3067\u3059\uff09","title":"Siv3D \u306e\u6a5f\u80fd"},{"location":"ja-jp/features/#siv3d-\u306e\u6a5f\u80fd","text":"Siv3D \u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u306e\u4e00\u89a7\u3067\u3059\u3002","title":"Siv3D \u306e\u6a5f\u80fd"},{"location":"ja-jp/features/#\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9","text":"\u767a\u5c55\u7684\u306a 2D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 \u57fa\u672c\u7684\u306a 3D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 (Wavefront OBJ, \u3044\u304f\u3064\u304b\u306e\u57fa\u672c\u5f62\u72b6) \u30ab\u30b9\u30bf\u30e0\u9802\u70b9\u30fb\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 (HLSL, GLSL) \u30c6\u30ad\u30b9\u30c8\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0 (Bitmap, SDF, MSDF) \u753b\u50cf\u5f62\u5f0f (PNG, JPEG, BMP, SVG, GIF, Animated GIF, TGA, PPM, WebP, TIFF) Unicode 14.0 \u7d75\u6587\u5b57\u3068 7,000 \u7a2e\u985e\u4ee5\u4e0a\u306e\u30a2\u30a4\u30b3\u30f3 \u753b\u50cf\u51e6\u7406 \u30d3\u30c7\u30aa\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0","title":"\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9"},{"location":"ja-jp/features/#\u30aa\u30fc\u30c7\u30a3\u30aa","text":"\u97f3\u58f0\u5f62\u5f0f (WAVE, MP3, AAC, OggVorbis, Opus, MIDI, WMA*, FLAC*, AIFF*) \u97f3\u91cf\u3084\u30d1\u30f3\uff0c\u30b9\u30d4\u30fc\u30c9\uff0c\u30d4\u30c3\u30c1\u306e\u8abf\u6574 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f (WAVE, MP3, OggVorbis) \u518d\u751f\u4e2d\u306e\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u6ce2\u5f62\u66f8\u304d\u8fbc\u307f \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\uff0c\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8 \u30eb\u30fc\u30d7 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9 \u30d5\u30a3\u30eb\u30bf\u51e6\u7406 (\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\uff0c\u30cf\u30a4\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf, \u30a8\u30b3\u30fc, \u30ea\u30d0\u30fc\u30d6) FFT \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0 \u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052*","title":"\u30aa\u30fc\u30c7\u30a3\u30aa"},{"location":"ja-jp/features/#\u5165\u529b\u30c7\u30d0\u30a4\u30b9","text":"\u30de\u30a6\u30b9 \u30ad\u30fc\u30dc\u30fc\u30c9 \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \u30a6\u30a7\u30d6\u30ab\u30e1\u30e9 \u30de\u30a4\u30af Joy-Con / Pro Controller XInput \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9* \u30da\u30f3\u30bf\u30d6\u30ec\u30c3\u30c8* Leap Motion*","title":"\u5165\u529b\u30c7\u30d0\u30a4\u30b9"},{"location":"ja-jp/features/#\u30a6\u30a3\u30f3\u30c9\u30a6","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9 \u9ad8 DPI \u30b5\u30dd\u30fc\u30c8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b9\u30bf\u30a4\u30eb\uff08\u30b5\u30a4\u30ba\u5909\u66f4\u3001\u67a0\u7121\u3057\uff09 \u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0 \u30c9\u30e9\u30c3\u30b0 & \u30c9\u30ed\u30c3\u30d7 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9 \u30c8\u30fc\u30b9\u30c8\u901a\u77e5*","title":"\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/features/#\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u901a\u4fe1","text":"HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 \u30de\u30eb\u30c1\u30d7\u30ec\u30a4 (Photon SDK) TCP \u901a\u4fe1 \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1 (pipe)","title":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u901a\u4fe1"},{"location":"ja-jp/features/#\u6570\u5b66","text":"\u30d9\u30af\u30c8\u30eb\u3068\u884c\u5217\u30af\u30e9\u30b9 ( Point , Float2 , Vec2 , Float3 , Vec3 , Float4 , Vec4 , Mat3x2 , Mat3x3 , Mat4x4 , SIMD_Float4 , Quaternion ) 2D \u5f62\u72b6\u30af\u30e9\u30b9 ( Line , Circle , Ellipse , Rect , RectF , Triangle , Quad , RoundRect , Polygon , MultiPolygon , LineString , Spline2D , Bezier2 , Bezier3 ) 3D \u5f62\u72b6\u30af\u30e9\u30b9 ( Plane , InfinitePlane , Sphere , Box , OrientedBox , Ray , Line3D , Triangle3D , ViewFrustum , Disc , Cylinder , Cone ) \u8272\u30af\u30e9\u30b9 ( Color , ColorF , HSV ) \u66f2\u5ea7\u6a19\u7cfb\u30af\u30e9\u30b9 2D / 3D \u4ea4\u5dee\u5224\u5b9a\u30fb\u4ea4\u70b9\u8a08\u7b97 2D / 3D \u5e7e\u4f55\u8a08\u7b97 \u9577\u65b9\u5f62\u8a70\u8fbc\u307f \u5e73\u9762\u7d30\u5206\u5272 \u30ea\u30cb\u30a2\u8272\u7a7a\u9593\u3068\u30ac\u30f3\u30de\u8272\u7a7a\u9593 \u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 \u88dc\u9593\uff0c\u30a4\u30fc\u30b8\u30f3\u30b0\uff0c\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0 \u30d1\u30fc\u30ea\u30f3\u30ce\u30a4\u30ba \u6570\u5f0f\u30d1\u30fc\u30b5 \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 \u62e1\u5f35\u6570\u5024\u578b ( HalfFloat , int128 , uint128 , BigInt , BigFloat )","title":"\u6570\u5b66"},{"location":"ja-jp/features/#\u6587\u5b57\u5217\u51e6\u7406","text":"\u6587\u5b57\u5217\u30af\u30e9\u30b9 ( String , StringView ) Unicode \u5909\u63db (UTF-8 / UTF-16 / UTF-32) \u6b63\u898f\u8868\u73fe {fmt} \u30b9\u30bf\u30a4\u30eb\u306e\u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u66f8\u304d CSV / INI / JSON / XML / TOML \u30d1\u30fc\u30b5 CSV / INI / JSON \u51fa\u529b","title":"\u6587\u5b57\u5217\u51e6\u7406"},{"location":"ja-jp/features/#\u305d\u306e\u4ed6","text":"\u57fa\u672c\u7684\u306aGUI (\u30dc\u30bf\u30f3\uff0c\u30b9\u30e9\u30a4\u30c0\u30fc\uff0c\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\uff0c\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\uff0c\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\uff0c\u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\uff0c\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc) 2D \u7269\u7406\u30a8\u30f3\u30b8\u30f3\u306e\u7d71\u5408 (Box2D) \u914d\u5217\u30af\u30e9\u30b9 ( Array , Grid ) Kd-tree Disjoint Set Union \u975e\u540c\u671f\u30d5\u30a1\u30a4\u30eb\u30ed\u30fc\u30c9 \u30c7\u30fc\u30bf\u5727\u7e2e (zlib, Zstandard) \u30b7\u30fc\u30f3\u9077\u79fb \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76e3\u8996 QR \u30b3\u30fc\u30c9 GeoJSON \u65e5\u4ed8\u3068\u6642\u523b \u6642\u9593\u8a08\u6e2c \u30ed\u30ae\u30f3\u30b0 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba UUID \u5b50\u30d7\u30ed\u30bb\u30b9\u7ba1\u7406 \u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9 \u96fb\u6e90\u7ba1\u7406 \u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0 (AngelScript) \uff08*\u4e00\u90e8\u306e\u6a5f\u80fd\u306f\u7279\u5b9a\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u307f\u3067\u306e\u30b5\u30dd\u30fc\u30c8\u3067\u3059\uff09","title":"\u305d\u306e\u4ed6"},{"location":"ja-jp/link/","text":"\u30ea\u30f3\u30af\u96c6 \u00b6 1. Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u00b6 2. OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 3. Siv3D \u52c9\u5f37\u4f1a \u00b6 4. \u00b6","title":"\u30ea\u30f3\u30af\u96c6"},{"location":"ja-jp/link/#\u30ea\u30f3\u30af\u96c6","text":"","title":"\u30ea\u30f3\u30af\u96c6"},{"location":"ja-jp/link/#1-siv3d-\u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3-slack","text":"","title":"1. Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack"},{"location":"ja-jp/link/#2-opensiv3d-\u5b9f\u88c5\u4f1a","text":"","title":"2. OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/link/#3-siv3d-\u52c9\u5f37\u4f1a","text":"","title":"3. Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/link/#4","text":"","title":"4."},{"location":"ja-jp/releases/","text":"\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8 \u00b6 v0.6 \u4e16\u4ee3 \u00b6 v0.6.6 | 2022-11-22 \u65b0\u6a5f\u80fd \u00b6 \u30b7\u30f3\u30d7\u30eb\u306a\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u3092\u6271\u3046\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #898 ) \u30b5\u30f3\u30d7\u30eb \u5165\u529b\u51e6\u7406\u3092\u6253\u3061\u5207\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #897 ) \u30b5\u30f3\u30d7\u30eb std::map \u306e\u7f6e\u304d\u63db\u3048\u3068\u306a\u308b OrderedTable \u578b\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #909 ) \u30b5\u30f3\u30d7\u30eb RoundRect::draw() \u306b\u304a\u3044\u3066\u3001\u4e0a\u4e0b\u306e\u8272\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #906 ) \u30b5\u30f3\u30d7\u30eb Rect::drawFrame() , RectF::drawFrame() , RoundRect::draw() , RoundRect::drawFrame() \u306b\u304a\u3044\u3066\u3001\u4e0a\u4e0b\u306e\u8272\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #906 ) \u30b5\u30f3\u30d7\u30eb \uff08Windows \u7248\uff09\u30bf\u30b9\u30af\u30d0\u30fc\u306b\u30bf\u30b9\u30af\u306e\u9032\u6357\u72b6\u6cc1\u3092\u8868\u793a\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #904 ) \u30b5\u30f3\u30d7\u30eb 2 \u3064\u306e\u9577\u65b9\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df\u3092\u9577\u65b9\u5f62\u3067\u8fd4\u3059\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #872 ) \u30b5\u30f3\u30d7\u30eb P2Body \u306b\u5f3e\u4e38\u30e2\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #901 ) \u6642\u9593\u578b\u304c _fmt() \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #894 , #895 ) \u7a7a\u306e\u9577\u65b9\u5f62\u3092\u4f5c\u6210\u3059\u308b Rect::Empty() , RectF::Empty() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #881 ) \u9577\u65b9\u5f62\u304c\u7a7a\u3067\u3042\u308b\u304b\u3092\u8fd4\u3059 Rect::isEmpty() , Rect::operator bool() , RectF::isEmpty() , RectF::operator bool() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #879 , #880 ) Array::partition() , Array::stable_partition() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #869 ) Camera2DParameters , LicenseManager , LicenseInfo , XInput \u304c\u30b9\u30af\u30ea\u30d7\u30c8\u5185\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #868 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 \u30d8\u30c3\u30c0\u306e\u8efd\u91cf\u5316\u306e\u305f\u3081\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3057\u305f ( #883 , #886 ) Windows \u7248\u306b\u304a\u3051\u308b\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b\u3068\u64cd\u4f5c\u4e0d\u80fd\u306b\u306a\u308b\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\u30b7\u30fc\u30f3\u5185\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u8868\u793a\u3055\u308c\u307e\u3059 ( #915 ) Array \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u63a8\u8ad6\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #887 ) CITATION.cff \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #882 ) Grid::resize() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #876 ) \u4ed5\u69d8\u5909\u66f4 \u00b6 \u5404\u7a2e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #914 ) PlayingCard \u306e\u30c7\u30b6\u30a4\u30f3\u3092\u5fae\u4fee\u6b63\u3057\u307e\u3057\u305f ( #905 ) PlayingCard.hpp \u306f experimental \u304b\u3089\u6b63\u5f0f\u306a\u6a5f\u80fd\u306b\u306a\u308a\u307e\u3057\u305f ( #885 ) \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 DisjointSet \u306e\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u524a\u6e1b\u3057\u307e\u3057\u305f ( #878 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Web \u7248\u306e\u4e0d\u5177\u5408\u4fee\u6b63\u3001\u4e92\u63db\u6027\u5411\u4e0a\u3092\u884c\u3044\u307e\u3057\u305f XMLReader \u306e\u4e00\u90e8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #896 ) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #871 , #903 ) \u6b63\u898f\u8868\u73fe\u306b\u304a\u3051\u308b\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u4ed5\u69d8\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #893 ) String::removed(StringView) \u306b\u7a7a\u306e\u6587\u5b57\u5217\u3092\u6e21\u3059\u3068\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308b\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #892 ) Allocator \u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #889 , #891 ) DisjointSet::operator bool() \u306e\u623b\u308a\u5024\u306e true , false \u304c\u9006\u3060\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #877 ) \u5404\u7a2e\u30af\u30e9\u30b9\u306e _fmt() \u5bfe\u5fdc\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #873 ) LineString::calculateBufferClosed() , LineString::calculateRoundBufferClosed() \u304c\u9589\u3058\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #870 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 MayFlyOvO : OrderedTable \u306e\u8ffd\u52a0 Raclamusi : Array , Allocator , \"fmt\" \u306e\u6539\u5584\u30fb\u30d0\u30b0\u4fee\u6b63 AngelCase : String::removed() \u306e\u30d0\u30b0\u4fee\u6b63 yunba28 : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 sknjpn : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 v0.6.5 | 2022-08-10 \u65b0\u6a5f\u80fd \u00b6 Visual Studio 2022 17.3 \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #859 ) LineString::extractLineString(double, CloseRing) \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #866 ) \u30b5\u30f3\u30d7\u30eb JSON \u304c\u30d0\u30a4\u30ca\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 (BSON/CBOR/MessagePack) \u3068\u306e\u76f8\u4e92\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #842 ) \u30b5\u30f3\u30d7\u30eb \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u7d50\u5408\u3059\u308b FileSystem::PathAppend() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #825 ) \u30b5\u30f3\u30d7\u30eb TextEditState \u306b\u3001Tab \u30ad\u30fc\u3084 Enter \u30ad\u30fc\u306b\u3088\u308b\u5165\u529b\u5b8c\u4e86\u3092\u53d6\u5f97\u3067\u304d\u308b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #808 ) \u30b5\u30f3\u30d7\u30eb \u5e95\u8fba\u306e\u4e2d\u5fc3\u3001\u9802\u70b9\u3001\u5e95\u8fba\u306e\u9577\u3055\u304b\u3089\u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u3092\u4f5c\u6210\u3059\u308b Triangle::FromPoints() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #865 ) \u6587\u5b57\u5217\u3092\u30d1\u30fc\u30bb\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b PercentEncode() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #864 ) NavMesh::query() \u306b\u3001\u7d50\u679c\u306e\u683c\u7d0d\u5148\u3092\u53c2\u7167\u3067\u6e21\u3059\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #861 ) Math:: \u306b Dot() \u3068 Cross() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u307e\u3067\u306f Vec2, Vec3 \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f ( #848 ) \u9577\u65b9\u5f62\u306e\u5404\u8fba\u30fb\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3001Y \u5ea7\u6a19\u3060\u3051\u3092\u8fd4\u3059\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #853 ) \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u3092 (0 ,0), \u53f3\u4e0b\u3092 (1, 1) \u3068\u3057\u305f\u3068\u304d\u306e (relativeX, relativeY) \u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #850 ) \u540c\u68b1\u3059\u308b Font Awesome \u3092 5.15.2 \u2192 6.1.1 \u306b\u66f4\u65b0\u3057\u307e\u3057\u305f ( #846 ) Blob \u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #843 ) Font::height(double size) \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #830 ) \u540c\u68b1\u3059\u308b\u30e2\u30ce\u30af\u30ed Noto Emoji \u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #816 ) \u6c34\u5e73\u65b9\u5411\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8fd4\u3059 .horizontalAspectRatio() \u95a2\u6570\u3092 Point , Float2 , Vec2 , Rect , RectF , Image , Texture , Emoji , Scene:: , RoundRect \u306b\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #810 ), ( #812 ) Multiplayer_Photon \u306b\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u95a2\u9023\u306e\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #807 ) Multiplayer_Photon \u306b .joinRandomRoomOrCreate() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #806 ) NotImplementedError \u4f8b\u5916\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #787 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 Linux \u7248\u306e CMake \u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #829 ) Linux \u7248\u306e CMakeLists.txt \u306b\u304a\u3044\u3066\u3001boost \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u7bc4\u56f2\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #847 ) SimpleGUI::TextBox() \u306e\u6319\u52d5\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #832 ), ( #804 ) \u8aa4\u7528\u9632\u6b62\u306e\u305f\u3081 BigInt operator \"\"_big(long double x) \u3092 = delete \u6307\u5b9a\u3057\u307e\u3057\u305f ( #826 ) \u3044\u304f\u3064\u304b\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u4ed5\u69d8\u5909\u66f4 \u00b6 BigFloat \u306e\u6587\u5b57\u5217\u5909\u63db\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #839 ) Multiplayer_Photon::getLocalPlayerID() \u306e\u623b\u308a\u5024\u3092 LocalPlayerID \u306b\u5909\u66f4\u3057\u307e\u3057\u305f ( #809 ) AsyncHTTPTask::isReady \u3092 const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u5909\u66f4\u3057\u307e\u3057\u305f ( #805 ) \u5404\u7a2e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #801 ) engine \u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #817 ) \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 NavMesh::query() \u306e\u5b9f\u884c\u6027\u80fd\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #861 ) HLSL \u3084 GLSL \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #835 ) SimpleGUI \u306e\u6587\u5b57\u5217\u5f15\u6570\u3092 const String& \u2192 StringView \u306b\u5909\u66f4\u3057\u307e\u3057\u305f ( #827 ) \u7b97\u8853\u578b\u304b\u3089 BigInt , BigFloat \u3092\u5f15\u304f\u3068\u304d\u306e\u5b9f\u884c\u6027\u80fd\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #822 ) Rect , RectF \u306e constexpr \u5bfe\u5fdc\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #813 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 LineString::extractLineString() \u304c\u6b63\u3057\u304f\u306a\u3044\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #862 ) \u59cb\u70b9\u3068\u7d42\u70b9\u304c\u4e00\u81f4\u3059\u308b LineString \u306e .calculateRoundBuffer() \u306b\u5931\u6557\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #860 ) macOS, Linux \u7248\u3067 NULL \u304c\u30de\u30af\u30ed\u3067\u7a7a\u6587\u5b57\u5217\u306b\u7f6e\u63db\u3055\u308c\u308b\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #858 ) RoundRect::drawFrmae() \u3067\u4e0d\u6b63\u306a\u5024\u3092\u6e21\u3057\u305f\u3068\u304d\u306b\u3001\u63cf\u753b\u304c\u4e71\u308c\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #856 ) BasicCamera3D \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u540d\u3092 .getVerticlaFOV() \u2192 .getVerticalFOV() \u306b\u4fee\u6b63\u3057\u307e\u3057\u305f ( #854 ) Grid::choice() \u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3059\u308b\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #840 ) Base64::Decode() \u3067\u3001\u7279\u5b9a\u6761\u4ef6\u306b\u304a\u3044\u3066\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #837 ) Parse<double> \u304c float \u578b\u306e\u7cbe\u5ea6\u3067\u884c\u308f\u308c\u3066\u3044\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #831 ) \u4e00\u90e8\u6761\u4ef6\u3067 Line \u540c\u58eb\u306e Intersect, IntersectAt \u306e\u5224\u5b9a\u304c\u8aa4\u3063\u3066\u3044\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #823 ) BigInt , BigFloat \u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #821 ) macOS \u7248\u3001Linux \u7248\u306e FileSystem::SelectFolder() \u304c\u7d50\u679c\u306e\u672b\u5c3e\u306b / \u3092\u4ed8\u3051\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #824 ) macOS \u7248\u306e FileSystem::FullPath() \u306e\u7d50\u679c\u304c\u4e0d\u6b63\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #824 ) SFMT \u306e\u30d8\u30c3\u30c0\u30fb\u30d5\u30a9\u30eb\u30c0\u540d\u306e typo \u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #818 ) macOS \u7248\u3067 TCPClient \u306e\u5207\u65ad\u304c TCPServer \u306b\u4f1d\u308f\u3089\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #799 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 MurakamiShun : Linux \u7248\u306e CMake \u3092\u6539\u5584 m4saka : Line \u540c\u58eb\u306e Intersect, IntersectAt \u306e\u30d0\u30b0\u3092\u4fee\u6b63 Raclamusi : BigInt , BigFloat \u306e\u6539\u5584\u30fb\u30d0\u30b0\u4fee\u6b63\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 kestrel-90r : \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u306e typo \u306e\u4fee\u6b63 ShivAlley : Math:: \u306e\u6570\u5b66\u95a2\u6570\u3092\u8ffd\u52a0 tas9n : AsyncHTTPTask \u306e\u6539\u5584 ROCKTAKEY : CMakeLists.txt \u306e\u6539\u5584 yknishidate : \u30b3\u30fc\u30c9\u306e\u6539\u5584 agehama : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 curay168 : \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 v0.6.4 | 2022-05-21 \u65b0\u6a5f\u80fd \u00b6 Visual Studio 2022 17.2 \u4ee5\u964d\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #790 ) Xcode 13.3 \u4ee5\u964d\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #753 ) Photon SDK \u3068\u9023\u4fc2\u3059\u308b Multiplayer_Photon \uff08\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u6a5f\u80fd\uff09\u30a2\u30c9\u30aa\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #734 ) \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u30b5\u30f3\u30d7\u30eb 3D \u6a19\u6e96\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b UV transform \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #764 ) \u30b5\u30f3\u30d7\u30eb MeshData::RoundedBox() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #769 ) \u30b5\u30f3\u30d7\u30eb \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u52d5\u7684\u306b\u6ce2\u5f62\u3092\u66f8\u304d\u8fbc\u3080\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #736 ) \u30b5\u30f3\u30d7\u30eb Windows \u7248\u306e\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306b\u304a\u3051\u308b\u901a\u77e5\u97f3\u306e\u7121\u52b9\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #748 ) \u30b5\u30f3\u30d7\u30eb DisjointSet (Union Find) \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #742 ) \u30b5\u30f3\u30d7\u30eb Shader::LinearToScreen() \u306b\u304a\u3044\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u3092\u5909\u66f4\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f ( #762 ) \u30b5\u30f3\u30d7\u30eb Polygon::addHole() \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #786 ) \u30b5\u30f3\u30d7\u30eb Font \u306b\u5408\u5b57\u3092\u56de\u907f\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #792 ) \u30b5\u30f3\u30d7\u30eb -1.0 \uff5e 1.0 \u306e\u7bc4\u56f2\u3092\u8fd4\u3059 Periodic:: \u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #761 ) \u30b5\u30f3\u30d7\u30eb ManagedScript \u306b\u3001\u30ea\u30ed\u30fc\u30c9\u3092\u767a\u751f\u3055\u305b\u308b\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #768 ) \u30b5\u30f3\u30d7\u30eb Script \u5185\u3067 include \u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #767 ) \u30b5\u30f3\u30d7\u30eb JSON::push_back() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #725 ) String::replace() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u5897\u3084\u3057\u307e\u3057\u305f ( #729 ) ImageProcessing::GenerateMips() \u3067\u6700\u5927\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #763 ) \u30b9\u30af\u30ea\u30d7\u30c8\u3067 enum \u306e\u5024\u3092\u8868\u793a\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f ( #774 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306b OpenMode , TextEncoding , TextReader , TextWriter \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #775 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306b Parse \u7cfb\u306e\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #782 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306b INI \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #783 ) Deserializer<MemoryViewReader> \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #777 ) Serializer<Writer>::operator ->() const \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #776 ) Geometry2D::Or() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #793 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 (\u975e\u516c\u5f0f) ARM \u5411\u3051\u306e\u30d3\u30eb\u30c9\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #707 ) SceneManager \u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3057\u307e\u3057\u305f ( #750 ) NavMesh \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30de\u30c3\u30d7\u69cb\u7bc9\u3092\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f ( #785 ) \u30b5\u30f3\u30d7\u30eb \u4ed5\u69d8\u5909\u66f4 \u00b6 \u5404\u7a2e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #726 ), ( #728 ), ( #727 ), ( #731 ), ( #756 ), ( #757 ), ( #758 ), ( #759 ), ( #773 ), ( #760 ) Polygon::addHole() \u306e\u4ed5\u69d8\u3092\u5909\u66f4\u3057\u307e\u3057\u305f ( #786 ) engine / example \u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u307e\u3057\u305f ( #740 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Circle::boundingRect() \u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #718 ) SimpleAnimation::isDone() \u306e\u623b\u308a\u5024\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #710 ) TextEditState::TextEditState(String&& defaultText) \u306e use after move \u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #703 ) JSON \u30af\u30e9\u30b9\u3067\u7a7a\u306e\u914d\u5217\u3092\u4f5c\u308c\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #723 ) operator>>(basic_istream&, Color&) \u306e\u8b66\u544a\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #720 ) \u30ea\u30e2\u30fc\u30c8\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u74b0\u5883\u3067 System::EnumActiveMonitors() \u306b\u5931\u6557\u3057\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #719 ) TOMLReader \u3067\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u3082\u5931\u6557\u5224\u5b9a\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #732 ) Windows \u7248\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u80cc\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #706 ) \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30d0\u30a4\u30f3\u30c9\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #741 ) Shape2D::Stairs() \u306e\u7b2c 5 \u5f15\u6570\u304c false \u3060\u3068\u4e09\u89d2\u5f62\u306e\u5411\u304d\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #708 ) macOS \u7248\u3067 RectanglePacking \u304c\u5229\u7528\u3067\u304d\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #754 ) ARM \u5411\u3051\u30d3\u30eb\u30c9\u306b\u304a\u3051\u308b Image \u3068 OpenCV \u306e\u9023\u643a\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #778 ) SimpleGUI::ListBox() \u3067\u7bc4\u56f2\u5916\u30a2\u30af\u30bb\u30b9\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #780 ) WaveSample \u306e\u5909\u63db\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #795 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 tana : ARM \u5411\u3051\u30d3\u30eb\u30c9\u306e\u6539\u5584 mak1a : Multiplayer_Photon \u306e\u5b9f\u88c5 , SimpleAnimation::isDone() \u306e\u4fee\u6b63 Ryoga-exe : \u30b3\u30fc\u30c9\u306e\u6539\u5584 k-sunako : CMakeLists.txt \u306e\u6539\u5584 falrnd : Circle::boundingRect() \u306e\u4fee\u6b63 polyester-CTRL : OpenCV_Bridge \u306e\u6539\u5584 yaito3014 : \u30b3\u30fc\u30c9\u306e\u6539\u5584 NachiaVivias : WaveSample \u306e\u6539\u5584 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8 \u00b6 #12 Photon: mak1a, Luke, sthairno v0.6.3 | 2021-11-14 \u65b0\u6a5f\u80fd \u00b6 Visual Studio 2022 \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #683 ) SimpleGUI \u306b\u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #659 ) # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); ListBoxState ls1 { { U \"\u5317\u6d77\u9053\" , U \"\u9752\u68ee\u770c\" , U \"\u5ca9\u624b\u770c\" , U \"\u5bae\u57ce\u770c\" , U \"\u79cb\u7530\u770c\" , U \"\u5c71\u5f62\u770c\" , U \"\u798f\u5cf6\u770c\" , U \"\u8328\u57ce\u770c\" , U \"\u6803\u6728\u770c\" , U \"\u7fa4\u99ac\u770c\" , U \"\u57fc\u7389\u770c\" , U \"\u5343\u8449\u770c\" , U \"\u6771\u4eac\u90fd\" , U \"\u795e\u5948\u5ddd\u770c\" , U \"\u65b0\u6f5f\u770c\" , U \"\u5bcc\u5c71\u770c\" , U \"\u77f3\u5ddd\u770c\" , U \"\u798f\u4e95\u770c\" , U \"\u5c71\u68a8\u770c\" , U \"\u9577\u91ce\u770c\" , U \"\u5c90\u961c\u770c\" , U \"\u9759\u5ca1\u770c\" , U \"\u611b\u77e5\u770c\" , U \"\u4e09\u91cd\u770c\" , U \"\u6ecb\u8cc0\u770c\" , U \"\u4eac\u90fd\u5e9c\" , U \"\u5927\u962a\u5e9c\" , U \"\u5175\u5eab\u770c\" , U \"\u5948\u826f\u770c\" , U \"\u548c\u6b4c\u5c71\u770c\" , U \"\u9ce5\u53d6\u770c\" , U \"\u5cf6\u6839\u770c\" , U \"\u5ca1\u5c71\u770c\" , U \"\u5e83\u5cf6\u770c\" , U \"\u5c71\u53e3\u770c\" , U \"\u5fb3\u5cf6\u770c\" , U \"\u9999\u5ddd\u770c\" , U \"\u611b\u5a9b\u770c\" , U \"\u9ad8\u77e5\u770c\" , U \"\u798f\u5ca1\u770c\" , U \"\u4f50\u8cc0\u770c\" , U \"\u9577\u5d0e\u770c\" , U \"\u718a\u672c\u770c\" , U \"\u5927\u5206\u770c\" , U \"\u5bae\u5d0e\u770c\" , U \"\u9e7f\u5150\u5cf6\u770c\" , U \"\u6c96\u7e04\u770c\" , } }; ListBoxState ls2 { { U \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\uff081905\u5e741\u6708 - 1906\u5e748\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1905\u5e7410\u6708 - 1907\u5e745\u6708\u3001\u5927\u5009\u66f8\u5e97\u30fb\u670d\u90e8\u66f8\u5e97\uff09\" , U \"\u574a\u3063\u3061\u3083\u3093\uff081906\u5e744\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1907\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u8349\u6795\uff081906\u5e749\u6708\u3001\u300e\u65b0\u5c0f\u8aac\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u4e8c\u767e\u5341\u65e5\uff081906\u5e7410\u6708\u3001\u300e\u4e2d\u592e\u516c\u8ad6\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u91ce\u5206\uff081907\u5e741\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1908\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u865e\u7f8e\u4eba\u8349\uff081907\u5e746\u6708 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1908\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5751\u592b\uff081908\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u4e09\u56db\u90ce\uff081908\u5e749 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1909\u5e745\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u305d\u308c\u304b\u3089\uff081909\u5e746 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1910\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u9580\uff081910\u5e743\u6708 - 6\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1911\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5f7c\u5cb8\u904e\u8fc4\uff081912\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1912\u5e749\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u884c\u4eba\uff081912\u5e7412\u6708 - 1913\u5e7411\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e741\u6708\u3001\u5927\u5009\u66f8\u5e97\uff09\" , U \"\u3053\u309d\u308d\uff081914\u5e744\u6708 - 8\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e749\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u9053\u8349\uff081915\u5e746\u6708 - 9\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1915\u5e7410\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u660e\u6697\uff081916\u5e745\u6708 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1917\u5e741\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , } }; ls2 . selectedItemIndex = 3 ; ListBoxState ls3 = ls2 ; while ( System :: Update ()) { if ( SimpleGUI :: ListBox ( ls1 , Vec2 { 20 , 20 }, 120 , 156 ) && ls1 . selectedItemIndex ) { } if ( SimpleGUI :: ListBox ( ls2 , Vec2 { 180 , 20 }, 240 , 156 , false ) && ls2 . selectedItemIndex ) { } if ( SimpleGUI :: ListBox ( ls3 , Vec2 { 20 , 200 }, 1020 , 480 ) && ls3 . selectedItemIndex ) { } } } \u540c\u68b1\u3059\u308b Color Emoji \u3092\u66f4\u65b0\u3057\u3001Unicode 14.0 \u306e\u7d75\u6587\u5b57\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #694 ) # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.4 , 0.5 , 0.6 }); const Texture e0 { U \"\ud83e\udee0\" _emoji }; const Texture e1 { U \"\ud83e\udee3\" _emoji }; const Texture e2 { U \"\ud83e\udee1\" _emoji }; const Texture e3 { U \"\ud83e\udee5\" _emoji }; const Texture e4 { U \"\ud83e\udef5\" _emoji }; const Texture e5 { U \"\ud83e\uddcc\" _emoji }; const Texture e6 { U \"\ud83e\udeb8\" _emoji }; const Texture e7 { U \"\ud83e\udeba\" _emoji }; const Texture e8 { U \"\ud83e\uded8\" _emoji }; const Texture e9 { U \"\ud83e\uded9\" _emoji }; const Texture e10 { U \"\ud83e\udee7\" _emoji }; const Texture e11 { U \"\ud83d\udede\" _emoji }; while ( System :: Update ()) { e0 . drawAt ( 100 , 100 ); e1 . drawAt ( 300 , 100 ); e2 . drawAt ( 500 , 100 ); e3 . drawAt ( 700 , 100 ); e4 . drawAt ( 100 , 300 ); e5 . drawAt ( 300 , 300 ); e6 . drawAt ( 500 , 300 ); e7 . drawAt ( 700 , 300 ); e8 . drawAt ( 100 , 500 ); e9 . drawAt ( 300 , 500 ); e10 . drawAt ( 500 , 500 ); e11 . drawAt ( 700 , 500 ); } } GUI \u30d5\u30a9\u30f3\u30c8\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a2\u30a4\u30b3\u30f3\u30d5\u30a9\u30f3\u30c8\u3078\u306e\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002SimpleGUI \u306e\u30c6\u30ad\u30b9\u30c8\u3067 U\"\\U000F0493 Setting\" \u306e\u3088\u3046\u306b\u30a2\u30a4\u30b3\u30f3\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3067\u304d\u307e\u3059 ( #698 ) # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); double volume = 1.0 ; while ( System :: Update ()) { SimpleGUI :: Button ( U \" \\U000F1677 \u3086\u3063\u304f\u308a\" , Vec2 { 20 , 20 }, 160 ); SimpleGUI :: Button ( U \" \\U000F0907 \u3044\u305d\u3044\u3067\" , Vec2 { 20 , 60 }, 160 ); SimpleGUI :: Button ( U \" \\U000F0493 \u8a2d\u5b9a\" , Vec2 { 20 , 100 }, 160 ); SimpleGUI :: Slider ( 0.5 < volume ? U \" \\U000F057E \" : 0.0 < volume ? U \" \\U000F0580 \" : U \" \\U000F0581 \" , volume , Vec2 { 20 , 140 }, 30 , 130 ); } } Windows \u7248\u306e System::EnumerateMonitors() \u306b\u304a\u3044\u3066\u3001\u3088\u308a\u533a\u5225\u3057\u3084\u3059\u3044\u30e2\u30cb\u30bf\u30fc\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #695 ) \u6587\u5b57\u3092 3D \u306e Mesh \u3067\u8868\u73fe\u3059\u308b\u305f\u3081\u306e MeshGlyph \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #680 ) # include <Siv3D.hpp> class Font3D { public : Font3D () = default ; SIV3D_NODISCARD_CXX20 explicit Font3D ( const Font & font ) : m_font { font } {} [[ nodiscard ]] Array < MeshGlyph > getGlyphs ( StringView s ) const { Array < MeshGlyph > results ; for ( auto ch : s ) { auto it = m_table . find ( ch ); if ( it == m_table . end ()) { it = m_table . emplace ( ch , m_font . createMesh ( ch )). first ; } results << it -> second ; } return results ; } void drawCylindricalInner ( StringView s , const Vec3 & center , double r , double scale , double startAngle , const ColorF & color ) const { const double perimeter = ( r * Math :: TwoPi ); double penPosX = 0.0 ; startAngle += 90 _deg ; for ( auto meshGlyph : getGlyphs ( s )) { penPosX += ( meshGlyph . xOffset * scale ); if ( meshGlyph . mesh ) { const double angle = ( penPosX / perimeter ) * 360 _deg ; const Quaternion q = Quaternion :: RotateY ( -90 _deg + angle - startAngle ); const Vec3 pos = Cylindrical { r , ( -180 _deg - angle + startAngle ), 0.0 } + center ; const Mat4x4 mat = Mat4x4 :: Translate ( - meshGlyph . xOffset , 0 , 0 ) . scaled ( scale ) . rotated ( q ) . translated ( pos ); meshGlyph . mesh . draw ( mat , color ); } penPosX += ( meshGlyph . xAdvance - meshGlyph . xOffset ) * scale ; } } void drawCylindricalOuter ( StringView s , const Vec3 & center , double r , double scale , double startAngle , const ColorF & color ) const { const double perimeter = ( r * Math :: TwoPi ); double penPosX = 0.0 ; startAngle += 90 _deg ; for ( auto meshGlyph : getGlyphs ( s )) { penPosX += ( meshGlyph . xOffset * scale ); if ( meshGlyph . mesh ) { const double angle = ( penPosX / perimeter ) * 360 _deg ; const Quaternion q = Quaternion :: RotateY ( 90 _deg - angle - startAngle ); const Vec3 pos = Cylindrical { r , ( 180 _deg + angle + startAngle ), 0.0 } + center ; const Mat4x4 mat = Mat4x4 :: Translate ( - meshGlyph . xOffset , 0 , 0 ) . scaled ( scale ) . rotated ( q ) . translated ( pos ); meshGlyph . mesh . draw ( mat , color ); } penPosX += ( meshGlyph . xAdvance - meshGlyph . xOffset ) * scale ; } } private : Font m_font ; mutable HashTable < char32 , MeshGlyph > m_table ; }; void Main () { Window :: Resize ( 1280 , 720 ); const ColorF backgroundColor = ColorF { 0.5 , 0.6 , 0.6 }. removeSRGBCurve (); const Texture uvChecker { U \"example/texture/uv.png\" , TextureDesc :: MippedSRGB }; const MSRenderTexture renderTexture { Scene :: Size (), TextureFormat :: R8G8B8A8_Unorm_SRGB , HasDepth :: Yes }; DebugCamera3D camera { renderTexture . size (), 30 _deg , Vec3 { 10 , 16 , -32 } }; const Font3D font3D { Font { 60 } }; while ( System :: Update ()) { const double t = Scene :: Time (); camera . update ( 2.0 ); Graphics3D :: SetCameraTransform ( camera ); // 3D \u63cf\u753b { Graphics3D :: SetGlobalAmbientColor ( Graphics3D :: DefaultGlobalAmbientColor ); Graphics3D :: SetSunColor ( ColorF { 0.75 }); const ScopedRenderTarget3D target { renderTexture . clear ( backgroundColor ) }; Plane { 64 }. draw ( uvChecker ); Cylinder { Vec3 { 0 , 0 , 0 }, Vec3 { 0 , 16 , 0 }, 5.6 }. draw ( ColorF { 0.25 }. removeSRGBCurve ()); // 3D Text Circle { // \u4e21\u9762\u63cf\u753b\u3001\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u7121\u52b9\u5316 const ScopedRenderStates3D rasterizer { RasterizerState :: SolidCullNone , BlendState :: Additive }; Graphics3D :: SetGlobalAmbientColor ( ColorF { 1.0 }); Graphics3D :: SetSunColor ( ColorF { 0.0 }); font3D . drawCylindricalOuter ( DateTime :: Now (). format ( U \"HH:mm:ss\" ), Vec3 { 0 , 11.5 , 0 }, 6 * 1.2 , 3.0 * 1.2 , ( t * -25 _deg ), ColorF { 1.0 , 0.98 , 0.9 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( DateTime :: Now (). format ( U \"HH:mm:ss\" ), Vec3 { 0 , 11.5 , 0 }, 6 * 1.2 , 3.0 * 1.2 , ( t * -25 _deg ) + 180 _deg , ColorF { 1.0 , 0.98 , 0.9 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"Monday, September 27, 2021\" , Vec3 { 0 , 10 , 0 }, 6 * 1.2 , 1.2 * 1.2 , ( t * -50 _deg ), ColorF { 1.0 , 0.98 , 0.9 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NIKKEI 225 30,248.81 +609.41\" , Vec3 { 0 , 8 , 0 }, 6 , 1.0 , ( t * -72 _deg ), ColorF { 0.6 , 1.0 , 0.8 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"HANG SENG 24,192,16 -318.82\" , Vec3 { 0 , 7 , 0 }, 6 , 1.0 , ( t * -62 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"SHANGHAI 3,613.07 -29.15\" , Vec3 { 0 , 6 , 0 }, 6 , 1.0 , ( t * -58 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"FTSE 7,051.48 -26.87\" , Vec3 { 0 , 5 , 0 }, 6 , 1.0 , ( t * -70 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"CAC 6,638.46 -63.52\" , Vec3 { 0 , 4 , 0 }, 6 , 1.0 , ( t * -60 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"DAX 15,531.75 -112.22\" , Vec3 { 0 , 3 , 0 }, 6 , 1.0 , ( t * -66 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NASDAQ 15,047.70 -4.54\" , Vec3 { 0 , 2 , 0 }, 6 , 1.0 , ( t * -68 _deg ), ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NIKKEI 225 30,248.81 +609.41\" , Vec3 { 0 , 8 , 0 }, 6 , 1.0 , ( t * -72 _deg ) + 180 _deg , ColorF { 0.6 , 1.0 , 0.8 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"HANG SENG 24,192,16 -318.82\" , Vec3 { 0 , 7 , 0 }, 6 , 1.0 , ( t * -62 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"SHANGHAI 3,613.07 -29.15\" , Vec3 { 0 , 6 , 0 }, 6 , 1.0 , ( t * -58 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"FTSE 7,051.48 -26.87\" , Vec3 { 0 , 5 , 0 }, 6 , 1.0 , ( t * -70 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"CAC 6,638.46 -63.52\" , Vec3 { 0 , 4 , 0 }, 6 , 1.0 , ( t * -60 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"DAX 15,531.75 -112.22\" , Vec3 { 0 , 3 , 0 }, 6 , 1.0 , ( t * -66 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); font3D . drawCylindricalOuter ( U \"NASDAQ 15,047.70 -4.54\" , Vec3 { 0 , 2 , 0 }, 6 , 1.0 , ( t * -68 _deg ) + 180 _deg , ColorF { 1.0 , 0.6 , 0.6 }. removeSRGBCurve ()); } } // 3D \u30b7\u30fc\u30f3\u3092 2D \u30b7\u30fc\u30f3\u306b\u63cf\u753b { Graphics3D :: Flush (); renderTexture . resolve (); Shader :: LinearToScreen ( renderTexture ); } } } Windows \u7248\u306b\u304a\u3044\u3066\u3001Leap Motion \u30c7\u30d0\u30a4\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3057\u305f ( #677 ) // Ultraleap SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e // 1. \u30a4\u30f3\u30af\u30eb\u30fc\u30c9 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b // C:\\Program Files\\Ultraleap\\LeapSDK\\include \u3092\u8ffd\u52a0\u3002 // 2. \u30e9\u30a4\u30d6\u30e9\u30ea \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b // C:\\Program Files\\Ultraleap\\LeapSDK\\lib\\x64 \u3092\u8ffd\u52a0\u3002 // 3. App \u30d5\u30a9\u30eb\u30c0\u306b LeapC.dll \u3092\u30b3\u30d4\u30fc\u3002 # include <Siv3D.hpp> inline constexpr double HandScale = 0.08 ; void DrawSphere ( uint32 handID , const Vec3 & pos ) { Sphere { ( pos * HandScale ), ( 6 * HandScale ) } . draw ( HSV { handID * 60 }. removeSRGBCurve ()); } void DrawCylinder ( const Vec3 & from , const Vec3 & to ) { Cylinder { ( from * HandScale ), ( to * HandScale ), ( 3 * HandScale ) }. draw (); } void Main () { Window :: Resize ( 1280 , 720 ); const ColorF backgroundColor = ColorF { 0.4 , 0.6 , 0.8 }. removeSRGBCurve (); const Texture uvChecker { U \"example/texture/uv.png\" , TextureDesc :: MippedSRGB }; const MSRenderTexture renderTexture { Scene :: Size (), TextureFormat :: R8G8B8A8_Unorm_SRGB , HasDepth :: Yes }; DebugCamera3D camera { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -32 } }; const Font font { FontMethod :: MSDF , 48 , Typeface :: Bold }; size_t trackingModeIndex = 0 ; bool showInfo = true ; Leap :: Connection leap { Leap :: TrackingMode :: Desktop }; if ( not leap ) { throw Error { U \"Leap device not found\" }; } while ( System :: Update ()) { leap . update (); camera . update ( 2.0 ); Graphics3D :: SetCameraTransform ( camera ); // 3D \u63cf\u753b { const ScopedRenderTarget3D target { renderTexture . clear ( backgroundColor ) }; if ( trackingModeIndex == 0 ) { Plane { 64 }. draw ( uvChecker ); const double z = 6 ; for ( auto x : Range ( -2 , 2 )) { Cylinder { ( x * 6.0 ), 4 , z , 2 , 8 }. draw ( ColorF { 0.8 }. removeSRGBCurve ()); } for ( auto x : Range ( -8 , 8 )) { const Box box { ( x * 2 ), 10 , z , 1.8 , 1 , 10 }; bool intersect = false ; for ( const auto & hand : leap . getHands ()) { for ( auto fingerIndex : step ( 5 )) { for ( auto boneIndex : Range ( 1 , 3 )) { const Vec3 to = hand . fingerBone ( fingerIndex , boneIndex ). to ; const Sphere sphere { ( to * HandScale ), ( 6 * HandScale ) }; if ( sphere . intersects ( box )) { intersect = true ; break ; } } if ( intersect ) { break ; } } if ( intersect ) { break ; } } box . draw ( HSV { ( x * 40 ), ( intersect ? 0.8 : 0.15 ), 1.0 }. removeSRGBCurve ()); } } for ( const auto & hand : leap . getHands ()) { const auto handID = hand . id (); for ( auto fingerIndex : step ( 5 )) { for ( auto boneIndex : step ( 4 )) { const Vec3 from = hand . fingerBone ( fingerIndex , boneIndex ). from ; const Vec3 to = hand . fingerBone ( fingerIndex , boneIndex ). to ; if ( fingerIndex == 4 && boneIndex == 0 ) { DrawSphere ( handID , from ); } DrawSphere ( handID , to ); if (( fingerIndex != 0 && fingerIndex != 4 ) && boneIndex == 0 ) { continue ; } DrawCylinder ( from , to ); } } DrawSphere ( handID , hand . palmPosition ()); DrawCylinder ( hand . fingerBone ( 0 , 0 ). from , hand . fingerBone ( 1 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 1 , 1 ). from , hand . fingerBone ( 2 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 2 , 1 ). from , hand . fingerBone ( 3 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 3 , 1 ). from , hand . fingerBone ( 4 , 1 ). from ); DrawCylinder ( hand . fingerBone ( 0 , 0 ). from , hand . fingerBone ( 4 , 0 ). from ); } } { Graphics3D :: Flush (); renderTexture . resolve (); Shader :: LinearToScreen ( renderTexture ); } if ( SimpleGUI :: RadioButtons ( trackingModeIndex , { U \"Desktop\" , U \"Head-mounted\" , U \"Screentop\" }, Vec2 { 20 , 20 })) { leap . setTrackingMode ( static_cast < Leap :: TrackingMode > ( trackingModeIndex )); if ( trackingModeIndex == 0 ) { camera = DebugCamera3D { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -32 } }; } else if ( trackingModeIndex == 1 ) { camera = DebugCamera3D { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -24 }, Vec3 { 0 , 0 , 8 } }; } else { camera = DebugCamera3D { renderTexture . size (), 30 _deg , Vec3 { 0 , 32 , -56 }, Vec3 { 0 , 0 , -24 } }; } } SimpleGUI :: CheckBox ( showInfo , U \"showInfo\" , Vec2 { 20 , 140 }); if ( showInfo ) { for ( const auto & hand : leap . getHands ()) { const Vec2 palmPos = camera . worldToScreenPoint ( hand . palmPosition () * HandScale ). xy (); String ext ; for ( auto fingerIndex : step ( 5 )) { ext << ( hand . isExtended ( fingerIndex ) ? U '1' : U '0' ); } const String state = U \"pinchDistance: {:.2f} \\n grabAngle: {:.2f} \\n pinchStrength: {:.2f} \\n grabStrength: {:.2f} \\n fingers:{}\" _fmt ( hand . pinchDistance (), hand . grabAngle (), hand . pinchStrength (), hand . grabStrength (), ext ); font ( hand . isLeftHand () ? U \"L\" : U \"R\" ) . draw ( TextStyle :: Outline ( 0.15 , ColorF { 0.0 }), 100 , Arg :: rightCenter = palmPos . movedBy ( -20 , 0 )); font ( state ) . draw ( 30 , Arg :: leftCenter = palmPos , ColorF { 0.15 }); } } } } Math::Tau \u3084 0.5_tau \u306a\u3069\u30012\u03c0 \u3092\u8868\u3059\u5b9a\u6570 \u03c4 \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f ( #673 ) # include <Siv3D.hpp> void Main () { Print << Math :: Pi ; Print << Math :: Tau ; Print << Math :: PiF ; Print << Math :: TauF ; Print << 0.5 _pi ; Print << 0.5 _tau ; while ( System :: Update ()) { } } \u7570\u306a\u308b\u7a2e\u985e\u3069\u3046\u3057\u306e Optional \u306e\u6bd4\u8f03\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ( #670 ) BigFloat \u306b .isNan() , .isInf() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #669 ) Array , Optional , BigInt , BigFloat \u306b\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f ( #658 ) String , StringView , UUIDValue \u306b\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f ( #664 ) DrawableText::regionBase() \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #666 ) Windows \u7248\u306b\u304a\u3044\u3066\u3001\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u4ee5\u4e0a\u306e\u983b\u5ea6\u3067\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3092\u53d6\u5f97\u3067\u304d\u308b\u95a2\u6570 Platform::Windows::Keyboard::GetEvents() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #662 ) # include <Siv3D.hpp> void Main () { uint64 eventIndex = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 { 680 , 20 })) { ClearPrint (); } for ( const auto & event : Platform :: Windows :: Keyboard :: GetEvents ()) { if ( eventIndex < event . eventIndex ) { Print << event . timeMillisec << U \": \" << Input { InputDeviceType :: Keyboard , event . code }. name () << ( event . down ? U \" down (event)\" : U \" up (event)\" ); eventIndex = event . eventIndex ; } } /* for (const auto& key : Keyboard::GetAllInputs()) { if (key.down()) { Print << Time::GetMillisec() << U\": \" << key.name() << U\" down\"; } else if (key.up()) { Print << Time::GetMillisec() << U\": \" << key.name() << U\" up\"; } } */ } } \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 \u30b9\u30af\u30ea\u30d7\u30c8\u30a8\u30f3\u30b8\u30f3\u306e\u521d\u671f\u5316\u3092\u9045\u5ef6\u3055\u305b\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u521d\u671f\u5316\u306b\u304b\u304b\u308b\u6642\u9593\u3092\u77ed\u7e2e\u3057\u307e\u3057\u305f\uff08\u6570\u5341\u30df\u30ea\u79d2\uff09 ( #657 ) GLSL \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u8a18\u8ff0\u3092\u7c21\u7d20\u5316\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u5c11\u3057\u524a\u6e1b\u3057\u307e\u3057\u305f ( #687 ) HalfFloat \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092 constexpr \u306b\u3057\u307e\u3057\u305f ( #689 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 NotoEmoji-Regular.ttf \u3092\u30a8\u30f3\u30b8\u30f3\u30ea\u30bd\u30fc\u30b9\u306b\u542b\u307e\u306a\u304f\u3066\u3082\u30a8\u30f3\u30b8\u30f3\u3092\u521d\u671f\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #684 ) NotoSansCJK-Regular.ttc.zstdcmp \u3084 NotoSansJP-Regular.otf.zstdcmp \u306e\u4ee3\u66ff\u306b\u3067\u304d\u308b\u3001\u6700\u4f4e\u9650\u5fc5\u8981\u306a\u30b0\u30ea\u30d5\u3092\u683c\u7d0d\u3057\u305f\u30d5\u30a9\u30f3\u30c8 engine/font/min/siv3d-min.woff \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #682 ) Windows \u7248\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u5bfe\u5fdc\u8a00\u8a9e\u3092\u5897\u3084\u3057\u307e\u3057\u305f ( #671 ) \u4ed5\u69d8\u5909\u66f4 \u00b6 Web \u7248\u3067\u901a\u5e38\u3068\u540c\u3058\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u305f\u3081\u3001 SIV3D_MAINLOOP_BEGIN \u3092\u524a\u9664\u3057\u307e\u3057\u305f ( #674 ) macOS \u7248\u3068 Linux \u7248\u306b\u304a\u3044\u3066\u3001\u30ed\u30b0\u306f std::cout \u3067\u306f\u306a\u304f std::clog \u304a\u3088\u3073 std::cerr \u306b\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #630 ) engine \u304a\u3088\u3073 example \u30d5\u30a9\u30eb\u30c0\u306e\u66f4\u65b0 ( #686 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 DrawableText::draw(double, Arg:: ...) \u3084 DrawableText::region(double, Arg ...) \u306e\u4f4d\u7f6e\u304c\u6b63\u3057\u304f\u306a\u304b\u3063\u305f\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #665 ) Windows \u7248\u306b\u304a\u3044\u3066 Window::IsToggleFullscreenEnabled() \u304c\u5e38\u306b false \u3092\u8fd4\u3059\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #699 ) HalfFloat{ 0.0f } == HalfFloat{ -0.0f } \u304c false \u306b\u306a\u308b\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #660 ) CircularBase<float, Oclock> \u4f7f\u7528\u6642\u306b\u767a\u751f\u3059\u308b\u8b66\u544a\u3092\u89e3\u6d88\u3057\u307e\u3057\u305f ( #667 ) \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u3092\u66f4\u65b0 tetsurom : HalfFloat \u306e\u5b9f\u88c5\u6539\u5584, Optional \u306e\u5b9f\u88c5\u6539\u5584, BigFloat \u306e\u5b9f\u88c5\u6539\u5584, \u5404\u7a2e\u30af\u30e9\u30b9\u3078\u306e\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50\u306e\u5b9f\u88c5 v0.6.2 | 2021-09-29 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 Windows \u7248\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u3092\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f ( #650 , #651 ) \u30e1\u30e2\u30ea / VRAM \u306e\u6d88\u8cbb\u91cf\u3092\u524a\u6e1b\u3057\u307e\u3057\u305f ( #648 ) \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Windows \u7248\u3067\u91cd\u3044\u63cf\u753b\u51e6\u7406\u3092\u884c\u3063\u305f\u3068\u304d\u306b v0.4.3 \u3088\u308a\u3082\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #652 ) Windows \u7248\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e stdafx.h \u3092 Header Files \u30d5\u30a3\u30eb\u30bf\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f ( #653 ) v0.6.1 | 2021-09-21 \u65b0\u6a5f\u80fd \u00b6 SDF / MSDF \u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7c21\u5358\u306b\u6307\u5b9a\u3067\u304d\u308b Graphics2D::SetSDFParameters(const TextStyle&) , Graphics2D::SetMSDFParameters(const TextStyle&) \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ( #647 ) \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 Windows \u7248\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u767a\u751f\u3057\u3066\u3044\u305f\u30d3\u30eb\u30c9\u6642\u306e IntelliSense \u306e\u8b66\u544a\u3092 2 \u4ef6\u6291\u5236\u3057\u307e\u3057\u305f ( #643 ) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u4ed5\u69d8\u5909\u66f4 \u00b6 Monitor \u306f MonitorInfo \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f ( #649 ) UUID \u306f UUIDValue \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 v0.6.0 \u306b\u304a\u3044\u3066\u3001Windows \u7248\u3067\u30bf\u30c3\u30c1\u64cd\u4f5c\u3092\u3057\u305f\u3068\u304d\u306b\u5de6\u30af\u30ea\u30c3\u30af\u3068\u5224\u5b9a\u3055\u308c\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #645 ) v0.6.0 \u306b\u304a\u3044\u3066\u3001 <Siv3D/Windows/Windows.hpp> \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #644 ) v0.6.0 \u306b\u304a\u3044\u3066\u3001 Platform::Windows::GetHWND() \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f ( #646 ) MathParser \u306b\u7a7a\u306e\u6587\u5b57\u5217\u3092\u6e21\u3057\u305f\u3068\u304d\u306b\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f ( #641 ) v0.6.0 | 2021-09-18 \u65b0\u6a5f\u80fd \u00b6 \u57fa\u672c\u7684\u306a 3D \u63cf\u753b\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f C++20 \u306b\u5bfe\u5fdc\u3057\u3001Concepts \u3084 Designated initialization, \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3078\u306e [[nodiscard]] , \u5b87\u5b99\u8239\u6f14\u7b97\u5b50\u3001\u3088\u308a\u591a\u304f\u306e constexpr , \u65b0\u3057\u3044\u6a19\u6e96\u6a5f\u80fd\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u306a\u3069\u304c\u6d3b\u7528\u3055\u308c\u3066\u3044\u307e\u3059 \u8a66\u9a13\u7684\u306a Web \u7248\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f (\u8a73\u3057\u304f\u306f OpenSiv3D for Web ) Windows \u3067 OpenGL \u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304c\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f (\u8a73\u3057\u304f\u306f \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 35) \u30d5\u30a1\u30a4\u30eb\u306e\u975e\u540c\u671f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306a\u3069\u3092\u884c\u3046 HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30c7\u30d5\u30a9\u30eb\u30c8\u3067 HighDPI \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f SVG \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f MIDI \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u52d5\u753b\u3092\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u6271\u3048\u308b VideoTexture \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Windows \u3067\u30da\u30f3\u30bf\u30d6\u30ec\u30c3\u30c8\u306e\u5165\u529b\uff08\u7b46\u5727\u30fb\u50be\u304d\uff09\u3092\u53d6\u5f97\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f 2D \u63cf\u753b\u3067\u30ab\u30b9\u30bf\u30e0\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u30023D \u3067\u3082\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3001\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059 \u3059\u3079\u3066\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\uff08\u518d\u751f\u3001\u505c\u6b62\u3001\u97f3\u91cf\u3001\u30d1\u30f3\u3001\u30b9\u30d4\u30fc\u30c9\uff09\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3057\u305f HPF, LPF, \u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u306a\u3069\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u97f3\u58f0\u30d5\u30a3\u30eb\u30bf\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u6587\u5b57\u306e\u8f2a\u90ed\u3084 Polygon \u3092\u6b63\u78ba\u306b\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Font \u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u5f62\u5f0f\u306b SDF / MSDF \u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Font \u306e\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3001\u8f2a\u90ed\u3001\u30b7\u30e3\u30c9\u30a6\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f String \u578b\u306b\u5bfe\u5fdc\u3057\u305f\u3001\u6b63\u898f\u8868\u73fe\u3092\u6271\u3046\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u308b\u6587\u5b57\u5217\u306e\u96e3\u8aad\u5316\u3092\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30c7\u30de\u30f3\u30b0\u30eb\u3092\u884c\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Kahan \u306e\u52a0\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f 128-bit \u6574\u6570\u578b\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Stopwatch \u3084 Timer \u304c\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e\u57fa\u6e96\u6642\u523b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ISteadyClock \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e Stopwatch \u3084 Timer \u3092\u4e00\u62ec\u3057\u3066\u4e00\u6642\u505c\u6b62\u3055\u305b\u305f\u308a\u3001\u9045\u304f/\u65e9\u304f\u9032\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3057\u305f TimeProfiler \u304c\u3088\u308a\u8a73\u7d30\u306a\u7d71\u8a08\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u5730\u7406\u7a7a\u9593\u30c7\u30fc\u30bf\u306e\u4ea4\u63db\u5f62\u5f0f\u3067\u3042\u308b GeoJSON \u3092\u8aad\u307f\u8fbc\u3080\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u591a\u304f\u306e\u6570\u5b66\u5b9a\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f JSONReader , JSONWriter \u3092\u7d71\u5408\u3057\u305f JSON \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u7c21\u6613\u7684\u306a\u30ad\u30fc\u30d5\u30ec\u30fc\u30e0\u306b\u3088\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046 SimpleAnimation \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u7d71\u8a08\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u6570\u5024\u306b\u5fdc\u3058\u305f\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u884c\u3046\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30d9\u30af\u30c8\u30eb\u30af\u30e9\u30b9\u306b\u591a\u6570\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u56f3\u5f62\u30af\u30e9\u30b9\u306b\u591a\u6570\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Shape2D \u306b\u30cf\u30fc\u30c8\u5f62\u3001\u4e21\u65b9\u5411\u77e2\u5370\u3001Squircle \u5f62\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Polygon \u306b\u67d4\u8edf\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u9577\u65b9\u5f62\u8a70\u8fbc\u307f\u306b 90\u00b0 \u56de\u8ee2\u3092\u8a31\u53ef\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u5404\u7a2e\u4e71\u6570\u95a2\u6570\u304c\u4e71\u6570\u30a8\u30f3\u30b8\u30f3\u3092\u5f15\u6570\u306b\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f UUID \u751f\u6210\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u74b0\u5883\u5909\u6570\u306e\u53d6\u5f97\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u53d6\u5f97\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30e2\u30cb\u30bf\u30fc\u306e\u7269\u7406\u30b5\u30a4\u30ba\u306a\u3069\u3001\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u8a73\u7d30\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Klat \u65b9\u5f0f\u306b\u3088\u308b\u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u753b\u50cf\u5f62\u5f0f WebP, TIFF \u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u97f3\u58f0\u5f62\u5f0f Opus, AIFF, FLAC, MIDI, WMA \u306e\u8aad\u307f\u8fbc\u307f\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u753b\u50cf\u306e\u4e00\u90e8\u5206\u306b\u753b\u50cf\u51e6\u7406\u3092\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f GrabCut \u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f QR \u30b3\u30fc\u30c9\u751f\u6210\u6a5f\u80fd\u3092\u6539\u5584\u3057\u307e\u3057\u305f VideoWriter \u3092\u6539\u5584\u3057\u307e\u3057\u305f \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u5168\u3066\u306e\u30ad\u30fc\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u306b\u304a\u3051\u308b\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u3088\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3057\u305f example \u30d5\u30a1\u30a4\u30eb\u3092\u591a\u6570\u8ffd\u52a0\u3057\u307e\u3057\u305f \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u304c\u3088\u308a\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Spline2D \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u56f3\u5f62\u306e\u8f2a\u90ed\u306e\u4e00\u90e8\u306e\u53d6\u5f97\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u56f3\u5f62\u306e Lerp \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f GPU \u3060\u3051\u3067\u306e\u4e09\u89d2\u5f62\u63cf\u753b\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30ab\u30b9\u30bf\u30e0\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u97f3\u91cf\u3092\u8abf\u6574\u3067\u304d\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Ogg Vorbis \u306e\u30eb\u30fc\u30d7\u30bf\u30b0\u53d6\u5f97\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u51f9\u5305 (Concave hull) \u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u67d4\u8edf\u306a\u753b\u50cf\u30c7\u30b3\u30fc\u30c0\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f \u9589 / \u958b\u533a\u9593\u3092\u6307\u5b9a\u3057\u305f\u4e71\u6570\u751f\u6210\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f SIV3D_SET() \u306b\u3088\u308b\u30d3\u30eb\u30c9\u6642\u306e\u30a8\u30f3\u30b8\u30f3\u8a2d\u5b9a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Effect \u306e\u518d\u5e30\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f CJK \u30d5\u30a9\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u3001 Print \u304c\u4e2d\u56fd\u8a9e\u3001\u97d3\u56fd\u8a9e\u306e\u8868\u793a\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080 VideoReader \u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f 2D \u7269\u7406\u6f14\u7b97\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Siv3D \u304f\u3093\u30c9\u30c3\u30c8\u7d75\u7d20\u6750\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f Siv3D \u304f\u3093 .obj 3D \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f Image::stamp() \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f Line::drawDoubleHeadedArrow() \u3067\u4e21\u65b9\u5411\u77e2\u5370\u3092\u63cf\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u4fdd\u5b58\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f \u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u3092\u5927\u5e45\u306b\u6539\u5584\u3057\u307e\u3057\u305f 2D \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u3088\u308a\u591a\u304f\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f \u591a\u304f\u306e 3D \u5f62\u72b6\u306e\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f Linux \u7248\u306e IME\u306e\u6319\u52d5\u3092\u6539\u5584\u3057\u307e\u3057\u305f \u30e6\u30fc\u30b6\u30a2\u30c9\u30aa\u30f3\u306e\u8ffd\u52a0\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f \u305d\u306e\u4ed6\u591a\u6570\u306e\u65b0\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a \u00b6 Windows \u7248\u306e\u30a2\u30d7\u30ea\u306e\u8d77\u52d5\u6642\u9593\u304c\u6570\u767e\u30df\u30ea\u79d2\u524d\u5f8c\u77ed\u7e2e\u3057\u307e\u3057\u305f Heterogeneous lookup \u306b\u3088\u308a\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3084 StringView \u3067 HashTable \u3084 HashSet \u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u3059\u308b\u969b\u306e\u5b9f\u884c\u6642\u6027\u80fd\u304c\u5411\u4e0a\u3057\u307e\u3057\u305f \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3084\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u304c\u9ad8\u901f\u306b\u306a\u308a\u307e\u3057\u305f Parse / ParseOpt / ParseOr \u306e\u901f\u5ea6\u3092\u6539\u5584\u3057\u307e\u3057\u305f \u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a \u00b6 \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u304c .hpp \u30d5\u30a1\u30a4\u30eb\u304b\u3089 .ipp \u30d5\u30a1\u30a4\u30eb\u306b\u79fb\u3055\u308c\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u304c\u8aad\u307f\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f Windows \u7248\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u30d3\u30eb\u30c9\u304c\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f \u4ed5\u69d8\u5909\u66f4 \u00b6 bool \u578b\u306e\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u591a\u304f\u304c\u3001\u540d\u524d\u306e\u4ed8\u3044\u305f YesNo \u578b\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u304c\u5411\u4e0a\u3057\u307e\u3057\u305f Optional \u578b\u304c C++ \u6a19\u6e96\u306e std::optional \u306b\u8fd1\u3044\u52d5\u4f5c\u3092\u3059\u308b\u3088\u3046\u6539\u5584\u3055\u308c\u307e\u3057\u305f HashTable \u578b\u304c C++ \u6a19\u6e96\u306e std::unordered_map \u306b\u8fd1\u3044\u52d5\u4f5c\u3092\u3059\u308b\u3088\u3046\u6539\u5584\u3055\u308c\u307e\u3057\u305f KDTree \u304c\u3088\u308a\u77ed\u3044\u8a18\u8ff0\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f Concurrenttask \u306f AsyncTask \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u5b50\u30d7\u30ed\u30bb\u30b9\u4f5c\u6210\u95a2\u6570\u306f ChildProcess \u30af\u30e9\u30b9\u306b\u7d71\u5408\u3055\u308c\u307e\u3057\u305f Unicode::FromWString() \u306f Unicode::FromWstring() \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306e U\"{}\"_fmt(x) \u306f\u3001\u6709\u52b9\u6841\u6570\u3059\u3079\u3066\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f Time::Get\uff5e \u306f\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5\u6642\u9593\u3067\u306f\u306a\u304f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u304b\u3089\u306e\u6642\u9593\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f CustomStopwatch \u306f VariableSpeedStopwatch \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f FileSystem::SpecialFolderPath() \u306f FileSystem::GetFolderPath() \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f FileSystem::UniqueFilePath() \u306f UUID \u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u540d\u524d\u3092\u4f5c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f ByteArray \u306f Blob \u304a\u3088\u3073 MemoryReader \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f CSVData \u306f CSV \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f INIData \u306f INI \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f JSONReader , JSONWriter \u306f JSON \u306b\u7d71\u5408\u3055\u308c\u307e\u3057\u305f EasingController \u306f EasingAB \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f Sprite \u306f Buffer2D \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u306f TriangleIndex \u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f MessageBox \u306e\u4ed5\u69d8\u304c\u5909\u308f\u308a\u307e\u3057\u305f \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u4ed5\u69d8\u304c\u5909\u308f\u308a\u307e\u3057\u305f \u7269\u4f53\u691c\u51fa\u6a5f\u80fd\u306f CascadeClassifier \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f Key \u306f Input \u306b\u306a\u308a\u307e\u3057\u305f \u7d75\u6587\u5b57\u3068\u30a2\u30a4\u30b3\u30f3\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u66f4\u65b0\u3057\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u306e\u7a2e\u985e\u304c\u5927\u5e45\u306b\u5897\u3048\u307e\u3057\u305f Image \u306e\u6700\u5927\u30b5\u30a4\u30ba\u3092 1 \u8fba 8192px \u2192 16384px \u306b\u62e1\u5f35\u3057\u307e\u3057\u305f ConstantBuffer \u30b5\u30a4\u30ba 16 \u00d7 N \u30d0\u30a4\u30c8\u5236\u7d04\u304c\u64a4\u5ec3\u3055\u308c\u307e\u3057\u305f \u4e26\u5217\u5b9f\u884c\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u306f SIV3D_CONCURRENT \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f High DPI \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u306a\u308a\u3001 SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f \u4e0d\u5177\u5408\u30fb\u30d0\u30b0\u4fee\u6b63 \u00b6 Array \u306e\u4e26\u5217\u95a2\u6570\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f AsyncTask \u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u306b\u3088\u308b\u5dee\u7570\u3092\u89e3\u6d88\u3057\u307e\u3057\u305f Windows \u306e MakeDragDrop() \u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f PPM \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306e\u4e71\u6570\u306e\u518d\u73fe\u6027\u306e\u6539\u5584\u3057\u307e\u3057\u305f QR \u30b3\u30fc\u30c9\u751f\u6210\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f \u6ce8\u610f\u70b9 \u00b6 Math::SmoothDmap() \u306e\u5f15\u6570\u9806\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3067\u767a\u898b\u3067\u304d\u307e\u305b\u3093 \u30d5\u30a9\u30f3\u30c8\u306e\u7e26\u66f8\u304d\u6a5f\u80fd\u306f\u4e00\u6642\u7684\u306b\u975e\u642d\u8f09\u306b\u306a\u308a\u307e\u3057\u305f \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u6a5f\u80fd\u306f\u4e00\u6642\u7684\u306b\u975e\u642d\u8f09\u306b\u306a\u308a\u307e\u3057\u305f SimpleGUIManager \u6a5f\u80fd\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3057\u305f NoiseGenerator \u30af\u30e9\u30b9\u306f\u4e00\u6642\u7684\u306b\u975e\u642d\u8f09\u306b\u306a\u308a\u307e\u3057\u305f Shift_JIS \u5f62\u5f0f\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f \u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u306b\u3064\u3044\u3066\u3001\u4ed5\u7d44\u307f\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f (\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 15 \u53c2\u7167) \u7d75\u6587\u5b57\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f \u4e71\u6570\u306e\u518d\u73fe\u6027\u304c v0.4.3 \u3068\u4e92\u63db\u304c\u3042\u308a\u307e\u305b\u3093 2D \u7269\u7406\u6f14\u7b97\u306f cm \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5358\u4f4d\u306b\u5909\u66f4\u3057\u307e\u3057\u305f Glyph \u5358\u4f4d\u3067\u306e\u63cf\u753b\u306e\u65b9\u6cd5\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f Windows \u7248\u306f <Siv3D.hpp> \u306e\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u3092\u5168\u3066\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u81ea\u52d5\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002Main.cpp \u306b\u3042\u308b # include <Siv3D.hpp> \u306f\u5b9f\u8cea\u7684\u306b\u306f\u7121\u610f\u5473\u3067\u3059\u3002 # define NO_S3D_USING \u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d8\u30c3\u30c0\u4f5c\u6210\u7528\u30d8\u30c3\u30c0 stdafx.h \u3067\u884c\u3063\u3066\u304f\u3060\u3055\u3044 Audio \u306f Wave \u3068\u4e92\u63db\u306e\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002 .getWave() \u306f .getSamples() \u306b\u7f6e\u304d\u63db\u308f\u308a\u307e\u3057\u305f\u3002 GlobalAudio::BusGetSamples() \u3082\u5229\u7528\u3067\u304d\u307e\u3059 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 nokotan : Web \u7248\u958b\u767a\u3092\u5168\u9762\u7684\u306b\u62c5\u5f53 Ebishu-0309 : Geometry2D:: \u306b\u591a\u6570\u306e\u95a2\u6570\u3092\u5b9f\u88c5 , Shape2D::Squircle() \u306e\u5b9f\u88c5 , Bezier2 , Bezier3 \u306e .boundingRect() \u3092\u5b9f\u88c5, \u30b3\u30fc\u30c9\u306e\u6539\u5584 taotao54321 : Grid \u306e\u4fee\u6b63, \u30b3\u30fc\u30c9\u306e\u6539\u5584 sthairno : Linux \u7248\u306e IME \u51e6\u7406\u6539\u5584 itakawa : Siv3D \u304f\u3093 .obj \u30d5\u30a1\u30a4\u30eb\u63d0\u4f9b take-cheeze : GitHub Actions \u3092\u4f7f\u3063\u305f CI \u306e\u6574\u5099 Luke256 : \u30b3\u30fc\u30c9\u306e\u6539\u5584 YASAI03 : HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6a5f\u80fd SimpleHTTP \u306e\u63d0\u6848\u30fb\u5b9f\u88c5 falrnd : Geometry2D \u306e\u4ea4\u5dee\u5224\u5b9a\u306e\u6539\u5584 yurkth : GeoJSON \u95a2\u9023\u306e\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u5b9f\u88c5 ianCK : \u30b3\u30fc\u30c9\u306e\u6539\u5584 lriki : Siv3D \u304f\u3093\u30c9\u30c3\u30c8\u7d75\u7d20\u6750\u306e\u63d0\u4f9b Ryoga-exe : Color::gamma() \u306e\u30d0\u30b0\u4fee\u6b63 sivboard : \u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u306e\u5b9f\u88c5\u8ffd\u52a0\u3068\u30d0\u30b0\u4fee\u6b63 agehama : PPM \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u306e\u30d0\u30b0\u4fee\u6b63 kurokoji : Linux \u7248 MessageBox \u306e\u8ffd\u52a0 ichi-raven : \u30b3\u30fc\u30c9\u306e\u6539\u5584 azaika : JSON \u30af\u30e9\u30b9\u306e\u8a2d\u8a08\u30fb\u5b9f\u88c5 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8 \u00b6 #01 \u7d71\u8a08\u95a2\u6570: \u767d\u5742, \u30de\u30ad\u30a2, fal_rnd #03 Shape2D::Heart : \u91ce\u83dc\u30b8\u30e5\u30fc\u30b9, \u3066\u3083\u3044\u306e #04 2D \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a: Ebishu, fal_rnd, \u304d\u3064\u306d\u3073 #05 Squircle : Ebishu, Ryoga.exe #07 \u56fd\u3068\u90fd\u5e02 : torin (yurkth) #10 OutlineGlyph to Array<Polygon> : Ebishu, fal_rnd v0.4 \u4e16\u4ee3 \u00b6 v0.4.3 | 2020-04-11 1. \u30c9\u30ed\u30cd\u30fc\u56f3\u3001\u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u4f5c\u6210 \u00b6 \u30c9\u30ed\u30cd\u30fc\u56f3\u3001\u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u8a08\u7b97\u3092\u884c\u3046 Subdivision2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.99 )); const Rect rect ( 50 , 50 , Scene :: Size () - Size ( 100 , 100 )); Subdivision2D subdiv ( rect ); // \u30c9\u30ed\u30cd\u30fc\u4e09\u89d2\u5f62\u5206\u5272\u306e\u4e09\u89d2\u5f62\u30ea\u30b9\u30c8 Array < Triangle > triangles ; // \u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u60c5\u5831\u306e\u30ea\u30b9\u30c8 Array < VoronoiFacet > facets ; // facets \u3092\u9577\u65b9\u5f62\u3067\u30af\u30ea\u30c3\u30d7\u3057 Polygon \u306b\u5909\u63db\u3057\u305f\u30ea\u30b9\u30c8 Array < Polygon > facetPolygons ; while ( System :: Update ()) { const Vec2 pos = Cursor :: Pos (); // \u9577\u65b9\u5f62\u4e0a\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 if ( rect . leftClicked ()) { // \u70b9\u3092\u8ffd\u52a0 subdiv . addPoint ( pos ); // \u30c9\u30ed\u30cd\u30fc\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97 subdiv . calculateTriangles ( triangles ); // \u30dc\u30ed\u30ce\u30a4\u56f3\u306e\u8a08\u7b97 subdiv . calculateVoronoiFacets ( facets ); // \u9577\u65b9\u5f62\u306e\u7bc4\u56f2\u5916\u3092\u30af\u30ea\u30c3\u30d7 facetPolygons = facets . map ([ rect = rect . asPolygon ()]( const VoronoiFacet & f ) { return Geometry2D :: And ( Polygon ( f . points ), rect ). front (); }); } rect . draw ( ColorF ( 0.75 )); for ( auto [ i , facetPolygon ] : Indexed ( facetPolygons )) { facetPolygon . draw ( HSV ( i * 25.0 , 0.65 , 0.8 )). drawFrame ( 3 , ColorF ( 0.25 )); } for ( const auto & triangle : triangles ) { triangle . drawFrame ( 2.5 , ColorF ( 0.9 )); } for ( const auto & facet : facets ) { Circle ( facet . center , 6 ). drawFrame ( 5 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304b\u3089\u6700\u77ed\u8ddd\u96e2\u306b\u3042\u308b\u70b9\u3092\u63a2\u3059 if ( const auto nearestVertexID = subdiv . findNearest ( pos )) { const Vec2 nearestVertex = subdiv . getVertex ( nearestVertexID . value ()); Line ( pos , nearestVertex ). draw ( LineStyle :: RoundDot , 5 , ColorF ( 0.6 )); Circle ( nearestVertex , 16 ). drawFrame ( 3.5 ); } } } 2. \u9577\u65b9\u5f62\u8a70\u8fbc\u307f \u00b6 \u9577\u65b9\u5f62\u306e\u96c6\u5408\u3092\u3001\u5225\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u306b\u52b9\u7387\u7684\u306b\u8a70\u3081\u8fbc\u3080\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b std::pair<Array<Rect>, Size> RectanglePacking::Pack(const Array<Rect>& rects, int32 maxSide) \u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u8a70\u3081\u8fbc\u307f\u5f8c\u306e\u9577\u65b9\u5f62\u306e\u30ea\u30b9\u30c8\u3068\u3001\u305d\u308c\u3089\u3092\u8a70\u3081\u8fbc\u3081\u308b\u6700\u5c0f\u306e\u9577\u65b9\u5f62\u306e\u30b5\u30a4\u30ba\u306e\u30da\u30a2\u3092\u8fd4\u3057\u307e\u3059\u3002\u5165\u529b\u306e rects \u306e\u4f4d\u7f6e\u60c5\u5831\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002 maxSide \u306f\u5e45\u307e\u305f\u306f\u9ad8\u3055\u306e\u6700\u5927\u5024\u3067\u3001\u3053\u308c\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u914d\u5217\u3068 Size(0, 0) \u306e\u30da\u30a2\u3092\u8fd4\u3057\u307e\u3059\u3002\u914d\u5217\u306b\u542b\u307e\u308c\u308b\u9577\u65b9\u5f62\u306e\u9806\u756a\u306f\u3001\u5165\u529b\u3068\u51fa\u529b\u3067\u5909\u308f\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.99 )); // \u8a70\u3081\u8fbc\u3080\u9577\u65b9\u5f62 const Array < Rect > input = { Rect ( 240 , 210 ), Rect ( 500 , 30 ), Rect ( 150 , 120 ), Rect ( 60 , 120 ), Rect ( 180 , 60 ), Rect ( 120 , 240 ) }; // \u8a70\u3081\u8fbc\u307f\u3092\u8a08\u7b97 const std :: pair < Array < Rect > , Size > result = RectanglePacking :: Pack ( input , 600 ); while ( System :: Update ()) { Rect ( result . second ). draw ( ColorF ( 0.7 )); for ( auto [ i , rect ] : Indexed ( result . first )) { rect . draw ( HSV ( i * 40.0 )); } } } \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 # include <Siv3D.hpp> // \u30e9\u30f3\u30c0\u30e0\u306a\u9577\u65b9\u5f62\u306e\u914d\u5217\u3092\u4f5c\u6210 Array < Rect > GenerateRandomRects () { Array < Rect > rects ( Random ( 4 , 32 )); for ( auto & rect : rects ) { const Point pos = RandomPoint ( Rect ( 0 , 0 , Scene :: Size () - Size ( 150 , 150 ))); rect . set ( pos , Random ( 20 , 150 ), Random ( 20 , 150 )); } return rects ; } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.99 )); Array < Rect > input , output ; Size size ( 0 , 0 ); Point offset ( 0 , 0 ); Stopwatch s ; while ( System :: Update ()) { if ( ! s . isStarted () || s > 1.8 s ) { input = GenerateRandomRects (); std :: tie ( output , size ) = RectanglePacking :: Pack ( input , 1024 ); // \u753b\u9762\u4e2d\u592e\u306b\u8868\u793a\u3059\u308b\u3088\u3046\u4f4d\u7f6e\u3092\u8abf\u6574 offset = ( Scene :: Size () - size ) / 2 ; for ( auto & rect : output ) { rect . moveBy ( offset ); } s . restart (); } // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 const double k = Min ( s . sF () * 10 , 1.0 ); const double t = Saturate ( s . sF () - 0.2 ); const double e = EaseInOutExpo ( t ); Rect ( offset , size ). draw ( ColorF ( 0.7 , e )); for ( auto i : step ( input . size ())) { const auto & in = input [ i ]; const auto & out = output [ i ]; const Vec2 pos = in . pos . lerp ( out . pos , e ); const RectF rect ( pos , out . size ); rect . scaledAt ( rect . center (), k ) . draw ( HSV ( i * 25.0 , 0.65 , 0.9 )) . drawFrame ( 2 , 0 , ColorF ( 0.25 )); } } } 3. GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u8aad\u307f\u8fbc\u307f \u00b6 GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u4e00\u9023\u306e\u30d5\u30ec\u30fc\u30e0\u306e Image \u3068\u3001\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u8868\u793a\u6642\u9593\u3092\u53d6\u5f97\u3059\u308b AnimatedGIFReader \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u63cf\u753b\u7528\u306e\u30af\u30e9\u30b9 struct AnimationTexture { Array < Texture > textures ; // \u30d5\u30ec\u30fc\u30e0\u306e\u6642\u9593 Array < int32 > delays ; int32 duration = 0 ; explicit operator bool () const noexcept { return ! textures . isEmpty (); } Size size () const noexcept { if ( ! textures ) { return Size ( 0 , 0 ); } return textures . front (). size (); } size_t frames () const noexcept { return textures . size (); } size_t getFrameIndex ( int32 timeMillisec ) const noexcept { return AnimatedGIFReader :: MillisecToIndex ( timeMillisec , delays , duration ); } const Texture & getTexture ( int32 timeMillisec ) const noexcept { return textures [ getFrameIndex ( timeMillisec )]; } }; void Main () { AnimationTexture animation ; { // GIF \u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f const AnimatedGIFReader gif ( U \"example/test.gif\" ); if ( ! gif ) { throw Error ( U \"Failed to open a gif file\" ); } Array < Image > images ; // GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8aad\u307f\u8fbc\u307f if ( gif . read ( images , animation . delays , animation . duration )) { // Image \u3092 Texture \u306b\u5909\u63db animation . textures = images . map ([]( const Image & i ) { return Texture ( i ); }); } else { throw Error ( U \"Failed to load a gif animation\" ); } } // \u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3001\u30d5\u30ec\u30fc\u30e0\u6570\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u9577\u3055\uff08\u30df\u30ea\u79d2\uff09 Print << U \"{}, {} frames ({} ms)\" _fmt ( animation . size (), animation . frames (), animation . duration ); const Point pos ( 10 , 90 ); while ( System :: Update ()) { const int32 timeMillisec = static_cast < int32 > ( Scene :: Time () * 1000 ); animation . getTexture ( timeMillisec ). draw ( pos ); } } 4. Rect::rounded() \u3067 4 \u3064\u306e\u89d2\u306b\u7570\u306a\u308b\u5024\u3092\u6307\u5b9a\u53ef\u80fd\u306b \u00b6 Rect::rounded() \u306b\u3001\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u3067\u7570\u306a\u308b\u5024\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 )); Array < Rect > rects ; for ( auto p : step ( Size ( 3 , 4 ))) { rects << Rect ( p * Size ( 220 , 140 ), 180 , 100 ). movedBy ( 80 , 40 ); } while ( System :: Update ()) { rects [ 0 ]. rounded ( 30 , 0 , 0 , 0 ). draw ( HSV ( 20 , 0.75 , 1.0 )); rects [ 1 ]. rounded ( 30 , 30 , 0 , 0 ). draw ( HSV ( 40 , 0.75 , 1.0 )); rects [ 2 ]. rounded ( 0 , 30 , 0 , 0 ). draw ( HSV ( 60 , 0.75 , 1.0 )); rects [ 3 ]. rounded ( 30 , 0 , 0 , 30 ). draw ( HSV ( 80 , 0.75 , 1.0 )); rects [ 4 ]. rounded ( 10 , 20 , 30 , 40 ). draw ( HSV ( 100 , 0.75 , 1.0 )); rects [ 5 ]. rounded ( 0 , 30 , 30 , 0 ). draw ( HSV ( 120 , 0.75 , 1.0 )); rects [ 6 ]. rounded ( 100 , 0 , 0 , 0 ). draw ( HSV ( 140 , 0.75 , 1.0 )); rects [ 7 ]. rounded ( 100 , 0 , 100 , 0 ). draw ( HSV ( 160 , 0.75 , 1.0 )); rects [ 8 ]. rounded ( 0 , 0 , 100 , 0 ). draw ( HSV ( 180 , 0.75 , 1.0 )); rects [ 9 ]. rounded ( 100 , 0 , 0 , 20 ). draw ( HSV ( 200 , 0.75 , 1.0 )); rects [ 10 ]. rounded ( 100 , 20 , 100 , 20 ). draw ( HSV ( 220 , 0.75 , 1.0 )); rects [ 11 ]. rounded ( 0 , 20 , 100 , 0 ). draw ( HSV ( 240 , 0.75 , 1.0 )); } } 5. SimpleGUI::HorizontalRadioButtons() \u00b6 \u6c34\u5e73\u306b\u4e26\u3093\u3060\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI::HorizontalRadioButtons() \u304c SimpleGUI \u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Array < String > options = { U \"Windows\" , U \"macOS\" , U \"Linux\" }; size_t indexA = 0 ; size_t indexB = 0 ; while ( System :: Update ()) { // \u6c34\u5e73 SimpleGUI :: HorizontalRadioButtons ( indexA , options , Vec2 ( 20 , 20 )); // \u7e26 SimpleGUI :: RadioButtons ( indexB , options , Vec2 ( 20 , 60 )); } } 6. Math::InvLerp() \u00b6 Math::Lerp(begin, end, t) == value Math::InvLerp(begin, end, value) == t \u3068\u306a\u308b\u3088\u3046\u306a\u5024 t \u3092\u6c42\u3081\u308b Math::InvLerp() \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 , 0.8 , 0.7 )); const Font font ( 40 , Typeface :: Bold ); const double begin = 240.0 ; const double end = 450.0 ; while ( System :: Update ()) { const double value = Cursor :: Pos (). y ; // Math::Lerp(begin, end, t) == value \u306b\u306a\u308b\u5024 t \u3092\u6c42\u3081\u308b const double t = Math :: InvLerp ( begin , end , value ); // \u5024\u3092 [0.0, 1.0] \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u308b const double st = Saturate ( t ); font ( st ). draw ( 20 , 20 ); Line ( Vec2 ( 0 , begin ), Arg :: direction ( Scene :: Width (), 0 )). draw ( 2 , ColorF ( 0.5 )); Line ( Vec2 ( 0 , end ), Arg :: direction ( Scene :: Width (), 0 )). draw ( 2 , ColorF ( 0.5 )); Circle ( Cursor :: Pos (), 50 ). draw ( ColorF ( st )); } } 7. Line \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u8ffd\u52a0 \u00b6 \u540d\u524d\u4ed8\u304d\u5f15\u6570\u3092\u4f7f\u3063\u305f Line \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c 2 \u7a2e\u985e\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Line(pos, pos + dir) \u306e\u3088\u3046\u306b pos \u3092 2 \u56de\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u59cb\u70b9\u306e\u4f4d\u7f6e\u3001\u59cb\u70b9\u304b\u3089\u898b\u305f\u7d42\u70b9\u306e\u65b9\u5411\u3001\u7d42\u70b9\u307e\u3067\u306e\u8ddd\u96e2 Line ( Scene :: Center (), Arg :: angle = 45 _deg , 200 ) . draw ( LineStyle :: RoundCap , 10 ); // \u59cb\u70b9\u306e\u4f4d\u7f6e\u3001\u7d42\u70b9\u307e\u3067\u306e\u30d9\u30af\u30c8\u30eb Line ( Scene :: Center (), Arg :: direction = Vec2 ( 0 , 200 )) . draw ( LineStyle :: RoundCap , 10 , Palette :: Orange ); } } 8. Rect::drawFrame(), Circle::drawPie(), Circle::drawArc() \u306e 2 \u8272\u6307\u5b9a \u00b6 Rect::drawFrame() , Circle::drawPie() , Circle::drawArc() \u306b\u3001\u5185\u5074\u306e\u8272\u3068\u5916\u5074\u306e\u8272\u3092\u5225\u3005\u306b\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { // \u5185\u5074 ColorF(0.1, 0.6, 0.3), \u5916\u5074 ColorF(0.6, 1.0, 0.8) Rect ( 50 , 50 , 300 ) . drawFrame ( 30 , ColorF ( 0.1 , 0.6 , 0.3 ), ColorF ( 0.6 , 1.0 , 0.8 )); // \u5185\u5074 HSV(50), \u5916\u5074 HSV(0) Circle ( 200 , 200 , 100 ) . drawPie ( 0 _deg , 120 _deg , HSV ( 50 ), HSV ( 0 )); // \u5185\u5074 Palette::White, \u5916\u5074 Palette::Black Circle ( 200 , 200 , 100 ) . drawArc ( 180 _deg , 120 _deg , 10 , 10 , Palette :: White , Palette :: Black ); } } 9. ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u306e\u8aad\u307f\u8fbc\u307f \u00b6 ZIP \u30a2\u30fc\u30ab\u30a4\u30d6 (.zip) \u306e\u4e2d\u8eab\u306e\u53d6\u5f97\u3084\u5c55\u958b\u3092\u884c\u3046 ZIPReader \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 ZIPReader::extractToMemory() \u3092\u4f7f\u3046\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u5c55\u958b\u3057\u3066 Texture \u3084 Audio \u306a\u3069\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 - Windows \u3067\u4f5c\u6210\u3055\u308c\u305f Shift-JIS \u30a8\u30f3\u30b3\u30fc\u30c9\u306e ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u542b\u307e\u308c\u308b\u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u3001Windows \u4ee5\u5916\u306e\u74b0\u5883\u3067\u306f\u6b63\u3057\u304f\u6271\u3048\u307e\u305b\u3093 - \u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3042\u3089\u3086\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u6b63\u3057\u304f\u6271\u3044\u305f\u3044\u5834\u5408\u3001 UTF-8 \u30a8\u30f3\u30b3\u30fc\u30c9\u3067 ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044 (7-zip \u306e\u5834\u5408\u306f cu=on \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\uff09 # include <Siv3D.hpp> void Main () { const ZIPReader zip ( U \"example/zip/zip_test.zip\" ); // \u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5217\u6319 for ( const auto & path : zip . enumPaths ()) { Print << path ; } // `zip_test/loremipsum.txt` \u3092 `unzipped1/` \u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b zip . extract ( U \"zip_test/loremipsum.txt\" , U \"unzipped1/\" ); // `zip_test/image/` \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092 `unzipped2/` \u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b zip . extract ( U \"zip_test/image/*\" , U \"unzipped2/\" ); // \u3059\u3079\u3066\u3092 `unzipped3/` \u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b zip . extractAll ( U \"unzipped3/\" ); // `zip_test/image/windmill.png` \u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u5c55\u958b\u3057\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture textureA ( zip . extractToMemory ( U \"zip_test/image/windmill.png\" )); // `zip_test/image/siv3d-kun.png` \u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u5c55\u958b\u3057\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture textureB ( zip . extractToMemory ( U \"zip_test/image/siv3d-kun.png\" )); while ( System :: Update ()) { textureA . draw (); textureB . draw (); } } 10. \u4e0d\u6b63\u306a Polygon \u9802\u70b9\u306e\u81ea\u52d5\u4fee\u6b63 \u00b6 \u624b\u5165\u529b\u306a\u3069\u306b\u3088\u308b\u4e0d\u6b63\u306a Polygon \u306e\u9802\u70b9\u3092\u4fee\u6b63\u3057\u3001\u59a5\u5f53\u306a Array<Polygon> \u306b\u5909\u63db\u3059\u308b\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 20 , Typeface :: Bold ); Array < Vec2 > points ; Array < Polygon > solvedPolygons ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); // \u9802\u70b9\u5217\u304b\u3089\u9069\u5207\u306a Polygon \u3092\u4f5c\u6210 solvedPolygons = Polygon :: Correct ( points , {}); } else if ( MouseR . down ()) { points . clear (); solvedPolygons . clear (); } for ( auto [ i , point ] : Indexed ( points )) { Circle ( point , 5 ). draw (); Line ( points [ i ], points [( i + 1 ) % points . size ()]) . drawArrow ( 2 , Vec2 ( 20 , 20 ), Palette :: Orange ); } font ( points ). draw ( Rect ( 20 , 20 , 600 , 720 )); { Transformer2D trans ( Mat3x2 :: Translate ( 640 , 0 )); font ( solvedPolygons ). draw ( Rect ( 20 , 20 , 600 , 720 )); for ( auto [ i , solvedPolygon ] : Indexed ( solvedPolygons )) { const HSV color ( i * 40.0 , 0.7 , 1.0 ); solvedPolygon . draw ( color ); const auto & outer = solvedPolygon . outer (); for ( auto [ k , point ] : Indexed ( outer )) { const Vec2 begin = outer [ k ]; const Vec2 end = outer [( k + 1 ) % outer . size ()]; const Vec2 v = ( end - begin ). normalized (); const Vec2 c = ( begin + end ) / 2 ; const Vec2 oc = c + v . rotated ( -90 _deg ) * 10 ; Line ( oc - v * 20 , oc + v * 20 ) . drawArrow ( 2 , Vec2 ( 10 , 10 ), color ); } } } } } 11. Direct3D \u30c9\u30e9\u30a4\u30d0 / \u30c7\u30d0\u30a4\u30b9\u306e\u7a2e\u985e\u306e\u5909\u66f4 \u00b6 Windows \u7248\u3067 #include <Siv3D.hpp> \u306e\u524d\u306b\u7279\u5225\u306a\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u7528\u3059\u308b Direct3D \u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u7a2e\u985e\u3092 WARP, Reference \u306a\u3069\u306b\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002GPU \u306e\u30c9\u30e9\u30a4\u30d0\u306e\u554f\u984c\u3067\u6b63\u5e38\u306a\u63cf\u753b\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u306b WARP \u306b\u3088\u308b\u305f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u63cf\u753b\u8ca0\u8377\u304c\u8efd\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3042\u308c\u3070\u3001WARP \u3067\u52d5\u304b\u3059\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3053\u3068\u3082\u9078\u629e\u80a2\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d5\u30e9\u30b0\u306f\u91cd\u8907\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8 \u2192 dGPU (GeForce \u306a\u3069) \u512a\u5148 SIV3D_WINDOWS_D3D_DRIVER_TYPE_HARDWARE_FAVOR_INTEGRATED \u2192 iGPU (Intel UHD Graphics \u306a\u3069) \u512a\u5148 SIV3D_WINDOWS_D3D_DRIVER_TYPE_WARP \u2192 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6 SIV3D_WINDOWS_D3D_DRIVER_TYPE_REFERENCE \u2192 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30c9\u30e9\u30a4\u30d0 \u53c2\u8003: https://docs.microsoft.com/en-us/windows/win32/api/d3dcommon/ne-d3dcommon-d3d_driver_type // \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30ec\u30f3\u30c0\u30e9\u2015\u3092\u4f7f\u7528 (Windows \u3067\u306e\u307f\u6709\u52b9\uff09 # define SIV3D_WINDOWS_D3D_DRIVER_TYPE_WARP // iGPU (Intel UHD Graphics \u306a\u3069) \u512a\u5148 (Windows \u3067\u306e\u307f\u6709\u52b9\uff09 //# define SIV3D_WINDOWS_D3D_DRIVER_TYPE_HARDWARE_FAVOR_INTEGRATED // \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u7528 (Windows \u3067\u306e\u307f\u6709\u52b9\uff09 //# define SIV3D_WINDOWS_D3D_DRIVER_TYPE_REFERENCE // Siv3D.hpp \u3088\u308a\u3082\u524d\u3067\u5b9a\u7fa9 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { texture . draw (); } } 12. \u305d\u306e\u4ed6 \u00b6 Image to Polygon \u306e\u5805\u7262\u6027\u304c\u5411\u4e0a\u3057\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f Linux \u7248\u306e\u30d3\u30eb\u30c9\u3067 AngelScript \u306e\u30ea\u30f3\u30af\u304c\u4e0d\u8981\u306b\u306a\u308a\u307e\u3057\u305f macOS \u3068 Linux \u306e\u4e00\u90e8\u74b0\u5883\u3067 Microphone \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f isOpened() \u3068\u3044\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u306f isOpen() \u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f zlib \u306e\u5727\u7e2e\u5c55\u958b\u3092\u884c\u3046 Zlib::Compress() , Zlib:: Decompress() \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f ParseOpt<float>() \u304c\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f Math::InvSqrt2_v \u304c\u6b63\u3057\u304f\u306a\u304b\u3063\u305f\u306e\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f Visual Studio \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3057\u305f Visual Studio \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u6642\u306b Main.cpp \u304c\u81ea\u52d5\u3067\u958b\u304f\u3088\u3046\u306b\u3057\u307e\u3057\u305f Windows \u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e Icon.ico \u3092 icon.ico \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u307e\u3057\u305f Camera2D \u306e Scene::Size() \u4f9d\u5b58\u3092\u89e3\u6d88\u3057\u307e\u3057\u305f ParticleSystem2DParameters \u306e\u4ed5\u69d8\u3092\u6539\u5584\u3057\u307e\u3057\u305f \u5404\u7a2e RNG \u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f Serial \u304c\u5207\u65ad\u3055\u308c\u3066\u3082 isOpen() \u304c true \u3092\u8fd4\u3057\u3066\u3044\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f RoundRect \u306e\u9802\u70b9\u751f\u6210\u54c1\u8cea\u306e\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f DynamicTexture \u3067\u30b5\u30a4\u30ba\u3068\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u307f\u6307\u5b9a\u3057\u305f\u969b\u306e\u30a8\u30e9\u30fc\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f macOS \u3067\u65e5\u672c\u8a9e\u30d1\u30b9\u3092\u6271\u3046\u3068\u4e00\u90e8\u306e\u95a2\u6570\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f Windows \u3067 Graphics::SetTargetFrameRateHz() \u304c\u5927\u304d\u304f\u4e0d\u6b63\u78ba\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f RenderTexture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7279\u306b\u660e\u793a\u3057\u306a\u3051\u308c\u3070 ColorF(0.0, 1.0) \u3067\u4e2d\u8eab\u3092\u30af\u30ea\u30a2\u3059\u308b\u3088\u3046\u4ed5\u69d8\u5909\u66f4\u3057\u307e\u3057\u305f JSONWriter::write(bool) \u306e\u6319\u52d5\u304c\u6b63\u3057\u304f\u306a\u304b\u3063\u305f\u554f\u984c\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f BasicCamera3D \u306e experimental:: \u3092\u5916\u3057\u307e\u3057\u305f \u305d\u306e\u4ed6\u8efd\u5fae\u306a\u4fee\u6b63\u591a\u6570 v0.4.2 | 2019-12-01 1. SDFFont \u00b6 SDFFont \u306f\u3001\u30b0\u30ea\u30d5\u306e\u753b\u50cf\u3092 Distance field \u5f62\u5f0f\u3067\u6301\u3064 Font \u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u56fa\u5b9a\u30b5\u30a4\u30ba\u3067\u30b0\u30ea\u30d5\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u62e1\u5927\u63cf\u753b\u6642\u306b\u307c\u3084\u3051\u308b\u306a\u3069\u3001\u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u5f31\u304f\u3001\u7e01\u53d6\u308a\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 SDFFont \u30af\u30e9\u30b9\u306f\u3001\u30b0\u30ea\u30d5\u3054\u3068\u306e Distance Field \u3092\u751f\u6210\u3057\u3001\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002 draw() \u3054\u3068\u306b\u7b2c\u4e00\u5f15\u6570\u3067\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u7d50\u679c\u304c\u307c\u3084\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001 Garphics2D::SetSDFParameters() \u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6587\u5b57\u3092\u592a\u3089\u305b\u3089\u308c\u307e\u3059\u3002\u592a\u3055\u3068\u8272\u3092\u5909\u3048\u3066 2 \u56de\u4ee5\u4e0a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u7e01\u53d6\u308a\u306e\u8868\u73fe\u3082\u53ef\u80fd\u3067\u3059\u3002 \u305f\u3060\u3057\u3001 SDFFont \u306e\u751f\u6210\u3084\u63cf\u753b\u306e\u30b3\u30b9\u30c8\u306f Font \u306b\u6bd4\u3079\u3066\u5927\u304d\u3044\u305f\u3081\u3001 Font \u3067\u5341\u5206\u306a\u30b1\u30fc\u30b9\u3067\u306f\u5f93\u6765\u901a\u308a Font \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002 SDFFont \u306e\u54c1\u8cea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30d5\u306e Distance Field \u306e\u30b5\u30a4\u30ba\u3068\u3001\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e Distance Field \u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u6587\u5b57\u306e\u592a\u3089\u305b\u306b\u3064\u3044\u3066\u3082\u3001\u5927\u304d\u3044\u5024\u3067\u306f\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 SDFFont \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a Distance Field \u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 SDFFont \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; // SDFFont const SDFFont sdfFont ( distanceFieldSize , Typeface :: Bold ); const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 40 , Vec2 ( 20 , 20 )); sdfFont ( text ). draw ( 80 , Vec2 ( 20 , 80 )); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 180 )); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.2 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.2 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 ), Palette :: Black ); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.0 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.0 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 )); } } SDFFont \u306e\u4e8b\u524d\u751f\u6210 \u00b6 SDFFont \u306e\u5404\u30b0\u30ea\u30d5\u306e Distance field \u306f\u3001\u751f\u6210\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u30b0\u30ea\u30d5\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u901f\u5ea6\u4f4e\u4e0b\u304c\u9632\u3052\u307e\u3059\u3002 SDFFont::preload(s) \u3067\u3001\u6587\u5b57\u5217 s \u542b\u307e\u308c\u308b\u30b0\u30ea\u30d5\u306e Distance field \u3092\u751f\u6210\u3001 SDFFont::preload(imagePath, jsonPath) \u3067 2 \u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3001 SDFFont \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u4e8b\u524d\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u30b0\u30ea\u30d5\u306f\u5b9f\u884c\u6642\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( distanceFieldSize , Typeface :: Bold ) . preload ( s ) . saveGlyphs ( U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 // \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3084 Distance field \u304c\u4e00\u81f4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044 const SDFFont sdfFont ({ U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" }, distanceFieldSize , Typeface :: Bold ); if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 20 )); } } \u6bd4\u8f03\u7528\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); constexpr Vec2 pos ( 0 , 0 ); const String text = U \"OpenSiv3D \\n \u3042\u3044\u3046\u3048\u304a\" ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } s += text ; // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3068 text \u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( 60 , Typeface :: Light ). preload ( s ). saveGlyphs ( U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" ); SDFFont ( 60 , Typeface :: Heavy ). preload ( s ). saveGlyphs ( U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" ); SDFFont ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ). preload ( s ). saveGlyphs ( U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 const Array < SDFFont > sdfFonts = { SDFFont ({ U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" }, 60 , Typeface :: Light ), SDFFont ({ U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" }, 60 , Typeface :: Heavy ), SDFFont ({ U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" }, 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; for ( const auto & sdfFont : sdfFonts ) { if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } } // \u6bd4\u8f03\u7528\u306e\u901a\u5e38 Font const Array < Font > fonts = { Font ( 60 , Typeface :: Light ), Font ( 60 , Typeface :: Heavy ), Font ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; size_t fontIndex = 0 , method = 0 ; double fontSize = 80 , outline1 = 0.0 , outline2 = 0.0 ; HSV innerColor = Palette :: Black , outlineColor = Palette :: White ; while ( System :: Update ()) { const auto & sdfFont = sdfFonts [ fontIndex ]; const auto & font = fonts [ fontIndex ]; if ( method == 0 ) { Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline2 ); sdfFont ( text ). draw ( fontSize , pos , innerColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline1 ); sdfFont ( text ). draw ( fontSize , pos , outlineColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( fontSize , pos , innerColor ); } else if ( method == 1 ) { Transformer2D tr ( Mat3x2 :: Scale ( fontSize / font . fontSize ())); font ( text ). draw ( pos , innerColor ); } SimpleGUI :: RadioButtons ( fontIndex , { U \"Light 60\" , U \"Heavy 60\" , U \"Logo 50\" }, Vec2 ( 20 , 360 ), 150 ); SimpleGUI :: RadioButtons ( method , { U \"SDFFont\" , U \"Font\" }, Vec2 ( 20 , 480 ), 150 ); SimpleGUI :: Slider ( U \"size: {:.0f}\" _fmt ( fontSize ), fontSize , 15 , 550 , Vec2 ( 20 , 560 ), 150 , 200 ); SimpleGUI :: Slider ( U \"outline1: {:.2f}\" _fmt ( outline1 ), outline1 , 0.0 , 0.49 , Vec2 ( 20 , 600 ), 150 , 200 , ( method == 0 )); SimpleGUI :: Slider ( U \"outline2: {:.2f}\" _fmt ( outline2 ), outline2 , 0.0 , 0.49 , Vec2 ( 20 , 640 ), 150 , 200 , ( method == 0 )); SimpleGUI :: ColorPicker ( innerColor , Vec2 ( 400 , 560 )); SimpleGUI :: ColorPicker ( outlineColor , Vec2 ( 580 , 560 )); } } 2. \u96c6\u4e2d\u7dda\u63cf\u753b \u00b6 \u5b9f\u9a13\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4 HamFramework \u306b\u8ffd\u52a0\u3055\u308c\u305f SaturatedLinework \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u3001\u30b3\u30df\u30ab\u30eb\u306a\u52b9\u679c\u3084\u75be\u8d70\u611f\u3092\u6f14\u51fa\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7dda\u3092\u7c21\u5358\u306b\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62\u3001\u5916\u5468\u306e\u9577\u65b9\u5f62\u3001\u7dda\u306e\u672c\u6570\u3001\u7dda\u306e\u592a\u3055\u3001\u9577\u3055\u306e\u3070\u3089\u3064\u304d\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u306a\u3069\u304c\u3042\u308a\u3001 .draw() \u306e\u5f15\u6570\u3067\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u591a\u6570\u306e\u4e09\u89d2\u5f62\u3092\u751f\u6210\u3057\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3001\u751f\u6210\u3057\u305f\u4e09\u89d2\u5f62\u306f\u518d\u5229\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> # include <HamFramework.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.98 , 0.96 , 0.94 )); // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62 Ellipse target ( 400 , 300 , 180 , 120 ); // \u5916\u5468\u306e\u9577\u65b9\u5f62 Rect outer = Scene :: Rect (); // \u7dda\u306e\u592a\u3055 double minThickness = 3.0 , maxThickness = 10.0 ; // \u7dda\u306e\u672c\u6570 double lineCount = 150 ; // \u7dda\u306e\u9577\u3055\u306e\u3070\u3089\u3064\u304d double offsetRange = 60.0 ; // \u4e71\u6570\u30b7\u30fc\u30c9 uint64 seed = 12345 ; SaturatedLinework < Ellipse > linework ( target , outer ); linework . setThickness ( minThickness , maxThickness ) . setLineCount ( static_cast < size_t > ( lineCount )) . setOffsetRange ( offsetRange ); const Texture texture ( Emoji ( U \"\ud83e\udd80\" )); while ( System :: Update ()) { if ( MouseR . down ()) { target . setCenter ( Cursor :: Pos ()); linework . setTargetShape ( target ); } texture . scaled ( 1.6 ). drawAt ( target . center ); // \u96c6\u4e2d\u7dda\u3092\u63cf\u753b linework . draw ( ColorF ( 0.1 )); if ( SimpleGUI :: Slider ( U \"lineCount\" , lineCount , 0.0 , 400.0 , Vec2 ( 20 , 20 ), 150 )) { linework . setLineCount ( static_cast < size_t > ( lineCount )); } if ( SimpleGUI :: Slider ( U \"offsetRange\" , offsetRange , 0.0 , 100.0 , Vec2 ( 20 , 60 ), 150 )) { linework . setOffsetRange ( offsetRange ); } if ( SimpleGUI :: Button ( U \"Change seed\" , Vec2 ( 20 , 100 ))) { seed = RandomUint64 (); linework . setSeed ( seed ); } } } 3. \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 \u00b6 \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u4f7f\u3063\u3066\u3001\u5916\u90e8\u30c7\u30d0\u30a4\u30b9\u3068\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3067\u306f Arduino UNO \u3067 LED \u306e\u70b9\u706f/\u6d88\u706f\u3092 PC \u304b\u3089\u5236\u5fa1\u3057\u3001\u5408\u308f\u305b\u3066 1 \u30d0\u30a4\u30c8\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002 Arduino \u306e\u30b3\u30fc\u30c9 \u00b6 void setup () { pinMode ( 13 , OUTPUT ); // 13 \u30d4\u30f3 - LED - \u62b5\u6297 - GND // 9600bps \u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u958b\u304f Serial . begin ( 9600 ); } unsigned char i = 0 ; // \u30c6\u30b9\u30c8\u7528\u306b PC \u5074\u306b\u9001\u308b\u5024 void loop () { // 250 \u30df\u30ea\u79d2\u6b62\u3081\u308b delay ( 250 ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b 1 \u30d0\u30a4\u30c8\u51fa\u529b Serial . write ( i ); ++ i ; // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const int val = Serial . read (); if ( val == -1 ) // \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u304c\u7121\u3044 { return ; } if ( val == 0 ) { digitalWrite ( 13 , LOW ); // LOW \u3092\u51fa\u529b } else if ( val == 1 ) { digitalWrite ( 13 , HIGH ); // HIGH \u3092\u51fa\u529b } else if ( val == 2 ) { i = 0 ; } } PC \u5074\u306e\u30b3\u30fc\u30c9 \u00b6 # include <Siv3D.hpp> void Main () { // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const Array < SerialPortInfo > infos = System :: EnumerateSerialPorts (); const Array < String > options = infos . map ([]( const SerialPortInfo & info ) { return U \"{} ({})\" _fmt ( info . port , info . description ); }) << U \"none\" ; Serial serial ; size_t index = ( options . size () - 1 ); while ( System :: Update ()) { const bool isOpen = serial . isOpen (); // OpenSiv3D v0.4.2 \u4ee5\u524d\u306f serial.isOpened() if ( SimpleGUI :: Button ( U \"Write 0\" , Vec2 ( 200 , 20 ), 120 , isOpen )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (0) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 0 ); } if ( SimpleGUI :: Button ( U \"Write 1\" , Vec2 ( 340 , 20 ), 120 , isOpen )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (1) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 1 ); } if ( SimpleGUI :: Button ( U \"Write 2\" , Vec2 ( 480 , 20 ), 120 , isOpen )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (2) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 2 ); } if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 200 , 60 ))) { ClearPrint (); if ( index == ( options . size () - 1 )) { serial = Serial (); } else { Print << U \"Open {}\" _fmt ( infos [ index ]. port ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 if ( serial . open ( infos [ index ]. port )) { Print << U \"Succeeded\" ; } else { Print << U \"Failed\" ; } } } if ( const size_t available = serial . available ()) { // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a Print << U \"READ: \" << serial . readBytes (); } } } 4. PoissonDisk2D \u00b6 \u307b\u3069\u3088\u3044\u8ddd\u96e2\u3067\u91cd\u306a\u3089\u306a\u3044\u70b9\u7fa4\u3092\u751f\u6210\u3059\u308b PoissonDisk2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); const Rect rect ( 100 , 100 , 600 , 400 ); double r = 15.0 ; // \u70b9\u7fa4\u3092\u751f\u6210 PoissonDisk2D pd ( rect . size , r ); while ( System :: Update ()) { rect . drawFrame ( 1 , 1 , ColorF ( 0.2 )); for ( const auto & point : pd . getPoints ()) { Circle ( point , r / 4 ). movedBy ( rect . pos ). draw (); } if ( SimpleGUI :: Slider ( r , 5.0 , 40.0 , Vec2 ( 10 , 10 ))) { pd = PoissonDisk2D ( rect . size , r ); } } } 5. JSONWriter \u00b6 \u6210\u5f62\u3055\u308c\u305f JSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u9806\u6b21\u51fa\u529b\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u4fdd\u5b58\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { JSONWriter json ; json . startObject (); { json . key ( U \"Window\" ). startObject (); { json . key ( U \"title\" ). write ( U \"My application\" ); json . key ( U \"width\" ). write ( 800 ); json . key ( U \"height\" ). write ( 600 ); json . key ( U \"sizable\" ). write ( false ); } json . endObject (); json . key ( U \"Scene\" ). startObject (); { json . key ( U \"background\" ). write ( ColorF ( 0.8 , 0.9 , 1.0 )); } json . endObject (); json . key ( U \"Array\" ). startObject (); { json . key ( U \"values\" ). writeArray ({ 11 , 22 , 33 , 44 , 55 }); } json . endObject (); json . key ( U \"Items\" ). startArray (); { json . startObject (); { json . key ( U \"label\" ). write ( U \"Forest\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 100 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Ocean\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 300 ); json . key ( U \"y\" ). write ( 200 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Mountain\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 500 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); } json . endArray (); } json . endObject (); // \u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u4fdd\u5b58 json . save ( U \"test.json\" ); while ( System :: Update ()) { } } \u51fa\u529b\u3055\u308c\u308b JSON \u30d5\u30a1\u30a4\u30eb { \"Window\" : { \"title\" : \"My application\" , \"width\" : 800 , \"height\" : 600 , \"sizable\" : \"false\" }, \"Scene\" : { \"background\" : \"(0.8, 0.9, 1, 1)\" }, \"Array\" : { \"values\" : [ 11 , 22 , 33 , 44 , 55 ] }, \"Items\" : [ { \"label\" : \"Forest\" , \"pos\" : { \"x\" : 100 , \"y\" : 100 } }, { \"label\" : \"Ocean\" , \"pos\" : { \"x\" : 300 , \"y\" : 200 } }, { \"label\" : \"Mountain\" , \"pos\" : { \"x\" : 500 , \"y\" : 100 } } ] } 6. Geometry2D::IsClockwise() \u00b6 \u9802\u70b9\u306e\u914d\u5217\u304c\u6642\u8a08\u56de\u308a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.96 , 0.98 , 1.0 )); Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); } if ( MouseR . down ()) { points . clear (); } const bool isClockwise = Geometry2D :: IsClockwise ( points ); ClearPrint (); Print << isClockwise ; for ( const auto & point : points ) { Circle ( point , 10 ). draw ( Palette :: Orange ); } if ( points . size () > 2 ) { // \u6642\u8a08\u56de\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u77e2\u5370\u3067\u3064\u306a\u3050 if ( isClockwise ) { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . stretched ( -10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } else { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . reversed () . stretched ( -10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } } } } 7. Circle::draw(innerColor, outerColor) \u00b6 Circle \u3084 Ellipse \u3067\u4e2d\u5fc3\u306e\u8272\u3068\u5916\u5468\u306e\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u304c\u9ec4\u8272\u3001\u5916\u5468\u304c\u9ed2 Circle ( Scene :: Center (), 400 ). draw ( Palette :: Yellow , Palette :: Black ); } } 8. SimpleGUI::Headline / ColorPicker \u00b6 SimpleGUI \u306b\u3001\u898b\u51fa\u3057\u3092\u4ed8\u3051\u308b\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3068\u3001\u8272\u3092\u9078\u629e\u3059\u308b\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { double p0 = 1.0 , p1 = 0.4 , p2 = 0.5 ; HSV hsv = Palette :: Gray ; size_t index = 0 ; while ( System :: Update ()) { Scene :: SetBackground ( hsv ); // Headline SimpleGUI :: Headline ( U \"Config\" , Vec2 ( 20 , 20 )); { SimpleGUI :: Slider ( U \"Param1\" , p0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"Param2\" , p1 , Vec2 ( 20 , 100 )); SimpleGUI :: Slider ( U \"Param3\" , p2 , Vec2 ( 20 , 140 )); } SimpleGUI :: Headline ( U \"Background\" , Vec2 ( 240 , 20 )); { // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc SimpleGUI :: ColorPicker ( hsv , Vec2 ( 240 , 60 )); } SimpleGUI :: Headline ( U \"Terrain\" , Vec2 ( 420 , 20 )); { SimpleGUI :: RadioButtons ( index , { U \"Plain\" , U \"Hill\" , U \"Mountain\" }, Vec2 ( 420 , 60 ), 150 ); } } } 9. ToastNotification \u00b6 Windows \u3067\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 , 0.6 , 0.3 )); // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID NotificationID latest = -1 ; // \u753b\u50cf\u3092\u4f5c\u6210\u30fb\u4fdd\u5b58 Emoji :: CreateImage ( U \"\ud83c\udf55\" ). save ( U \"pizza.png\" ); while ( System :: Update ()) { ClearPrint (); // \u901a\u77e5\u306e\u72b6\u614b Print << ( int32 ) Platform :: Windows :: ToastNotification :: GetState ( latest ); // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\u306e\u7d50\u679c Print << U \"Action: \" << Platform :: Windows :: ToastNotification :: GetAction ( latest ); if ( SimpleGUI :: Button ( U \"Send a notification\" , Vec2 ( 10 , 70 ))) { ToastNotificationProperty toast { . title = U \"Title\" , // \u901a\u77e5\u306e\u30bf\u30a4\u30c8\u30eb . message = U \"Message\" , // \u901a\u77e5\u306e\u672c\u6587 . imagePath = U \"pizza.png\" , // \u5927\u304d\u3044\u753b\u50cf\u3060\u3068\u4f7f\u308f\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b . actions = { U \"Yes\" , U \"No\" } // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\uff08\u4e0d\u8981\u306a\u5834\u5408\u306f\u8a2d\u5b9a\u3057\u306a\u3044\uff09 }; // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID \u3092\u53d6\u5f97 latest = Platform :: Windows :: ToastNotification :: Show ( toast ); } } } 10. SimpleGUIManager \u00b6 TOML \u30d5\u30a1\u30a4\u30eb\u306b SimpleGUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u8a18\u8ff0\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u884c\u4e2d\u306b\u64cd\u4f5c\u3057\u305f\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // SimpleGUI \u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb const FilePath tomlPath = FileSystem :: FullPath ( U \"example/gui/gui.toml\" ); // \u66f4\u65b0\u3092\u691c\u77e5 const DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // GUI \u3092\u30ed\u30fc\u30c9 SimpleGUIManager gui ( tomlPath ); while ( System :: Update ()) { // TOML \u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 GUI \u3092\u518d\u30ed\u30fc\u30c9 for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) { ClearPrint (); gui . load ( tomlPath ); } } // GUI \u3092\u66f4\u65b0\u30fb\u63cf\u753b gui . draw (); if ( gui . button ( U \"bt-OK\" )) // \"bt-OK\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"OK\" ; } else if ( gui . button ( U \"bt-Cancel\" )) // \"bt-Cancel\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"Cancel\" ; } Scene :: SetBackground ( gui . colorPicker ( U \"cp-Color\" )); // \"cp-Color \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5024 } // \u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3068\u5024\u3092 save.toml \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3059\u308b // \u3053\u308c\u3092 SimpleGUIManager \u3067\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b //gui.save(U\"save.toml\"); } 11. Print \u306e\u6392\u4ed6\u5236\u5fa1 \u00b6 \u30c7\u30d0\u30c3\u30b0\u306a\u3069\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001 Print \u3092\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 // Siv3D \u306e\u4e26\u5217\u51e6\u7406\u95a2\u6570\u3092\u6709\u52b9\u5316\u3059\u308b\u30de\u30af\u30ed // \u30d8\u30c3\u30c0\u304c\u5897\u3048\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u5c11\u3057\u9577\u304f\u306a\u308b # define SIV3D_CONCURRENT # include <Siv3D.hpp> void Main () { // 0\uff5e15 \u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406 Range ( 0 , 15 ). parallel_each ([]( int32 i ) { // \u30b9\u30ec\u30c3\u30c9\u8b58\u5225\u5b50\u3092\u5408\u308f\u305b\u3066\u8868\u793a Print << U \"{}: {}\" _fmt ( std :: this_thread :: get_id (), i ); }); while ( System :: Update ()) { } } 12. 3D \u5f62\u72b6 \u00b6 Quaternion , OBB \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Ray \u3068\u5404\u7a2e 3D \u5f62\u72b6\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3082\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u305f\u3060\u3057 v0.4.1 \u3068\u540c\u69d8\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); Array < OBB > objects ; for ( auto x : Range ( -2 , 2 )) { for ( auto z : Range ( 2 , -2 , -1 )) { objects << OBB ( Vec3 ( x * 4 , 1 , z * 4 ), Vec3 ( 3 , 2 , 0.5 ), Quaternion :: RollPitchYaw ( 0 , x * 30 _deg , 0 )); objects << OBB ( Vec3 ( x * 4 , 5 , z * 4 ), Vec3 ( 2 , 1 , 2 ), Quaternion :: RollPitchYaw ( x * 30 _deg , 0 , 0 )); } } while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( -10 , 10 )) { Line3D ( Vec3 ( -10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , -10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } const Vec3 eyePos = camera . getEyePosition (); const Vec3 rayEnd = camera . screenToWorldPoint ( Cursor :: Pos (), 0.5f ); const Ray cursorRay ( eyePos , ( rayEnd - eyePos ). normalized ()); objects . sort_by ([ & ]( const OBB & a , const OBB & b ) { return ( eyePos . distanceFromSq ( a . center )) > ( eyePos . distanceFromSq ( b . center )); }); Optional < size_t > intersectionIndex ; for ( auto [ i , object ] : IndexedReversed ( objects )) { if ( cursorRay . intersects ( object )) { intersectionIndex = i ; Cursor :: RequestStyle ( CursorStyle :: Hand ); break ; } } for ( auto [ i , object ] : Indexed ( objects )) { const HSV color (( object . center . x * 50 + object . center . z * 10 ), 1.0 , ( i == intersectionIndex ) ? 1.0 : 0.3 ); object . draw ( mat , color ); } } } } v0.4.1 \u30b5\u30f3\u30d7\u30eb\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \u00b6 AABB , Triangle3D , Line3D \u306a\u3069\u304c\u3001 s3d::experimental \u540d\u524d\u7a7a\u9593\u304b\u3089 s3d \u540d\u524d\u7a7a\u9593\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( -1 , 1 , -1 ), Vec3 ( 1 , 1 , -1 ), Vec3 ( -1 , -1 , -1 ), Vec3 ( 1 , -1 , -1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( -1 , 1 , 1 ), Vec3 ( 1 , -1 , 1 ), Vec3 ( -1 , -1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( -10 , 10 )) { Line3D ( Vec3 ( -10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , -10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); AABB ( Vec3 ( -8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); AABB ( Vec3 ( 8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); AABB ( Vec3 ( -8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , -50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , -50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } } 13. Microphone \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 macOS \u306a\u3069\u4e00\u90e8\u306e\u74b0\u5883\u3067\u30de\u30a4\u30af\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); // unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u65e2\u5b9a\u306e\u97f3\u58f0\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); LineString points ( 800 ); FFTResult fft ; while ( System :: Update ()) { // \u6ce2\u5f62\u3092\u53ef\u8996\u5316 { const size_t pos = mic . posSample (); const Array < WaveSampleS16 >& buffer = mic . getBuffer (); const size_t bufferLength = buffer . size (); for ( size_t i = 0 ; i < points . size (); ++ i ) { const size_t bufferPos = ( pos + bufferLength - ( 800 - i )) % bufferLength ; const double value = buffer [ bufferPos ]. left / 32768.0 ; points [ i ]. set ( i , 300 - value * 300 ); } points . draw ( 2 ); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u53d6\u5f97 mic . fft ( fft ); // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u4e0a\u306b\u5468\u6ce2\u6570\u3092\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } 14. QRDecoder \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 \u8907\u6570\u306e QR \u30b3\u30fc\u30c9\u306e\u691c\u51fa\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // Web \u30ab\u30e1\u30e9\u3092\u8d77\u52d5 Webcam webcam ( 0 ); webcam . setResolution ( 1280 , 720 ); if ( ! webcam . start ()) { throw Error ( U \"\" ); } Image image ; DynamicTexture texture ; QRDecoder qrDecoder ; Array < std :: pair < Quad , bool >> quads ; while ( System :: Update ()) { // \u65b0\u3057\u3044\u64ae\u5f71\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u5f97 if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); Array < QRContent > qrs ; // QR \u30b3\u30fc\u30c9\u3092\u691c\u51fa qrDecoder . decode ( image , qrs ); quads . clear (); for ( const auto & qr : qrs ) { quads . emplace_back ( qr . quad , qr . isValid ()); // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a if ( qr . isValid ()) { Print << qr . text ; } } texture . fill ( image ); } texture . draw (); // QR \u30b3\u30fc\u30c9\u306e\u9818\u57df\u3092\u8868\u793a // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u8d64\u8272 for ( const auto & quad : quads ) { quad . first . drawFrame ( 6 , quad . second ? Palette :: Red : Palette :: Gray ); } } } 15. RenderTexture, MSRenderTexture \u6539\u5584 \u00b6 RenderTexture \u3084 MSRenderTexture \u306e .clear() , .read() , .resolve() \u304c const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u4fee\u6b63\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002 v0.4.1 | 2019-07-20 1. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u3053\u308c\u307e\u3067\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b7\u30fc\u30f3\u306b\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7528\u610f\u3057\u305f\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 RenderTexture \u3092\u4f5c\u6210\u3057\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3068\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\uff08\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5909\u66f4\uff09\u3002\u63cf\u753b\u3055\u308c\u305f\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u89e3\u9664\u3055\u308c\u305f\u3042\u3068\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u63cf\u753b\u306b\u8ee2\u7528\u3067\u304d\u307e\u3059\u3002 \u6ce8\u610f: \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u6700\u4e2d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u7d75\u6587\u5b57 const Texture emoji ( Emoji ( U \"\ud83d\ude07\" )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 600 , 600 , Palette :: White ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . drawAt ( Cursor :: Pos ()); } rt . draw (); emoji . drawAt ( Cursor :: Pos ()); // Clear \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 650 , 20 ))) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u767d\u3067\u30af\u30ea\u30a2 rt . clear ( Palette :: White ); } } } 2. \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u901a\u5e38\u306e RenderTexture \u3078\u306e\u63cf\u753b\u3067\u306f\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u304c\u6709\u52b9\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u56f3\u5f62\u3092\u63cf\u753b\u3057\u305f\u969b\u306b\u30b8\u30e3\u30ae\u30fc\u304c\u751f\u3058\u307e\u3059\u3002 MSRenderTexture \u3092\u4f7f\u3046\u3068\u3001\u901a\u5e38\u306e\u30b7\u30fc\u30f3\u3078\u306e\u63cf\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 MSRenderTexture \u306b\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u3001\u5225\u306e\u63cf\u753b\u3067\u4f7f\u3046\u969b\u306b\u306f\u3001 Graphics2D::Flush() \u306b\u3088\u3063\u3066\u305d\u306e\u6642\u70b9\u307e\u3067\u306e\u63cf\u753b\u51e6\u7406\u3092\u3059\u3079\u3066\u5b9f\u884c\uff08\u30d5\u30e9\u30c3\u30b7\u30e5\uff09\u3057\u3066 MSRenderTexture \u306b\u78ba\u5b9f\u306b\u63cf\u753b\u3057\u305f\u3042\u3068\u306b\u3001 MSRenderTexture::resolve() \u3092\u884c\u3044\u3001 MSRenderTexture \u5185\u306e\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 200 , 200 ); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture msrt ( 200 , 200 ); while ( System :: Update ()) { rt . clear ( ColorF ( 0.0 , 1.0 )); { ScopedRenderTarget2D target ( rt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } msrt . clear ( ColorF ( 0.0 , 1.0 )); { { ScopedRenderTarget2D target ( msrt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } // 2D \u63cf\u753b\u3092\u30d5\u30e9\u30c3\u30b7\u30e5 Graphics2D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db msrt . resolve (); } rt . draw ( 100 , 0 ); msrt . draw ( 400 , 0 ); } } 3. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u30b7\u30a7\u30fc\u30c0\u51e6\u7406 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u69d8\u3005\u306a\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570 1 \u3064\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u5909\u66f4\u3082\u4e0d\u8981\u3067\u3059\u3002\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 void Copy(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void Downsample(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u7e2e\u5c0f\u3057\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurH(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurV(const TextureRegion& from, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u7e26\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur(const TextureRegion& from, RenderTexture& to, const Vec2& direction); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 direction: \u30d6\u30e9\u30fc\u306e\u65b9\u5411 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6307\u5b9a\u3057\u305f\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur(const TextureRegion& from, RenderTexture& internalBuffer, RenderTexture& to); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 internalBuffer: \u4e2d\u9593\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u306b\u7e26\u65b9\u5411\u3068\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from , internalBuffer , to \u306f\u3044\u305a\u308c\u3082\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u96a3\u308a\u5408\u3046\u3082\u306e\u540c\u58eb\u306f\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 GaussianBlurH(from, internalBuffer); GaussianBlurV(internalBuffer, to); \u3068\u7b49\u4fa1\u3067\u3059\u3002 \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 \u00b6 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // \u7e26\u3001\u6a2a\u304c 4 \u5206\u306e 1 \u30b5\u30a4\u30ba\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( texture . size () / 4 ); // \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 Shader :: Downsample ( texture , rt ); while ( System :: Update ()) { rt . draw (); } } \u30ac\u30a6\u30b9\u307c\u304b\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // bay.jpg \u306f 2560x1440 \u306a\u306e\u3067\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3057\u3066\u30ed\u30fc\u30c9 const Texture texture ( Image ( U \"example/bay.jpg\" ). scale ( 1280 , 720 )); // \u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba constexpr Size blurAreaSize ( 480 , 320 ); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f RenderTexture rtA ( blurAreaSize ), rtB ( blurAreaSize ); RenderTexture rtA4 ( blurAreaSize / 4 ), rtB4 ( blurAreaSize / 4 ); RenderTexture rtA8 ( blurAreaSize / 8 ), rtB8 ( blurAreaSize / 8 ); while ( System :: Update ()) { const Point cursorPos = Cursor :: Pos (); // \u80cc\u666f\u753b\u50cf\u306e\u3046\u3061\u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df const Rect blurArea ( cursorPos , blurAreaSize ); // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/8\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( texture ( blurArea ), rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); // \u80cc\u666f\u3092\u63cf\u753b texture . draw (); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u5f8c\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 RoundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b RoundRect ( cursorPos , blurAreaSize , 40 )( rtA8 . resized ( blurAreaSize )). draw (); } } 4. \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 \u00b6 2D \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u56f3\u5f62\u304c\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u63cf\u304b\u308c\u308b\u3068\u304d\u3001\u3069\u306e\u3088\u3046\u306a\u8272\u3092\u51fa\u529b\u3059\u308b\u304b\u306f\u3001\u300c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u2015\u30c0\u300d\u3068\u547c\u3070\u308c\u308b\u3001\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b GPU \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u901a\u3057\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 5. \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210 \u00b6 \u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u300c\u5b50\u30d7\u30ed\u30bb\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\u3001\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u305f\u308a\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u969b\u306b\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"C:/Windows/System32/notepad.exe\" ; # elif SIV3D_PLATFORM(MACOS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210 ChildProcess child = Process :: Spawn ( path ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } while ( System :: Update ()) { ClearPrint (); // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u304b\u3092\u53d6\u5f97 Print << child . isRunning (); // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u30b3\u30fc\u30c9 Print << child . getExitCode (); if ( child . isRunning ()) { if ( SimpleGUI :: Button ( U \"Terminate\" , Vec2 ( 100 , 20 ))) { // \u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86 child . terminate (); } } } } \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406 \u00b6 \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u4e00\u65b9\u306e\u6a19\u6e96\u51fa\u529b\u3092\u4ed6\u65b9\u306e\u6a19\u6e96\u5165\u529b\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\"Console\" \u306f\u901a\u5e38\u306e C++ \u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 # include <iostream> int main () { int a , b ; std :: cin >> a >> b ; std :: cout << ( a + b ) << std :: endl ; } # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console.exe\" ; # else // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff09 ChildProcess child = Process :: Spawn ( path , Pipe :: StdInOut ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } child . ostream () << 10 << std :: endl ; child . ostream () << 20 << std :: endl ; int32 result ; child . istream () >> result ; Print << U \"result: \" << result ; while ( System :: Update ()) { } } 6. \u5b9f\u9a13\u7684\u306a 3D \u63cf\u753b\u5bfe\u5fdc \u00b6 \u5b9f\u9a13\u7684\u306a 3D \u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( -1 , 1 , -1 ), Vec3 ( 1 , 1 , -1 ), Vec3 ( -1 , -1 , -1 ), Vec3 ( 1 , -1 , -1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( -1 , 1 , 1 ), Vec3 ( 1 , -1 , 1 ), Vec3 ( -1 , -1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); experimental :: Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( -10 , 10 )) { experimental :: Line3D ( Vec3 ( -10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); experimental :: Line3D ( Vec3 ( i , 0 , -10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } experimental :: AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); experimental :: AABB ( Vec3 ( -8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); experimental :: AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); experimental :: AABB ( Vec3 ( 8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); experimental :: AABB ( Vec3 ( -8 , 1 , -8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 \u30de\u30a6\u30b9\u30af\u30ea\u30c3\u30af\u3067\u3001\u5de6\u4e0a\u306e\u9ad8\u3055\u30de\u30c3\u30d7\u306b\u5c71\u3092\u63cf\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , -50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , -50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } } v0.0\uff5ev0.3 \u4e16\u4ee3 \u00b6 \u65e7 Siv3D \u00b6 \u65e7 Siv3D \u66f4\u65b0\u5c65\u6b74","title":"\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8"},{"location":"ja-jp/releases/#\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8","text":"","title":"\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8"},{"location":"ja-jp/releases/#v06-\u4e16\u4ee3","text":"v0.6.6 | 2022-11-22","title":"v0.6 \u4e16\u4ee3"},{"location":"ja-jp/releases/#v04-\u4e16\u4ee3","text":"v0.4.3 | 2020-04-11","title":"v0.4 \u4e16\u4ee3"},{"location":"ja-jp/releases/#v00v03-\u4e16\u4ee3","text":"","title":"v0.0\uff5ev0.3 \u4e16\u4ee3"},{"location":"ja-jp/releases/#\u65e7-siv3d","text":"\u65e7 Siv3D \u66f4\u65b0\u5c65\u6b74","title":"\u65e7 Siv3D"},{"location":"ja-jp/support/","text":"\u30b5\u30dd\u30fc\u30c8 \u00b6 1. Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u00b6 2. OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 3. Siv3D \u52c9\u5f37\u4f1a \u00b6 4. \u00b6","title":"\u30b5\u30dd\u30fc\u30c8"},{"location":"ja-jp/support/#\u30b5\u30dd\u30fc\u30c8","text":"","title":"\u30b5\u30dd\u30fc\u30c8"},{"location":"ja-jp/support/#1-siv3d-\u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3-slack","text":"","title":"1. Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack"},{"location":"ja-jp/support/#2-opensiv3d-\u5b9f\u88c5\u4f1a","text":"","title":"2. OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/support/#3-siv3d-\u52c9\u5f37\u4f1a","text":"","title":"3. Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/support/#4","text":"","title":"4."},{"location":"ja-jp/api/classes/","text":"Siv3D \u306e\u30af\u30e9\u30b9\u4e00\u89a7 \u00b6 \u3088\u304f\u4f7f\u3046\u91cd\u8981\u306a\u3082\u306e\u306b \u2605 \u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002 \u6570\u5024 \u00b6 \u578b\u540d \u8aac\u660e bool \u2605 \u30d6\u30fc\u30ea\u30a2\u30f3\u578b\uff08 false \u307e\u305f\u306f true \uff09 int8 \u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u578b\uff08-128 \uff5e 127\uff09 uint8 \u7b26\u53f7\u7121\u3057 8-bit \u6574\u6570\u578b\uff080 \uff5e 255\uff09 int16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u578b\uff08-32,768 \uff5e 32,767\uff09 uint16 \u7b26\u53f7\u7121\u3057 16-bit \u6574\u6570\u578b\uff080 \uff5e 65,535\uff09 int32 \u2605 \u7b26\u53f7\u4ed8\u304d 32-bit \u6574\u6570\u578b\uff08-2,147,483,648 \uff5e 2,147,483,647\uff09 uint32 \u2605 \u7b26\u53f7\u7121\u3057 32-bit \u6574\u6570\u578b\uff080 \uff5e 4,294,967,295\uff09 int64 \u7b26\u53f7\u4ed8\u304d 64-bit \u6574\u6570\u578b\uff08-9,223,372,036,854,775,808 \uff5e 9,223,372,036,854,775,807\uff09 uint64 \u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 int128 \u7b26\u53f7\u4ed8\u304d 128-bit \u6574\u6570\u578b uint128 \u7b26\u53f7\u7121\u3057 128-bit \u6574\u6570\u578b float \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b double \u2605 \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b size_t \u2605 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u8868\u73fe\u3059\u308b\u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 BigInt \u4efb\u610f\u7cbe\u5ea6\u591a\u500d\u9577\u6574\u6570\u578b HalfFloat \u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b BigFloat \u6709\u52b9\u6570\u5b57 100 \u6841\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b \u6587\u5b57\u3084\u6587\u5b57\u5217 \u00b6 \u578b\u540d \u8aac\u660e char8 UTF-8 \u306e 1 \u8981\u7d20\uff08 char \u306e\u5225\u540d\uff09 char16 UTF-16 \u306e 1 \u8981\u7d20\uff08 char16_t \u306e\u5225\u540d\uff09 char32 \u2605 UTF-32 \u306e 1 \u8981\u7d20\uff08 char32_t \u306e\u5225\u540d\uff09 String \u2605 \u6587\u5b57\u5217\u30af\u30e9\u30b9\u3002\u8981\u7d20\u306f char32 StringView \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 FilePath \u2605 \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 FilePathView \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 URL URL \u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 URLView URL \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 \u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u578b\u540d \u8aac\u660e Array<Type, Allocator> \u2605 \u52d5\u7684\u914d\u5217\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::vector \u306e\u7f6e\u304d\u63db\u3048\uff09 DisjointSet<IndexType> Union-Find \u6728 Grid<Type, Allocator> \u2605 \u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217 HashSet<Type, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Set\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_set \u306e\u7f6e\u304d\u63db\u3048\uff09 HashTable<Key, Value, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Map\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_map \u306e\u7f6e\u304d\u63db\u3048\uff09 KDTree<DatasetAdapter> KD \u6728 KDTreeAdapter<Dataset, PointType, ElementType, Dim> KD \u6728 \u306e\u60c5\u5831 None_t Optional \u578b\u3067\u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\uff08 std::nullopt_t \u306e\u5225\u540d\uff09 NonNull<Pointer> \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u305f\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 Optional<Type> \u2605 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u578b\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::optional \u306e\u7f6e\u304d\u63db\u3048\uff09 std::array<Type, size_t> \u2605 \u56fa\u5b9a\u9577\u914d\u5217 StringCompare \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9 StringHash \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9 2D \u56f3\u5f62 \u00b6 \u578b\u540d \u8aac\u660e Bezier2 \u2605 \u4e8c\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 \u2605 \u4e09\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Circle \u2605 \u5186 Circular \u2605 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Circular3 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 Circular3F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 Circular6 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 Circular6F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 Circular9 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 Circular9F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 CircularBase<Float, int32> \u5186\u5ea7\u6a19 CircularF \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Ellipse \u2605 \u6955\u5186 Float2 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 FloatQuad \u51f8\u56db\u89d2\u5f62\uff08\u8981\u7d20\u306f float \uff09 FloatRect \u4e0a\u4e0b\u5de6\u53f3\u3067\u5b9a\u7fa9\u3059\u308b\u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f float \uff09 Line \u2605 \u7dda\u5206 LineString \u2605 \u9023\u7d9a\u3059\u308b\u7dda\u5206\uff08 Array<Vec2> \u306e\u7f6e\u304d\u63db\u3048\uff09 Mat3x2 \u2605 \u30a2\u30d5\u30a3\u30f3\u5909\u63db\u7528\u306e 3x2 \u884c\u5217 Mat3x3 \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u5909\u63db\u7528\u306e 3x3 \u884c\u5217 MultiPolygon \u591a\u89d2\u5f62\u306e\u96c6\u5408\uff08 Array<Polygon> \u306e\u7f6e\u304d\u63db\u3048\uff09 OffsetCircular \u2605 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 OffsetCircular3 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 OffsetCircular3F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 OffsetCircular6 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 OffsetCircular6F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 OffsetCircular9 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 OffsetCircular9F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 OffsetCircularBase \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19 OffsetCircularF \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Point \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f int32 \uff09 Polygon \u2605 \u591a\u89d2\u5f62\uff08\u7a74\u3082\u6301\u3066\u308b\uff09 Quad \u2605 \u51f8\u56db\u89d2\u5f62 Rect \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f int32 \uff09 RectF \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f double \uff09 RoundRect \u2605 \u89d2\u4e38\u9577\u65b9\u5f62 Shape2D \u2605 \u591a\u89d2\u5f62\u4f5c\u6210\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Size \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f int32 \uff09 \uff08 Point \u306e\u5225\u540d\uff09 SizeF \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f double \uff09 \uff08 Vec2 \u306e\u5225\u540d\uff09 Spline2D \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda Triangle \u2605 \u4e09\u89d2\u5f62 Vec2 \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 3D \u5f62\u72b6 \u00b6 \u578b\u540d \u8aac\u660e Box \u2605 \u5404\u8fba\u304c XYZ \u8ef8\u306b\u5e73\u884c\u306a\u76f4\u65b9\u4f53 Cone \u5186\u9310 Cylinder \u2605 \u5186\u67f1 Cylindrical \u2605 \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<double> \u306e\u5225\u540d\uff09 CylindricalBase<Float> \u5186\u67f1\u5ea7\u6a19 CylindricalF \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<float> \u306e\u5225\u540d\uff09 Disc \u5186\u76e4 Float3 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 Float4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 InfinitePlane \u5e73\u9762 Line3D \u2605 3D \u7dda\u5206 Mat4x4 \u2605 4x4 \u884c\u5217 OrientedBox \u2605 \u5411\u304d\u306e\u3042\u308b\u76f4\u65b9\u4f53 Plane \u2605 \u5927\u304d\u3055\u304c\u6709\u9650\u306e XZ \u5e73\u9762 Quaternion \u2605 \u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3 Ray \u2605 \u30ec\u30a4 Sphere \u2605 \u7403 Spherical \u2605 \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<double> \u306e\u5225\u540d\uff09 SphericalBase<Float> \u7403\u9762\u5ea7\u6a19 SphericalF \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<float> \u306e\u5225\u540d\uff09 Triangle3D 3D \u4e09\u89d2\u5f62 Vec3 \u2605 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 Vec4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 ViewFrustum \u8996\u9310\u53f0 \u8272 \u00b6 \u578b\u540d \u8aac\u660e Color \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f uint8 \uff09 ColorF \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f double \uff09 ColormapType \u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u306e\u7a2e\u985e ColorOption \u8272\u7a7a\u9593\u306e\u8a2d\u5b9a HSV \u2605 HSVA \u30ab\u30e9\u30fc \u6642\u9593\u306e\u5358\u4f4d \u00b6 \u578b\u540d \u8aac\u660e Days \u6642\u9593\uff08\u65e5\uff09\uff08\u6574\u6570\uff09 DaysF \u6642\u9593\uff08\u65e5\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Hours \u6642\u9593\uff08\u6642\uff09\uff08\u6574\u6570\uff09 HoursF \u6642\u9593\uff08\u6642\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Minutes \u6642\u9593\uff08\u5206\uff09\uff08\u6574\u6570\uff09 MinutesF \u6642\u9593\uff08\u5206\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Seconds \u6642\u9593\uff08\u79d2\uff09\uff08\u6574\u6570\uff09 SecondsF \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Milliseconds \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6574\u6570\uff09 MillisecondsF \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Microseconds \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6574\u6570\uff09 MicrosecondsF \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Nanoseconds \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6574\u6570\uff09 NanosecondsF \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Duration \u2605 \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09\uff08 SecondsF \u306e\u5225\u540d\uff09 \u30a8\u30e9\u30fc \u00b6 \u578b\u540d \u8aac\u660e BadOptionalAccess \u7121\u52b9\u306a Optional \u3078\u306e\u30a2\u30af\u30bb\u30b9\u30a8\u30e9\u30fc EngineError \u30a8\u30f3\u30b8\u30f3\u5185\u90e8\u306e\u30a8\u30e9\u30fc Error \u2605 \u30a8\u30e9\u30fc NotImplementedError \u672a\u5b9f\u88c5\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u305f\u30a8\u30e9\u30fc ParseError \u30d1\u30fc\u30b9\u95a2\u6570\u306e\u30a8\u30e9\u30fc \u69d8\u3005\u306a\u30af\u30e9\u30b9 \u00b6 \u578b\u540d \u8aac\u660e ACLineStatus \u96fb\u6e90\u306e\u63a5\u7d9a\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b AdaptiveThresholdMethod \u9069\u5fdc\u7684\u95be\u5024\u51e6\u7406\u306b\u304a\u3044\u3066\u95be\u5024\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b aligned_float4 \u30cd\u30a4\u30c6\u30a3\u30d6\u306e SIMD Float4 \u578b Allocator<Type, size_t> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u5bfe\u5fdc\u30a2\u30ed\u30b1\u30fc\u30bf AnimatedGIFReader GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3046\u30af\u30e9\u30b9 AnimatedGIFWriter GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u51fa\u3057\u3092\u884c\u3046\u30af\u30e9\u30b9 ArcEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f27\u5f62\u72b6\uff09 AssetHandle<AssetType> \u30a2\u30bb\u30c3\u30c8\u30cf\u30f3\u30c9\u30eb AssetID<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetIDWrapper<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetState \u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b AsyncHTTPTask \u975e\u540c\u671f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 AsyncTask<Type> \u975e\u540c\u671f\u51e6\u7406\u30af\u30e9\u30b9\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::future \u306e\u7f6e\u304d\u63db\u3048\uff09 Audio \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30af\u30e9\u30b9 AudioAsset \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8 AudioAssetData \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 AudioFormat \u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b AudioGroup \u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u30aa\u30fc\u30c7\u30a3\u30aa AudioLoopTiming \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30eb\u30fc\u30d7\u4f4d\u7f6e\u6307\u5b9a BasicCamera2D 2D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicCamera3D 3D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicPerlinNoise<Float> Perlin \u30ce\u30a4\u30ba BatteryStatus \u30d0\u30c3\u30c6\u30ea\u30fc\u306e\u6b8b\u91cf\u3092\u8868\u3059\u5217\u6319\u578b BinaryReader \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 BinaryWriter \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 BitmapGlyph \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30b0\u30ea\u30d5 Blend \u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b BlendOp \u30d6\u30ec\u30f3\u30c9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b BlendState \u2605 \u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 Blob \u2605 \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf BorderType \u753b\u50cf\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u6642\u306e\u5883\u754c\u7dda\u306e\u6271\u3044\u3092\u8868\u3059\u5217\u6319\u578b Buffer2D 2D \u63cf\u753b\u30d0\u30c3\u30d5\u30a1 Byte 1 \u30d0\u30a4\u30c8\u3092\u8868\u73fe\u3059\u308b\u578b Camera2D \u2605 2D \u30ab\u30e1\u30e9 Camera2DParameters 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a CameraControl \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b CascadeClassifier Cascade \u306b\u3088\u308b\u753b\u50cf\u5206\u985e\u5668 ChildProcess \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u3068\u7ba1\u7406\u30af\u30e9\u30b9 CircleEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f62\u72b6\uff09 CommonFloat<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonFloat_t<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonVector<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b CommonVector_t<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b ConstantBuffer<Type> \u2605 \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBufferBase \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u8a73\u7d30\u60c5\u5831 ConstantBufferBinding \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 CopyOption \u30d5\u30a1\u30a4\u30eb\u30b3\u30d4\u30fc\u6642\u306e\u52d5\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b CPUInfo CPU \u60c5\u5831 CSV \u2605 CSV \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 CursorStyle \u2605 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3059\u5217\u6319\u578b Date \u2605 \u65e5\u4ed8 DateTime \u2605 \u65e5\u4ed8\u3068\u6642\u523b DayOfWeek \u66dc\u65e5\u3092\u8868\u3059\u5217\u6319\u578b DeadZone \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a2d\u5b9a DeadZoneType \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b DebugCamera3D \u2605 \u30c7\u30d0\u30c3\u30b0\u7528\u306e 3D \u30ab\u30e1\u30e9 DefaultAllocator<Type> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u8003\u616e\u3057\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ed\u30b1\u30fc\u30bf DepthFunc \u30c7\u30d7\u30b9\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u8868\u3059\u5217\u6319\u578b DepthStencilState \u30c7\u30d7\u30b9\u30fb\u30b9\u30c6\u30f3\u30b7\u30eb\u30b9\u30c6\u30fc\u30c8 Deserializer<Reader> \u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 detail::Gamepad_impl \u2605 \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 Gamepad(\u2026) \u306e\u623b\u308a\u5024 detail::XInput_impl \u2605 Xinput \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 XInput(\u2026) \u306e\u623b\u308a\u5024 DirectoryWatcher \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u306e\u76e3\u8996\u30af\u30e9\u30b9 DragItemType \u30c9\u30e9\u30c3\u30b0\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b DragStatus \u30c9\u30e9\u30c3\u30b0\u306e\u72b6\u614b DrawableText \u2605 \u63cf\u753b\u30c6\u30ad\u30b9\u30c8\u3002 font(\u2026) \u306e\u623b\u308a\u5024 DroppedFilePath \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u60c5\u5831 DroppedText \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u60c5\u5831 DynamicMesh \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30e1\u30c3\u30b7\u30e5 DynamicTexture \u2605 \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 EdgePreservingFilterType EdgePreservingFilter \u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Effect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8 Emission2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306b\u304a\u3051\u308b\u653e\u51fa Emoji \u6a19\u6e96\u7d75\u6587\u5b57 EngineOption \u30a8\u30f3\u30b8\u30f3\u306e\u8a2d\u5b9a ESSL OpenGL ES Shading Language \u30d5\u30a1\u30a4\u30eb Exif Exif \u30c7\u30fc\u30bf FFTResult \u2605 FFT \u306e\u7d50\u679c FFTSampleLength FFT \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u8868\u3059\u5217\u6319\u578b FileAction \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b FileChange \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3068\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 FileFilter \u30d5\u30a1\u30a4\u30eb\u62e1\u5f35\u5b50\u30d5\u30a3\u30eb\u30bf FloodFillConnectivity \u753b\u50cf\u5857\u308a\u3064\u3076\u3057\u306e\u9023\u7d50\u6027\u3092\u8868\u3059\u5217\u6319\u578b Font \u2605 \u30d5\u30a9\u30f3\u30c8 FontAsset \u2605 \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8 FontAssetData \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 FontMethod \u2605 \u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b FontStyle \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b FormatData \u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u60c5\u5831\u683c\u7d0d\u30d0\u30c3\u30d5\u30a1 GamepadInfo \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831 GeoJSONBase GeoJSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 GeoJSONFeature GeoJSON Feature \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONFeatureCollection GeoJSON FeatureCollection \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONGeometry GeoJSON Geometry \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONType GeoJSON\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b GLSL \u2605 GLSL \u30d5\u30a1\u30a4\u30eb Glyph \u30b0\u30ea\u30d5 GlyphCluster \u30b0\u30ea\u30d5\u30af\u30e9\u30b9\u30bf GlyphIndex \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30b0\u30ea\u30d5\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08 uint32 \u306e\u5225\u540d\uff09 GlyphInfo \u30b0\u30ea\u30d5\u60c5\u5831 GMInstrument \u2605 General MIDI (GM) \u306b\u304a\u3051\u308b\u697d\u5668\u3092\u8868\u3059\u5217\u6319\u578b GrabCut \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa GrabCutClass \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa\u306b\u304a\u3051\u308b\u80cc\u666f\u3068\u524d\u666f\u3092\u8868\u3059\u5217\u6319\u578b HLSL \u2605 HLSL \u30d5\u30a1\u30a4\u30eb HTMLWriter HTML \u6587\u66f8\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 HTTPAsyncStatus \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u9032\u884c\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b HTTPProgress HTTP \u901a\u4fe1\u306e\u9032\u6357 HTTPResponse HTTP \u30ec\u30b9\u30dd\u30f3\u30b9 HTTPStatusCode HTTP \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b IAddon \u30a2\u30c9\u30aa\u30f3\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAsset \u30a2\u30bb\u30c3\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 IAudioDecoder \u97f3\u58f0\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioEncoder \u97f3\u58f0\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioStream \u52d5\u7684\u66f4\u65b0\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Icon \u6a19\u6e96\u30a2\u30a4\u30b3\u30f3 IEffect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageDecoder \u753b\u50cf\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageEncoder \u753b\u50cf\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Image \u2605 \u753b\u50cf\u30c7\u30fc\u30bf ImageAddressMode \u753b\u50cf\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ImageFormat \u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageInfo \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831 ImagePixelFormat \u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageROI \u753b\u50cf\u30c7\u30fc\u30bf\u5185\u306e\u9818\u57df InfiniteList<Type> \u7121\u9650\u30ea\u30b9\u30c8 INI \u2605 INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d INIKey INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30ad\u30fc INISection INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30bb\u30af\u30b7\u30e7\u30f3 INIValueWrapper INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 Input \u2605 \u5165\u529b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 InputCombination Input \u306e\u7d44\u307f\u5408\u308f\u305b InputDeviceType \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b InputGroup Input \u306e\u7d44\u307f\u5408\u308f\u305b InterpolationAlgorithm \u753b\u50cf\u62e1\u5927\u7e2e\u5c0f\u306e\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b IPv4Address IPv4 \u30a2\u30c9\u30ec\u30b9 IReader Reader \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IScene<State, Data> \u2605 \u30b7\u30fc\u30f3\u7ba1\u7406\u7528\u306e\u30b7\u30fc\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ISteadyClock \u6642\u523b\u63d0\u4f9b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IWriter Writer \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 JoyCon Joy-Con KahanSummation<Float> \u30ab\u30cf\u30f3\u306e\u52a0\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7528\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 KeyEvent \u30ad\u30fc\u5165\u529b\u306e\u8a73\u7d30 KlattTTSParameters Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u8a2d\u5b9a KlattWaveform Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u6ce2\u5f62\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b LanguageCode \u8a00\u8a9e\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Leap::Bone Leap Motion \u306b\u304a\u3051\u308b\u30dc\u30fc\u30f3\u306e\u60c5\u5831 Leap::Connection \u63a5\u7d9a\u3055\u308c\u305f Leap \u30c7\u30d0\u30a4\u30b9\u306e\u30cf\u30f3\u30c9\u30eb Leap::Hand Leap Motion \u306b\u304a\u3051\u308b\u624b\u306e\u60c5\u5831 Leap::TrackingMode Leap Motion \u306b\u304a\u3051\u308b\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b LetterCase \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u8868\u3059\u5217\u6319\u578b LicenseInfo \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831 LineStyle \u7dda\u306e\u30b9\u30bf\u30a4\u30eb ListBoxState \u2605 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u72b6\u614b LogLevel \u51fa\u529b\u3055\u308c\u308b\u30ed\u30b0\u306e\u8a73\u7d30\u5ea6\u3092\u8868\u3059\u5217\u6319\u578b LogType \u30ed\u30b0\u51fa\u529b\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b ManagedScript \u81ea\u52d5\u7ba1\u7406\u3055\u308c\u305f\u30b9\u30af\u30ea\u30d7\u30c8 MatchResults \u6b63\u898f\u8868\u73fe\u306e\u30de\u30c3\u30c1\u7d50\u679c Material 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30de\u30c6\u30ea\u30a2\u30eb MathParser \u6570\u5f0f\u30d1\u30fc\u30b5 MD5Value MD5 MemoryMappedFile \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30af\u30e9\u30b9 MemoryMappedFileView \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 MemoryReader \u30e1\u30e2\u30ea\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryViewReader \u30e1\u30e2\u30ea\u30d3\u30e5\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryWriter \u30e1\u30e2\u30ea\u3078\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 Mesh \u2605 3D \u30e1\u30c3\u30b7\u30e5 MeshData \u2605 3D \u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u30d0\u30c3\u30d5\u30a1\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d0\u30c3\u30d5\u30a1 MeshGlyph \u30e1\u30c3\u30b7\u30e5\u30b0\u30ea\u30d5 MessageBoxResult \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u7d50\u679c\u3092\u8868\u3059\u5217\u6319\u578b MessageBoxStyle \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b Microphone \u2605 \u30de\u30a4\u30af MicrophoneInfo \u30de\u30a4\u30af\u306e\u60c5\u5831 MicrosecClock \u30de\u30a4\u30af\u30ed\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MIDINote MIDI \u30ce\u30fc\u30c8 MillisecClock \u30df\u30ea\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MiniScene<State> \u7c21\u6613\u7248\u306e\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc MixBus \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30df\u30c3\u30af\u30b9\u30d0\u30b9\u756a\u53f7\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_Exists \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_NotFound \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Model \u2605 3D \u30e2\u30c7\u30eb ModelMeshPart 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4\u306e\u69cb\u6210\u8981\u7d20 ModelObject 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4 MonitorInfo \u30e2\u30cb\u30bf\u30fc\u306e\u60c5\u5831 MSDFGlyph MSDF \u65b9\u5f0f\u306e\u30b0\u30ea\u30d5 MSL Metal Shading Language \u30d5\u30a1\u30a4\u30eb\uff08\u672a\u5b9f\u88c5\uff09 MSRenderTexture \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\uff08\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u4ed8\u304d\uff09\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 NamedParameter<Tag, Type> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NamedParameterHelper<Tag> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NativeFilePath OS \u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u8868\u73fe\u578b NavMesh \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMeshConfig \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u306e\u8a2d\u5b9a NormalComputation \u6cd5\u7dda\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b OpenMode \u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b OutlineGlyph \u8f2a\u90ed\u30b0\u30ea\u30d5 Particle2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb ParticleSystem2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2DParameters 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a PerlinNoise Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<double> \u306e\u5225\u540d\uff09 PerlinNoiseF Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<float> \u306e\u5225\u540d\uff09 PhongMaterial Phong \u30e2\u30c7\u30eb\u306e Material PhongMaterialInternal Phong \u30e2\u30c7\u30eb\u306e Material \u306e\u5185\u90e8\u5f62\u5f0f PianoKey \u2605 \u97f3\u540d\u3092\u8868\u3059\u5217\u6319\u578b Pipe \u30d1\u30a4\u30d7\u901a\u4fe1\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b PixelShader \u2605 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 PixelShaderAsset \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 PixelShaderAssetData \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 PlaceHolder_t \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u578b Platform::Windows::HLSLCompileOption HLSL \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 PlayingCard::Card \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u756a\u53f7\u3001\u30b9\u30fc\u30c8\u3001\u88cf\u8868\u306a\u3069\u306e\u30c7\u30fc\u30bf PlayingCard::CardInfo \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u63cf\u753b\u7528\u306e\u60c5\u5831 PlayingCard::Pack \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30af\u30e9\u30b9 PlayingCard::Suit \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u30b9\u30fc\u30c8\uff08\u7d75\u67c4\u306e\u30de\u30fc\u30af\uff09\u3092\u8868\u3059\u5217\u6319\u578b PoissonDisk2D 2D \u30dd\u30ef\u30bd\u30f3\u5206\u5e03\u30af\u30e9\u30b9 PolygonEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u591a\u89d2\u5f62\uff09 PolygonFailureType Polygon \u306e\u5165\u529b\u9802\u70b9\u306e\u691c\u8a3c\u7d50\u679c PolygonGlyph \u591a\u89d2\u5f62\u306b\u3088\u308b\u30b0\u30ea\u30d5 PowerStatus \u30b7\u30b9\u30c6\u30e0\u306e\u96fb\u6e90\u306e\u72b6\u614b ProController Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u306e Gamepad \u30a2\u30c0\u30d7\u30bf ProfilerStat \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u60c5\u5831 QRContent QR \u30b3\u30fc\u30c9\u306e\u30b9\u30ad\u30e3\u30f3\u7d50\u679c QRErrorCorrection QR \u30b3\u30fc\u30c9\u306e\u8aa4\u308a\u8a02\u6b63\u30ec\u30d9\u30eb\u3092\u8868\u3059\u5217\u6319\u578b QRMode QR \u30b3\u30fc\u30c9\u306e\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b QRScanner QR \u30b3\u30fc\u30c9\u306e\u8aad\u307f\u53d6\u308a\u30af\u30e9\u30b9 RDTSCClock CPU \u30b5\u30a4\u30af\u30eb\u6570\u30ab\u30a6\u30f3\u30bf\u30fc RectanglePack \u9577\u65b9\u5f62\u8a70\u8fbc\u307f\u7d50\u679c RectEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u9577\u65b9\u5f62\uff09 RegExp \u6b63\u898f\u8868\u73fe RenderTexture \u2605 \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 ResizeMode \u2605 \u30b7\u30fc\u30f3\u306e\u81ea\u52d5\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ResourceOption \u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u4f7f\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b SamplerState \u2605 \u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SaturatedLinework<TargetShape, URNG> \u96c6\u4e2d\u7dda\u63cf\u753b\u30af\u30e9\u30b9 SceneManager<State, Data> \u2605 \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc ScopedColorAdd2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u52a0\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedColorMul2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u4e57\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader2D 2D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader3D 3D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport2D 2D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport3D 3D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopeGuard<Callback> \u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9 Script \u30b9\u30af\u30ea\u30d7\u30c8 ScriptCompileOption \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b ScriptFunction<Ret(Args\u2026)> \u30b9\u30af\u30ea\u30d7\u30c8\u95a2\u6570 ScriptModule \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30e2\u30b8\u30e5\u30fc\u30eb SDFGlyph SDF \u65b9\u5f0f\u306b\u3088\u308b\u30b0\u30ea\u30d5 Serial \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 Serializer<Writer> \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ShaderGroup \u30b7\u30a7\u30fc\u30c0\u8a00\u8a9e\u306e\u5dee\u3092\u5438\u53ce\u3059\u308b\u30af\u30e9\u30b9 ShaderStage \u30b7\u30a7\u30fc\u30c0\u30b9\u30c6\u30fc\u30b8\u3092\u8868\u3059\u5217\u6319\u578b SIMD_Float4 SIMD \u5bfe\u5fdc Float4 SimpleAnimation \u30ad\u30fc\u30d5\u30ec\u30fc\u30e0\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u88dc\u52a9\u30af\u30e9\u30b9 Sky \u5929\u7a7a\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30f3\u30b8\u30f3\uff08\u5b9f\u9a13\u7684\uff09 SoundFont \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8 SpecialFolder \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3059\u5217\u6319\u578b SplineIndex Spline2D \u4e0a\u306e\u4f4d\u7f6e Step<T, N, S> \u2605 \u30eb\u30fc\u30d7\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Step2D \u2605 2D \u30eb\u30fc\u30d7\u306e\u4e00\u5143\u5316\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Stopwatch \u2605 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Subdivision2D 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30af\u30e9\u30b9 Subdivision2DEdgeType 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u30a8\u30c3\u30b8\u306e\u60c5\u5831 Subdivision2DPointLocation 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u70b9\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5217\u6319\u578b SVG SVG \u30c7\u30fc\u30bf TCPClient TCP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 TCPError TCP \u901a\u4fe1\u306e\u30a8\u30e9\u30fc\u3092\u8868\u3059\u5217\u6319\u578b TCPServer TCP \u30b5\u30fc\u30d0 TCPSessionID TCP \u306e\u30bb\u30c3\u30b7\u30e7\u30f3 ID\uff08 uint64 \u306e\u5225\u540d\uff09 TextEditState \u2605 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u72b6\u614b TextEncoding \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5f62\u5f0f TextInputMode \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u30e2\u30fc\u30c9 TextReader \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TextStyle \u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30bf\u30a4\u30eb Texture \u2605 \u30c6\u30af\u30b9\u30c1\u30e3 TextureAddressMode \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b TextureAsset \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8 TextureAssetData \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 TexturedCircle \u5186\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TextureDesc \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b TexturedQuad \u51f8\u56db\u89d2\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TexturedRoundRect \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u9818\u57df TextureFilter \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf TextureFormat \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 TexturePixelFormat \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b TextureRegion \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df TextWriter \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 TimeProfiler \u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30af\u30e9\u30b9 Timer \u30bf\u30a4\u30de\u30fc ToastNotificationID \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e ID\uff08 int64 \u306e\u5225\u540d\uff09 ToastNotificationItem \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u8a2d\u5b9a ToastNotificationState \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b Transformer2D \u2605 2D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transformer3D 3D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transition \u5024\u306e\u9077\u79fb\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 TriangleIndex \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint16 \uff09 TriangleIndex32 \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint32 \uff09 Typeface \u2605 \u6a19\u6e96\u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Uncopyable \u30b3\u30d4\u30fc\u7981\u6b62 Mixin UnderlineStyle \u4e0b\u7dda\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b unique_resource \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7834\u68c4\u6642\u306b\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30ea\u30fc\u30bf\u3092\u547c\u3076 RAII \u30e9\u30c3\u30d1\u30fc UserAction \u2605 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b UTF16toUTF32_Converter UTF-8 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF16_Converter UTF-16 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF8_Converter UTF-32 \u304b\u3089 UTF-8 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF8toUTF32_Converter UTF-32 \u304b\u3089 UTF-16 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UUIDValue UUID VariableSpeedStopwatch \u901f\u5ea6\u3092\u5909\u66f4\u53ef\u80fd\u306a\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Vertex2D 2D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf Vertex3D 3D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf VertexShader \u2605 \u9802\u70b9\u30b7\u30a7\u30fc\u30c0 VertexShaderAsset \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 VertexShaderAssetData \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 VideoReader \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 VideoTexture \u52d5\u753b\u3092 Texture \u306e\u3088\u3046\u306b\u6271\u3048\u308b\u30af\u30e9\u30b9 VideoWriter \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 VoronoiFacet \u30dc\u30ed\u30ce\u30a4 Facets Wave \u2605 \u97f3\u58f0\u6ce2\u5f62\u30c7\u30fc\u30bf WaveSample \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb WaveSampleS16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb Webcam \u2605 Web \u30ab\u30e1\u30e9 WebcamInfo Web \u30ab\u30e1\u30e9\u306e\u60c5\u5831 WGSL WebGPU Shading Language \u30d5\u30a1\u30a4\u30eb WindowState \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u72b6\u614b WindowStyle \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b X86Features CPU \u306e\u5bfe\u5fdc\u547d\u4ee4\u30bb\u30c3\u30c8 XInputVibration XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30d0\u30a4\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a XMLElement XML \u306e\u8981\u7d20 XMLReader XML \u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 YesNo<Tag> YesNo \u7528\u306e\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ZIPReader ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 \u4e71\u6570\u3068\u5206\u5e03 \u00b6 \u578b\u540d \u8aac\u660e BernoulliDistribution \u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u30af\u30e9\u30b9 DefaultRNG \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::SFMT19937_64 \u306e\u5225\u540d\uff09 DiscreteDistribution \u78ba\u7387\u5206\u5e03\u3092\u751f\u6210\u3059\u308b\u30af\u30e9\u30b9 HardwareRNG \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u3088\u308b\u975e\u6c7a\u5b9a\u7684\u4e71\u6570\u751f\u6210\u5668 NormalDistribution \u6b63\u898f\u5206\u5e03\u30af\u30e9\u30b9 PRNG::SFMT19937_64 SIMD-oriented Fast Mersenne Twister \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::SplitMix64 SplitMix64 \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128PlusPlus xoroshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128StarStar xoroshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128PlusPlus xoshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128StarStar xoshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256Plus xoshiro256+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256PlusPlus xoshiro256++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256StarStar xoshiro256** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 SmallRNG \u7701\u30b5\u30a4\u30ba\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::Xoshiro256PlusPlus \u306e\u5225\u540d\uff09 UniformDistribution \u6574\u6570\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u4f7f\u3048\u308b\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformIntDistribution \u6574\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformRealDistribution \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 2D \u7269\u7406\u6f14\u7b97 \u00b6 \u578b\u540d \u8aac\u660e P2Body \u2605 \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u306b\u5b58\u5728\u3059\u308b\u7269\u4f53\u306e 1 \u5358\u4f4d\u30020 \u500b\u4ee5\u4e0a\uff08\u901a\u5e38\u306f 1 \u500b\u4ee5\u4e0a\uff09\u306e\u90e8\u54c1\uff08 P2Shape \uff09\u304b\u3089\u69cb\u6210\u3055\u308c\u308b P2BodyID \u7269\u4f53 P2Body \u306b\u4e0e\u3048\u3089\u308c\u308b\u4e00\u610f\u306e ID \u306e\u578b\uff08 uint32 \u306e\u5225\u540d\uff09 P2BodyType \u2605 \u7269\u4f53\u306e\u7a2e\u985e\u306b\u95a2\u3059\u308b\u5217\u6319\u578b P2Circle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u5186\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Collision 2 \u3064\u306e\u7269\u4f53\u306b\u306f\u305f\u3089\u304f\u5168\u3066\u306e\u63a5\u89e6\u306b\u95a2\u3059\u308b\u60c5\u5831\u3067\u3001\u6700\u5927 2 \u3064\u306e P2Contact \u3092\u6301\u3064 P2Contact 2 \u3064\u306e\u7269\u4f53\u306b\u767a\u751f\u3057\u305f\u885d\u7a81\u306b\u95a2\u3059\u308b\u60c5\u5831 P2ContactPair 2 \u3064\u306e\u7269\u4f53\u304c\u63a5\u89e6\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u305d\u308c\u3089\u306e ID (P2BodyID) \u306e\u30da\u30a2 P2DistanceJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u8ddd\u96e2\u30b8\u30e7\u30a4\u30f3\u30c8 P2Filter \u90e8\u54c1\uff08 P2Shape \uff09\u306b\u30ab\u30c6\u30b4\u30ea\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3057\u3001\u7279\u5b9a\u306e\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6301\u3064\u90e8\u54c1\u3068\u5e72\u6e09\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b P2Line \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2LineString \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9023\u7d9a\u3057\u305f\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Material \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u6750\u8cea\u3092\u5b9a\u7fa9\u3059\u308b P2MouseJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30de\u30a6\u30b9\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30d4\u30dc\u30c3\u30c8\u30b8\u30e7\u30a4\u30f3\u30c8 P2Polygon \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u591a\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Quad \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u51f8\u56db\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Rect \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Shape \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 P2ShapeType \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u5f62\u72b6\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b P2SliderJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30b9\u30e9\u30a4\u30c0\u30fc\u30b8\u30e7\u30a4\u30f3\u30c8 P2Triangle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u4e09\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2WheelJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30db\u30a4\u30fc\u30eb\u30b8\u30e7\u30a4\u30f3\u30c8 P2World \u2605 \u7269\u7406\u6f14\u7b97\u3092\u884c\u3046\u30ef\u30fc\u30eb\u30c9 JSON \u30c7\u30fc\u30bf \u00b6 \u578b\u540d \u8aac\u660e JSON \u2605 JSON \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 JSONArrayView JSON \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc JSONConstIterator JSON const \u30a4\u30c6\u30ec\u30fc\u30bf JSONItem JSON \u306e\u8981\u7d20 JSONIterationProxy JSON \u30a4\u30c6\u30ec\u30fc\u30bf\u88dc\u52a9\u30af\u30e9\u30b9 JSONIterator JSON \u30a4\u30c6\u30ec\u30fc\u30bf JSONValueType JSON \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b TOML \u30c7\u30fc\u30bf \u00b6 \u578b\u540d \u8aac\u660e TOMLArrayIterator TOML \u306e\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLArrayView TOML \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLReader \u2605 TOML \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TOMLTableArrayIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableArrayView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLTableIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableMember TOML \u306e\u30c6\u30fc\u30d6\u30eb\u30e1\u30f3\u30d0 TOMLTableView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30d3\u30e5\u30fc TOMLValue TOML \u306e\u8981\u7d20 TOMLValueType TOML \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b \u753b\u50cf\u30b3\u30fc\u30c7\u30c3\u30af \u00b6 \u578b\u540d \u8aac\u660e BMPDecoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 BMPEncoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 GIFDecoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 GIFEncoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 JPEGDecoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 JPEGEncoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGDecoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PNGEncoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGFilter PNG \u5727\u7e2e\u6642\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u8868\u3059\u5217\u6319\u578b PPMDecoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PPMEncoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PPMType PPM \u753b\u50cf\u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b SVGDecoder SVG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGADecoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGAEncoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 TIFFDecoder TIFF \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPDecoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPEncoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WebPMethod WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b \u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af \u00b6 \u578b\u540d \u8aac\u660e AACDecoder AAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 AIFFDecoder AIFF \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 FLACDecoder FLAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MIDIDecoder MIDI \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MP3Decoder MP3 \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisDecoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisEncoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 OpusDecoder Opus \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEDecoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEEncoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WAVEFormat WAVE \u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b WMADecoder WMA \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0","title":"\u30af\u30e9\u30b9\u4e00\u89a7"},{"location":"ja-jp/api/classes/#siv3d-\u306e\u30af\u30e9\u30b9\u4e00\u89a7","text":"\u3088\u304f\u4f7f\u3046\u91cd\u8981\u306a\u3082\u306e\u306b \u2605 \u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002","title":"Siv3D \u306e\u30af\u30e9\u30b9\u4e00\u89a7"},{"location":"ja-jp/api/classes/#\u6570\u5024","text":"\u578b\u540d \u8aac\u660e bool \u2605 \u30d6\u30fc\u30ea\u30a2\u30f3\u578b\uff08 false \u307e\u305f\u306f true \uff09 int8 \u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u578b\uff08-128 \uff5e 127\uff09 uint8 \u7b26\u53f7\u7121\u3057 8-bit \u6574\u6570\u578b\uff080 \uff5e 255\uff09 int16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u578b\uff08-32,768 \uff5e 32,767\uff09 uint16 \u7b26\u53f7\u7121\u3057 16-bit \u6574\u6570\u578b\uff080 \uff5e 65,535\uff09 int32 \u2605 \u7b26\u53f7\u4ed8\u304d 32-bit \u6574\u6570\u578b\uff08-2,147,483,648 \uff5e 2,147,483,647\uff09 uint32 \u2605 \u7b26\u53f7\u7121\u3057 32-bit \u6574\u6570\u578b\uff080 \uff5e 4,294,967,295\uff09 int64 \u7b26\u53f7\u4ed8\u304d 64-bit \u6574\u6570\u578b\uff08-9,223,372,036,854,775,808 \uff5e 9,223,372,036,854,775,807\uff09 uint64 \u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 int128 \u7b26\u53f7\u4ed8\u304d 128-bit \u6574\u6570\u578b uint128 \u7b26\u53f7\u7121\u3057 128-bit \u6574\u6570\u578b float \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b double \u2605 \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b size_t \u2605 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u8868\u73fe\u3059\u308b\u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 BigInt \u4efb\u610f\u7cbe\u5ea6\u591a\u500d\u9577\u6574\u6570\u578b HalfFloat \u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b BigFloat \u6709\u52b9\u6570\u5b57 100 \u6841\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b","title":"\u6570\u5024"},{"location":"ja-jp/api/classes/#\u6587\u5b57\u3084\u6587\u5b57\u5217","text":"\u578b\u540d \u8aac\u660e char8 UTF-8 \u306e 1 \u8981\u7d20\uff08 char \u306e\u5225\u540d\uff09 char16 UTF-16 \u306e 1 \u8981\u7d20\uff08 char16_t \u306e\u5225\u540d\uff09 char32 \u2605 UTF-32 \u306e 1 \u8981\u7d20\uff08 char32_t \u306e\u5225\u540d\uff09 String \u2605 \u6587\u5b57\u5217\u30af\u30e9\u30b9\u3002\u8981\u7d20\u306f char32 StringView \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 FilePath \u2605 \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 FilePathView \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 URL URL \u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 URLView URL \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09","title":"\u6587\u5b57\u3084\u6587\u5b57\u5217"},{"location":"ja-jp/api/classes/#\u30c7\u30fc\u30bf\u69cb\u9020","text":"\u578b\u540d \u8aac\u660e Array<Type, Allocator> \u2605 \u52d5\u7684\u914d\u5217\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::vector \u306e\u7f6e\u304d\u63db\u3048\uff09 DisjointSet<IndexType> Union-Find \u6728 Grid<Type, Allocator> \u2605 \u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217 HashSet<Type, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Set\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_set \u306e\u7f6e\u304d\u63db\u3048\uff09 HashTable<Key, Value, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Map\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_map \u306e\u7f6e\u304d\u63db\u3048\uff09 KDTree<DatasetAdapter> KD \u6728 KDTreeAdapter<Dataset, PointType, ElementType, Dim> KD \u6728 \u306e\u60c5\u5831 None_t Optional \u578b\u3067\u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\uff08 std::nullopt_t \u306e\u5225\u540d\uff09 NonNull<Pointer> \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u305f\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 Optional<Type> \u2605 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u578b\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::optional \u306e\u7f6e\u304d\u63db\u3048\uff09 std::array<Type, size_t> \u2605 \u56fa\u5b9a\u9577\u914d\u5217 StringCompare \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9 StringHash \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3059\u308b\u969b\u306e\u88dc\u52a9\u30af\u30e9\u30b9","title":"\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/api/classes/#2d-\u56f3\u5f62","text":"\u578b\u540d \u8aac\u660e Bezier2 \u2605 \u4e8c\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 \u2605 \u4e09\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Circle \u2605 \u5186 Circular \u2605 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 Circular0F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Circular3 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 Circular3F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 Circular6 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 Circular6F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 Circular9 \u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 Circular9F \u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 CircularBase<Float, int32> \u5186\u5ea7\u6a19 CircularF \u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Ellipse \u2605 \u6955\u5186 Float2 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 FloatQuad \u51f8\u56db\u89d2\u5f62\uff08\u8981\u7d20\u306f float \uff09 FloatRect \u4e0a\u4e0b\u5de6\u53f3\u3067\u5b9a\u7fa9\u3059\u308b\u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f float \uff09 Line \u2605 \u7dda\u5206 LineString \u2605 \u9023\u7d9a\u3059\u308b\u7dda\u5206\uff08 Array<Vec2> \u306e\u7f6e\u304d\u63db\u3048\uff09 Mat3x2 \u2605 \u30a2\u30d5\u30a3\u30f3\u5909\u63db\u7528\u306e 3x2 \u884c\u5217 Mat3x3 \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u5909\u63db\u7528\u306e 3x3 \u884c\u5217 MultiPolygon \u591a\u89d2\u5f62\u306e\u96c6\u5408\uff08 Array<Polygon> \u306e\u7f6e\u304d\u63db\u3048\uff09 OffsetCircular \u2605 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 0> \u306e\u5225\u540d\uff09 OffsetCircular0F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 OffsetCircular3 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 3> \u306e\u5225\u540d\uff09 OffsetCircular3F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 3> \u306e\u5225\u540d\uff09 OffsetCircular6 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 6> \u306e\u5225\u540d\uff09 OffsetCircular6F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 6> \u306e\u5225\u540d\uff09 OffsetCircular9 \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<double, 9> \u306e\u5225\u540d\uff09 OffsetCircular9F \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 9> \u306e\u5225\u540d\uff09 OffsetCircularBase \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19 OffsetCircularF \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19\uff08 CircularBase<float, 0> \u306e\u5225\u540d\uff09 Point \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f int32 \uff09 Polygon \u2605 \u591a\u89d2\u5f62\uff08\u7a74\u3082\u6301\u3066\u308b\uff09 Quad \u2605 \u51f8\u56db\u89d2\u5f62 Rect \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f int32 \uff09 RectF \u2605 \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f double \uff09 RoundRect \u2605 \u89d2\u4e38\u9577\u65b9\u5f62 Shape2D \u2605 \u591a\u89d2\u5f62\u4f5c\u6210\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Size \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f int32 \uff09 \uff08 Point \u306e\u5225\u540d\uff09 SizeF \u2605 \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f double \uff09 \uff08 Vec2 \u306e\u5225\u540d\uff09 Spline2D \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda Triangle \u2605 \u4e09\u89d2\u5f62 Vec2 \u2605 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09","title":"2D \u56f3\u5f62"},{"location":"ja-jp/api/classes/#3d-\u5f62\u72b6","text":"\u578b\u540d \u8aac\u660e Box \u2605 \u5404\u8fba\u304c XYZ \u8ef8\u306b\u5e73\u884c\u306a\u76f4\u65b9\u4f53 Cone \u5186\u9310 Cylinder \u2605 \u5186\u67f1 Cylindrical \u2605 \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<double> \u306e\u5225\u540d\uff09 CylindricalBase<Float> \u5186\u67f1\u5ea7\u6a19 CylindricalF \u5186\u67f1\u5ea7\u6a19\uff08 CylindricalBase<float> \u306e\u5225\u540d\uff09 Disc \u5186\u76e4 Float3 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 Float4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f float \uff09 InfinitePlane \u5e73\u9762 Line3D \u2605 3D \u7dda\u5206 Mat4x4 \u2605 4x4 \u884c\u5217 OrientedBox \u2605 \u5411\u304d\u306e\u3042\u308b\u76f4\u65b9\u4f53 Plane \u2605 \u5927\u304d\u3055\u304c\u6709\u9650\u306e XZ \u5e73\u9762 Quaternion \u2605 \u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3 Ray \u2605 \u30ec\u30a4 Sphere \u2605 \u7403 Spherical \u2605 \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<double> \u306e\u5225\u540d\uff09 SphericalBase<Float> \u7403\u9762\u5ea7\u6a19 SphericalF \u7403\u9762\u5ea7\u6a19\uff08 SphericalBase<float> \u306e\u5225\u540d\uff09 Triangle3D 3D \u4e09\u89d2\u5f62 Vec3 \u2605 3 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 Vec4 4 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 ViewFrustum \u8996\u9310\u53f0","title":"3D \u5f62\u72b6"},{"location":"ja-jp/api/classes/#\u8272","text":"\u578b\u540d \u8aac\u660e Color \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f uint8 \uff09 ColorF \u2605 RGBA \u30ab\u30e9\u30fc\uff08\u8981\u7d20\u306f double \uff09 ColormapType \u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u306e\u7a2e\u985e ColorOption \u8272\u7a7a\u9593\u306e\u8a2d\u5b9a HSV \u2605 HSVA \u30ab\u30e9\u30fc","title":"\u8272"},{"location":"ja-jp/api/classes/#\u6642\u9593\u306e\u5358\u4f4d","text":"\u578b\u540d \u8aac\u660e Days \u6642\u9593\uff08\u65e5\uff09\uff08\u6574\u6570\uff09 DaysF \u6642\u9593\uff08\u65e5\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Hours \u6642\u9593\uff08\u6642\uff09\uff08\u6574\u6570\uff09 HoursF \u6642\u9593\uff08\u6642\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Minutes \u6642\u9593\uff08\u5206\uff09\uff08\u6574\u6570\uff09 MinutesF \u6642\u9593\uff08\u5206\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Seconds \u6642\u9593\uff08\u79d2\uff09\uff08\u6574\u6570\uff09 SecondsF \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Milliseconds \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6574\u6570\uff09 MillisecondsF \u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Microseconds \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6574\u6570\uff09 MicrosecondsF \u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Nanoseconds \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6574\u6570\uff09 NanosecondsF \u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 Duration \u2605 \u6642\u9593\uff08\u79d2\uff09\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09\uff08 SecondsF \u306e\u5225\u540d\uff09","title":"\u6642\u9593\u306e\u5358\u4f4d"},{"location":"ja-jp/api/classes/#\u30a8\u30e9\u30fc","text":"\u578b\u540d \u8aac\u660e BadOptionalAccess \u7121\u52b9\u306a Optional \u3078\u306e\u30a2\u30af\u30bb\u30b9\u30a8\u30e9\u30fc EngineError \u30a8\u30f3\u30b8\u30f3\u5185\u90e8\u306e\u30a8\u30e9\u30fc Error \u2605 \u30a8\u30e9\u30fc NotImplementedError \u672a\u5b9f\u88c5\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u305f\u30a8\u30e9\u30fc ParseError \u30d1\u30fc\u30b9\u95a2\u6570\u306e\u30a8\u30e9\u30fc","title":"\u30a8\u30e9\u30fc"},{"location":"ja-jp/api/classes/#\u69d8\u3005\u306a\u30af\u30e9\u30b9","text":"\u578b\u540d \u8aac\u660e ACLineStatus \u96fb\u6e90\u306e\u63a5\u7d9a\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b AdaptiveThresholdMethod \u9069\u5fdc\u7684\u95be\u5024\u51e6\u7406\u306b\u304a\u3044\u3066\u95be\u5024\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b aligned_float4 \u30cd\u30a4\u30c6\u30a3\u30d6\u306e SIMD Float4 \u578b Allocator<Type, size_t> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u5bfe\u5fdc\u30a2\u30ed\u30b1\u30fc\u30bf AnimatedGIFReader GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3046\u30af\u30e9\u30b9 AnimatedGIFWriter GIF \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u51fa\u3057\u3092\u884c\u3046\u30af\u30e9\u30b9 ArcEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f27\u5f62\u72b6\uff09 AssetHandle<AssetType> \u30a2\u30bb\u30c3\u30c8\u30cf\u30f3\u30c9\u30eb AssetID<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetIDWrapper<AssetTag> \u30a2\u30bb\u30c3\u30c8 ID AssetState \u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b AsyncHTTPTask \u975e\u540c\u671f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 AsyncTask<Type> \u975e\u540c\u671f\u51e6\u7406\u30af\u30e9\u30b9\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::future \u306e\u7f6e\u304d\u63db\u3048\uff09 Audio \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30af\u30e9\u30b9 AudioAsset \u2605 \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8 AudioAssetData \u30aa\u30fc\u30c7\u30a3\u30aa\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 AudioFormat \u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b AudioGroup \u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u30aa\u30fc\u30c7\u30a3\u30aa AudioLoopTiming \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30eb\u30fc\u30d7\u4f4d\u7f6e\u6307\u5b9a BasicCamera2D 2D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicCamera3D 3D \u30ab\u30e1\u30e9\u306e\u57fa\u672c\u30af\u30e9\u30b9 BasicPerlinNoise<Float> Perlin \u30ce\u30a4\u30ba BatteryStatus \u30d0\u30c3\u30c6\u30ea\u30fc\u306e\u6b8b\u91cf\u3092\u8868\u3059\u5217\u6319\u578b BinaryReader \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 BinaryWriter \u2605 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 BitmapGlyph \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30b0\u30ea\u30d5 Blend \u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b BlendOp \u30d6\u30ec\u30f3\u30c9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b BlendState \u2605 \u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 Blob \u2605 \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf BorderType \u753b\u50cf\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u6642\u306e\u5883\u754c\u7dda\u306e\u6271\u3044\u3092\u8868\u3059\u5217\u6319\u578b Buffer2D 2D \u63cf\u753b\u30d0\u30c3\u30d5\u30a1 Byte 1 \u30d0\u30a4\u30c8\u3092\u8868\u73fe\u3059\u308b\u578b Camera2D \u2605 2D \u30ab\u30e1\u30e9 Camera2DParameters 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a CameraControl \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b CascadeClassifier Cascade \u306b\u3088\u308b\u753b\u50cf\u5206\u985e\u5668 ChildProcess \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u3068\u7ba1\u7406\u30af\u30e9\u30b9 CircleEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u5186\u5f62\u72b6\uff09 CommonFloat<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonFloat_t<T, U> \u7570\u306a\u308b\u6570\u5024\u578b\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b CommonVector<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b CommonVector_t<T, U, bool> \u7570\u306a\u308b\u6570\u5024\u578b\u30d9\u30af\u30c8\u30eb\u3069\u3046\u3057\u306e\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u4f7f\u3046\u30d9\u30af\u30c8\u30eb\u578b ConstantBuffer<Type> \u2605 \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBufferBase \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u8a73\u7d30\u60c5\u5831 ConstantBufferBinding \u30b7\u30a7\u30fc\u30c0\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 CopyOption \u30d5\u30a1\u30a4\u30eb\u30b3\u30d4\u30fc\u6642\u306e\u52d5\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b CPUInfo CPU \u60c5\u5831 CSV \u2605 CSV \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 CursorStyle \u2605 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3059\u5217\u6319\u578b Date \u2605 \u65e5\u4ed8 DateTime \u2605 \u65e5\u4ed8\u3068\u6642\u523b DayOfWeek \u66dc\u65e5\u3092\u8868\u3059\u5217\u6319\u578b DeadZone \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a2d\u5b9a DeadZoneType \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b DebugCamera3D \u2605 \u30c7\u30d0\u30c3\u30b0\u7528\u306e 3D \u30ab\u30e1\u30e9 DefaultAllocator<Type> \u30e1\u30e2\u30ea\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u8003\u616e\u3057\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30ed\u30b1\u30fc\u30bf DepthFunc \u30c7\u30d7\u30b9\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u8868\u3059\u5217\u6319\u578b DepthStencilState \u30c7\u30d7\u30b9\u30fb\u30b9\u30c6\u30f3\u30b7\u30eb\u30b9\u30c6\u30fc\u30c8 Deserializer<Reader> \u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 detail::Gamepad_impl \u2605 \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 Gamepad(\u2026) \u306e\u623b\u308a\u5024 detail::XInput_impl \u2605 Xinput \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3002 XInput(\u2026) \u306e\u623b\u308a\u5024 DirectoryWatcher \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u306e\u76e3\u8996\u30af\u30e9\u30b9 DragItemType \u30c9\u30e9\u30c3\u30b0\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b DragStatus \u30c9\u30e9\u30c3\u30b0\u306e\u72b6\u614b DrawableText \u2605 \u63cf\u753b\u30c6\u30ad\u30b9\u30c8\u3002 font(\u2026) \u306e\u623b\u308a\u5024 DroppedFilePath \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u60c5\u5831 DroppedText \u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u60c5\u5831 DynamicMesh \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30e1\u30c3\u30b7\u30e5 DynamicTexture \u2605 \u4e2d\u8eab\u3092\u66f4\u65b0\u3067\u304d\u308b\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 EdgePreservingFilterType EdgePreservingFilter \u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Effect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8 Emission2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306b\u304a\u3051\u308b\u653e\u51fa Emoji \u6a19\u6e96\u7d75\u6587\u5b57 EngineOption \u30a8\u30f3\u30b8\u30f3\u306e\u8a2d\u5b9a ESSL OpenGL ES Shading Language \u30d5\u30a1\u30a4\u30eb Exif Exif \u30c7\u30fc\u30bf FFTResult \u2605 FFT \u306e\u7d50\u679c FFTSampleLength FFT \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u8868\u3059\u5217\u6319\u578b FileAction \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3092\u8868\u3059\u5217\u6319\u578b FileChange \u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u3068\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 FileFilter \u30d5\u30a1\u30a4\u30eb\u62e1\u5f35\u5b50\u30d5\u30a3\u30eb\u30bf FloodFillConnectivity \u753b\u50cf\u5857\u308a\u3064\u3076\u3057\u306e\u9023\u7d50\u6027\u3092\u8868\u3059\u5217\u6319\u578b Font \u2605 \u30d5\u30a9\u30f3\u30c8 FontAsset \u2605 \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8 FontAssetData \u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 FontMethod \u2605 \u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b FontStyle \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b FormatData \u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u60c5\u5831\u683c\u7d0d\u30d0\u30c3\u30d5\u30a1 GamepadInfo \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831 GeoJSONBase GeoJSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 GeoJSONFeature GeoJSON Feature \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONFeatureCollection GeoJSON FeatureCollection \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONGeometry GeoJSON Geometry \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 GeoJSONType GeoJSON\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b GLSL \u2605 GLSL \u30d5\u30a1\u30a4\u30eb Glyph \u30b0\u30ea\u30d5 GlyphCluster \u30b0\u30ea\u30d5\u30af\u30e9\u30b9\u30bf GlyphIndex \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30b0\u30ea\u30d5\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08 uint32 \u306e\u5225\u540d\uff09 GlyphInfo \u30b0\u30ea\u30d5\u60c5\u5831 GMInstrument \u2605 General MIDI (GM) \u306b\u304a\u3051\u308b\u697d\u5668\u3092\u8868\u3059\u5217\u6319\u578b GrabCut \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa GrabCutClass \u753b\u50cf\u304b\u3089\u306e\u80cc\u666f\u62bd\u51fa\u306b\u304a\u3051\u308b\u80cc\u666f\u3068\u524d\u666f\u3092\u8868\u3059\u5217\u6319\u578b HLSL \u2605 HLSL \u30d5\u30a1\u30a4\u30eb HTMLWriter HTML \u6587\u66f8\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 HTTPAsyncStatus \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u9032\u884c\u72b6\u6cc1\u3092\u8868\u3059\u5217\u6319\u578b HTTPProgress HTTP \u901a\u4fe1\u306e\u9032\u6357 HTTPResponse HTTP \u30ec\u30b9\u30dd\u30f3\u30b9 HTTPStatusCode HTTP \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b IAddon \u30a2\u30c9\u30aa\u30f3\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAsset \u30a2\u30bb\u30c3\u30c8\u306e\u57fa\u672c\u30af\u30e9\u30b9 IAudioDecoder \u97f3\u58f0\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioEncoder \u97f3\u58f0\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IAudioStream \u52d5\u7684\u66f4\u65b0\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Icon \u6a19\u6e96\u30a2\u30a4\u30b3\u30f3 IEffect \u2605 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageDecoder \u753b\u50cf\u30c7\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IImageEncoder \u753b\u50cf\u30a8\u30f3\u30b3\u30fc\u30c0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 Image \u2605 \u753b\u50cf\u30c7\u30fc\u30bf ImageAddressMode \u753b\u50cf\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ImageFormat \u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageInfo \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831 ImagePixelFormat \u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b ImageROI \u753b\u50cf\u30c7\u30fc\u30bf\u5185\u306e\u9818\u57df InfiniteList<Type> \u7121\u9650\u30ea\u30b9\u30c8 INI \u2605 INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d INIKey INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30ad\u30fc INISection INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30bb\u30af\u30b7\u30e7\u30f3 INIValueWrapper INI \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 Input \u2605 \u5165\u529b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 InputCombination Input \u306e\u7d44\u307f\u5408\u308f\u305b InputDeviceType \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b InputGroup Input \u306e\u7d44\u307f\u5408\u308f\u305b InterpolationAlgorithm \u753b\u50cf\u62e1\u5927\u7e2e\u5c0f\u306e\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b IPv4Address IPv4 \u30a2\u30c9\u30ec\u30b9 IReader Reader \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IScene<State, Data> \u2605 \u30b7\u30fc\u30f3\u7ba1\u7406\u7528\u306e\u30b7\u30fc\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ISteadyClock \u6642\u523b\u63d0\u4f9b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 IWriter Writer \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 JoyCon Joy-Con KahanSummation<Float> \u30ab\u30cf\u30f3\u306e\u52a0\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7528\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 KeyEvent \u30ad\u30fc\u5165\u529b\u306e\u8a73\u7d30 KlattTTSParameters Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u8a2d\u5b9a KlattWaveform Klatt \u65b9\u5f0f\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u4e0a\u3052\u306e\u6ce2\u5f62\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b LanguageCode \u8a00\u8a9e\u30b3\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Leap::Bone Leap Motion \u306b\u304a\u3051\u308b\u30dc\u30fc\u30f3\u306e\u60c5\u5831 Leap::Connection \u63a5\u7d9a\u3055\u308c\u305f Leap \u30c7\u30d0\u30a4\u30b9\u306e\u30cf\u30f3\u30c9\u30eb Leap::Hand Leap Motion \u306b\u304a\u3051\u308b\u624b\u306e\u60c5\u5831 Leap::TrackingMode Leap Motion \u306b\u304a\u3051\u308b\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b LetterCase \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u8868\u3059\u5217\u6319\u578b LicenseInfo \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831 LineStyle \u7dda\u306e\u30b9\u30bf\u30a4\u30eb ListBoxState \u2605 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u72b6\u614b LogLevel \u51fa\u529b\u3055\u308c\u308b\u30ed\u30b0\u306e\u8a73\u7d30\u5ea6\u3092\u8868\u3059\u5217\u6319\u578b LogType \u30ed\u30b0\u51fa\u529b\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b ManagedScript \u81ea\u52d5\u7ba1\u7406\u3055\u308c\u305f\u30b9\u30af\u30ea\u30d7\u30c8 MatchResults \u6b63\u898f\u8868\u73fe\u306e\u30de\u30c3\u30c1\u7d50\u679c Material 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30de\u30c6\u30ea\u30a2\u30eb MathParser \u6570\u5f0f\u30d1\u30fc\u30b5 MD5Value MD5 MemoryMappedFile \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30af\u30e9\u30b9 MemoryMappedFileView \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 MemoryReader \u30e1\u30e2\u30ea\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryViewReader \u30e1\u30e2\u30ea\u30d3\u30e5\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 MemoryWriter \u30e1\u30e2\u30ea\u3078\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 Mesh \u2605 3D \u30e1\u30c3\u30b7\u30e5 MeshData \u2605 3D \u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u30d0\u30c3\u30d5\u30a1\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d0\u30c3\u30d5\u30a1 MeshGlyph \u30e1\u30c3\u30b7\u30e5\u30b0\u30ea\u30d5 MessageBoxResult \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u7d50\u679c\u3092\u8868\u3059\u5217\u6319\u578b MessageBoxStyle \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b Microphone \u2605 \u30de\u30a4\u30af MicrophoneInfo \u30de\u30a4\u30af\u306e\u60c5\u5831 MicrosecClock \u30de\u30a4\u30af\u30ed\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MIDINote MIDI \u30ce\u30fc\u30c8 MillisecClock \u30df\u30ea\u79d2\u30ab\u30a6\u30f3\u30bf\u30fc MiniScene<State> \u7c21\u6613\u7248\u306e\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc MixBus \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30df\u30c3\u30af\u30b9\u30d0\u30b9\u756a\u53f7\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_Exists \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b MMFOpenMode_if_NotFound \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b Model \u2605 3D \u30e2\u30c7\u30eb ModelMeshPart 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4\u306e\u69cb\u6210\u8981\u7d20 ModelObject 3D \u30e2\u30c7\u30eb\u3092\u69cb\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30fc\u30c4 MonitorInfo \u30e2\u30cb\u30bf\u30fc\u306e\u60c5\u5831 MSDFGlyph MSDF \u65b9\u5f0f\u306e\u30b0\u30ea\u30d5 MSL Metal Shading Language \u30d5\u30a1\u30a4\u30eb\uff08\u672a\u5b9f\u88c5\uff09 MSRenderTexture \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\uff08\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u4ed8\u304d\uff09\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 NamedParameter<Tag, Type> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NamedParameterHelper<Tag> \u540d\u524d\u4ed8\u304d\u5f15\u6570\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 NativeFilePath OS \u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u8868\u73fe\u578b NavMesh \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMeshConfig \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u306e\u8a2d\u5b9a NormalComputation \u6cd5\u7dda\u306e\u8a08\u7b97\u65b9\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b OpenMode \u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b OutlineGlyph \u8f2a\u90ed\u30b0\u30ea\u30d5 Particle2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb ParticleSystem2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2DParameters 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a PerlinNoise Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<double> \u306e\u5225\u540d\uff09 PerlinNoiseF Perlin \u30ce\u30a4\u30ba\uff08 BasicPerlinNoise<float> \u306e\u5225\u540d\uff09 PhongMaterial Phong \u30e2\u30c7\u30eb\u306e Material PhongMaterialInternal Phong \u30e2\u30c7\u30eb\u306e Material \u306e\u5185\u90e8\u5f62\u5f0f PianoKey \u2605 \u97f3\u540d\u3092\u8868\u3059\u5217\u6319\u578b Pipe \u30d1\u30a4\u30d7\u901a\u4fe1\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b PixelShader \u2605 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 PixelShaderAsset \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 PixelShaderAssetData \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 PlaceHolder_t \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u578b Platform::Windows::HLSLCompileOption HLSL \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 PlayingCard::Card \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u756a\u53f7\u3001\u30b9\u30fc\u30c8\u3001\u88cf\u8868\u306a\u3069\u306e\u30c7\u30fc\u30bf PlayingCard::CardInfo \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u63cf\u753b\u7528\u306e\u60c5\u5831 PlayingCard::Pack \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30af\u30e9\u30b9 PlayingCard::Suit \u30c8\u30e9\u30f3\u30d7\u30ab\u30fc\u30c9\u306e\u30b9\u30fc\u30c8\uff08\u7d75\u67c4\u306e\u30de\u30fc\u30af\uff09\u3092\u8868\u3059\u5217\u6319\u578b PoissonDisk2D 2D \u30dd\u30ef\u30bd\u30f3\u5206\u5e03\u30af\u30e9\u30b9 PolygonEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u591a\u89d2\u5f62\uff09 PolygonFailureType Polygon \u306e\u5165\u529b\u9802\u70b9\u306e\u691c\u8a3c\u7d50\u679c PolygonGlyph \u591a\u89d2\u5f62\u306b\u3088\u308b\u30b0\u30ea\u30d5 PowerStatus \u30b7\u30b9\u30c6\u30e0\u306e\u96fb\u6e90\u306e\u72b6\u614b ProController Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u306e Gamepad \u30a2\u30c0\u30d7\u30bf ProfilerStat \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u60c5\u5831 QRContent QR \u30b3\u30fc\u30c9\u306e\u30b9\u30ad\u30e3\u30f3\u7d50\u679c QRErrorCorrection QR \u30b3\u30fc\u30c9\u306e\u8aa4\u308a\u8a02\u6b63\u30ec\u30d9\u30eb\u3092\u8868\u3059\u5217\u6319\u578b QRMode QR \u30b3\u30fc\u30c9\u306e\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b QRScanner QR \u30b3\u30fc\u30c9\u306e\u8aad\u307f\u53d6\u308a\u30af\u30e9\u30b9 RDTSCClock CPU \u30b5\u30a4\u30af\u30eb\u6570\u30ab\u30a6\u30f3\u30bf\u30fc RectanglePack \u9577\u65b9\u5f62\u8a70\u8fbc\u307f\u7d50\u679c RectEmitter2D 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u653e\u51fa\u5668\uff08\u9577\u65b9\u5f62\uff09 RegExp \u6b63\u898f\u8868\u73fe RenderTexture \u2605 \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 ResizeMode \u2605 \u30b7\u30fc\u30f3\u306e\u81ea\u52d5\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b ResourceOption \u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u4f7f\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b SamplerState \u2605 \u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SaturatedLinework<TargetShape, URNG> \u96c6\u4e2d\u7dda\u63cf\u753b\u30af\u30e9\u30b9 SceneManager<State, Data> \u2605 \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc ScopedColorAdd2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u52a0\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedColorMul2D 2D \u63cf\u753b\u30ab\u30e9\u30fc\u4e57\u7b97\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader2D 2D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedCustomShader3D 3D \u63cf\u753b\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderStates3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget2D \u2605 2D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedRenderTarget3D 3D \u63cf\u753b\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport2D 2D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopedViewport3D 3D \u63cf\u753b\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u8a2d\u5b9a\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ScopeGuard<Callback> \u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9 Script \u30b9\u30af\u30ea\u30d7\u30c8 ScriptCompileOption \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b ScriptFunction<Ret(Args\u2026)> \u30b9\u30af\u30ea\u30d7\u30c8\u95a2\u6570 ScriptModule \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30e2\u30b8\u30e5\u30fc\u30eb SDFGlyph SDF \u65b9\u5f0f\u306b\u3088\u308b\u30b0\u30ea\u30d5 Serial \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 Serializer<Writer> \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u5b9a\u7fa9\u7528\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ShaderGroup \u30b7\u30a7\u30fc\u30c0\u8a00\u8a9e\u306e\u5dee\u3092\u5438\u53ce\u3059\u308b\u30af\u30e9\u30b9 ShaderStage \u30b7\u30a7\u30fc\u30c0\u30b9\u30c6\u30fc\u30b8\u3092\u8868\u3059\u5217\u6319\u578b SIMD_Float4 SIMD \u5bfe\u5fdc Float4 SimpleAnimation \u30ad\u30fc\u30d5\u30ec\u30fc\u30e0\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u88dc\u52a9\u30af\u30e9\u30b9 Sky \u5929\u7a7a\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30f3\u30b8\u30f3\uff08\u5b9f\u9a13\u7684\uff09 SoundFont \u30b5\u30a6\u30f3\u30c9\u30d5\u30a9\u30f3\u30c8 SpecialFolder \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3059\u5217\u6319\u578b SplineIndex Spline2D \u4e0a\u306e\u4f4d\u7f6e Step<T, N, S> \u2605 \u30eb\u30fc\u30d7\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Step2D \u2605 2D \u30eb\u30fc\u30d7\u306e\u4e00\u5143\u5316\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 Stopwatch \u2605 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Subdivision2D 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30af\u30e9\u30b9 Subdivision2DEdgeType 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u30a8\u30c3\u30b8\u306e\u60c5\u5831 Subdivision2DPointLocation 2D \u30b5\u30d6\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u306e\u70b9\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5217\u6319\u578b SVG SVG \u30c7\u30fc\u30bf TCPClient TCP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 TCPError TCP \u901a\u4fe1\u306e\u30a8\u30e9\u30fc\u3092\u8868\u3059\u5217\u6319\u578b TCPServer TCP \u30b5\u30fc\u30d0 TCPSessionID TCP \u306e\u30bb\u30c3\u30b7\u30e7\u30f3 ID\uff08 uint64 \u306e\u5225\u540d\uff09 TextEditState \u2605 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u72b6\u614b TextEncoding \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5f62\u5f0f TextInputMode \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u30e2\u30fc\u30c9 TextReader \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TextStyle \u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30bf\u30a4\u30eb Texture \u2605 \u30c6\u30af\u30b9\u30c1\u30e3 TextureAddressMode \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c9\u30ec\u30b9\u30e2\u30fc\u30c9\u3092\u8868\u3059\u5217\u6319\u578b TextureAsset \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8 TextureAssetData \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 TexturedCircle \u5186\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TextureDesc \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u8a2d\u5b9a\u3092\u8868\u3059\u5217\u6319\u578b TexturedQuad \u51f8\u56db\u89d2\u5f62\u306b\u5207\u308a\u629c\u3044\u305f\u30c6\u30af\u30b9\u30c1\u30e3 TexturedRoundRect \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u9818\u57df TextureFilter \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf TextureFormat \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 TexturePixelFormat \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8868\u3059\u5217\u6319\u578b TextureRegion \u2605 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df TextWriter \u2605 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\u30af\u30e9\u30b9 TimeProfiler \u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30af\u30e9\u30b9 Timer \u30bf\u30a4\u30de\u30fc ToastNotificationID \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e ID\uff08 int64 \u306e\u5225\u540d\uff09 ToastNotificationItem \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u8a2d\u5b9a ToastNotificationState \u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u306e\u72b6\u614b\u3092\u8868\u3059\u5217\u6319\u578b Transformer2D \u2605 2D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transformer3D 3D \u5ea7\u6a19\u5909\u63db\u30b9\u30b3\u30fc\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Transition \u5024\u306e\u9077\u79fb\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9 TriangleIndex \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint16 \uff09 TriangleIndex32 \u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8981\u7d20\u306f uint32 \uff09 Typeface \u2605 \u6a19\u6e96\u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b Uncopyable \u30b3\u30d4\u30fc\u7981\u6b62 Mixin UnderlineStyle \u4e0b\u7dda\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b unique_resource \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7834\u68c4\u6642\u306b\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30ea\u30fc\u30bf\u3092\u547c\u3076 RAII \u30e9\u30c3\u30d1\u30fc UserAction \u2605 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8868\u3059\u5217\u6319\u578b UTF16toUTF32_Converter UTF-8 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF16_Converter UTF-16 \u304b\u3089 UTF-32 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF32toUTF8_Converter UTF-32 \u304b\u3089 UTF-8 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UTF8toUTF32_Converter UTF-32 \u304b\u3089 UTF-16 \u3078\u306e\u9010\u6b21\u5909\u63db\u30af\u30e9\u30b9 UUIDValue UUID VariableSpeedStopwatch \u901f\u5ea6\u3092\u5909\u66f4\u53ef\u80fd\u306a\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Vertex2D 2D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf Vertex3D 3D \u56f3\u5f62\u306e\u57fa\u672c\u9802\u70b9\u30c7\u30fc\u30bf VertexShader \u2605 \u9802\u70b9\u30b7\u30a7\u30fc\u30c0 VertexShaderAsset \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8 VertexShaderAssetData \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30a2\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9 VideoReader \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 VideoTexture \u52d5\u753b\u3092 Texture \u306e\u3088\u3046\u306b\u6271\u3048\u308b\u30af\u30e9\u30b9 VideoWriter \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u30af\u30e9\u30b9 VoronoiFacet \u30dc\u30ed\u30ce\u30a4 Facets Wave \u2605 \u97f3\u58f0\u6ce2\u5f62\u30c7\u30fc\u30bf WaveSample \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb WaveSampleS16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u306b\u3088\u308b\u30b9\u30c6\u30ec\u30aa\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb Webcam \u2605 Web \u30ab\u30e1\u30e9 WebcamInfo Web \u30ab\u30e1\u30e9\u306e\u60c5\u5831 WGSL WebGPU Shading Language \u30d5\u30a1\u30a4\u30eb WindowState \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u72b6\u614b WindowStyle \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5217\u6319\u578b X86Features CPU \u306e\u5bfe\u5fdc\u547d\u4ee4\u30bb\u30c3\u30c8 XInputVibration XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30d0\u30a4\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a XMLElement XML \u306e\u8981\u7d20 XMLReader XML \u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 YesNo<Tag> YesNo \u7528\u306e\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 ZIPReader ZIP \u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9","title":"\u69d8\u3005\u306a\u30af\u30e9\u30b9"},{"location":"ja-jp/api/classes/#\u4e71\u6570\u3068\u5206\u5e03","text":"\u578b\u540d \u8aac\u660e BernoulliDistribution \u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u30af\u30e9\u30b9 DefaultRNG \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::SFMT19937_64 \u306e\u5225\u540d\uff09 DiscreteDistribution \u78ba\u7387\u5206\u5e03\u3092\u751f\u6210\u3059\u308b\u30af\u30e9\u30b9 HardwareRNG \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u3088\u308b\u975e\u6c7a\u5b9a\u7684\u4e71\u6570\u751f\u6210\u5668 NormalDistribution \u6b63\u898f\u5206\u5e03\u30af\u30e9\u30b9 PRNG::SFMT19937_64 SIMD-oriented Fast Mersenne Twister \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::SplitMix64 SplitMix64 \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128PlusPlus xoroshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoroshiro128StarStar xoroshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128Plus xoshiro128+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128PlusPlus xoshiro128++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro128StarStar xoshiro128** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256Plus xoshiro256+ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256PlusPlus xoshiro256++ \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 PRNG::Xoshiro256StarStar xoshiro256** \u65b9\u5f0f\u306b\u3088\u308b\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668 SmallRNG \u7701\u30b5\u30a4\u30ba\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\uff08 PRNG::Xoshiro256PlusPlus \u306e\u5225\u540d\uff09 UniformDistribution \u6574\u6570\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u4f7f\u3048\u308b\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformIntDistribution \u6574\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9 UniformRealDistribution \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e00\u69d8\u5206\u5e03\u30af\u30e9\u30b9","title":"\u4e71\u6570\u3068\u5206\u5e03"},{"location":"ja-jp/api/classes/#2d-\u7269\u7406\u6f14\u7b97","text":"\u578b\u540d \u8aac\u660e P2Body \u2605 \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u306b\u5b58\u5728\u3059\u308b\u7269\u4f53\u306e 1 \u5358\u4f4d\u30020 \u500b\u4ee5\u4e0a\uff08\u901a\u5e38\u306f 1 \u500b\u4ee5\u4e0a\uff09\u306e\u90e8\u54c1\uff08 P2Shape \uff09\u304b\u3089\u69cb\u6210\u3055\u308c\u308b P2BodyID \u7269\u4f53 P2Body \u306b\u4e0e\u3048\u3089\u308c\u308b\u4e00\u610f\u306e ID \u306e\u578b\uff08 uint32 \u306e\u5225\u540d\uff09 P2BodyType \u2605 \u7269\u4f53\u306e\u7a2e\u985e\u306b\u95a2\u3059\u308b\u5217\u6319\u578b P2Circle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u5186\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Collision 2 \u3064\u306e\u7269\u4f53\u306b\u306f\u305f\u3089\u304f\u5168\u3066\u306e\u63a5\u89e6\u306b\u95a2\u3059\u308b\u60c5\u5831\u3067\u3001\u6700\u5927 2 \u3064\u306e P2Contact \u3092\u6301\u3064 P2Contact 2 \u3064\u306e\u7269\u4f53\u306b\u767a\u751f\u3057\u305f\u885d\u7a81\u306b\u95a2\u3059\u308b\u60c5\u5831 P2ContactPair 2 \u3064\u306e\u7269\u4f53\u304c\u63a5\u89e6\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u305d\u308c\u3089\u306e ID (P2BodyID) \u306e\u30da\u30a2 P2DistanceJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u8ddd\u96e2\u30b8\u30e7\u30a4\u30f3\u30c8 P2Filter \u90e8\u54c1\uff08 P2Shape \uff09\u306b\u30ab\u30c6\u30b4\u30ea\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3057\u3001\u7279\u5b9a\u306e\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u6301\u3064\u90e8\u54c1\u3068\u5e72\u6e09\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b P2Line \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2LineString \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9023\u7d9a\u3057\u305f\u7dda\u5206\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Material \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u6750\u8cea\u3092\u5b9a\u7fa9\u3059\u308b P2MouseJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30de\u30a6\u30b9\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30d4\u30dc\u30c3\u30c8\u30b8\u30e7\u30a4\u30f3\u30c8 P2Polygon \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u591a\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Quad \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u51f8\u56db\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Rect \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2Shape \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 P2ShapeType \u90e8\u54c1\uff08 P2Shape \uff09\u306e\u5f62\u72b6\u306e\u7a2e\u985e\u3092\u8868\u3059\u5217\u6319\u578b P2SliderJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30b9\u30e9\u30a4\u30c0\u30fc\u30b8\u30e7\u30a4\u30f3\u30c8 P2Triangle \u7269\u4f53\uff08 P2Body \uff09\u3092\u69cb\u6210\u3059\u308b\u90e8\u54c1\u3002\u4e09\u89d2\u5f62\u306e\u5f62\u72b6\u3092\u6301\u3064 P2WheelJoint 2 \u3064\u306e\u7269\u4f53\u3092\u3064\u306a\u3050\u30db\u30a4\u30fc\u30eb\u30b8\u30e7\u30a4\u30f3\u30c8 P2World \u2605 \u7269\u7406\u6f14\u7b97\u3092\u884c\u3046\u30ef\u30fc\u30eb\u30c9","title":"2D \u7269\u7406\u6f14\u7b97"},{"location":"ja-jp/api/classes/#json-\u30c7\u30fc\u30bf","text":"\u578b\u540d \u8aac\u660e JSON \u2605 JSON \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u30af\u30e9\u30b9 JSONArrayView JSON \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc JSONConstIterator JSON const \u30a4\u30c6\u30ec\u30fc\u30bf JSONItem JSON \u306e\u8981\u7d20 JSONIterationProxy JSON \u30a4\u30c6\u30ec\u30fc\u30bf\u88dc\u52a9\u30af\u30e9\u30b9 JSONIterator JSON \u30a4\u30c6\u30ec\u30fc\u30bf JSONValueType JSON \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b","title":"JSON \u30c7\u30fc\u30bf"},{"location":"ja-jp/api/classes/#toml-\u30c7\u30fc\u30bf","text":"\u578b\u540d \u8aac\u660e TOMLArrayIterator TOML \u306e\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLArrayView TOML \u306e\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLReader \u2605 TOML \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30af\u30e9\u30b9 TOMLTableArrayIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableArrayView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u914d\u5217\u306e\u30d3\u30e5\u30fc TOMLTableIterator TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf TOMLTableMember TOML \u306e\u30c6\u30fc\u30d6\u30eb\u30e1\u30f3\u30d0 TOMLTableView TOML \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u30d3\u30e5\u30fc TOMLValue TOML \u306e\u8981\u7d20 TOMLValueType TOML \u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059\u5217\u6319\u578b","title":"TOML \u30c7\u30fc\u30bf"},{"location":"ja-jp/api/classes/#\u753b\u50cf\u30b3\u30fc\u30c7\u30c3\u30af","text":"\u578b\u540d \u8aac\u660e BMPDecoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 BMPEncoder BMP \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 GIFDecoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 GIFEncoder GIF \u5f62\u5f0f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 JPEGDecoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 JPEGEncoder JPEG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGDecoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PNGEncoder PNG \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PNGFilter PNG \u5727\u7e2e\u6642\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u8868\u3059\u5217\u6319\u578b PPMDecoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 PPMEncoder PPM \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 PPMType PPM \u753b\u50cf\u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b SVGDecoder SVG \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGADecoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 TGAEncoder TGA \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 TIFFDecoder TIFF \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPDecoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30c7\u30b3\u30fc\u30c0 WebPEncoder WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WebPMethod WebP \u5f62\u5f0f\u753b\u50cf\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u624b\u6cd5\u3092\u8868\u3059\u5217\u6319\u578b","title":"\u753b\u50cf\u30b3\u30fc\u30c7\u30c3\u30af"},{"location":"ja-jp/api/classes/#\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af","text":"\u578b\u540d \u8aac\u660e AACDecoder AAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 AIFFDecoder AIFF \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 FLACDecoder FLAC \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MIDIDecoder MIDI \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 MP3Decoder MP3 \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisDecoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 OggVorbisEncoder OggVorbis \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 OpusDecoder Opus \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEDecoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0 WAVEEncoder WAVE \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30a8\u30f3\u30b3\u30fc\u30c0 WAVEFormat WAVE \u306e\u4fdd\u5b58\u5f62\u5f0f\u3092\u8868\u3059\u5217\u6319\u578b WMADecoder WMA \u5f62\u5f0f\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c0","title":"\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af"},{"location":"ja-jp/community/community/","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u00b6 1. Siv3D \u30aa\u30f3\u30e9\u30a4\u30f3\u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u00b6 Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3082\u3042\u308a\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u52dd\u624b\u306b\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002\u73fe\u5728 Discord \u3068 Slack \u5408\u308f\u305b\u3066 700 \u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002 Discord Siv3D \u30b5\u30fc\u30d0\u30fc\u306b\u53c2\u52a0\u3059\u308b Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306b\u53c2\u52a0\u3059\u308b 2. OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001Siv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u958b\u50ac\u5834\u6240\uff08\u30aa\u30f3\u30e9\u30a4\u30f3\uff09: Discord Siv3D \u30b5\u30fc\u30d0\u30fc OpenSiv3D \u5b9f\u88c5\u4f1a \u6bce\u6708 1\uff5e2 \u56de\u958b\u50ac 3. Siv3D \u52c9\u5f37\u4f1a \u00b6 \u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002 Siv3D \u52c9\u5f37\u4f1a 4. OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8 \u00b6 Siv3D \u306e\u65b0\u6a5f\u80fd\u3092\u4f5c\u308b\u3044\u304f\u3064\u304b\u306e\u30c1\u30e3\u30ec\u30f3\u30b8\u8ab2\u984c\u306e\u4e2d\u304b\u3089\u597d\u304d\u306a\u3082\u306e\u3092\u9078\u3073\u3001Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u5185\u306e\u5c02\u7528\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u53c2\u52a0\u3057\u3001\u30e1\u30f3\u30d0\u30fc\u3069\u3046\u3057\u5354\u529b or \u7af6\u4e89\u3057\u306a\u304c\u3089\u5b9f\u88c5\u306e\u5b8c\u6210\u3092\u76ee\u6307\u3059\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\u512a\u5148\u7684\u306a\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u3084\u5b9f\u88c5\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u306a\u3069\u3001\u6280\u8853\u30b5\u30dd\u30fc\u30c8\u3092\u53d7\u3051\u3089\u308c\u307e\u3059\u3002 OpenSiv3D Challenge 2021 5. Twitter \u00b6 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #Siv3D \u3084 #OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 6. GitHub \u00b6 \u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues 7. BBS \u00b6 \u533f\u540d\u3067\u8cea\u554f\u3092\u6295\u7a3f\u3067\u304d\u308b\u65e7\u5f0f\u306e\u63b2\u793a\u677f\u3067\u3059\u3002\u5de1\u56de\u983b\u5ea6\u304c\u4f4e\u3044\u306e\u3067 Slack \u3084 Twitter \u3088\u308a\u3082\u56de\u7b54\u304c\u4ed8\u304f\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","text":"","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#1-siv3d-\u30aa\u30f3\u30e9\u30a4\u30f3\u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","text":"Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3082\u3042\u308a\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u52dd\u624b\u306b\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002\u73fe\u5728 Discord \u3068 Slack \u5408\u308f\u305b\u3066 700 \u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002 Discord Siv3D \u30b5\u30fc\u30d0\u30fc\u306b\u53c2\u52a0\u3059\u308b Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306b\u53c2\u52a0\u3059\u308b","title":"1. Siv3D \u30aa\u30f3\u30e9\u30a4\u30f3\u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#2-opensiv3d-\u5b9f\u88c5\u4f1a","text":"Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001Siv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u958b\u50ac\u5834\u6240\uff08\u30aa\u30f3\u30e9\u30a4\u30f3\uff09: Discord Siv3D \u30b5\u30fc\u30d0\u30fc OpenSiv3D \u5b9f\u88c5\u4f1a \u6bce\u6708 1\uff5e2 \u56de\u958b\u50ac","title":"2. OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/community/community/#3-siv3d-\u52c9\u5f37\u4f1a","text":"\u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002 Siv3D \u52c9\u5f37\u4f1a","title":"3. Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/community/community/#4-opensiv3d-\u30c1\u30e3\u30ec\u30f3\u30b8","text":"Siv3D \u306e\u65b0\u6a5f\u80fd\u3092\u4f5c\u308b\u3044\u304f\u3064\u304b\u306e\u30c1\u30e3\u30ec\u30f3\u30b8\u8ab2\u984c\u306e\u4e2d\u304b\u3089\u597d\u304d\u306a\u3082\u306e\u3092\u9078\u3073\u3001Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u5185\u306e\u5c02\u7528\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u53c2\u52a0\u3057\u3001\u30e1\u30f3\u30d0\u30fc\u3069\u3046\u3057\u5354\u529b or \u7af6\u4e89\u3057\u306a\u304c\u3089\u5b9f\u88c5\u306e\u5b8c\u6210\u3092\u76ee\u6307\u3059\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\u512a\u5148\u7684\u306a\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u3084\u5b9f\u88c5\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u306a\u3069\u3001\u6280\u8853\u30b5\u30dd\u30fc\u30c8\u3092\u53d7\u3051\u3089\u308c\u307e\u3059\u3002 OpenSiv3D Challenge 2021","title":"4. OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8"},{"location":"ja-jp/community/community/#5-twitter","text":"\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #Siv3D \u3084 #OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22","title":"5. Twitter"},{"location":"ja-jp/community/community/#6-github","text":"\u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues","title":"6. GitHub"},{"location":"ja-jp/community/community/#7-bbs","text":"\u533f\u540d\u3067\u8cea\u554f\u3092\u6295\u7a3f\u3067\u304d\u308b\u65e7\u5f0f\u306e\u63b2\u793a\u677f\u3067\u3059\u3002\u5de1\u56de\u983b\u5ea6\u304c\u4f4e\u3044\u306e\u3067 Slack \u3084 Twitter \u3088\u308a\u3082\u56de\u7b54\u304c\u4ed8\u304f\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"7. BBS"},{"location":"ja-jp/community/dev-day/","text":"OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u81ea\u7531\u306b\u9032\u307f\u307e\u3059\u30022020 \u5e74\u4ee5\u964d\u306f\u30aa\u30f3\u30e9\u30a4\u30f3 (Discord) \u3067\u6bce\u6708\u958b\u50ac\u3057\u3066\u3044\u307e\u3059\u3002 \u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u958b\u50ac\u3055\u308c\u305f\u5b9f\u88c5\u4f1a \u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #42 2020-02-16 \u65e9\u7a32\u7530\u5927\u5b66 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66 \u4e3b\u306a\u6d3b\u52d5\u5185\u5bb9 \u00b6 \u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u3067\u898b\u3064\u3051\u3089\u308c\u307e\u3059\u3002 \u53c2\u52a0\u65b9\u6cd5\u306f\uff1f \u00b6 Discord Siv3D \u30b5\u30fc\u30d0\u30fc \u4e0a\u3067\u958b\u50ac\u3055\u308c\u307e\u3059 \u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8 \u00b6 \u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/community/dev-day/#opensiv3d-\u5b9f\u88c5\u4f1a","text":"Siv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u81ea\u7531\u306b\u9032\u307f\u307e\u3059\u30022020 \u5e74\u4ee5\u964d\u306f\u30aa\u30f3\u30e9\u30a4\u30f3 (Discord) \u3067\u6bce\u6708\u958b\u50ac\u3057\u3066\u3044\u307e\u3059\u3002 \u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u958b\u50ac\u3055\u308c\u305f\u5b9f\u88c5\u4f1a \u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #42 2020-02-16 \u65e9\u7a32\u7530\u5927\u5b66 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66","title":"OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/community/dev-day/#\u4e3b\u306a\u6d3b\u52d5\u5185\u5bb9","text":"\u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #OpenSiv3D\u5b9f\u88c5\u4f1a \u3067\u898b\u3064\u3051\u3089\u308c\u307e\u3059\u3002","title":"\u4e3b\u306a\u6d3b\u52d5\u5185\u5bb9"},{"location":"ja-jp/community/dev-day/#\u53c2\u52a0\u65b9\u6cd5\u306f","text":"Discord Siv3D \u30b5\u30fc\u30d0\u30fc \u4e0a\u3067\u958b\u50ac\u3055\u308c\u307e\u3059","title":"\u53c2\u52a0\u65b9\u6cd5\u306f\uff1f"},{"location":"ja-jp/community/dev-day/#\u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8","text":"\u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8"},{"location":"ja-jp/community/study-meeting/","text":"Siv3D \u52c9\u5f37\u4f1a \u00b6 \u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002 \u904e\u53bb\u306e Siv3D \u52c9\u5f37\u4f1a \u00b6 \u5834\u6240 \u958b\u50ac\u65e5 \u4e3b\u50ac \u4f1a\u5834 \u30aa\u30f3\u30e9\u30a4\u30f3 2022-03-28 Siv3D \u30aa\u30f3\u30e9\u30a4\u30f3 \u5343\u8449 2020-02-21 \u5343\u8449\u5927\u5b66\u96fb\u5b50\u8a08\u7b97\u6a5f\u7814\u7a76\u4f1a\uff08CCS\uff09 \u5343\u8449\u5e02\u751f\u6daf\u5b66\u7fd2\u30bb\u30f3\u30bf\u30fc \u4ed9\u53f0 2020-01-25 \u4ed9\u53f0\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u7814\u7a76\u90e8\u4f1a \u540d\u53d6\u5e02 \u5897\u7530\u516c\u6c11\u9928 \u6c96\u7e04 2019-08-15 \u6c96\u7e04\u9ad8\u5c02 \u6709\u5fd7 \u6c96\u7e04\u9ad8\u5c02 \u9759\u5ca1 2019-03-03 CoderDojo \u9759\u5ca1 \u9759\u5ca1\u5e02\u756a\u753a\u5e02\u6c11\u6d3b\u52d5\u30bb\u30f3\u30bf\u30fc \u77f3\u5ddd 2018-12-08 Siv3D \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 \u9577\u91ce 2018-09-30 \u9577\u91ce\u9ad8\u5c02 \u60c5\u5831\u6280\u8853\u7814\u7a76\u90e8 \u9577\u91ce\u9ad8\u5c02 \u7b51\u6ce2 2018-07-07 \u7b51\u6ce2\u5927\u5b66 Amusement Creators \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 \u5e83\u5cf6 2018-05-12 Hiroshima Student Community (HSC) \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e \u77f3\u5ddd 2017-05-01 \u77f3\u5ddd\u9ad8\u5c02 \u96fb\u5b50\u60c5\u5831\u7814\u7a76\u90e8 \u77f3\u5ddd\u9ad8\u5c02 \u6771\u4eac 2014-11-09 Siv3D \u8305\u5834\u753a Co-Edo \u52c9\u5f37\u4f1a\u3092\u958b\u50ac\u3057\u305f\u3044\u65b9\u3078 \u00b6 DM \u307e\u305f\u306f\u30e1\u30fc\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044\u3002 \u5b66\u6821\u3084\u5730\u57df\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u7121\u6599\u3067\u306e\u8a2a\u554f\u52c9\u5f37\u4f1a \u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059","title":"Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/community/study-meeting/#siv3d-\u52c9\u5f37\u4f1a","text":"\u97f3\u3084\u753b\u50cf\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f53\u9a13\u3057\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u958b\u767a\u306b\u5f79\u7acb\u3064\u57fa\u672c\u7684\u306a Siv3D \u306e\u77e5\u8b58\u3092\u5b66\u3076\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002Siv3D \u306e\u958b\u767a\u8005\u306b\u76f4\u63a5\u610f\u898b\u3092\u4f1d\u3048\u305f\u308a\u3001\u8cea\u554f\u3092\u805e\u3051\u308b\u6a5f\u4f1a\u3067\u3082\u3042\u308a\u307e\u3059\u3002","title":"Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/community/study-meeting/#\u904e\u53bb\u306e-siv3d-\u52c9\u5f37\u4f1a","text":"\u5834\u6240 \u958b\u50ac\u65e5 \u4e3b\u50ac \u4f1a\u5834 \u30aa\u30f3\u30e9\u30a4\u30f3 2022-03-28 Siv3D \u30aa\u30f3\u30e9\u30a4\u30f3 \u5343\u8449 2020-02-21 \u5343\u8449\u5927\u5b66\u96fb\u5b50\u8a08\u7b97\u6a5f\u7814\u7a76\u4f1a\uff08CCS\uff09 \u5343\u8449\u5e02\u751f\u6daf\u5b66\u7fd2\u30bb\u30f3\u30bf\u30fc \u4ed9\u53f0 2020-01-25 \u4ed9\u53f0\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u7814\u7a76\u90e8\u4f1a \u540d\u53d6\u5e02 \u5897\u7530\u516c\u6c11\u9928 \u6c96\u7e04 2019-08-15 \u6c96\u7e04\u9ad8\u5c02 \u6709\u5fd7 \u6c96\u7e04\u9ad8\u5c02 \u9759\u5ca1 2019-03-03 CoderDojo \u9759\u5ca1 \u9759\u5ca1\u5e02\u756a\u753a\u5e02\u6c11\u6d3b\u52d5\u30bb\u30f3\u30bf\u30fc \u77f3\u5ddd 2018-12-08 Siv3D \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 \u9577\u91ce 2018-09-30 \u9577\u91ce\u9ad8\u5c02 \u60c5\u5831\u6280\u8853\u7814\u7a76\u90e8 \u9577\u91ce\u9ad8\u5c02 \u7b51\u6ce2 2018-07-07 \u7b51\u6ce2\u5927\u5b66 Amusement Creators \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 \u5e83\u5cf6 2018-05-12 Hiroshima Student Community (HSC) \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e \u77f3\u5ddd 2017-05-01 \u77f3\u5ddd\u9ad8\u5c02 \u96fb\u5b50\u60c5\u5831\u7814\u7a76\u90e8 \u77f3\u5ddd\u9ad8\u5c02 \u6771\u4eac 2014-11-09 Siv3D \u8305\u5834\u753a Co-Edo","title":"\u904e\u53bb\u306e Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/community/study-meeting/#\u52c9\u5f37\u4f1a\u3092\u958b\u50ac\u3057\u305f\u3044\u65b9\u3078","text":"DM \u307e\u305f\u306f\u30e1\u30fc\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044\u3002 \u5b66\u6821\u3084\u5730\u57df\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u7121\u6599\u3067\u306e\u8a2a\u554f\u52c9\u5f37\u4f1a \u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059","title":"\u52c9\u5f37\u4f1a\u3092\u958b\u50ac\u3057\u305f\u3044\u65b9\u3078"},{"location":"ja-jp/develop/build/","text":"\u81ea\u524d\u30d3\u30eb\u30c9\u306e\u624b\u9806 \u00b6 \u81ea\u524d\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30d3\u30eb\u30c9\u3059\u308b\u624b\u9806\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u306e\u30da\u30fc\u30b8\u306f\u6b21\u306e\u3088\u3046\u306a\u7279\u6b8a\u306a\u5229\u7528\u8005\u5411\u3051\u306e\u8aac\u660e\u3067\u3059\u3002 \u958b\u767a\u4e2d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u6700\u65b0\u306e\u30b3\u30fc\u30c9\u3092\u8a66\u3057\u305f\u3044 Siv3D \u306e\u5185\u90e8\u3092\u7406\u89e3\u3057\u305f\u3044 \u5185\u90e8\u306e\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3057\u305f\u3044 1. Windows \u306e\u5834\u5408 \u00b6 1.1 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b \u00b6 \u25c6 OpenSiv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d3\u30eb\u30c9\u306b\u5fc5\u8981\u306a C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u300cBoost\u300d \u3092\u6e96\u5099\u3057\u307e\u3059\u3002 https://www.boost.org/users/history/version_1_74_0.html \u304b\u3089 boost_1_74_0 \u306e\u5727\u7e2e\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u5c55\u958b\u3057\u307e\u3059\u3002\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306f .7z \u3068 .zip \u304c\u3042\u308a\u307e\u3059\u3002\u4f7f\u7528\u3057\u3066\u3044\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067 .7z \u306e\u5c55\u958b\u304c\u3067\u304d\u308b\u306a\u3089 .7z \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u6240\u7528\u6642\u9593\u304c\u77ed\u3044\u3067\u3059\u3002Boost \u306f\u5927\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u305f\u3081\u3001Windows OS \u6a19\u6e96\u306e ZIP \u5c55\u958b\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u3068\u5c55\u958b\u306e\u5b8c\u4e86\u307e\u3067\u6570\u5206\u8fd1\u304f\u5f85\u305f\u3055\u308c\u307e\u3059\u3002 Boost \u3068\u306f Boost \u306f 20 \u5e74\u4ee5\u4e0a\u306e\u6b74\u53f2\u304c\u3042\u308b\u3001C++ \u3067\u6700\u3082\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e 1 \u3064\u3067\u3059\u3002\u69d8\u3005\u306a\u76ee\u7684\u306e\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f\u5927\u5c0f\u3055\u307e\u3056\u307e\u3001\u4f5c\u8005\u3082\u3055\u307e\u3056\u307e\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002C++11 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::shared_ptr , C++17 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::optional , <filesystem> \u306f\u305d\u308c\u305e\u308c Boost.SmartPtr, Boost.Optional, Boost.Fileystem \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d9\u30fc\u30b9\u306b\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002Siv3D \u3067\u306f\u3001\u5e7e\u4f55\u554f\u984c\u306e\u8a08\u7b97\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Geometry, C++17 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u74b0\u5883\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Filesystem, \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u30fb\u901a\u4fe1\u306e\u305f\u3081\u306b Boost.Process, \u591a\u500d\u9577\u8a08\u7b97\u306e\u305f\u3081\u306b Boost.MultiPrecision, CSV \u30d1\u30fc\u30b5\u306e\u305f\u3081\u306b Boost.Tokenizer \u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 .7z \u306e\u5c55\u958b\u30bd\u30d5\u30c8 .7z \u306e\u5c55\u958b\u306b\u4f7f\u3048\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f 7-Zip \u304c\u6700\u3082\u6709\u540d\u3067\u3059\u3002 1.2 OpenSiv3D \u306e\u958b\u767a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b \u00b6 \u25c6 OpenSiv3D \u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u5165\u624b\u3057\u307e\u3059\u3002 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002 1.3 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8ffd\u52a0\u3059\u308b \u00b6 \u25c6 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u306b Boost \u306e\u4e00\u90e8\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 1.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3001 Dependencies/boost_1_74_0/ \u30d5\u30a9\u30eb\u30c0\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u3078 1.1 \u3067\u6e96\u5099\u3057\u305f Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3067\u3042\u308b boost_1_74_0/boost/ \u30d5\u30a9\u30eb\u30c0 (\u7d04 120 MB) \u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u30b3\u30d4\u30fc\u5f8c\u306f Dependencies/boost_1_74_0/boost/ \u3068\u306a\u308a\u307e\u3059\u3002 1.4 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3068 OpenSiv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b \u00b6 \u25c6 Visual Studio \u3067 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3068 OpenSiv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 1.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e WindowsDesktop/OpenSiv3D.sln \u3092 Visual Studio \u3067\u958b\u304f\u3068\u3001OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cSiv3D\u300d\u3068\u3001\u30c6\u30b9\u30c8\u7528\u306e\u30a2\u30d7\u30ea\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cSiv3D-Test\u300d\u3092\u542b\u3080\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u304c\u958b\u304d\u307e\u3059\u3002 \u300cSiv3D-Test\u300d\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u5148\u306b\u81ea\u52d5\u7684\u306b OpenSiv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cSiv3D\u300d\u306e\u30d3\u30eb\u30c9\u304c\u59cb\u307e\u308a\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d3\u30eb\u30c9\u306b\u306f\u6570\u5206\u304b\u304b\u308a\u307e\u3059\u3002 Windows \u7248\u306e OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u30d3\u30eb\u30c9\u3067 error C2039: '\u200bCheckForDuplicateEntries': is not a member of 'Microsoft::WRL::Details' \u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u5834\u5408\u3001Visual Studio Installer \u3092\u4f7f\u3063\u3066\u65b0\u3057\u3044 Windows 10 SDK (\u30d0\u30fc\u30b8\u30e7\u30f3 10.0.18362.0 \u4ee5\u964d) \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3059\u3002 2. macOS \u306e\u5834\u5408 \u00b6 2.1 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b \u00b6 \u25c6 OpenSiv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d3\u30eb\u30c9\u306b\u5fc5\u8981\u306a C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u300cBoost\u300d \u3092\u6e96\u5099\u3057\u307e\u3059\u3002 https://www.boost.org/users/history/version_1_74_0.html \u304b\u3089 boost_1_74_0 \u306e\u5727\u7e2e\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u5c55\u958b\u3057\u307e\u3059\u3002 Boost \u3068\u306f Boost \u306f 20 \u5e74\u4ee5\u4e0a\u306e\u6b74\u53f2\u304c\u3042\u308b\u3001C++ \u3067\u6700\u3082\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e 1 \u3064\u3067\u3059\u3002\u69d8\u3005\u306a\u76ee\u7684\u306e\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f\u5927\u5c0f\u3055\u307e\u3056\u307e\u3001\u4f5c\u8005\u3082\u3055\u307e\u3056\u307e\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002C++11 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::shared_ptr , C++17 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::optional , <filesystem> \u306f\u305d\u308c\u305e\u308c Boost.SmartPtr, Boost.Optional, Boost.Fileystem \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d9\u30fc\u30b9\u306b\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002Siv3D \u3067\u306f\u3001\u5e7e\u4f55\u554f\u984c\u306e\u8a08\u7b97\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Geometry, C++17 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u74b0\u5883\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Filesystem, \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u30fb\u901a\u4fe1\u306e\u305f\u3081\u306b Boost.Process, \u591a\u500d\u9577\u8a08\u7b97\u306e\u305f\u3081\u306b Boost.MultiPrecision, CSV \u30d1\u30fc\u30b5\u306e\u305f\u3081\u306b Boost.Tokenizer \u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 2.2 OpenSiv3D \u306e\u958b\u767a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b \u00b6 \u25c6 OpenSiv3D \u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u5165\u624b\u3057\u307e\u3059\u3002 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002 2.3 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8ffd\u52a0\u3059\u308b \u00b6 \u25c6 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u306b Boost \u306e\u4e00\u90e8\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 2.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3001 Dependencies/boost_1_74_0/ \u30d5\u30a9\u30eb\u30c0\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u3078 2.1 \u3067\u6e96\u5099\u3057\u305f Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3067\u3042\u308b boost_1_74_0/boost/ \u30d5\u30a9\u30eb\u30c0 (\u7d04 120 MB) \u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u30b3\u30d4\u30fc\u5f8c\u306f Dependencies/boost_1_74_0/boost/ \u3068\u306a\u308a\u307e\u3059\u3002 2.4 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b \u00b6 \u25c6 Xcode \u3067 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 2.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e macOS/OpenSiv3D.xcodeproj \u3092 Xcode \u3067\u958b\u304d\u3001\u300cSiv3D\u300d\u3068\u3044\u3046 Target \u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u30d5\u30eb\u30d3\u30eb\u30c9\u306b\u306f\u6570\u5206\u524d\u5f8c\u304b\u304b\u308a\u307e\u3059\u3002\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 libSiv3D.a \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 2.5 OpenSiv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b \u00b6 \u25c6 Xcode \u3067 OpenSiv3D \u306e\u30c6\u30b9\u30c8\u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u6b21\u306b\u300cSiv3D-Test\u300d\u3068\u3044\u3046 Target \u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f 1 \u3064\u3060\u3051\u3067\u3001 macOS/Main.cpp \u3067\u3059\u3002\u30d3\u30eb\u30c9\u306b\u306f\u6570\u79d2\u304b\u304b\u308a\u307e\u3059\u3002\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 Siv3D-Test.app \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 3. Linux \u306e\u5834\u5408 \u00b6 \u901a\u5e38\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u304c\u3001\u81ea\u524d\u30d3\u30eb\u30c9\u306e\u624b\u9806\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u81ea\u524d\u30d3\u30eb\u30c9\u306e\u624b\u9806"},{"location":"ja-jp/develop/build/#\u81ea\u524d\u30d3\u30eb\u30c9\u306e\u624b\u9806","text":"\u81ea\u524d\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30d3\u30eb\u30c9\u3059\u308b\u624b\u9806\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u306e\u30da\u30fc\u30b8\u306f\u6b21\u306e\u3088\u3046\u306a\u7279\u6b8a\u306a\u5229\u7528\u8005\u5411\u3051\u306e\u8aac\u660e\u3067\u3059\u3002 \u958b\u767a\u4e2d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u6700\u65b0\u306e\u30b3\u30fc\u30c9\u3092\u8a66\u3057\u305f\u3044 Siv3D \u306e\u5185\u90e8\u3092\u7406\u89e3\u3057\u305f\u3044 \u5185\u90e8\u306e\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3057\u305f\u3044","title":"\u81ea\u524d\u30d3\u30eb\u30c9\u306e\u624b\u9806"},{"location":"ja-jp/develop/build/#1-windows-\u306e\u5834\u5408","text":"","title":"1. Windows \u306e\u5834\u5408"},{"location":"ja-jp/develop/build/#11-\u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b","text":"\u25c6 OpenSiv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d3\u30eb\u30c9\u306b\u5fc5\u8981\u306a C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u300cBoost\u300d \u3092\u6e96\u5099\u3057\u307e\u3059\u3002 https://www.boost.org/users/history/version_1_74_0.html \u304b\u3089 boost_1_74_0 \u306e\u5727\u7e2e\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u5c55\u958b\u3057\u307e\u3059\u3002\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306f .7z \u3068 .zip \u304c\u3042\u308a\u307e\u3059\u3002\u4f7f\u7528\u3057\u3066\u3044\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067 .7z \u306e\u5c55\u958b\u304c\u3067\u304d\u308b\u306a\u3089 .7z \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u6240\u7528\u6642\u9593\u304c\u77ed\u3044\u3067\u3059\u3002Boost \u306f\u5927\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u305f\u3081\u3001Windows OS \u6a19\u6e96\u306e ZIP \u5c55\u958b\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u3068\u5c55\u958b\u306e\u5b8c\u4e86\u307e\u3067\u6570\u5206\u8fd1\u304f\u5f85\u305f\u3055\u308c\u307e\u3059\u3002 Boost \u3068\u306f Boost \u306f 20 \u5e74\u4ee5\u4e0a\u306e\u6b74\u53f2\u304c\u3042\u308b\u3001C++ \u3067\u6700\u3082\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e 1 \u3064\u3067\u3059\u3002\u69d8\u3005\u306a\u76ee\u7684\u306e\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f\u5927\u5c0f\u3055\u307e\u3056\u307e\u3001\u4f5c\u8005\u3082\u3055\u307e\u3056\u307e\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002C++11 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::shared_ptr , C++17 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::optional , <filesystem> \u306f\u305d\u308c\u305e\u308c Boost.SmartPtr, Boost.Optional, Boost.Fileystem \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d9\u30fc\u30b9\u306b\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002Siv3D \u3067\u306f\u3001\u5e7e\u4f55\u554f\u984c\u306e\u8a08\u7b97\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Geometry, C++17 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u74b0\u5883\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Filesystem, \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u30fb\u901a\u4fe1\u306e\u305f\u3081\u306b Boost.Process, \u591a\u500d\u9577\u8a08\u7b97\u306e\u305f\u3081\u306b Boost.MultiPrecision, CSV \u30d1\u30fc\u30b5\u306e\u305f\u3081\u306b Boost.Tokenizer \u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 .7z \u306e\u5c55\u958b\u30bd\u30d5\u30c8 .7z \u306e\u5c55\u958b\u306b\u4f7f\u3048\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f 7-Zip \u304c\u6700\u3082\u6709\u540d\u3067\u3059\u3002","title":"1.1 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b"},{"location":"ja-jp/develop/build/#12-opensiv3d-\u306e\u958b\u767a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b","text":"\u25c6 OpenSiv3D \u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u5165\u624b\u3057\u307e\u3059\u3002 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002","title":"1.2 OpenSiv3D \u306e\u958b\u767a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b"},{"location":"ja-jp/develop/build/#13-\u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8ffd\u52a0\u3059\u308b","text":"\u25c6 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u306b Boost \u306e\u4e00\u90e8\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 1.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3001 Dependencies/boost_1_74_0/ \u30d5\u30a9\u30eb\u30c0\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u3078 1.1 \u3067\u6e96\u5099\u3057\u305f Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3067\u3042\u308b boost_1_74_0/boost/ \u30d5\u30a9\u30eb\u30c0 (\u7d04 120 MB) \u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u30b3\u30d4\u30fc\u5f8c\u306f Dependencies/boost_1_74_0/boost/ \u3068\u306a\u308a\u307e\u3059\u3002","title":"1.3 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8ffd\u52a0\u3059\u308b"},{"location":"ja-jp/develop/build/#14-opensiv3d-\u30e9\u30a4\u30d6\u30e9\u30ea\u3068-opensiv3d-\u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b","text":"\u25c6 Visual Studio \u3067 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3068 OpenSiv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 1.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e WindowsDesktop/OpenSiv3D.sln \u3092 Visual Studio \u3067\u958b\u304f\u3068\u3001OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cSiv3D\u300d\u3068\u3001\u30c6\u30b9\u30c8\u7528\u306e\u30a2\u30d7\u30ea\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cSiv3D-Test\u300d\u3092\u542b\u3080\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u304c\u958b\u304d\u307e\u3059\u3002 \u300cSiv3D-Test\u300d\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u5148\u306b\u81ea\u52d5\u7684\u306b OpenSiv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cSiv3D\u300d\u306e\u30d3\u30eb\u30c9\u304c\u59cb\u307e\u308a\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d3\u30eb\u30c9\u306b\u306f\u6570\u5206\u304b\u304b\u308a\u307e\u3059\u3002 Windows \u7248\u306e OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u30d3\u30eb\u30c9\u3067 error C2039: '\u200bCheckForDuplicateEntries': is not a member of 'Microsoft::WRL::Details' \u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u5834\u5408\u3001Visual Studio Installer \u3092\u4f7f\u3063\u3066\u65b0\u3057\u3044 Windows 10 SDK (\u30d0\u30fc\u30b8\u30e7\u30f3 10.0.18362.0 \u4ee5\u964d) \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3059\u3002","title":"1.4 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3068 OpenSiv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b"},{"location":"ja-jp/develop/build/#2-macos-\u306e\u5834\u5408","text":"","title":"2. macOS \u306e\u5834\u5408"},{"location":"ja-jp/develop/build/#21-\u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b","text":"\u25c6 OpenSiv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u672c\u4f53\u306e\u30d3\u30eb\u30c9\u306b\u5fc5\u8981\u306a C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u300cBoost\u300d \u3092\u6e96\u5099\u3057\u307e\u3059\u3002 https://www.boost.org/users/history/version_1_74_0.html \u304b\u3089 boost_1_74_0 \u306e\u5727\u7e2e\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u5c55\u958b\u3057\u307e\u3059\u3002 Boost \u3068\u306f Boost \u306f 20 \u5e74\u4ee5\u4e0a\u306e\u6b74\u53f2\u304c\u3042\u308b\u3001C++ \u3067\u6700\u3082\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e 1 \u3064\u3067\u3059\u3002\u69d8\u3005\u306a\u76ee\u7684\u306e\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f\u5927\u5c0f\u3055\u307e\u3056\u307e\u3001\u4f5c\u8005\u3082\u3055\u307e\u3056\u307e\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002C++11 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::shared_ptr , C++17 \u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u305f std::optional , <filesystem> \u306f\u305d\u308c\u305e\u308c Boost.SmartPtr, Boost.Optional, Boost.Fileystem \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d9\u30fc\u30b9\u306b\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002Siv3D \u3067\u306f\u3001\u5e7e\u4f55\u554f\u984c\u306e\u8a08\u7b97\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Geometry, C++17 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u74b0\u5883\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u51e6\u7406\u306e\u305f\u3081\u306b Boost.Filesystem, \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210\u30fb\u901a\u4fe1\u306e\u305f\u3081\u306b Boost.Process, \u591a\u500d\u9577\u8a08\u7b97\u306e\u305f\u3081\u306b Boost.MultiPrecision, CSV \u30d1\u30fc\u30b5\u306e\u305f\u3081\u306b Boost.Tokenizer \u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002","title":"2.1 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b"},{"location":"ja-jp/develop/build/#22-opensiv3d-\u306e\u958b\u767a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b","text":"\u25c6 OpenSiv3D \u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u5165\u624b\u3057\u307e\u3059\u3002 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002","title":"2.2 OpenSiv3D \u306e\u958b\u767a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b"},{"location":"ja-jp/develop/build/#23-\u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8ffd\u52a0\u3059\u308b","text":"\u25c6 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u306b Boost \u306e\u4e00\u90e8\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 2.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3001 Dependencies/boost_1_74_0/ \u30d5\u30a9\u30eb\u30c0\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u3078 2.1 \u3067\u6e96\u5099\u3057\u305f Boost \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3067\u3042\u308b boost_1_74_0/boost/ \u30d5\u30a9\u30eb\u30c0 (\u7d04 120 MB) \u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u30b3\u30d4\u30fc\u5f8c\u306f Dependencies/boost_1_74_0/boost/ \u3068\u306a\u308a\u307e\u3059\u3002","title":"2.3 \u8ffd\u52a0\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8ffd\u52a0\u3059\u308b"},{"location":"ja-jp/develop/build/#24-opensiv3d-\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b","text":"\u25c6 Xcode \u3067 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 2.2 \u3067\u5165\u624b\u3057\u305f OpenSiv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e macOS/OpenSiv3D.xcodeproj \u3092 Xcode \u3067\u958b\u304d\u3001\u300cSiv3D\u300d\u3068\u3044\u3046 Target \u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u30d5\u30eb\u30d3\u30eb\u30c9\u306b\u306f\u6570\u5206\u524d\u5f8c\u304b\u304b\u308a\u307e\u3059\u3002\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 libSiv3D.a \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002","title":"2.4 OpenSiv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b"},{"location":"ja-jp/develop/build/#25-opensiv3d-\u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b","text":"\u25c6 Xcode \u3067 OpenSiv3D \u306e\u30c6\u30b9\u30c8\u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u6b21\u306b\u300cSiv3D-Test\u300d\u3068\u3044\u3046 Target \u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f 1 \u3064\u3060\u3051\u3067\u3001 macOS/Main.cpp \u3067\u3059\u3002\u30d3\u30eb\u30c9\u306b\u306f\u6570\u79d2\u304b\u304b\u308a\u307e\u3059\u3002\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 Siv3D-Test.app \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002","title":"2.5 OpenSiv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b"},{"location":"ja-jp/develop/build/#3-linux-\u306e\u5834\u5408","text":"\u901a\u5e38\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u304c\u3001\u81ea\u524d\u30d3\u30eb\u30c9\u306e\u624b\u9806\u306b\u306a\u308a\u307e\u3059\u3002","title":"3. Linux \u306e\u5834\u5408"},{"location":"ja-jp/develop/commit/","text":"GitHub \u3067\u30b3\u30df\u30c3\u30c8\u3059\u308b \u00b6 1. Pull Request \u00b6 1.1 Issue \u3092\u4f5c\u6210\u3059\u308b \u00b6 \u30b3\u30df\u30c3\u30c8\u3059\u308b\u7b87\u6240\u306b\u95a2\u3057\u3066\u3001\u554f\u984c\u3084\u5909\u66f4\u6848\u3092\u8a18\u8ff0\u3057\u305f Issue \u3092\u4f5c\u6210\u3057\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u7ba1\u7406\u8005\u306e\u8fd4\u4fe1\u3092\u5f85\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u6a5f\u80fd\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u306a\u3044\u4e9b\u7d30\u306a\u5909\u66f4\u3084\u4fee\u6b63\u306e\u5834\u5408\u306f\u3001Issue \u3092\u4f5c\u6210\u305b\u305a\u306b\u76f4\u63a5 Pull Request \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 1.2 Pull Request \u3092\u4f5c\u6210\u3059\u308b \u00b6 \u958b\u767a\u30d6\u30e9\u30f3\u30c1 ( v6_develop ) \u307e\u305f\u306f main \u30d6\u30e9\u30f3\u30c1 ( main ) \u3092\u30d5\u30a9\u30fc\u30af\u3057\u3001 v6_develop \u30d6\u30e9\u30f3\u30c1\u306b\u5411\u3051\u3066 Pull Request \u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u969b\u3001\u5909\u66f4\u3068\u306f\u7121\u95a2\u4fc2\u306a\u30b3\u30df\u30c3\u30c8\u304c\u6df7\u5165\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1.3 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u9332\u3059\u308b \u00b6 \u521d\u3081\u3066 Pull Request \u304c\u30de\u30fc\u30b8\u3055\u308c\u305f\u5834\u5408\u306f\u3001AUTHORS \u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3059\u308b\u540d\u524d\u3068\u3001Siv3D Organization \u30e1\u30f3\u30d0\u30fc\u62db\u5f85\u306e\u78ba\u8a8d\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u307e\u3059\u3002\u56de\u7b54\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f8b \u00b6 https://github.com/Siv3D/OpenSiv3D/pull/796 https://github.com/Siv3D/OpenSiv3D/pull/805 2. OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 GitHub \u306e\u64cd\u4f5c\u306b\u4e0d\u6163\u308c\u306a\u5834\u5408\u306f\u3001OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002","title":"GitHub \u3067\u30b3\u30df\u30c3\u30c8\u3059\u308b"},{"location":"ja-jp/develop/commit/#github-\u3067\u30b3\u30df\u30c3\u30c8\u3059\u308b","text":"","title":"GitHub \u3067\u30b3\u30df\u30c3\u30c8\u3059\u308b"},{"location":"ja-jp/develop/commit/#1-pull-request","text":"","title":"1. Pull Request"},{"location":"ja-jp/develop/commit/#11-issue-\u3092\u4f5c\u6210\u3059\u308b","text":"\u30b3\u30df\u30c3\u30c8\u3059\u308b\u7b87\u6240\u306b\u95a2\u3057\u3066\u3001\u554f\u984c\u3084\u5909\u66f4\u6848\u3092\u8a18\u8ff0\u3057\u305f Issue \u3092\u4f5c\u6210\u3057\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u7ba1\u7406\u8005\u306e\u8fd4\u4fe1\u3092\u5f85\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u6a5f\u80fd\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u306a\u3044\u4e9b\u7d30\u306a\u5909\u66f4\u3084\u4fee\u6b63\u306e\u5834\u5408\u306f\u3001Issue \u3092\u4f5c\u6210\u305b\u305a\u306b\u76f4\u63a5 Pull Request \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"1.1 Issue \u3092\u4f5c\u6210\u3059\u308b"},{"location":"ja-jp/develop/commit/#12-pull-request-\u3092\u4f5c\u6210\u3059\u308b","text":"\u958b\u767a\u30d6\u30e9\u30f3\u30c1 ( v6_develop ) \u307e\u305f\u306f main \u30d6\u30e9\u30f3\u30c1 ( main ) \u3092\u30d5\u30a9\u30fc\u30af\u3057\u3001 v6_develop \u30d6\u30e9\u30f3\u30c1\u306b\u5411\u3051\u3066 Pull Request \u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u969b\u3001\u5909\u66f4\u3068\u306f\u7121\u95a2\u4fc2\u306a\u30b3\u30df\u30c3\u30c8\u304c\u6df7\u5165\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1.2 Pull Request \u3092\u4f5c\u6210\u3059\u308b"},{"location":"ja-jp/develop/commit/#13-\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u9332\u3059\u308b","text":"\u521d\u3081\u3066 Pull Request \u304c\u30de\u30fc\u30b8\u3055\u308c\u305f\u5834\u5408\u306f\u3001AUTHORS \u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3059\u308b\u540d\u524d\u3068\u3001Siv3D Organization \u30e1\u30f3\u30d0\u30fc\u62db\u5f85\u306e\u78ba\u8a8d\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u307e\u3059\u3002\u56de\u7b54\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1.3 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u9332\u3059\u308b"},{"location":"ja-jp/develop/commit/#2-opensiv3d-\u5b9f\u88c5\u4f1a","text":"GitHub \u306e\u64cd\u4f5c\u306b\u4e0d\u6163\u308c\u306a\u5834\u5408\u306f\u3001OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002","title":"2. OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/develop/report/","text":"\u5831\u544a\u3084\u63d0\u6848 \u00b6 Siv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4e0d\u5177\u5408\u3001\u6539\u5584\u70b9\u3001\u6a5f\u80fd\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308c\u3070\u3001\u6b21\u306e\u3088\u3046\u306b\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002 1. Siv3D \u306e\u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u5831\u544a\u3059\u308b \u00b6 OpenSiv3D \u306e GitHub Issues \u306b\u3001\u4e0d\u5177\u5408\u306e\u8aac\u660e\u3068\u518d\u73fe\u306e\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e9b\u7d30\u306a\u4fee\u6b63\u3067\u3042\u308b\u5834\u5408\u3001\u76f4\u63a5 Pull Request \u3092\u958b\u767a\u30d6\u30e9\u30f3\u30c1 ( v6_develop ) \u306b\u5bfe\u3057\u3066\u9001\u3063\u3066\u3082 OK \u3067\u3059\u3002 \u30d0\u30b0\u3084\u4e0d\u5177\u5408\u306e Issues \u306e\u898b\u672c \u00b6 https://github.com/Siv3D/OpenSiv3D/issues/558 https://github.com/Siv3D/OpenSiv3D/issues/549 2. \u6a5f\u80fd\u306e\u6539\u5584\u3084\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b \u00b6 OpenSiv3D \u306e GitHub Issues \u306b\u3001\u63d0\u6848\u306e\u8aac\u660e\u3068\u3001\u6539\u5584\u3084\u8ffd\u52a0\u304c\u5fc5\u8981\u306a\u7406\u7531\u3092\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e9b\u7d30\u306a\u5909\u66f4\u3067\u3042\u308b\u5834\u5408\u3001\u76f4\u63a5 Pull Request \u3092\u958b\u767a\u30d6\u30e9\u30f3\u30c1 ( v6_develop ) \u306b\u5bfe\u3057\u3066\u9001\u3063\u3066\u3082 OK \u3067\u3059\u3002 \u6a5f\u80fd\u306e\u6539\u5584\u3084\u30ea\u30af\u30a8\u30b9\u30c8\u306e Issues \u306e\u898b\u672c \u00b6 https://github.com/Siv3D/OpenSiv3D/issues/486 https://github.com/Siv3D/OpenSiv3D/issues/630 3. \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4e0d\u5177\u5408\u5831\u544a\u3084\u30ea\u30af\u30a8\u30b9\u30c8 \u00b6 \u672c Web \u30b5\u30a4\u30c8\u306f Siv3D/siv3d.docs \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u3084 Pull Request \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 4. \u65b0\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b \u00b6 4.1 Siv3D \u5411\u3051\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u767a\u3059\u308b \u00b6 Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u88c5\u65b9\u91dd\u306a\u3069\u6280\u8853\u7684\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059 Siv3D \u30e6\u30fc\u30b6\u304c\u4f7f\u3048\u308b\u5f62\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u767a\u3057\u3001GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u516c\u958b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5341\u5206\u306a\u30cb\u30fc\u30ba\u304c\u3042\u308a\u3001\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u304c\u9ad8\u3044\u5834\u5408\u3001Siv3D \u306e\u516c\u5f0f\u6a5f\u80fd\u306b\u7d44\u307f\u8fbc\u3080\u305f\u3081\u306e\u4f5c\u696d\u304c\u958b\u59cb\u3055\u308c\u307e\u3059 Siv3D \u5411\u3051\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u958b\u767a\u306e Issues \u306e\u898b\u672c \u00b6 https://github.com/Siv3D/OpenSiv3D/issues/482 https://github.com/Siv3D/OpenSiv3D/issues/734 4.2 Siv3D \u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b \u00b6 Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u88c5\u65b9\u91dd\u306a\u3069\u6280\u8853\u7684\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059 4.3 Siv3D \u306b\u65b0\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b \u00b6 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8\u306b\u53c2\u52a0\u3057\u307e\u3059 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8\u306e\u30c6\u30fc\u30de\u4ee5\u5916\u306e\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u3001Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6280\u8853\u7684\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059 5. Siv3D \u306b\u30b5\u30f3\u30d7\u30eb\u7528\u30a2\u30bb\u30c3\u30c8\u3092\u63d0\u4f9b\u3059\u308b \u00b6 Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u30e6\u30fc\u30b6\u304c\u81ea\u7531\u306b\u5229\u7528\u3067\u304d\u308b\u753b\u50cf\u3084\u97f3\u58f0\u7d20\u6750\u306e\u63d0\u4f9b\u3067 Siv3D \u306b\u8ca2\u732e\u3067\u304d\u307e\u3059\u3002Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084\u3001OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b5\u30f3\u30d7\u30eb\u7528\u30a2\u30bb\u30c3\u30c8\u63d0\u4f9b\u306e Issues \u306e\u898b\u672c \u00b6 \u30c9\u30c3\u30c8\u7d75: https://github.com/Siv3D/OpenSiv3D/issues/570 3D \u30e2\u30c7\u30eb: https://github.com/Siv3D/OpenSiv3D/issues/621 6. \u30b5\u30f3\u30d7\u30eb\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u958b\u767a\u3059\u308b \u00b6 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46\u8005\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\u3002Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002 7. \u958b\u767a\u306b\u53c2\u52a0\u3059\u308b\u7279\u5178 \u00b6 Siv3D \u306f\u591a\u304f\u306e\u4eba\u3068\u5171\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u958b\u767a\u3092\u9032\u3081\u306a\u304c\u3089\u3001\u4fbf\u5229\u3067\u54c1\u8cea\u306e\u9ad8\u3044\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u7dad\u6301\u30fb\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002\u540c\u6642\u306b\u3001\u5341\u4ee3\u4e8c\u5341\u4ee3\u306e\u82e5\u3044\u4e16\u4ee3\u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2 (OSS) \u6d3b\u52d5\u306b\u53d6\u308a\u7d44\u3080\u3053\u3068\u3082\u5fdc\u63f4\u3057\u3066\u3044\u307e\u3059\u3002 Siv3D \u3067\u306f\u3001\u65b0\u6a5f\u80fd\u3084\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\u306b\u8ca2\u732e\u3057\u3066\u304f\u308c\u305f\u958b\u767a\u8005\u304c OSS \u6d3b\u52d5\u306e\u5b9f\u7e3e\u3092\u6b8b\u305b\u308b\u3088\u3046\u3001\u63d0\u6848\u8005\u304b\u3089\u306e Pull Request \u306b\u3088\u3063\u3066\u6a5f\u80fd\u3092\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u63d0\u6848\u8005\u306e\u6210\u679c\u304c Siv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30b3\u30df\u30c3\u30c8\u5c65\u6b74\u306b\u8a18\u9332\u3055\u308c\u307e\u3059\u3002\u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u6a5f\u80fd\u306e\u63d0\u6848\u306b\u95a2\u3057\u3066\u3082\u3001GitHub Issues \u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002 Siv3D \u672c\u4f53\u304a\u3088\u3073\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30b3\u30df\u30c3\u30c8\u3092\u3055\u308c\u305f\u65b9\u3001\u305d\u306e\u4ed6\u9855\u8457\u306a\u8ca2\u732e\u3092\u3055\u308c\u305f\u65b9\u306b\u306f\u3001GitHub \u306e Siv3D Organization \u30e1\u30f3\u30d0\u30fc \u3078\u306e\u62db\u5f85\u304c\u9001\u3089\u308c\u307e\u3059 (GitHub \u306b\u767b\u9332\u3057\u3066\u3044\u308b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306b\u5c4a\u304d\u307e\u3059\uff09\u3002\u62db\u5f85\u3092\u53d7\u8afe\u3057\u3001\u4e0a\u8a18\u30da\u30fc\u30b8\u3067\u81ea\u8eab\u306e\u30e1\u30f3\u30d0\u30fc\u53c2\u52a0\u8868\u793a\u8a2d\u5b9a\u3092\u300cPublic\u300d\u306b\u5909\u66f4\u3059\u308b\u3068\u3001GitHub \u306e\u81ea\u8eab\u306e\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u30da\u30fc\u30b8\u306b Siv3D \u306e\u30a2\u30a4\u30b3\u30f3\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u8a2d\u5b9a\u304c\u300cPrivate\u300d\u306e\u307e\u307e\u3060\u3068\u3001\u81ea\u8eab\u3068\u4ed6\u306e\u30e1\u30f3\u30d0\u30fc\u306b\u3057\u304b\u30a2\u30a4\u30b3\u30f3\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 \u30a2\u30a4\u30b3\u30f3\u8868\u793a\u306e\u4f8b: https://github.com/Ebishu-0309","title":"\u5831\u544a\u3084\u63d0\u6848"},{"location":"ja-jp/develop/report/#\u5831\u544a\u3084\u63d0\u6848","text":"Siv3D \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4e0d\u5177\u5408\u3001\u6539\u5584\u70b9\u3001\u6a5f\u80fd\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308c\u3070\u3001\u6b21\u306e\u3088\u3046\u306b\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002","title":"\u5831\u544a\u3084\u63d0\u6848"},{"location":"ja-jp/develop/report/#1-siv3d-\u306e\u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u5831\u544a\u3059\u308b","text":"OpenSiv3D \u306e GitHub Issues \u306b\u3001\u4e0d\u5177\u5408\u306e\u8aac\u660e\u3068\u518d\u73fe\u306e\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e9b\u7d30\u306a\u4fee\u6b63\u3067\u3042\u308b\u5834\u5408\u3001\u76f4\u63a5 Pull Request \u3092\u958b\u767a\u30d6\u30e9\u30f3\u30c1 ( v6_develop ) \u306b\u5bfe\u3057\u3066\u9001\u3063\u3066\u3082 OK \u3067\u3059\u3002","title":"1. Siv3D \u306e\u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u5831\u544a\u3059\u308b"},{"location":"ja-jp/develop/report/#2-\u6a5f\u80fd\u306e\u6539\u5584\u3084\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b","text":"OpenSiv3D \u306e GitHub Issues \u306b\u3001\u63d0\u6848\u306e\u8aac\u660e\u3068\u3001\u6539\u5584\u3084\u8ffd\u52a0\u304c\u5fc5\u8981\u306a\u7406\u7531\u3092\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e9b\u7d30\u306a\u5909\u66f4\u3067\u3042\u308b\u5834\u5408\u3001\u76f4\u63a5 Pull Request \u3092\u958b\u767a\u30d6\u30e9\u30f3\u30c1 ( v6_develop ) \u306b\u5bfe\u3057\u3066\u9001\u3063\u3066\u3082 OK \u3067\u3059\u3002","title":"2. \u6a5f\u80fd\u306e\u6539\u5584\u3084\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b"},{"location":"ja-jp/develop/report/#3-\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4e0d\u5177\u5408\u5831\u544a\u3084\u30ea\u30af\u30a8\u30b9\u30c8","text":"\u672c Web \u30b5\u30a4\u30c8\u306f Siv3D/siv3d.docs \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u3084 Pull Request \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"3. \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4e0d\u5177\u5408\u5831\u544a\u3084\u30ea\u30af\u30a8\u30b9\u30c8"},{"location":"ja-jp/develop/report/#4-\u65b0\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b","text":"","title":"4. \u65b0\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b"},{"location":"ja-jp/develop/report/#41-siv3d-\u5411\u3051\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u767a\u3059\u308b","text":"Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u88c5\u65b9\u91dd\u306a\u3069\u6280\u8853\u7684\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059 Siv3D \u30e6\u30fc\u30b6\u304c\u4f7f\u3048\u308b\u5f62\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u767a\u3057\u3001GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u516c\u958b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5341\u5206\u306a\u30cb\u30fc\u30ba\u304c\u3042\u308a\u3001\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u304c\u9ad8\u3044\u5834\u5408\u3001Siv3D \u306e\u516c\u5f0f\u6a5f\u80fd\u306b\u7d44\u307f\u8fbc\u3080\u305f\u3081\u306e\u4f5c\u696d\u304c\u958b\u59cb\u3055\u308c\u307e\u3059","title":"4.1 Siv3D \u5411\u3051\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u767a\u3059\u308b"},{"location":"ja-jp/develop/report/#42-siv3d-\u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b","text":"Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u88c5\u65b9\u91dd\u306a\u3069\u6280\u8853\u7684\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059","title":"4.2 Siv3D \u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b"},{"location":"ja-jp/develop/report/#43-siv3d-\u306b\u65b0\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b","text":"OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8\u306b\u53c2\u52a0\u3057\u307e\u3059 OpenSiv3D \u30c1\u30e3\u30ec\u30f3\u30b8\u306e\u30c6\u30fc\u30de\u4ee5\u5916\u306e\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u3001Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6280\u8853\u7684\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059","title":"4.3 Siv3D \u306b\u65b0\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b"},{"location":"ja-jp/develop/report/#5-siv3d-\u306b\u30b5\u30f3\u30d7\u30eb\u7528\u30a2\u30bb\u30c3\u30c8\u3092\u63d0\u4f9b\u3059\u308b","text":"Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u30e6\u30fc\u30b6\u304c\u81ea\u7531\u306b\u5229\u7528\u3067\u304d\u308b\u753b\u50cf\u3084\u97f3\u58f0\u7d20\u6750\u306e\u63d0\u4f9b\u3067 Siv3D \u306b\u8ca2\u732e\u3067\u304d\u307e\u3059\u3002Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084\u3001OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"5. Siv3D \u306b\u30b5\u30f3\u30d7\u30eb\u7528\u30a2\u30bb\u30c3\u30c8\u3092\u63d0\u4f9b\u3059\u308b"},{"location":"ja-jp/develop/report/#6-\u30b5\u30f3\u30d7\u30eb\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u958b\u767a\u3059\u308b","text":"Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46\u8005\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\u3002Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u3084 OpenSiv3D \u5b9f\u88c5\u4f1a\u3067\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"6. \u30b5\u30f3\u30d7\u30eb\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u958b\u767a\u3059\u308b"},{"location":"ja-jp/develop/report/#7-\u958b\u767a\u306b\u53c2\u52a0\u3059\u308b\u7279\u5178","text":"Siv3D \u306f\u591a\u304f\u306e\u4eba\u3068\u5171\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u958b\u767a\u3092\u9032\u3081\u306a\u304c\u3089\u3001\u4fbf\u5229\u3067\u54c1\u8cea\u306e\u9ad8\u3044\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u7dad\u6301\u30fb\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002\u540c\u6642\u306b\u3001\u5341\u4ee3\u4e8c\u5341\u4ee3\u306e\u82e5\u3044\u4e16\u4ee3\u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2 (OSS) \u6d3b\u52d5\u306b\u53d6\u308a\u7d44\u3080\u3053\u3068\u3082\u5fdc\u63f4\u3057\u3066\u3044\u307e\u3059\u3002 Siv3D \u3067\u306f\u3001\u65b0\u6a5f\u80fd\u3084\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\u306b\u8ca2\u732e\u3057\u3066\u304f\u308c\u305f\u958b\u767a\u8005\u304c OSS \u6d3b\u52d5\u306e\u5b9f\u7e3e\u3092\u6b8b\u305b\u308b\u3088\u3046\u3001\u63d0\u6848\u8005\u304b\u3089\u306e Pull Request \u306b\u3088\u3063\u3066\u6a5f\u80fd\u3092\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u63d0\u6848\u8005\u306e\u6210\u679c\u304c Siv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30b3\u30df\u30c3\u30c8\u5c65\u6b74\u306b\u8a18\u9332\u3055\u308c\u307e\u3059\u3002\u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u6a5f\u80fd\u306e\u63d0\u6848\u306b\u95a2\u3057\u3066\u3082\u3001GitHub Issues \u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002 Siv3D \u672c\u4f53\u304a\u3088\u3073\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30b3\u30df\u30c3\u30c8\u3092\u3055\u308c\u305f\u65b9\u3001\u305d\u306e\u4ed6\u9855\u8457\u306a\u8ca2\u732e\u3092\u3055\u308c\u305f\u65b9\u306b\u306f\u3001GitHub \u306e Siv3D Organization \u30e1\u30f3\u30d0\u30fc \u3078\u306e\u62db\u5f85\u304c\u9001\u3089\u308c\u307e\u3059 (GitHub \u306b\u767b\u9332\u3057\u3066\u3044\u308b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306b\u5c4a\u304d\u307e\u3059\uff09\u3002\u62db\u5f85\u3092\u53d7\u8afe\u3057\u3001\u4e0a\u8a18\u30da\u30fc\u30b8\u3067\u81ea\u8eab\u306e\u30e1\u30f3\u30d0\u30fc\u53c2\u52a0\u8868\u793a\u8a2d\u5b9a\u3092\u300cPublic\u300d\u306b\u5909\u66f4\u3059\u308b\u3068\u3001GitHub \u306e\u81ea\u8eab\u306e\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u30da\u30fc\u30b8\u306b Siv3D \u306e\u30a2\u30a4\u30b3\u30f3\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u8a2d\u5b9a\u304c\u300cPrivate\u300d\u306e\u307e\u307e\u3060\u3068\u3001\u81ea\u8eab\u3068\u4ed6\u306e\u30e1\u30f3\u30d0\u30fc\u306b\u3057\u304b\u30a2\u30a4\u30b3\u30f3\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 \u30a2\u30a4\u30b3\u30f3\u8868\u793a\u306e\u4f8b: https://github.com/Ebishu-0309","title":"7. \u958b\u767a\u306b\u53c2\u52a0\u3059\u308b\u7279\u5178"},{"location":"ja-jp/download/macos/","text":"macOS \u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 1. \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 1.1 \u958b\u767a\u8005\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 macOS \u3067 OpenSiv3D v0.6.6 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u958b\u767a\u74b0\u5883\u3067\u3059\u3002 OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel \u88fd\u306e CPU / Apple Silicon (Rosetta \u30e2\u30fc\u30c9) GPU OpenGL 4.1 \u30b5\u30dd\u30fc\u30c8 \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u958b\u767a\u74b0\u5883 Xcode 11.3.1 \u4ee5\u964d (Big Sur \u4ee5\u964d\u306e\u5834\u5408\u306f Xcode 12.5 \u4ee5\u964d) Apple Silicon (M1 / M2) \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b5\u30dd\u30fc\u30c8\u306f\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u8ffd\u52a0\u3055\u308c\u307e\u3059 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u5834\u5408 \u4f7f\u7528\u3057\u3066\u3044\u308b macOS \u306e OS \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6700\u65b0\u3067\u306a\u3044\u5834\u5408\u3001App Store \u7d4c\u7531\u3067 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f Apple Developer \u30b5\u30a4\u30c8 \u304b\u3089\u3001Xcode 12.4 \u306a\u3069\u904e\u53bb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Xcode \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1.2 \u30a2\u30d7\u30ea\u52d5\u4f5c\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 macOS \u3067 OpenSiv3D v0.6.6 \u3092\u4f7f\u3063\u3066\u958b\u767a\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u74b0\u5883\u3067\u3059\u3002\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092\u914d\u5e03\u3059\u308b\u3068\u304d\u306e\u8aac\u660e\u66f8\u306b\u8a18\u8f09\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel \u88fd\u306e CPU / Apple Silicon (Rosetta \u30e2\u30fc\u30c9) GPU OpenGL 4.1 \u30b5\u30dd\u30fc\u30c8 \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 Apple Silicon (M1 / M2) \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b5\u30dd\u30fc\u30c8\u306f\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u8ffd\u52a0\u3055\u308c\u307e\u3059 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 2. \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u00b6 OpenSiv3D v0.6.6 Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059 macOS Catalina \u4ee5\u964d\u306e\u5834\u5408\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u3001\u6bce\u56de\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u306b\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u3092 (\u30e6\u30fc\u30b6\u540d)/\u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 (\u30e6\u30fc\u30b6\u540d)/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\uff08root \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001\u30e6\u30fc\u30b6\u30db\u30fc\u30e0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\uff09\u3078\u79fb\u52d5\u3055\u305b\u307e\u3059 3. Siv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9 \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u306b\u3042\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb examples/empty/empty.xcodeproj \u3092 Xcode \u3067\u958b\u304d\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 (Main.cpp) \u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u56de\u907f macOS Catalina \u4ee5\u964d\u3067\u5b9f\u884c\u306e\u305f\u3073\u306b\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u5168\u4f53\u3092\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 (\u30e6\u30fc\u30b6\u540d)/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\uff08root \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001\u30e6\u30fc\u30b6\u30db\u30fc\u30e0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\uff09\u4ee5\u4e0b\u3078\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u56de\u907f\u3067\u304d\u307e\u3059\u3002 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5897\u3084\u3057\u305f\u3044\u5834\u5408\u306f \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3042\u308b empty \u30d5\u30a9\u30eb\u30c0\u3092\u540c\u3058\u968e\u5c64\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5c06\u6765\u63d0\u4f9b\u4e88\u5b9a\u3067\u3059\u3002","title":"macOS"},{"location":"ja-jp/download/macos/#macos-\u3067-siv3d-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"","title":"macOS \u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"ja-jp/download/macos/#1-\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"","title":"1. \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/macos/#11-\u958b\u767a\u8005\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"macOS \u3067 OpenSiv3D v0.6.6 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u958b\u767a\u74b0\u5883\u3067\u3059\u3002 OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel \u88fd\u306e CPU / Apple Silicon (Rosetta \u30e2\u30fc\u30c9) GPU OpenGL 4.1 \u30b5\u30dd\u30fc\u30c8 \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u958b\u767a\u74b0\u5883 Xcode 11.3.1 \u4ee5\u964d (Big Sur \u4ee5\u964d\u306e\u5834\u5408\u306f Xcode 12.5 \u4ee5\u964d) Apple Silicon (M1 / M2) \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b5\u30dd\u30fc\u30c8\u306f\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u8ffd\u52a0\u3055\u308c\u307e\u3059 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u5834\u5408 \u4f7f\u7528\u3057\u3066\u3044\u308b macOS \u306e OS \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6700\u65b0\u3067\u306a\u3044\u5834\u5408\u3001App Store \u7d4c\u7531\u3067 Xcode \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f Apple Developer \u30b5\u30a4\u30c8 \u304b\u3089\u3001Xcode 12.4 \u306a\u3069\u904e\u53bb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Xcode \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1.1 \u958b\u767a\u8005\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/macos/#12-\u30a2\u30d7\u30ea\u52d5\u4f5c\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"macOS \u3067 OpenSiv3D v0.6.6 \u3092\u4f7f\u3063\u3066\u958b\u767a\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u74b0\u5883\u3067\u3059\u3002\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092\u914d\u5e03\u3059\u308b\u3068\u304d\u306e\u8aac\u660e\u66f8\u306b\u8a18\u8f09\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 OS macOS Mojave / Catalina / Big Sur / Monterey CPU Intel \u88fd\u306e CPU / Apple Silicon (Rosetta \u30e2\u30fc\u30c9) GPU OpenGL 4.1 \u30b5\u30dd\u30fc\u30c8 \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 Apple Silicon (M1 / M2) \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b5\u30dd\u30fc\u30c8\u306f\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u8ffd\u52a0\u3055\u308c\u307e\u3059 2012 \u5e74\u4ee5\u524d\u306e Mac \u88fd\u54c1\u3067\u306f GPU \u304c OpenGL 4.1 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059","title":"1.2 \u30a2\u30d7\u30ea\u52d5\u4f5c\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/macos/#2-\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","text":"OpenSiv3D v0.6.6 Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059 macOS Catalina \u4ee5\u964d\u306e\u5834\u5408\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u3001\u6bce\u56de\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u306b\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u3092 (\u30e6\u30fc\u30b6\u540d)/\u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 (\u30e6\u30fc\u30b6\u540d)/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\uff08root \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001\u30e6\u30fc\u30b6\u30db\u30fc\u30e0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\uff09\u3078\u79fb\u52d5\u3055\u305b\u307e\u3059","title":"2. \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"ja-jp/download/macos/#3-siv3d-\u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u306b\u3042\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb examples/empty/empty.xcodeproj \u3092 Xcode \u3067\u958b\u304d\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 (Main.cpp) \u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u56de\u907f macOS Catalina \u4ee5\u964d\u3067\u5b9f\u884c\u306e\u305f\u3073\u306b\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u5168\u4f53\u3092\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 (\u30e6\u30fc\u30b6\u540d)/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 (\u30e6\u30fc\u30b6\u540d)/\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\uff08root \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001\u30e6\u30fc\u30b6\u30db\u30fc\u30e0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a9\u30eb\u30c0\uff09\u4ee5\u4e0b\u3078\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u56de\u907f\u3067\u304d\u307e\u3059\u3002 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5897\u3084\u3057\u305f\u3044\u5834\u5408\u306f \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3042\u308b empty \u30d5\u30a9\u30eb\u30c0\u3092\u540c\u3058\u968e\u5c64\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5c06\u6765\u63d0\u4f9b\u4e88\u5b9a\u3067\u3059\u3002","title":"3. Siv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9"},{"location":"ja-jp/download/ubuntu/","text":"Ubuntu \u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 1. \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 Ubuntu \u3067 OpenSiv3D v0.6.6 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u958b\u767a\u74b0\u5883\u3067\u3059\u3002 OS Ubuntu 20.04 LTS / Ubuntu 22.04 LTS CPU Intel \u307e\u305f\u306f AMD \u88fd\u306e CPU GPU OpenGL 4.1 \u30b5\u30dd\u30fc\u30c8 \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u958b\u767a\u74b0\u5883 GCC 9.3.0 (+ Boost 1.71.0) / GCC 11.2 (+ Boost 1.74.0) / Clang 14.0.0 (+ Boost 1.74.0) \u975e\u516c\u5f0f\u306e ARM \u5bfe\u5fdc\u7248\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #linux \u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u3054\u89a7\u304f\u3060\u3055\u3044 2. Siv3D \u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b \u00b6 OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002 3. Siv3D \u3092\u30d3\u30eb\u30c9\u3059\u308b \u00b6 \u6b21\u3092\u53c2\u8003\u306b\u3001\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3084\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L26-L49 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u3001 libSiv3D.a \u3092\u4f5c\u6210\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L51-L60 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L65 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L67-L76 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e Main.cpp \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300c\u3059\u3050\u7d42\u4e86\u3059\u308b\u7a7a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306a\u306e\u3067\u3001\u4f55\u3082\u9762\u767d\u3044\u3082\u306e\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\u6b21\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 # include <Siv3D.hpp> // OpenSiv3D v0.6.6 void Main () { // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; // \u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new emoji font const Font emojiFont { 60 , Typeface :: ColorEmoji }; // `font` \u304c\u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b | Set emojiFont as a fallback font . addFallback ( emojiFont ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an image file const Texture texture { U \"example/windmill.png\" }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; // \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b\u5ea7\u6a19 | Coordinates of the emoji Vec2 emojiPos { 300 , 150 }; // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306b\u30c7\u30d0\u30c3\u30b0\u51fa\u529b | Print a text Print << U \"Push [A] key\" ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u30b5\u30a4\u30ba\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u7d75\u6587\u5b57\u3092\u63cf\u304f | Draw a texture with animated size emoji . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( emojiPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); // \u3082\u3057 [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 | When [A] key is down if ( KeyA . down ()) { // \u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30d0\u30c3\u30b0\u8868\u793a | Print a randomly selected text Print << Sample ({ U \"Hello!\" , U \"\u3053\u3093\u306b\u3061\u306f\" , U \"\u4f60\u597d\" , U \"\uc548\ub155\ud558\uc138\uc694?\" }); } // \u3082\u3057 [Button] \u304c\u62bc\u3055\u308c\u305f\u3089 | When [Button] is pushed if ( SimpleGUI :: Button ( U \"Button\" , Vec2 { 640 , 40 })) { // \u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u5ea7\u6a19\u3092\u79fb\u52d5 // Move the coordinates to a random position in the screen emojiPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Ubuntu"},{"location":"ja-jp/download/ubuntu/#ubuntu-\u3067-siv3d-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"","title":"Ubuntu \u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"ja-jp/download/ubuntu/#1-\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"Ubuntu \u3067 OpenSiv3D v0.6.6 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u958b\u767a\u74b0\u5883\u3067\u3059\u3002 OS Ubuntu 20.04 LTS / Ubuntu 22.04 LTS CPU Intel \u307e\u305f\u306f AMD \u88fd\u306e CPU GPU OpenGL 4.1 \u30b5\u30dd\u30fc\u30c8 \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u958b\u767a\u74b0\u5883 GCC 9.3.0 (+ Boost 1.71.0) / GCC 11.2 (+ Boost 1.74.0) / Clang 14.0.0 (+ Boost 1.74.0) \u975e\u516c\u5f0f\u306e ARM \u5bfe\u5fdc\u7248\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #linux \u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u3054\u89a7\u304f\u3060\u3055\u3044","title":"1. \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/ubuntu/#2-siv3d-\u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b","text":"OpenSiv3D \u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e main \u30d6\u30e9\u30f3\u30c1 \u304c\u6700\u65b0\u5b89\u5b9a\u7248\u3067\u3059\u3002\u300cCode\u300d\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3059\u308b\u304b\u3001ZIP \u30d5\u30a1\u30a4\u30eb\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08\u300cDownload ZIP\u300d\uff09\u3002","title":"2. Siv3D \u306e\u6700\u65b0\u30b3\u30fc\u30c9\u3092\u5165\u624b\u3059\u308b"},{"location":"ja-jp/download/ubuntu/#3-siv3d-\u3092\u30d3\u30eb\u30c9\u3059\u308b","text":"\u6b21\u3092\u53c2\u8003\u306b\u3001\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3084\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L26-L49 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u3001 libSiv3D.a \u3092\u4f5c\u6210\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L51-L60 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L65 \u6b21\u3092\u53c2\u8003\u306b Siv3D \u30a2\u30d7\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059 https://github.com/Siv3D/OpenSiv3D/blob/main/.github/workflows/ci.yml#L67-L76 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e Main.cpp \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300c\u3059\u3050\u7d42\u4e86\u3059\u308b\u7a7a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306a\u306e\u3067\u3001\u4f55\u3082\u9762\u767d\u3044\u3082\u306e\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\u6b21\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 # include <Siv3D.hpp> // OpenSiv3D v0.6.6 void Main () { // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; // \u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new emoji font const Font emojiFont { 60 , Typeface :: ColorEmoji }; // `font` \u304c\u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b | Set emojiFont as a fallback font . addFallback ( emojiFont ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an image file const Texture texture { U \"example/windmill.png\" }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; // \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b\u5ea7\u6a19 | Coordinates of the emoji Vec2 emojiPos { 300 , 150 }; // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306b\u30c7\u30d0\u30c3\u30b0\u51fa\u529b | Print a text Print << U \"Push [A] key\" ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u30b5\u30a4\u30ba\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u7d75\u6587\u5b57\u3092\u63cf\u304f | Draw a texture with animated size emoji . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( emojiPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); // \u3082\u3057 [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 | When [A] key is down if ( KeyA . down ()) { // \u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30d0\u30c3\u30b0\u8868\u793a | Print a randomly selected text Print << Sample ({ U \"Hello!\" , U \"\u3053\u3093\u306b\u3061\u306f\" , U \"\u4f60\u597d\" , U \"\uc548\ub155\ud558\uc138\uc694?\" }); } // \u3082\u3057 [Button] \u304c\u62bc\u3055\u308c\u305f\u3089 | When [Button] is pushed if ( SimpleGUI :: Button ( U \"Button\" , Vec2 { 640 , 40 })) { // \u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u5ea7\u6a19\u3092\u79fb\u52d5 // Move the coordinates to a random position in the screen emojiPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"3. Siv3D \u3092\u30d3\u30eb\u30c9\u3059\u308b"},{"location":"ja-jp/download/web-vs/","text":"Windows + Visual Studio \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9 \u00b6 OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002 2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805 \u00b6 Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"Web (VS)"},{"location":"ja-jp/download/web-vs/#windows--visual-studio-\u3067-siv3d-for-web-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Windows + Visual Studio \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"ja-jp/download/web-vs/#1-\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9","text":"OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002","title":"1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9"},{"location":"ja-jp/download/web-vs/#2-web-\u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805","text":"Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805"},{"location":"ja-jp/download/web-vscode/","text":"Visual Studio Code \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9 \u00b6 OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002 2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805 \u00b6 Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"Web (VSCode)"},{"location":"ja-jp/download/web-vscode/#visual-studio-code-\u3067-siv3d-for-web-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"Web \u7248 Siv3D \u3092\u8a66\u9a13\u7684\u306a\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002Web \u7248\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u305f\u3081\u3001Siv3D \u306e\u4f7f\u7528\u306b\u6163\u308c\u305f\u4e2d\u7d1a\u8005\u4ee5\u4e0a\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u306b\u3042\u305f\u3063\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070 Siv3D Discord \u30b5\u30fc\u30d0\u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u8cea\u554f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Visual Studio Code \u3067 Siv3D for Web \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"ja-jp/download/web-vscode/#1-\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9","text":"OpenSiv3D for Web \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u521d\u56de\u306e\u30d3\u30eb\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u30d3\u30eb\u30c9\u3059\u308b\u3068\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002","title":"1. \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9"},{"location":"ja-jp/download/web-vscode/#2-web-\u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805","text":"Web \u7248\u306e\u30d3\u30eb\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 engine/ \u3068 example/ \u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u7d42\u51fa\u529b\u306b\u540c\u68b1\u3059\u308b\u305f\u3081\u3001\u6700\u7d42\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f Release \u30d3\u30eb\u30c9\u3067\u3082\u5408\u8a08\u6570\u5341 MB \u3068\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Web \u3067\u516c\u958b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5229\u7528\u8005\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u53c2\u8003: \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 41 | \u30a2\u30d7\u30ea\u306e\u516c\u958b )\u3002\u307e\u305f\u3001Emscripten \u30ea\u30f3\u30ab\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u300c\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\u300d\u304b\u3089\u4e0d\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001 \u6700\u5c0f\u3067\u6570 MB \u7a0b\u5ea6 \u307e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f Siv3D \u30e6\u30fc\u30b6\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 Slack \u306e #web \u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 engine/ \u3068 example/ \u4ee5\u5916\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u540c\u68b1\u5bfe\u8c61\u306b\u3059\u308b\u65b9\u6cd5\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044 Web \u7248\u306e\u30b7\u30fc\u30f3\u306e\u30ea\u30b5\u30a4\u30ba\u30e2\u30fc\u30c9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ResizeMode::Virtual \u3067\u3042\u308b\u305f\u3081\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u62e1\u5927\u7e2e\u5c0f\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u9632\u3050\u306b\u306f Scene::SetResizeMode(ResizeMode::Keep); \u3068 Scene::Resize(width, height); \u3067\u30b7\u30fc\u30f3\u30b5\u30a4\u30ba\u3092\u56fa\u5b9a\u3057\u307e\u3059 \u4e0a\u8a18\u4ee5\u5916\u306e Web \u7248\u56fa\u6709\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u306f OpenSiv3D for Web \u300cWeb \u56fa\u6709\u306e\u6ce8\u610f\u70b9\u300d \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044","title":"2. Web \u7248\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u524a\u6e1b\u3068\u305d\u306e\u4ed6\u306e\u6ce8\u610f\u4e8b\u9805"},{"location":"ja-jp/download/windows/","text":"Windows \u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b \u00b6 1. \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 1.1 \u958b\u767a\u8005\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 Windows \u3067 OpenSiv3D v0.6.6 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u958b\u767a\u74b0\u5883\u3067\u3059\u3002 OS Windows 10 (64-bit) / Windows 11 CPU Intel \u307e\u305f\u306f AMD \u88fd\u306e CPU \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u97f3\u58f0\u51fa\u529b \u4f55\u3089\u304b\u306e\u97f3\u58f0\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u958b\u767a\u74b0\u5883 Microsoft Visual C++ 2022 17.4 (\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u5185\u3067\u300cC++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a\u300d\u3092\u8ffd\u52a0\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044) Visual Studio \u306e\u30a8\u30c7\u30a3\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066 Windows 10, Windows 11 \u306e\u30d1\u30bd\u30b3\u30f3\u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u5834\u5408\u306f \u300cVisual Studio Community 2022\uff08\u30d3\u30b8\u30e5\u30a2\u30eb\u30fb\u30b9\u30bf\u30b8\u30aa\u30fb\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 2022\uff09\u300d \u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306f\u4e16\u754c\u4e2d\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u8005\u304c\u4f7f\u3046\u300cVisual Studio\u300d\u3068\u3044\u3046\u7d71\u5408\u958b\u767a\u74b0\u5883\u306e\u7121\u6599\u7248\u3067\u3059\u3002\u5b66\u751f\u3001\u500b\u4eba\u3001\u5c11\u898f\u6a21\u306e\u958b\u767a\u3067\u3042\u308c\u3070\u3001Visual Studio \u306e\u6709\u6599\u7248\u3068\u540c\u3058\u6a5f\u80fd\u3092\u7121\u6599\u3067\u4f7f\u3048\u307e\u3059\u3002 Visual Studio \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306b\u3064\u3044\u3066 Visual Studio \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30da\u30fc\u30b8 \u304b\u3089 \u300cVisual Studio 2022 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u300d \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3084\u958b\u767a\u30c4\u30fc\u30eb\u3092\u9078\u629e\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u9805\u76ee\u306e\u9078\u629e\u753b\u9762\u304b\u3089 \u300cC++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a\u300d \u3092\u9078\u629e\u3057\u307e\u3059\uff08\u53f3\u5074\u306e\u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u8a73\u7d30\u300d\u306b\u8868\u793a\u3055\u308c\u308b\u9805\u76ee\u306f Visual Studio \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305f\u3081\u3001\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002 \u305d\u306e\u307e\u307e\u53f3\u4e0b\u306e \u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u300d \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u306f\u3058\u307e\u308a\u307e\u3059\u3002 1.2 \u30a2\u30d7\u30ea\u52d5\u4f5c\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \u00b6 Windows \u3067 OpenSiv3D v0.6.6 \u3092\u4f7f\u3063\u3066\u958b\u767a\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u74b0\u5883\u3067\u3059\u3002\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092\u914d\u5e03\u3059\u308b\u3068\u304d\u306e\u8aac\u660e\u66f8\u306b\u8a18\u8f09\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 OS Windows 7 SP1 (64-bit) / Windows 8.1 (64-bit) / Windows 10 (64-bit) / Windows 11 CPU Intel \u307e\u305f\u306f AMD \u88fd\u306e CPU \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u97f3\u58f0\u51fa\u529b \u4f55\u3089\u304b\u306e\u97f3\u58f0\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 2. SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 OpenSiv3D v0.6.6 Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059 \u5b9f\u884c\u6642\u306b\u300cWindows \u306b\u3088\u3063\u3066 PC \u304c\u4fdd\u8b77\u3055\u308c\u307e\u3057\u305f\u300d\u3068\u8868\u793a\u3055\u308c\u305f\u5834\u5408\u306f\u3001 \u8a73\u7d30\u60c5\u5831 \u3092\u62bc\u3057\u3066 \u5b9f\u884c \u3092\u62bc\u3057\u307e\u3059 \u3069\u3046\u3057\u3066\u3082\u5931\u6557\u3059\u308b\u5834\u5408\u306f \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u5b9f\u884c\u306b\u5931\u6557\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30da\u30fc\u30b8\u306e\u300c(\u88dc\u8db3) SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u300d\u306e\u65b9\u6cd5\u3067 SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u304c\u81ea\u52d5\u7684\u306b\u884c\u3046\u3053\u3068 SDK \u306e\u914d\u7f6e\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\uff09 SDK \u3092\u914d\u7f6e\u3057\u305f\u30d1\u30b9\u3078\u306e\u30e6\u30fc\u30b6\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7528\u306e Visual Studio \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30b3\u30d4\u30fc (\u901a\u5e38\u306f \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8/Visual Studio 2022/Templates/ProjectTemplates/ ) \u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u767b\u9332 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f OpenSiv3D SDK \u306f\u3001\u901a\u5e38\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u69d8\u3001Windows \u306e\u300c\u8a2d\u5b9a\u300d\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 3. Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u00b6 Visual Studio \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u9805\u76ee\u304b\u3089 OpenSiv3D \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3068\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\uff08\u4efb\u610f\uff09\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059 4. Siv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9 \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 (Main.cpp) \u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 (\u88dc\u8db3) SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b \u00b6 OpenSiv3D \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u304c\u6b63\u5e38\u306b\u5b9f\u884c\u3055\u308c\u306a\u3044\u5834\u5408\u3001\u4ee3\u308f\u308a\u306b\u624b\u4f5c\u696d\u3067 OpenSiv3D \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u624b\u9806\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002 SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306e\u624b\u9806 SDK \u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u3068\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a \u00b6 OpenSiv3D_SDK_0.6.6.zip (\u30b5\u30a4\u30ba: \u7d04 88 MB) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\u3001\u4e2d\u8eab\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\uff08 .../Documents \uff09\u306b\u6b21\u306e\u3088\u3046\u306b\u914d\u7f6e\u3057\u307e\u3059 .../Documents/OpenSiv3D_SDK_0.6.6/addon .../Documents/OpenSiv3D_SDK_0.6.6/include .../Documents/OpenSiv3D_SDK_0.6.6/lib \u30e6\u30fc\u30b6\u30fc\u74b0\u5883\u5909\u6570 SIV3D_0_6_6 \u3092\u65b0\u898f\u4f5c\u6210\u3057\u30011. \u3067\u914d\u7f6e\u3057\u305f OpenSiv3D SDK \u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059 \u4f8b: C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6/include \u306e\u3088\u3046\u306b\u914d\u7f6e\u3057\u305f\u5834\u5408\u3001 C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6 \u3092\u74b0\u5883\u5909\u6570 SIV3D_0_6_6 \u306b\u8a2d\u5b9a\u3057\u307e\u3059 Visual Studio \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u914d\u7f6e \u00b6 Visual Studio \u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 OpenSiv3D_0.6.6.zip (\u30b5\u30a4\u30ba: \u7d04 63 MB) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092 \u5c55\u958b\u305b\u305a ZIP \u30d5\u30a1\u30a4\u30eb\u306e\u307e\u307e \u3001Visual Studio 2022 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u4f5c\u6210\u3055\u308c\u308b Visual Studio 2022/Templates/ProjectTemplates/ \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u914d\u7f6e\u3057\u307e\u3059 \u4ee5\u4e0a\u3067\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u624b\u9806\u306f\u5b8c\u4e86\u3067\u3059\u3002\u74b0\u5883\u5909\u6570\u306e\u9069\u7528\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u306b PC \u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001\u672c\u30da\u30fc\u30b8\u306e 3. \u306e\u624b\u9806\u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044","title":"Windows"},{"location":"ja-jp/download/windows/#windows-\u3067-siv3d-\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b","text":"","title":"Windows \u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b"},{"location":"ja-jp/download/windows/#1-\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"","title":"1. \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/windows/#11-\u958b\u767a\u8005\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"Windows \u3067 OpenSiv3D v0.6.6 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u958b\u767a\u74b0\u5883\u3067\u3059\u3002 OS Windows 10 (64-bit) / Windows 11 CPU Intel \u307e\u305f\u306f AMD \u88fd\u306e CPU \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u97f3\u58f0\u51fa\u529b \u4f55\u3089\u304b\u306e\u97f3\u58f0\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u958b\u767a\u74b0\u5883 Microsoft Visual C++ 2022 17.4 (\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u5185\u3067\u300cC++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a\u300d\u3092\u8ffd\u52a0\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044) Visual Studio \u306e\u30a8\u30c7\u30a3\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066 Windows 10, Windows 11 \u306e\u30d1\u30bd\u30b3\u30f3\u3067 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u5834\u5408\u306f \u300cVisual Studio Community 2022\uff08\u30d3\u30b8\u30e5\u30a2\u30eb\u30fb\u30b9\u30bf\u30b8\u30aa\u30fb\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 2022\uff09\u300d \u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306f\u4e16\u754c\u4e2d\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u8005\u304c\u4f7f\u3046\u300cVisual Studio\u300d\u3068\u3044\u3046\u7d71\u5408\u958b\u767a\u74b0\u5883\u306e\u7121\u6599\u7248\u3067\u3059\u3002\u5b66\u751f\u3001\u500b\u4eba\u3001\u5c11\u898f\u6a21\u306e\u958b\u767a\u3067\u3042\u308c\u3070\u3001Visual Studio \u306e\u6709\u6599\u7248\u3068\u540c\u3058\u6a5f\u80fd\u3092\u7121\u6599\u3067\u4f7f\u3048\u307e\u3059\u3002 Visual Studio \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306b\u3064\u3044\u3066 Visual Studio \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30da\u30fc\u30b8 \u304b\u3089 \u300cVisual Studio 2022 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u300d \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3084\u958b\u767a\u30c4\u30fc\u30eb\u3092\u9078\u629e\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u9805\u76ee\u306e\u9078\u629e\u753b\u9762\u304b\u3089 \u300cC++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a\u300d \u3092\u9078\u629e\u3057\u307e\u3059\uff08\u53f3\u5074\u306e\u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u8a73\u7d30\u300d\u306b\u8868\u793a\u3055\u308c\u308b\u9805\u76ee\u306f Visual Studio \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305f\u3081\u3001\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002 \u305d\u306e\u307e\u307e\u53f3\u4e0b\u306e \u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u300d \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u306f\u3058\u307e\u308a\u307e\u3059\u3002","title":"1.1 \u958b\u767a\u8005\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/windows/#12-\u30a2\u30d7\u30ea\u52d5\u4f5c\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"Windows \u3067 OpenSiv3D v0.6.6 \u3092\u4f7f\u3063\u3066\u958b\u767a\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u74b0\u5883\u3067\u3059\u3002\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092\u914d\u5e03\u3059\u308b\u3068\u304d\u306e\u8aac\u660e\u66f8\u306b\u8a18\u8f09\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 OS Windows 7 SP1 (64-bit) / Windows 8.1 (64-bit) / Windows 10 (64-bit) / Windows 11 CPU Intel \u307e\u305f\u306f AMD \u88fd\u306e CPU \u6620\u50cf\u51fa\u529b \u30e2\u30cb\u30bf\u306a\u3069\u3001\u4f55\u3089\u304b\u306e\u6620\u50cf\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068 \u97f3\u58f0\u51fa\u529b \u4f55\u3089\u304b\u306e\u97f3\u58f0\u51fa\u529b\u88c5\u7f6e\u304c\u3042\u308b\u3053\u3068","title":"1.2 \u30a2\u30d7\u30ea\u52d5\u4f5c\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"ja-jp/download/windows/#2-sdk-\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"OpenSiv3D v0.6.6 Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059 \u5b9f\u884c\u6642\u306b\u300cWindows \u306b\u3088\u3063\u3066 PC \u304c\u4fdd\u8b77\u3055\u308c\u307e\u3057\u305f\u300d\u3068\u8868\u793a\u3055\u308c\u305f\u5834\u5408\u306f\u3001 \u8a73\u7d30\u60c5\u5831 \u3092\u62bc\u3057\u3066 \u5b9f\u884c \u3092\u62bc\u3057\u307e\u3059 \u3069\u3046\u3057\u3066\u3082\u5931\u6557\u3059\u308b\u5834\u5408\u306f \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u5b9f\u884c\u306b\u5931\u6557\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30da\u30fc\u30b8\u306e\u300c(\u88dc\u8db3) SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u300d\u306e\u65b9\u6cd5\u3067 SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u304c\u81ea\u52d5\u7684\u306b\u884c\u3046\u3053\u3068 SDK \u306e\u914d\u7f6e\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\uff09 SDK \u3092\u914d\u7f6e\u3057\u305f\u30d1\u30b9\u3078\u306e\u30e6\u30fc\u30b6\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7528\u306e Visual Studio \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30b3\u30d4\u30fc (\u901a\u5e38\u306f \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8/Visual Studio 2022/Templates/ProjectTemplates/ ) \u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306e\u767b\u9332 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f OpenSiv3D SDK \u306f\u3001\u901a\u5e38\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u69d8\u3001Windows \u306e\u300c\u8a2d\u5b9a\u300d\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"2. SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ja-jp/download/windows/#3-siv3d-\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210","text":"Visual Studio \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u9805\u76ee\u304b\u3089 OpenSiv3D \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3068\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\uff08\u4efb\u610f\uff09\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059","title":"3. Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210"},{"location":"ja-jp/download/windows/#4-siv3d-\u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 (Main.cpp) \u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059","title":"4. Siv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9"},{"location":"ja-jp/download/windows/#\u88dc\u8db3-sdk-\u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b","text":"OpenSiv3D \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u304c\u6b63\u5e38\u306b\u5b9f\u884c\u3055\u308c\u306a\u3044\u5834\u5408\u3001\u4ee3\u308f\u308a\u306b\u624b\u4f5c\u696d\u3067 OpenSiv3D \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u624b\u9806\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002 SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306e\u624b\u9806","title":"(\u88dc\u8db3) SDK \u3092\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b"},{"location":"ja-jp/download/windows/#sdk-\u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u3068\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a","text":"OpenSiv3D_SDK_0.6.6.zip (\u30b5\u30a4\u30ba: \u7d04 88 MB) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\u3001\u4e2d\u8eab\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\uff08 .../Documents \uff09\u306b\u6b21\u306e\u3088\u3046\u306b\u914d\u7f6e\u3057\u307e\u3059 .../Documents/OpenSiv3D_SDK_0.6.6/addon .../Documents/OpenSiv3D_SDK_0.6.6/include .../Documents/OpenSiv3D_SDK_0.6.6/lib \u30e6\u30fc\u30b6\u30fc\u74b0\u5883\u5909\u6570 SIV3D_0_6_6 \u3092\u65b0\u898f\u4f5c\u6210\u3057\u30011. \u3067\u914d\u7f6e\u3057\u305f OpenSiv3D SDK \u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059 \u4f8b: C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6/include \u306e\u3088\u3046\u306b\u914d\u7f6e\u3057\u305f\u5834\u5408\u3001 C:/Users/Siv3D/Documents/OpenSiv3D_SDK_0.6.6 \u3092\u74b0\u5883\u5909\u6570 SIV3D_0_6_6 \u306b\u8a2d\u5b9a\u3057\u307e\u3059","title":"SDK \u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u3068\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a"},{"location":"ja-jp/download/windows/#visual-studio-\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u914d\u7f6e","text":"Visual Studio \u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 OpenSiv3D_0.6.6.zip (\u30b5\u30a4\u30ba: \u7d04 63 MB) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092 \u5c55\u958b\u305b\u305a ZIP \u30d5\u30a1\u30a4\u30eb\u306e\u307e\u307e \u3001Visual Studio 2022 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u4f5c\u6210\u3055\u308c\u308b Visual Studio 2022/Templates/ProjectTemplates/ \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u914d\u7f6e\u3057\u307e\u3059 \u4ee5\u4e0a\u3067\u624b\u52d5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u624b\u9806\u306f\u5b8c\u4e86\u3067\u3059\u3002\u74b0\u5883\u5909\u6570\u306e\u9069\u7528\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u306b PC \u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001\u672c\u30da\u30fc\u30b8\u306e 3. \u306e\u624b\u9806\u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044","title":"Visual Studio \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u914d\u7f6e"},{"location":"ja-jp/learn/about/","text":"0. Siv3D \u52c9\u5f37\u4f1a \u00b6 Siv3D \u52c9\u5f37\u4f1a\u3067\u7528\u3044\u308b\u30b3\u30fc\u30b9\u8cc7\u6599\u3067\u3059\u3002 \u57fa\u672c\u4e8b\u9805 \u00b6 Siv3D \u52c9\u5f37\u4f1a\u306e Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0\u306f #Siv3D\u52c9\u5f37\u4f1a \u8cea\u554f\u30c4\u30a4\u30fc\u30c8\u3082\u62fe\u3044\u307e\u3059\u3002\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u6295\u7a3f\u3082 OK \u3067\u3059 \u958b\u59cb\u307e\u3067\u6642\u9593\u304c\u3042\u308b\u5834\u5408\u3001\u300c1. \u306f\u3058\u3081\u3066\u306e Siv3D\u300d\u307e\u3067\u8aad\u307f\u9032\u3081\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u904a\u3079\u308b\u30b5\u30f3\u30d7\u30eb\u3082\u7528\u610f\u3057\u3066\u3044\u307e\u3059 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3084\u5b9f\u884c\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u904b\u55b6\u30b9\u30bf\u30c3\u30d5\u3084\u8b1b\u5e2b\u306b\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044 Siv3D \u306e\u7279\u5fb4 \u00b6 \u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092\u697d\u3057\u304f\u7c21\u5358\u306a C++ \u30b3\u30fc\u30c9 \u3067\u958b\u767a\u3067\u304d\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af C++20 \u306a\u3069\u6700\u5148\u7aef\u306e C++ \u898f\u683c\u3067 API \u304c\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b Windows / macOS / Linux / Web \u306a\u3069\u5404\u7a2e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u52d5\u4f5c\u3059\u308b \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u958b\u767a\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3001\u65e5\u672c\u8a9e\u306a\u306e\u3067\u53c2\u52a0\u306e\u30cf\u30fc\u30c9\u30eb\u304c\u4f4e\u3044 \u95a2\u9023\u30ea\u30f3\u30af \u00b6 Siv3D \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 Siv3D \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 (GitHub) Twitter #Siv3D #OpenSiv3D \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 Siv3D Discord \u30b5\u30fc\u30d0\u306a\u3069\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u52c9\u5f37\u4f1a\u8b1b\u5e2b\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb \u00b6 Siv3D \u4f5c\u8005 Twitter: @Reputeless \u500b\u4eba Web \u30b5\u30a4\u30c8: https://ryo-suzuki-contact.github.io/ Siv3D Web \u7248\u30c7\u30e2 \u00b6 OpenSiv3D for Web (\u8a66\u9a13\u7684\u6a5f\u80fd) \u3092\u4f7f\u3046\u3068\u3001Siv3D \u3067\u4f5c\u3063\u305f C++ \u30a2\u30d7\u30ea\u3092\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u30b9\u30de\u30db\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u3082\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u305f\u304f\u3055\u3093\u306e\u4eba\u306b\u4f5c\u54c1\u3092\u5c4a\u3051\u3089\u308c\u307e\u3059\u3002 \u30c4\u30a4\u30fc\u30c8\u5185\u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001Web \u7248 Siv3D \u30a2\u30d7\u30ea\u306e\u30c7\u30e2\u304c\u958b\u304d\u307e\u3059\u3002 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4ed5\u7d44\u307f\u3092\u5b66\u3079\u308b\u30a2\u30d7\u30ea \u5927\u5b66\u306e\u8b1b\u7fa9\u3067\u6559\u3048\u308b\u305f\u3081\u306b\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (float \u578b) \u306e\u4ed5\u7d44\u307f\u3092\u5b66\u3079\u308b\u30a2\u30d7\u30ea\u3092 Siv3D \u3067\u4f5c\u308a\u307e\u3057\u305f\u3002 https://t.co/BNSwkqAHzt (PC \u3067\u306e\u30a2\u30af\u30bb\u30b9\u63a8\u5968) #Siv3D #OpenSiv3D pic.twitter.com/OAmZfo5R9D \u2014 Ryo Suzuki (@Reputeless) June 29, 2022 \u7af6\u30d7\u30ed\u30c6\u30af\u30cb\u30c3\u30af\u300c\u4e8c\u6b21\u5143\u3044\u3082\u3059\u6cd5\u300d\u306e\u53ef\u8996\u5316 \u300c\u4e8c\u6b21\u5143\u3044\u3082\u3059\u6cd5\u300d\u3092\u53ef\u8996\u5316\u3002 Web \u7248: https://t.co/HIaRx8RJar #Siv3D #OpenSiv3D #\u7af6\u30d7\u30ed pic.twitter.com/HT9ljcBmno \u2014 Ryo Suzuki (@Reputeless) March 3, 2022 \u7834\u640d\u3057\u305f JPEG \u3092\u4fee\u5fa9\u3059\u308b\u30b2\u30fc\u30e0 \u7834\u640d\u3057\u305f JPEG \u3092\u4fee\u5fa9\u3059\u308b\u30b2\u30fc\u30e0\u4f5c\u3063\u305f\uff08\u904a\u3093\u3067\u307f\u3066\uff09 https://t.co/5otDapRaOa #OpenSiv3D #JPEG_Game pic.twitter.com/nUxQU2lC3E \u2014 Ryo Suzuki (@Reputeless) October 23, 2021 \u30b2\u30fc\u30e0\u300c\u9078\u6319\u3067\u52dd\u3068\u3046\u300d \u601d\u3044\u7acb\u3063\u3066\u3001\u300c\u9078\u6319\u3067\u52dd\u3068\u3046\u300d\u3068\u3044\u3046\u30b2\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002 \u53c2\u8b70\u9662\u9078\u6319\u3082\u8fd1\u3044\u306e\u3067\u3001\u305c\u3072\u904a\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff01\uff01\uff01 https://t.co/VXAK8Egix0 pic.twitter.com/FfrU8FwJ8x \u2014 E869120 (@e869120) July 4, 2022","title":"0. Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/learn/about/#0-siv3d-\u52c9\u5f37\u4f1a","text":"Siv3D \u52c9\u5f37\u4f1a\u3067\u7528\u3044\u308b\u30b3\u30fc\u30b9\u8cc7\u6599\u3067\u3059\u3002","title":"0. Siv3D \u52c9\u5f37\u4f1a"},{"location":"ja-jp/learn/about/#\u57fa\u672c\u4e8b\u9805","text":"Siv3D \u52c9\u5f37\u4f1a\u306e Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0\u306f #Siv3D\u52c9\u5f37\u4f1a \u8cea\u554f\u30c4\u30a4\u30fc\u30c8\u3082\u62fe\u3044\u307e\u3059\u3002\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u6295\u7a3f\u3082 OK \u3067\u3059 \u958b\u59cb\u307e\u3067\u6642\u9593\u304c\u3042\u308b\u5834\u5408\u3001\u300c1. \u306f\u3058\u3081\u3066\u306e Siv3D\u300d\u307e\u3067\u8aad\u307f\u9032\u3081\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u904a\u3079\u308b\u30b5\u30f3\u30d7\u30eb\u3082\u7528\u610f\u3057\u3066\u3044\u307e\u3059 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3084\u5b9f\u884c\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u904b\u55b6\u30b9\u30bf\u30c3\u30d5\u3084\u8b1b\u5e2b\u306b\u3054\u76f8\u8ac7\u304f\u3060\u3055\u3044","title":"\u57fa\u672c\u4e8b\u9805"},{"location":"ja-jp/learn/about/#siv3d-\u306e\u7279\u5fb4","text":"\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u3092\u697d\u3057\u304f\u7c21\u5358\u306a C++ \u30b3\u30fc\u30c9 \u3067\u958b\u767a\u3067\u304d\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af C++20 \u306a\u3069\u6700\u5148\u7aef\u306e C++ \u898f\u683c\u3067 API \u304c\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b Windows / macOS / Linux / Web \u306a\u3069\u5404\u7a2e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u52d5\u4f5c\u3059\u308b \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u958b\u767a\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3001\u65e5\u672c\u8a9e\u306a\u306e\u3067\u53c2\u52a0\u306e\u30cf\u30fc\u30c9\u30eb\u304c\u4f4e\u3044","title":"Siv3D \u306e\u7279\u5fb4"},{"location":"ja-jp/learn/about/#\u95a2\u9023\u30ea\u30f3\u30af","text":"Siv3D \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 Siv3D \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 (GitHub) Twitter #Siv3D #OpenSiv3D \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 Siv3D Discord \u30b5\u30fc\u30d0\u306a\u3069\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","title":"\u95a2\u9023\u30ea\u30f3\u30af"},{"location":"ja-jp/learn/about/#\u52c9\u5f37\u4f1a\u8b1b\u5e2b\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb","text":"Siv3D \u4f5c\u8005 Twitter: @Reputeless \u500b\u4eba Web \u30b5\u30a4\u30c8: https://ryo-suzuki-contact.github.io/","title":"\u52c9\u5f37\u4f1a\u8b1b\u5e2b\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb"},{"location":"ja-jp/learn/about/#siv3d-web-\u7248\u30c7\u30e2","text":"OpenSiv3D for Web (\u8a66\u9a13\u7684\u6a5f\u80fd) \u3092\u4f7f\u3046\u3068\u3001Siv3D \u3067\u4f5c\u3063\u305f C++ \u30a2\u30d7\u30ea\u3092\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u30b9\u30de\u30db\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u3082\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u305f\u304f\u3055\u3093\u306e\u4eba\u306b\u4f5c\u54c1\u3092\u5c4a\u3051\u3089\u308c\u307e\u3059\u3002 \u30c4\u30a4\u30fc\u30c8\u5185\u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001Web \u7248 Siv3D \u30a2\u30d7\u30ea\u306e\u30c7\u30e2\u304c\u958b\u304d\u307e\u3059\u3002 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4ed5\u7d44\u307f\u3092\u5b66\u3079\u308b\u30a2\u30d7\u30ea \u5927\u5b66\u306e\u8b1b\u7fa9\u3067\u6559\u3048\u308b\u305f\u3081\u306b\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (float \u578b) \u306e\u4ed5\u7d44\u307f\u3092\u5b66\u3079\u308b\u30a2\u30d7\u30ea\u3092 Siv3D \u3067\u4f5c\u308a\u307e\u3057\u305f\u3002 https://t.co/BNSwkqAHzt (PC \u3067\u306e\u30a2\u30af\u30bb\u30b9\u63a8\u5968) #Siv3D #OpenSiv3D pic.twitter.com/OAmZfo5R9D \u2014 Ryo Suzuki (@Reputeless) June 29, 2022 \u7af6\u30d7\u30ed\u30c6\u30af\u30cb\u30c3\u30af\u300c\u4e8c\u6b21\u5143\u3044\u3082\u3059\u6cd5\u300d\u306e\u53ef\u8996\u5316 \u300c\u4e8c\u6b21\u5143\u3044\u3082\u3059\u6cd5\u300d\u3092\u53ef\u8996\u5316\u3002 Web \u7248: https://t.co/HIaRx8RJar #Siv3D #OpenSiv3D #\u7af6\u30d7\u30ed pic.twitter.com/HT9ljcBmno \u2014 Ryo Suzuki (@Reputeless) March 3, 2022 \u7834\u640d\u3057\u305f JPEG \u3092\u4fee\u5fa9\u3059\u308b\u30b2\u30fc\u30e0 \u7834\u640d\u3057\u305f JPEG \u3092\u4fee\u5fa9\u3059\u308b\u30b2\u30fc\u30e0\u4f5c\u3063\u305f\uff08\u904a\u3093\u3067\u307f\u3066\uff09 https://t.co/5otDapRaOa #OpenSiv3D #JPEG_Game pic.twitter.com/nUxQU2lC3E \u2014 Ryo Suzuki (@Reputeless) October 23, 2021 \u30b2\u30fc\u30e0\u300c\u9078\u6319\u3067\u52dd\u3068\u3046\u300d \u601d\u3044\u7acb\u3063\u3066\u3001\u300c\u9078\u6319\u3067\u52dd\u3068\u3046\u300d\u3068\u3044\u3046\u30b2\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002 \u53c2\u8b70\u9662\u9078\u6319\u3082\u8fd1\u3044\u306e\u3067\u3001\u305c\u3072\u904a\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff01\uff01\uff01 https://t.co/VXAK8Egix0 pic.twitter.com/FfrU8FwJ8x \u2014 E869120 (@e869120) July 4, 2022","title":"Siv3D Web \u7248\u30c7\u30e2"},{"location":"ja-jp/learn/animation/","text":"4. \u52d5\u304d\u3092\u4f5c\u308b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002 4.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Scene::Time() \u00b6 Scene::Time() \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u30b7\u30fc\u30f3\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Scene::Center() \u00b6 Scene::Center() \u306f\u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092 Point \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point{ 400, 300 } \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle { Scene :: Center (), ( t * 50 ) }. draw ( ColorF { 0.25 }); } } Scene::DeltaTime() \u00b6 Scene::DeltaTime() \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene::Time() \u3092\u4f7f\u3046\u304b\u308f\u308a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double t = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u3092\u52a0\u7b97 t += Scene :: DeltaTime (); Circle { Scene :: Center (), ( t * 50 ) }. draw ( ColorF { 0.25 }); } } 4.2 \u305f\u304f\u3055\u3093\u306e\u5186\u3092\u540c\u6642\u306b\u52d5\u304b\u3059 \u00b6 step(N) \u306f\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for (int i = 0; i < N; ++i) \u3092 for (auto i : step(N)) \u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 9 )) { Circle { ( i * 100 ), ( t * 100 ), 20 }. draw ( ColorF { 0.25 }); } } } 4.3 \u5186\u5468\u4e0a\u306b\u6cbf\u3063\u3066\u52d5\u304b\u3059 \u00b6 OffsetCircular \u306f\u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 OffsetCircular{ offset, r, theta } \u306f\u3001\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 Vec2 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 double r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b double theta \u306e\u4f4d\u7f6e\u3092\u8868\u3057\u307e\u3059\u3002 OffsetCircular \u306f Vec2 \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 6 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 // 60\u00b0 \u3054\u3068\u306b\u914d\u7f6e\u3057\u3001\u6bce\u79d2 30\u00b0 \u306e\u901f\u3055\u3067\u56de\u8ee2\u3059\u308b const double theta = ( i * 60 _deg + t * 30 _deg ); const Vec2 pos = OffsetCircular { Scene :: Center (), 200 , theta }; Circle { pos , 20 }. draw ( ColorF { 0.25 }); } } } 4.4 \u6bce\u30d5\u30ec\u30fc\u30e0\u56fa\u5b9a\u306e\u79fb\u52d5\u306f\u30c0\u30e1\uff01 \u6642\u9593\u3092\u4f7f\u304a\u3046 \u00b6 Scene::Time() \u3084 Scene::DeltaTime() \u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u3001\u56fa\u5b9a\u306e\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308c\u305d\u3046\u3067\u3059\u304c\u3001\u305d\u308c\u306f \u9593\u9055\u3044 \u3067\u3059\u3002 \u306a\u305c\u306a\u3089\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3055\u308c\u308b\u30d1\u30bd\u30b3\u30f3\u306e\u30e2\u30cb\u30bf\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306b\u3088\u3063\u3066\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u6bce\u79d2\u4f55\u56de\u5b9f\u884c\u3055\u308c\u308b\u304b\u304c\u5909\u308f\u308b\u305f\u3081\u3067\u3059\u3002\u4e00\u822c\u7684\u306a\u30e2\u30cb\u30bf\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306f 60Hz \u3067\u3001\u6bce\u79d2 60 \u56de\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u304c\u3001\u8fd1\u5e74\u306f 120Hz \u3084 144Hz, 240Hz \u306a\u3069\u3001\u3088\u308a\u9ad8\u983b\u5ea6\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3092\u6301\u3064\u30e2\u30cb\u30bf\u304c\u5897\u3048\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u300c\u6bce\u30d5\u30ec\u30fc\u30e0 3px \u305a\u3064\u79fb\u52d5\u300d\u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u300160Hz \u306e\u30e2\u30cb\u30bf\u4e0a\u3067\u306f\u5186\u306f\u6bce\u79d2 180px \u306e\u901f\u3055\u3067\u79fb\u52d5\u3057\u307e\u3059\u304c\u3001120Hz \u306e\u30e2\u30cb\u30bf\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u305d\u306e\u500d\u306e\u6bce\u79d2 360px \u306e\u901f\u3055\u3067\u79fb\u52d5\u3057\u307e\u3059\u3002\u3082\u3057\u3053\u308c\u304c\u30b2\u30fc\u30e0\u306e\u6575\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3060\u3063\u305f\u3089\u3001\u5b9f\u884c\u3059\u308b\u30d1\u30bd\u30b3\u30f3\u306b\u3088\u3063\u3066\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\u304c\u5909\u308f\u308a\u3001\u30b2\u30fc\u30e0\u30d0\u30e9\u30f3\u30b9\u304c\u58ca\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double x = 0.0 ; while ( System :: Update ()) { // \u6bce\u30d5\u30ec\u30fc\u30e0 3px \u79fb\u52d5\uff08\u6642\u9593\u30d9\u30fc\u30b9\u3067\u306f\u306a\u3044\u306e\u3067\u4e0d\u9069\u5207\uff01\uff09 x += 3 ; Circle { x , 300 , 50 }. draw ( ColorF { 0.25 }); } } \u3053\u3046\u3057\u305f\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f\u30d5\u30ec\u30fc\u30e0\u3067\u306f\u306a\u304f\u6642\u9593\u3092\u30d9\u30fc\u30b9\u306b\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u6642\u9593\u30d9\u30fc\u30b9\u306b\u306a\u308b\u3088\u3046\u76f4\u3057\u305f\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double x = 0.0 ; while ( System :: Update ()) { // \u6bce\u79d2 180px \u79fb\u52d5 x += ( Scene :: DeltaTime () * 180 ); Circle { x , 300 , 50 }. draw ( ColorF { 0.25 }); } } 4.5 \u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u51fa\u73fe \u00b6 N \u79d2\u306b 1 \u56de\u306e\u983b\u5ea6\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u51fa\u73fe\u3055\u305b\u308b\u3001\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u66f8\u304f\u3068\u304d\u3082\u3001\u30d5\u30ec\u30fc\u30e0\u30d9\u30fc\u30b9\u3067\u306f\u306a\u304f\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u51fa\u73fe\u9593\u9694\uff08\u79d2\uff09 constexpr double spawnTime = 1.0 ; // \u84c4\u7a4d\u3055\u308c\u305f\u6642\u9593\uff08\u79d2\uff09 double accumulator = 0.0 ; while ( System :: Update ()) { accumulator += Scene :: DeltaTime (); // \u84c4\u7a4d\u6642\u9593\u304c\u51fa\u73fe\u9593\u9694\u3092\u8d85\u3048\u305f\u3089 if ( spawnTime <= accumulator ) { accumulator -= spawnTime ; Print << U \"Spawn!\" ; } } } \u3082\u3057\u51fa\u73fe\u9593\u9694\u304c\u975e\u5e38\u306b\u77ed\u3044\uff081 \u30d5\u30ec\u30fc\u30e0\u306e\u6642\u9593\u3084\u305d\u308c\u3088\u308a\u3082\u77ed\u3044\uff09\u5834\u5408\u30011 \u30d5\u30ec\u30fc\u30e0\u3067\u8907\u6570\u56de\u51fa\u73fe\u3055\u305b\u308b\u5fc5\u8981\u304c\u751f\u3058\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306b\u306f\u3001 if \u306e\u4ee3\u308f\u308a\u306b while (spawnTime <= accumulatedTime) \u3092\u4f7f\u3046\u3053\u3068\u3067\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002 4.6 \u30de\u30a6\u30b9\u306e\u30af\u30ea\u30c3\u30af \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if (MouseL.down()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b\u5186\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); int32 count = 0 ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { ++ count ; } Circle { Scene :: Center (), ( count * 20 ) }. draw ( ColorF { 0.25 }); } } 4.7 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u00b6 Stopwatch \u306f\u3001\u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b StartImmediately::Yes \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch::sF() \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch::restart() \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle { Scene :: Center (), ( t * 50 ) }. draw ( ColorF { 0.25 }); } } 4.8 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b \u00b6 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if (Stopwatch::isRunning()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch::pause() , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch::resume() \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle { Scene :: Center (), ( t * 50 ) }. draw ( ColorF { 0.25 }); } } 4.9 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic:: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 \u5468\u671f\u95a2\u6570 \u52d5\u304d Periodic::Square0_1 Periodic::Triangle0_1 Periodic::Sine0_1 Periodic::Sawtooth0_1 Periodic::Jump0_1 \u5468\u671f\u306f 2s (2 \u79d2) \u3084 0.5s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002 Periodic::Square0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 Periodic::Triangle0_1() \u00b6 0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 Periodic::Sine0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 Periodic::Sawtooth0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 Periodic::Jump0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double p0 = Periodic :: Square0_1 ( 2 s ); const double p1 = Periodic :: Triangle0_1 ( 2 s ); const double p2 = Periodic :: Sine0_1 ( 2 s ); const double p3 = Periodic :: Sawtooth0_1 ( 2 s ); const double p4 = Periodic :: Jump0_1 ( 2 s ); Line { 100 , 0 , 100 , 600 }. draw ( 2 , ColorF { 0.8 }); Line { 700 , 0 , 700 , 600 }. draw ( 2 , ColorF { 0.8 }); Circle { 100 + p0 * 600 , 100 , 20 }. draw ( ColorF { 0.25 }); Circle { 100 + p1 * 600 , 200 , 20 }. draw ( ColorF { 0.25 }); Circle { 100 + p2 * 600 , 300 , 20 }. draw ( ColorF { 0.25 }); Circle { 100 + p3 * 600 , 400 , 20 }. draw ( ColorF { 0.25 }); Circle { 100 + p4 * 600 , 500 , 20 }. draw ( ColorF { 0.25 }); } } 4.10 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if (MouseL.pressed()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u9593\u3060\u3051\u5186\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { r += ( Scene :: DeltaTime () * 100.0 ); } Circle { Scene :: Center (), r }. draw ( ColorF { 0.25 }); } } 4.11 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 \u00b6 Transition \u00b6 \u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3046\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition::update() \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transition::value() \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition { 2.0 s , 0.5 s }; while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle { Scene :: Center (), ( t * 200 ) }. draw ( ColorF { 0.25 }); } } MouseL.pressed() \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3055\u3089\u306b\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition { 2.0 s , 0.5 s }; while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle { Scene :: Center (), ( t * 200 ) }. draw ( ColorF { 0.25 }); } } 4.12 \u7dda\u5f62\u88dc\u9593 \u00b6 \u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A.lerp(B, t) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002 t \u306f\u30000.0 \uff5e 1.0 \u3067\u3059\u3002\u307e\u305f\u3001 Min() \u306f\u3001\u6e21\u3055\u308c\u305f\u5f15\u6570\u306e\u3046\u3061\u6700\u5c0f\u5024\u3092\u3001 Max() \u306f\u3001\u6e21\u3055\u308c\u305f\u5f15\u6570\u306e\u3046\u3061\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e Vec2 from { 100 , 100 }; // \u30b4\u30fc\u30eb\u4f4d\u7f6e Vec2 to { 700 , 500 }; Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u304b\u3089\u30b4\u30fc\u30eb\u4f4d\u7f6e\u3078 t \u306e\u5272\u5408\u3060\u3051\u9032\u3093\u3060\u4f4d\u7f6e const Vec2 pos = from . lerp ( to , t ); if ( MouseL . down ()) { // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u3092\u73fe\u5728\u306e\u4f4d\u7f6e\u306b from = pos ; // \u30b4\u30fc\u30eb\u4f4d\u7f6e\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b to = Cursor :: Pos (); stopwatch . restart (); } Circle { pos , 40 }. draw ( ColorF { 0.25 }); Circle { to , 50 }. drawFrame ( 5 , ColorF { 0.25 }); } } 4.13 \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u4f7f\u3063\u3066\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f EaseInOutExpo() \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u307b\u304b\u306b\u3082 EaseOutBounce() \u3084 EaseInOutBack() \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e Vec2 from { 100 , 100 }; // \u30b4\u30fc\u30eb\u4f4d\u7f6e Vec2 to { 700 , 500 }; Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u304b\u3089\u30b4\u30fc\u30eb\u4f4d\u7f6e\u3078 e \u306e\u5272\u5408\u3060\u3051\u9032\u3093\u3060\u4f4d\u7f6e const Vec2 pos = from . lerp ( to , e ); if ( MouseL . down ()) { // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u3092\u73fe\u5728\u306e\u4f4d\u7f6e\u306b from = pos ; // \u30b4\u30fc\u30eb\u4f4d\u7f6e\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b to = Cursor :: Pos (); stopwatch . restart (); } Circle { pos , 40 }. draw ( ColorF { 0.25 }); Circle { to , 50 }. drawFrame ( 5 , ColorF { 0.25 }); } }","title":"4. \u52d5\u304d\u3092\u4f5c\u308b"},{"location":"ja-jp/learn/animation/#4-\u52d5\u304d\u3092\u4f5c\u308b","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002","title":"4. \u52d5\u304d\u3092\u4f5c\u308b"},{"location":"ja-jp/learn/animation/#41-\u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3","text":"","title":"4.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/learn/animation/#42-\u305f\u304f\u3055\u3093\u306e\u5186\u3092\u540c\u6642\u306b\u52d5\u304b\u3059","text":"step(N) \u306f\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for (int i = 0; i < N; ++i) \u3092 for (auto i : step(N)) \u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 9 )) { Circle { ( i * 100 ), ( t * 100 ), 20 }. draw ( ColorF { 0.25 }); } } }","title":"4.2 \u305f\u304f\u3055\u3093\u306e\u5186\u3092\u540c\u6642\u306b\u52d5\u304b\u3059"},{"location":"ja-jp/learn/animation/#43-\u5186\u5468\u4e0a\u306b\u6cbf\u3063\u3066\u52d5\u304b\u3059","text":"OffsetCircular \u306f\u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 OffsetCircular{ offset, r, theta } \u306f\u3001\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 Vec2 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 double r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b double theta \u306e\u4f4d\u7f6e\u3092\u8868\u3057\u307e\u3059\u3002 OffsetCircular \u306f Vec2 \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 6 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 // 60\u00b0 \u3054\u3068\u306b\u914d\u7f6e\u3057\u3001\u6bce\u79d2 30\u00b0 \u306e\u901f\u3055\u3067\u56de\u8ee2\u3059\u308b const double theta = ( i * 60 _deg + t * 30 _deg ); const Vec2 pos = OffsetCircular { Scene :: Center (), 200 , theta }; Circle { pos , 20 }. draw ( ColorF { 0.25 }); } } }","title":"4.3 \u5186\u5468\u4e0a\u306b\u6cbf\u3063\u3066\u52d5\u304b\u3059"},{"location":"ja-jp/learn/animation/#44-\u6bce\u30d5\u30ec\u30fc\u30e0\u56fa\u5b9a\u306e\u79fb\u52d5\u306f\u30c0\u30e1-\u6642\u9593\u3092\u4f7f\u304a\u3046","text":"Scene::Time() \u3084 Scene::DeltaTime() \u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u3001\u56fa\u5b9a\u306e\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308c\u305d\u3046\u3067\u3059\u304c\u3001\u305d\u308c\u306f \u9593\u9055\u3044 \u3067\u3059\u3002 \u306a\u305c\u306a\u3089\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3055\u308c\u308b\u30d1\u30bd\u30b3\u30f3\u306e\u30e2\u30cb\u30bf\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306b\u3088\u3063\u3066\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u6bce\u79d2\u4f55\u56de\u5b9f\u884c\u3055\u308c\u308b\u304b\u304c\u5909\u308f\u308b\u305f\u3081\u3067\u3059\u3002\u4e00\u822c\u7684\u306a\u30e2\u30cb\u30bf\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306f 60Hz \u3067\u3001\u6bce\u79d2 60 \u56de\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u304c\u3001\u8fd1\u5e74\u306f 120Hz \u3084 144Hz, 240Hz \u306a\u3069\u3001\u3088\u308a\u9ad8\u983b\u5ea6\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3092\u6301\u3064\u30e2\u30cb\u30bf\u304c\u5897\u3048\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u300c\u6bce\u30d5\u30ec\u30fc\u30e0 3px \u305a\u3064\u79fb\u52d5\u300d\u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u300160Hz \u306e\u30e2\u30cb\u30bf\u4e0a\u3067\u306f\u5186\u306f\u6bce\u79d2 180px \u306e\u901f\u3055\u3067\u79fb\u52d5\u3057\u307e\u3059\u304c\u3001120Hz \u306e\u30e2\u30cb\u30bf\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u305d\u306e\u500d\u306e\u6bce\u79d2 360px \u306e\u901f\u3055\u3067\u79fb\u52d5\u3057\u307e\u3059\u3002\u3082\u3057\u3053\u308c\u304c\u30b2\u30fc\u30e0\u306e\u6575\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3060\u3063\u305f\u3089\u3001\u5b9f\u884c\u3059\u308b\u30d1\u30bd\u30b3\u30f3\u306b\u3088\u3063\u3066\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\u304c\u5909\u308f\u308a\u3001\u30b2\u30fc\u30e0\u30d0\u30e9\u30f3\u30b9\u304c\u58ca\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double x = 0.0 ; while ( System :: Update ()) { // \u6bce\u30d5\u30ec\u30fc\u30e0 3px \u79fb\u52d5\uff08\u6642\u9593\u30d9\u30fc\u30b9\u3067\u306f\u306a\u3044\u306e\u3067\u4e0d\u9069\u5207\uff01\uff09 x += 3 ; Circle { x , 300 , 50 }. draw ( ColorF { 0.25 }); } } \u3053\u3046\u3057\u305f\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f\u30d5\u30ec\u30fc\u30e0\u3067\u306f\u306a\u304f\u6642\u9593\u3092\u30d9\u30fc\u30b9\u306b\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u6642\u9593\u30d9\u30fc\u30b9\u306b\u306a\u308b\u3088\u3046\u76f4\u3057\u305f\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double x = 0.0 ; while ( System :: Update ()) { // \u6bce\u79d2 180px \u79fb\u52d5 x += ( Scene :: DeltaTime () * 180 ); Circle { x , 300 , 50 }. draw ( ColorF { 0.25 }); } }","title":"4.4 \u6bce\u30d5\u30ec\u30fc\u30e0\u56fa\u5b9a\u306e\u79fb\u52d5\u306f\u30c0\u30e1\uff01 \u6642\u9593\u3092\u4f7f\u304a\u3046"},{"location":"ja-jp/learn/animation/#45-\u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u51fa\u73fe","text":"N \u79d2\u306b 1 \u56de\u306e\u983b\u5ea6\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u51fa\u73fe\u3055\u305b\u308b\u3001\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u66f8\u304f\u3068\u304d\u3082\u3001\u30d5\u30ec\u30fc\u30e0\u30d9\u30fc\u30b9\u3067\u306f\u306a\u304f\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u51fa\u73fe\u9593\u9694\uff08\u79d2\uff09 constexpr double spawnTime = 1.0 ; // \u84c4\u7a4d\u3055\u308c\u305f\u6642\u9593\uff08\u79d2\uff09 double accumulator = 0.0 ; while ( System :: Update ()) { accumulator += Scene :: DeltaTime (); // \u84c4\u7a4d\u6642\u9593\u304c\u51fa\u73fe\u9593\u9694\u3092\u8d85\u3048\u305f\u3089 if ( spawnTime <= accumulator ) { accumulator -= spawnTime ; Print << U \"Spawn!\" ; } } } \u3082\u3057\u51fa\u73fe\u9593\u9694\u304c\u975e\u5e38\u306b\u77ed\u3044\uff081 \u30d5\u30ec\u30fc\u30e0\u306e\u6642\u9593\u3084\u305d\u308c\u3088\u308a\u3082\u77ed\u3044\uff09\u5834\u5408\u30011 \u30d5\u30ec\u30fc\u30e0\u3067\u8907\u6570\u56de\u51fa\u73fe\u3055\u305b\u308b\u5fc5\u8981\u304c\u751f\u3058\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306b\u306f\u3001 if \u306e\u4ee3\u308f\u308a\u306b while (spawnTime <= accumulatedTime) \u3092\u4f7f\u3046\u3053\u3068\u3067\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002","title":"4.5 \u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u51fa\u73fe"},{"location":"ja-jp/learn/animation/#46-\u30de\u30a6\u30b9\u306e\u30af\u30ea\u30c3\u30af","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if (MouseL.down()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b\u5186\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); int32 count = 0 ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { ++ count ; } Circle { Scene :: Center (), ( count * 20 ) }. draw ( ColorF { 0.25 }); } }","title":"4.6 \u30de\u30a6\u30b9\u306e\u30af\u30ea\u30c3\u30af"},{"location":"ja-jp/learn/animation/#47-\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1","text":"Stopwatch \u306f\u3001\u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b StartImmediately::Yes \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch::sF() \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch::restart() \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle { Scene :: Center (), ( t * 50 ) }. draw ( ColorF { 0.25 }); } }","title":"4.7 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1"},{"location":"ja-jp/learn/animation/#48-\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b","text":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if (Stopwatch::isRunning()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch::pause() , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch::resume() \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle { Scene :: Center (), ( t * 50 ) }. draw ( ColorF { 0.25 }); } }","title":"4.8 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b"},{"location":"ja-jp/learn/animation/#49-\u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3","text":"Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic:: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 \u5468\u671f\u95a2\u6570 \u52d5\u304d Periodic::Square0_1 Periodic::Triangle0_1 Periodic::Sine0_1 Periodic::Sawtooth0_1 Periodic::Jump0_1 \u5468\u671f\u306f 2s (2 \u79d2) \u3084 0.5s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002","title":"4.9 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/learn/animation/#410-\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if (MouseL.pressed()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u9593\u3060\u3051\u5186\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { r += ( Scene :: DeltaTime () * 100.0 ); } Circle { Scene :: Center (), r }. draw ( ColorF { 0.25 }); } }","title":"4.10 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b"},{"location":"ja-jp/learn/animation/#411-\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3","text":"","title":"4.11 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3"},{"location":"ja-jp/learn/animation/#transition","text":"\u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3046\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition::update() \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transition::value() \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition { 2.0 s , 0.5 s }; while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle { Scene :: Center (), ( t * 200 ) }. draw ( ColorF { 0.25 }); } } MouseL.pressed() \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3055\u3089\u306b\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition { 2.0 s , 0.5 s }; while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle { Scene :: Center (), ( t * 200 ) }. draw ( ColorF { 0.25 }); } }","title":"Transition"},{"location":"ja-jp/learn/animation/#412-\u7dda\u5f62\u88dc\u9593","text":"\u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A.lerp(B, t) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002 t \u306f\u30000.0 \uff5e 1.0 \u3067\u3059\u3002\u307e\u305f\u3001 Min() \u306f\u3001\u6e21\u3055\u308c\u305f\u5f15\u6570\u306e\u3046\u3061\u6700\u5c0f\u5024\u3092\u3001 Max() \u306f\u3001\u6e21\u3055\u308c\u305f\u5f15\u6570\u306e\u3046\u3061\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e Vec2 from { 100 , 100 }; // \u30b4\u30fc\u30eb\u4f4d\u7f6e Vec2 to { 700 , 500 }; Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u304b\u3089\u30b4\u30fc\u30eb\u4f4d\u7f6e\u3078 t \u306e\u5272\u5408\u3060\u3051\u9032\u3093\u3060\u4f4d\u7f6e const Vec2 pos = from . lerp ( to , t ); if ( MouseL . down ()) { // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u3092\u73fe\u5728\u306e\u4f4d\u7f6e\u306b from = pos ; // \u30b4\u30fc\u30eb\u4f4d\u7f6e\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b to = Cursor :: Pos (); stopwatch . restart (); } Circle { pos , 40 }. draw ( ColorF { 0.25 }); Circle { to , 50 }. drawFrame ( 5 , ColorF { 0.25 }); } }","title":"4.12 \u7dda\u5f62\u88dc\u9593"},{"location":"ja-jp/learn/animation/#413-\u30a4\u30fc\u30b8\u30f3\u30b0","text":"0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u4f7f\u3063\u3066\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f EaseInOutExpo() \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u307b\u304b\u306b\u3082 EaseOutBounce() \u3084 EaseInOutBack() \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e Vec2 from { 100 , 100 }; // \u30b4\u30fc\u30eb\u4f4d\u7f6e Vec2 to { 700 , 500 }; Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u304b\u3089\u30b4\u30fc\u30eb\u4f4d\u7f6e\u3078 e \u306e\u5272\u5408\u3060\u3051\u9032\u3093\u3060\u4f4d\u7f6e const Vec2 pos = from . lerp ( to , e ); if ( MouseL . down ()) { // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u3092\u73fe\u5728\u306e\u4f4d\u7f6e\u306b from = pos ; // \u30b4\u30fc\u30eb\u4f4d\u7f6e\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b to = Cursor :: Pos (); stopwatch . restart (); } Circle { pos , 40 }. draw ( ColorF { 0.25 }); Circle { to , 50 }. drawFrame ( 5 , ColorF { 0.25 }); } }","title":"4.13 \u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"ja-jp/learn/audio/","text":"12. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u52b9\u679c\u97f3\u3084\u97f3\u697d\u306e\u518d\u751f\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 12.1 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u305f\u3044\u3068\u304d\u306f Audio \u3092\u4f5c\u6210\u3057\u3001 .play() \u3067\u518d\u751f\u3057\u307e\u3059\u3002\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b .play() \u3092\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\u540c\u3058\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b .playOneShot() \u3092\u4f7f\u3044\u307e\u3059\u3002 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Audio \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Texture \u3084 Font \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Audio \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Audio \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210 const Audio audio { U \"example/test.mp3\" }; // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } } \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.6.6 \u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u90e8\u306e\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f OS \u306b\u3088\u3063\u3066\u5bfe\u5fdc\u72b6\u6cc1\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 Windows macOS Linux Web WAVE .wav \u2714 \u2714 \u2714 \u2714 MP3 .mp3 \u2714 \u2714 \u2714 \u2714* AAC .m4a \u2714 \u2714 \u2714 \u2714* OggVorbis .ogg \u2714 \u2714 \u2714 \u2714 Opus .opus \u2714 \u2714 \u2714 \u2714 MIDI .mid \u2714 \u2714 \u2714 \u2714 WMA .wma \u2714 FLAC .flac \u2714 \u2714 AIFF .aif, .aiff, .aifc \u2714 (*) \u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u3068\u3001\u7279\u5225\u306a\u95a2\u6570\u306e\u4f7f\u7528\u304c\u5fc5\u8981\u3067\u3059\u3002 12.2 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f \u00b6 Siv3D \u3067\u306f\u3001WAVE, MP3, OggVorbis, FLAC \u5f62\u5f0f\u306e\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3068\u306f\u3001\u6700\u521d\u306b\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\u306e\u5168\u90e8\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u306f\u306a\u304f\u3001\u4e00\u90e8\u3060\u3051\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u306a\u304c\u3089\u3001\u7d9a\u304f\u90e8\u5206\u3092\u9010\u6b21\u8aad\u307f\u8fbc\u3080\u65b9\u5f0f\u306e\u3053\u3068\u3067\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u4f7f\u3046\u3068\u3001\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u3084\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u6642\u9593\u304c\u5927\u5e45\u306b\u6539\u5584\u3055\u308c\u307e\u3059\u3002 Audio \u3067\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Audio::Stream \u3092\u6e21\u3057\u3066\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u3082\u3057 Audio::Stream \u3092\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u81ea\u52d5\u7684\u306b\u901a\u5e38\u306e\u8aad\u307f\u8fbc\u307f\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u3042\u308b Audio \u3067\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u306f\u3001 .isStreaming() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3067\u306f \u533a\u9593\u30eb\u30fc\u30d7\u518d\u751f\u306b\u304a\u3044\u3066\u3001\u30eb\u30fc\u30d7\u672b\u5c3e\u4f4d\u7f6e\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u7d42\u7aef\u4ee5\u5916\u306b\u8a2d\u5b9a\u3067\u304d\u306a\u3044 \uff08\u97f3\u58f0\u6ce2\u5f62\u51e6\u7406\uff09\u30aa\u30fc\u30c7\u30a3\u30aa\u5168\u4f53\u306e\u97f3\u58f0\u6ce2\u5f62\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044 \uff08\u97f3\u58f0\u6ce2\u5f62\u51e6\u7406\uff09FFT \u306e\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u5c11\u306a\u304f\u306a\u308b \u3068\u3044\u3063\u305f\u4e00\u90e8\u5236\u7d04\u304c\u751f\u3058\u307e\u3059\u304c\u3001\u901a\u5e38\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f\u7528\u9014\u3067\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210\uff08\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u30ea\u30af\u30a8\u30b9\u30c8\uff09 const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; // \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u306b\u306a\u308b\u304b\u3092\u53d6\u5f97 Print << audio . isStreaming (); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } } 12.3 \u4e00\u6642\u505c\u6b62\u3068\u505c\u6b62 \u00b6 \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f .pause() , \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059\u306b\u306f .stop() \u3092\u547c\u3073\u307e\u3059\u3002 \u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u518d\u751f\u4e2d\u3067\u3042\u308b\u304b\u306f .isPlaying() , \u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b\u306f .isPaused() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; while ( System :: Update ()) { ClearPrint (); // \u518d\u751f\u3055\u308c\u3066\u3044\u308b\u304b Print << U \"isPlaying: \" << audio . isPlaying (); // \u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b Print << U \"isPaused: \" << audio . isPaused (); if ( SimpleGUI :: Button ( U \"Play\" , Vec2 { 200 , 20 })) { // \u518d\u751f\u30fb\u518d\u958b audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 { 200 , 60 })) { // \u4e00\u6642\u505c\u6b62 audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 { 200 , 100 })) { // \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop (); } } } 12.4 \u97f3\u91cf\u3092\u5909\u3048\u308b \u00b6 \u97f3\u91cf\u3092\u5909\u3048\u308b\u306b\u306f .setVolume() \u306b 0.0\uff5e1.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u5927\u306e 1.0 \u3067\u3059\u3002 \u73fe\u5728\u306e\u97f3\u91cf\u306f .getVolume() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); double volume = 1.0 ; while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u97f3\u91cf\u3092\u53d6\u5f97 Print << audio . getVolume (); if ( SimpleGUI :: Slider ( U \"volume: {:.2f}\" _fmt ( volume ), volume , Vec2 { 200 , 20 }, 160 , 140 )) { // \u97f3\u91cf\u3092\u8a2d\u5b9a audio . setVolume ( volume ); } } } 12.5 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8 \u00b6 .play() , .pause() , .stop() \u306b\u6642\u9593\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u6642\u9593\u3092\u304b\u3051\u3066\u97f3\u91cf\u304c\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; while ( System :: Update ()) { ClearPrint (); // \u518d\u751f\u3055\u308c\u3066\u3044\u308b\u304b Print << U \"isPlaying: \" << audio . isPlaying (); // \u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b Print << U \"isPaused: \" << audio . isPaused (); // \u73fe\u5728\u306e\u97f3\u91cf Print << audio . getVolume (); if ( SimpleGUI :: Button ( U \"Play\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u518d\u751f\u30fb\u518d\u958b audio . play ( 2 s ); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 { 200 , 60 })) { // 2 \u79d2\u304b\u3051\u3066\u4e00\u6642\u505c\u6b62 audio . pause ( 2 s ); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 { 200 , 100 })) { // 2 \u79d2\u304b\u3051\u3066\u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop ( 2 s ); } } } 12.6 \u518d\u751f\u4e2d\u306b\u97f3\u91cf\u3092\u5f90\u3005\u306b\u5909\u3048\u308b \u00b6 .fadeVolume(volume, duration) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u6642\u9593 duration \u3060\u3051\u304b\u3051\u3066\u3001\u97f3\u91cf\u304c\u5f90\u3005\u306b volume \u306b\u5909\u5316\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u97f3\u91cf Print << audio . getVolume (); if ( SimpleGUI :: Button ( U \"1.0\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u97f3\u91cf\u3092 1.0 \u306b audio . fadeVolume ( 1.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.5\" , Vec2 { 200 , 60 })) { // 1 \u79d2\u304b\u3051\u3066\u97f3\u91cf\u3092 0.5 \u306b audio . fadeVolume ( 0.5 , 1 s ); } if ( SimpleGUI :: Button ( U \"0.1\" , Vec2 { 200 , 100 })) { // 1.5 \u79d2\u304b\u3051\u3066\u97f3\u91cf\u3092 0.1 \u306b audio . fadeVolume ( 0.1 , 1.5 s ); } } } 12.7 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b \u00b6 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b\u306b\u306f .setSpeed(speed) \u307e\u305f\u306f .fadeSpeed(speed, duration) \u3092\u4f7f\u3063\u3066\u3001\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u306e\u500d\u7387\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1.0 \u3067\u3059\u3002\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u304c\u901f\u304f\u306a\u308b\u3068\u97f3\u306f\u9ad8\u304f\u805e\u3053\u3048\u3001\u9045\u304f\u306a\u308b\u3068\u4f4e\u304f\u805e\u3053\u3048\u307e\u3059\u3002\u30b9\u30d4\u30fc\u30c9\u3092\u65e9\u304f\u3057\u3066\u3082\u97f3\u306e\u9ad8\u4f4e\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b\u300c\u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u6a5f\u80fd\u300d\u3068\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002 \u73fe\u5728\u306e\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u306f .getSpeed() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u30b9\u30d4\u30fc\u30c9 Print << audio . getSpeed (); if ( SimpleGUI :: Button ( U \"1.2\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u30b9\u30d4\u30fc\u30c9\u3092 1.2 \u306b audio . fadeSpeed ( 1.2 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0\" , Vec2 { 200 , 60 })) { // 1 \u79d2\u304b\u3051\u3066\u30b9\u30d4\u30fc\u30c9\u3092 1.0 \u306b audio . fadeSpeed ( 1.0 , 1 s ); } if ( SimpleGUI :: Button ( U \"0.8\" , Vec2 { 200 , 100 })) { // 1.5 \u79d2\u304b\u3051\u3066\u30b9\u30d4\u30fc\u30c9\u3092 0.8 \u306b audio . fadeSpeed ( 0.8 , 1.5 s ); } } } 12.8 \u30d1\u30f3\u3092\u5909\u3048\u308b \u00b6 \u5de6\u53f3\u306e\u97f3\u91cf\u30d0\u30e9\u30f3\u30b9\uff08\u30d1\u30f3\uff09\u3092\u5909\u3048\u308b\u306b\u306f .setPan(pan) \u307e\u305f\u306f .fadePan(pan, duration) \u3092\u4f7f\u3063\u3066\u3001\u30d1\u30f3\u3092 -1.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 0.0 \u3067\u3001\u5de6\u304c\u8ca0\u306e\u65b9\u5411\u3001\u53f3\u304c\u6b63\u306e\u65b9\u5411\u3067\u3059\u3002 \u73fe\u5728\u306e\u30d1\u30f3\u306f .getPan() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u30d1\u30f3 Print << audio . getPan (); if ( SimpleGUI :: Button ( U \"0.9\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u30d1\u30f3\u3092 0.9 \u306b audio . fadePan ( 0.9 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.0\" , Vec2 { 200 , 60 })) { // 1 \u79d2\u304b\u3051\u3066\u30d1\u30f3\u3092 0.0 \u306b audio . fadePan ( 0.0 , 1 s ); } if ( SimpleGUI :: Button ( U \"-0.9\" , Vec2 { 200 , 100 })) { // 1.5 \u79d2\u304b\u3051\u3066\u30d1\u30f3\u3092 -0.9 \u306b audio . fadePan ( -0.9 , 1.5 s ); } } } 12.9 \u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u5408\u8a08\u518d\u751f\u6642\u9593\uff08\u79d2\uff09\u306f .lengthSec() , \u5408\u8a08\u518d\u751f\u30b5\u30f3\u30d7\u30eb\u306f .samples() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e\u3092 .posSec() \u3067\u306f\u79d2\u3001 .posSample() \u3067\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u97f3\u697d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u5408\u308f\u305b\u305f\u6f14\u51fa\u3084\u3001\u97f3\u697d\u30b2\u30fc\u30e0\u306e\u5224\u5b9a\u306a\u3069\u306f\u3001\u3053\u306e\u518d\u751f\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53\u306e\u9577\u3055 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); } } 12.10 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b \u00b6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 .seekSamples() \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001 .seekTime() \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u6642\u9593\uff08\u79d2\uff09\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); if ( SimpleGUI :: Button ( U \"0 samples\" , Vec2 { 300 , 20 })) { // 0 \u30b5\u30f3\u30d7\u30eb\u76ee\uff08\u66f2\u306e\u5148\u982d\uff09\u306b\u79fb\u52d5 audio . seekSamples ( 0 ); } if ( SimpleGUI :: Button ( U \"441,000 samples\" , Vec2 { 300 , 60 })) { // 441,000 \u30b5\u30f3\u30d7\u30eb\u76ee\u306b\u79fb\u52d5 audio . seekSamples ( 441000 ); } if ( SimpleGUI :: Button ( U \"20.0 sec\" , Vec2 { 300 , 100 })) { // 20 \u79d2\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5 audio . seekTime ( 20.0 ); } } } 12.11 \u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b \u00b6 \u66f2\u306e\u518d\u751f\u304c\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u81ea\u52d5\u7684\u306b\u5148\u982d\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Loop::Yes \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" , Loop :: Yes }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u30eb\u30fc\u30d7\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b Print << audio . isLoop (); // \u30eb\u30fc\u30d7\u56de\u6570 Print << audio . loopCount (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); } } 12.12 \u533a\u9593\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u518d\u751f\u304c\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u7d42\u7aef\u4f4d\u7f6e\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u5148\u982d\u4f4d\u7f6e\u306b\u623b\u3063\u3066\u533a\u9593\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u308b\u306b\u306f\u3001\u30eb\u30fc\u30d7\u533a\u9593\u306e\u5148\u982d\u4f4d\u7f6e\u3092 Arg::loopBegin , \u7d42\u7aef\u4f4d\u7f6e\u3092 Arg::loopEnd \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u4f4d\u7f6e\u306e\u6307\u5b9a\u65b9\u6cd5\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u304b\u6642\u9593\u304b\u3092\u9078\u3079\u307e\u3059\u304c\u3001begin \u3068 end \u3067\u63c3\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Arg::loopEnd \u3092\u6307\u5b9a\u3059\u308b\u3068\u305d\u308c\u4ee5\u964d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u306f\u4fdd\u6301\u305b\u305a\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u7bc0\u7d04\u3055\u308c\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3067\u306f\u3001 Arg::loopEnd \u3092\u6307\u5b9a\u3067\u304d\u306a\u3044\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002\u5fc5\u8981\u306a\u5834\u5408\u306f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u3042\u3089\u304b\u3058\u3081\u30ab\u30c3\u30c8\u3057\u307e\u3059\u3002 \u30eb\u30fc\u30d7\u306e\u672b\u5c3e\u3068\u5148\u982d\u306e\u6ce2\u5f62\u306b\u305a\u308c\u304c\u3042\u308b\u3068\u3001\u30eb\u30fc\u30d7\u306e\u77ac\u9593\u306b\u30ce\u30a4\u30ba\u97f3\u304c\u751f\u3058\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 1.5 \u79d2\uff5e44.5 \u79d2\u306e\u533a\u9593\u3092\u30eb\u30fc\u30d7 const Audio audio { U \"example/test.mp3\" , Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u30eb\u30fc\u30d7\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b Print << audio . isLoop (); // \u30eb\u30fc\u30d7\u56de\u6570 Print << audio . loopCount (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); } } 12.13 \u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b \u00b6 \u697d\u5668\u306e\u7a2e\u985e\u3068\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3092\u6307\u5b9a\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3057\u3001\u305d\u3053\u304b\u3089 Audio \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b GMInstrument \u3067\u5217\u6319\u3055\u308c\u308b\u697d\u5668\u540d\u3001 PianoKey \u3067\u5217\u6319\u3055\u308c\u308b\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3092\u6e21\u3057\u307e\u3059\u3002 \u97f3\u306e\u9577\u3055\u306f \u30ce\u30fc\u30c8\u30fb\u30aa\u30f3\uff08\u9cf4\u3089\u3059\uff09\u6642\u9593 \u30ce\u30fc\u30c8\u30fb\u30aa\u30f3\u6642\u9593\u3068\u30ce\u30fc\u30c8\u30fb\u30aa\u30d5\uff08\u9cf4\u3089\u3057\u7d42\u3048\u308b\uff09\u6642\u9593 \u306e 2 \u901a\u308a\u306e\u8a2d\u5b9a\u306e\u4ed5\u65b9\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u8005\u3067\u306f 1.0 \u79d2\u306e\u30ce\u30fc\u30c8\u30fb\u30aa\u30d5\u6642\u9593\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano { GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet { GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s }; // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3\u3002\u30ce\u30fc\u30c8\u30fb\u30aa\u30f3 2.0 \u79d2\u3001\u30ce\u30fc\u30c8\u30fb\u30aa\u30d5 0.5 \u79d2 const Audio trumpet { GMInstrument :: Trumpet , PianoKey :: E4 , 2.0 s , 0.5 s }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 { 20 , 20 })) { piano . play (); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 { 20 , 60 })) { clarinet . play (); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 { 20 , 100 })) { trumpet . play (); } } } 12.14 \u540c\u3058\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b \u00b6 1 \u3064\u306e Audio \u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306b\u306f .play() \u306e\u4ee3\u308f\u308a\u306b .playOneShot() \u3092\u4f7f\u3044\u307e\u3059\u3002 .playOneShot() \u306e\u5f15\u6570\u306b\u306f\u97f3\u91cf\u3001\u30d1\u30f3\u3001\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u6e21\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3\u3002 const Audio piano { GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet { GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s }; // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet { GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 { 20 , 20 })) { // \u97f3\u91cf 0.5 \u3067\u518d\u751f piano . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 { 20 , 60 })) { clarinet . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 { 20 , 100 })) { trumpet . playOneShot ( 0.5 ); } } } 12.15 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3068\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u3092 BGM, \u74b0\u5883\u97f3\u3001\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u30dc\u30a4\u30b9\u306a\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u985e\u3057\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u97f3\u91cf\u306a\u3069\u3092\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u3001 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9 \u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306f MixBus0 \uff5e MixBus3 \u306e 4 \u3064\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u3044\u305a\u308c\u304b\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3092\u901a\u3057\u3066\u518d\u751f\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f MixBus0 \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306f\u6700\u7d42\u7684\u306b \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa \u306b\u3088\u3063\u3066\u7d71\u5408\u3055\u308c\u307e\u3059\u3002 \u500b\u3005\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u3002 \u97f3\u91cf\u306e\u8abf\u6574 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb\u306e\u53d6\u5f97 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u306e FFT \u306e\u7d50\u679c\u53d6\u5f97 \u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u306e\u9069\u7528\uff08\u6b21\u7bc0\u3067\u8aac\u660e\uff09 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306f\u6b21\u306e\u3088\u3046\u306a\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u3002 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4e00\u6589\u505c\u6b62\u30fb\u518d\u958b \u97f3\u91cf\u306e\u8abf\u6574 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb\u306e\u53d6\u5f97 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u306e FFT \u306e\u7d50\u679c\u53d6\u5f97 \u6700\u7d42\u7684\u306a\u51fa\u529b\u97f3\u91cf\u306f\u3001 Audio \u3067\u8a2d\u5b9a\u3055\u308c\u305f\u97f3\u91cf \u00d7 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306e\u97f3\u91cf \u00d7 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u97f3\u91cf = \u6700\u7d42\u51fa\u529b \u306b\u306a\u308a\u307e\u3059\u3002 Audio \u3092\u3069\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3067\u518d\u751f\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001 .play() \u307e\u305f\u306f .playOneShot() \u306e\u5f15\u6570\u306b MixBus0 \uff5e MixBus3 \u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f MixBus0 \uff09\u3002 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306e\u97f3\u91cf\u3092\u8abf\u6574\u3059\u308b\u306b\u306f GlobalAudio::BusSetVolume(busIndex, volume) , GlobalAudio::BusFadeVolume(busIndex, volume, duration) \u3092\u547c\u3073\u307e\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u97f3\u91cf\u3092\u8abf\u6574\u3059\u308b\u306b\u306f GlobalAudio::SetVolume(volume) , GlobalAudio::FadeVolume(volume, duration) \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio pianoC { GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; // \u30d4\u30a2\u30ce\u306e D4 (\u30ec) \u306e\u97f3 const Audio pianoD { GMInstrument :: Piano1 , PianoKey :: D4 , 0.5 s }; // \u30d4\u30a2\u30ce\u306e E4 (\u30df) \u306e\u97f3 const Audio pianoE { GMInstrument :: Piano1 , PianoKey :: E4 , 0.5 s }; double globalVolume = 1.0 , mixBus0Volume = 1.0 , mixBus1Volume = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"Global Vol\" , globalVolume , Vec2 { 20 , 20 }, 120 , 200 )) { // \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u97f3\u91cf\u3092\u5909\u66f4 GlobalAudio :: SetVolume ( globalVolume ); } if ( SimpleGUI :: Slider ( U \"Bus0 Vol\" , mixBus0Volume , Vec2 { 20 , 60 }, 120 , 120 )) { // MixBus0 \u306e\u97f3\u91cf\u3092\u5909\u66f4 GlobalAudio :: BusSetVolume ( MixBus0 , mixBus0Volume ); } if ( SimpleGUI :: Slider ( U \"Bus1 Vol\" , mixBus1Volume , Vec2 { 300 , 60 }, 120 , 120 )) { // MixBus1 \u306e\u97f3\u91cf\u3092\u5909\u66f4 GlobalAudio :: BusSetVolume ( MixBus1 , mixBus1Volume ); } if ( SimpleGUI :: Button ( U \"C Bus0\" , Vec2 { 20 , 100 })) { pianoC . playOneShot ( MixBus0 , 0.5 ); } if ( SimpleGUI :: Button ( U \"D Bus0\" , Vec2 { 20 , 140 })) { pianoD . playOneShot ( MixBus0 , 0.5 ); } if ( SimpleGUI :: Button ( U \"E Bus0\" , Vec2 { 20 , 180 })) { pianoE . playOneShot ( MixBus0 , 0.5 ); } if ( SimpleGUI :: Button ( U \"C Bus1\" , Vec2 { 300 , 100 })) { pianoC . playOneShot ( MixBus1 , 0.5 ); } if ( SimpleGUI :: Button ( U \"D Bus1\" , Vec2 { 300 , 140 })) { pianoD . playOneShot ( MixBus1 , 0.5 ); } if ( SimpleGUI :: Button ( U \"E Bus1\" , Vec2 { 300 , 180 })) { pianoE . playOneShot ( MixBus1 , 0.5 ); } } } 12.16 \uff08\u30b5\u30f3\u30d7\u30eb\uff09\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf \u00b6 1 \u3064\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306b\u306f\u6700\u5927 8 \u3064\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u518d\u751f\u4e2d\u306b\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306e\u97f3\u58f0\u6ce2\u5f62\u52a0\u5de5\u304c\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\uff08\u5f15\u6570\u306f\u7701\u7565) \u8aac\u660e GlobalAudio::BusClearFilter() \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a3\u30eb\u30bf\u3092\u30aa\u30d5\u306b\u3057\u307e\u3059 GlobalAudio::BusSetLowPassFilter() \u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetHighPassFilter() \u30cf\u30a4\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetEchoFilter() \u30a8\u30b3\u30fc\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetReverbFilter() \u30ea\u30d0\u30fc\u30d6\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetPitchShiftFilter() \u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 OpenSiv3D v0.6.6 Web \u7248\u3067\u306f\u3001\u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002 GlobalAudio::SupportsPitchShift() \u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u5b9f\u884c\u74b0\u5883\u3067\u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528\u3067\u304d\u308b\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u6a5f\u80fd\u306e\u30c7\u30e2\u3067\u3059\u3002\u3053\u308c\u307e\u3067\u306e\u7ae0\u3067\u306f\u6271\u3063\u3066\u3044\u306a\u3044\u3001\u3044\u304f\u3064\u304b\u306e\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u300cOpen audio file\u300d\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u30d1\u30bd\u30b3\u30f3\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Audio audio ; double posSec = 0.0 ; double volume = 1.0 ; double pan = 0.0 ; double speed = 1.0 ; bool loop = false ; Array < float > busSamples ; Array < float > globalSamples ; FFTResult busFFT ; FFTResult globalFFT ; LineString lines ( 256 , Vec2 { 0 , 0 }); bool pitch = false ; double pitchShift = 0.0 ; bool lpf = false ; double lpfCutoffFrequency = 800.0 ; double lpfResonance = 0.5 ; double lpfWet = 1.0 ; bool hpf = false ; double hpfCutoffFrequency = 800.0 ; double hpfResonance = 0.5 ; double hpfWet = 1.0 ; bool echo = false ; double delay = 0.1 ; double decay = 0.5 ; double echoWet = 0.5 ; bool reverb = false ; bool freeze = false ; double roomSize = 0.5 ; double damp = 0.0 ; double width = 0.5 ; double reverbWet = 0.5 ; while ( System :: Update ()) { ClearPrint (); Print << U \"GlobalAudio::GetActiveVoiceCount(): \" << GlobalAudio :: GetActiveVoiceCount (); Print << U \"isEmpty : \" << audio . isEmpty (); Print << U \"isStreaming : \" << audio . isStreaming (); Print << U \"sampleRate : \" << audio . sampleRate (); Print << U \"samples : \" << audio . samples (); Print << U \"lengthSec : \" << audio . lengthSec (); Print << U \"posSample : \" << audio . posSample (); Print << U \"posSec : \" << ( posSec = audio . posSec ()); Print << U \"isActive : \" << audio . isActive (); Print << U \"isPlaying : \" << audio . isPlaying (); Print << U \"isPaused : \" << audio . isPaused (); Print << U \"samplesPlayed : \" << audio . samplesPlayed (); Print << U \"isLoop : \" << ( loop = audio . isLoop ()); Print << U \"getLoopTimingtLoop : \" << audio . getLoopTiming (). beginPos << U \", \" << audio . getLoopTiming (). endPos ; Print << U \"loopCount : \" << audio . loopCount (); Print << U \"getVolume : \" << ( volume = audio . getVolume ()); Print << U \"getPan : \" << ( pan = audio . getPan ()); Print << U \"getSpeed : \" << ( speed = audio . getSpeed ()); if ( SimpleGUI :: Button ( U \"Open audio file\" , Vec2 { 60 , 560 })) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio ( Audio :: Stream ); } { GlobalAudio :: BusGetSamples ( MixBus0 , busSamples ); GlobalAudio :: BusGetFFT ( MixBus0 , busFFT ); for ( auto [ i , s ] : Indexed ( busSamples )) { lines [ i ]. set (( 300.0 + i ), ( 200.0 - s * 100.0 )); } if ( busSamples ) { lines . draw ( 2 , Palette :: Orange ); } for ( auto [ i , s ] : Indexed ( busFFT . buffer )) { RectF { Arg :: bottomLeft ( 300 + i , 300 ), 1 , ( s * 4 ) }. draw (); } } { GlobalAudio :: GetSamples ( globalSamples ); GlobalAudio :: GetFFT ( globalFFT ); for ( auto [ i , s ] : Indexed ( globalSamples )) { lines [ i ]. set (( 300.0 + i ), ( 550.0 - s * 100.0 )); } if ( globalSamples ) { lines . draw ( 2 , Palette :: Orange ); } for ( auto [ i , s ] : Indexed ( globalFFT . buffer )) { RectF { Arg :: bottomLeft ( 300 + i , 650 ), 1 , ( s * 4 ) }. draw (); } } if ( SimpleGUI :: Button ( U \"Play\" , Vec2 { 600 , 20 }, 80 , ! audio . isPlaying ())) { audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 { 690 , 20 }, 80 , ( audio . isPlaying () && ! audio . isPaused ()))) { audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 { 780 , 20 }, 80 , ( audio . isPlaying () || audio . isPaused ()))) { audio . stop (); } if ( SimpleGUI :: Button ( U \"Play in 2s\" , Vec2 { 870 , 20 }, 120 , ! audio . isPlaying ())) { audio . play ( 2 s ); } if ( SimpleGUI :: Button ( U \"Pause in 2s\" , Vec2 { 1000 , 20 }, 120 , ( audio . isPlaying () && ! audio . isPaused ()))) { audio . pause ( 2 s ); } if ( SimpleGUI :: Button ( U \"Stop in 2s\" , Vec2 { 1130 , 20 }, 120 , ( audio . isPlaying () || audio . isPaused ()))) { audio . stop ( 2 s ); } if ( SimpleGUI :: Slider ( U \"{:.1f} / {:.1f}\" _fmt ( posSec , audio . lengthSec ()), posSec , 0.0 , audio . lengthSec (), Vec2 { 600 , 60 }, 160 , 360 )) { if ( MouseL . down () || ! Cursor :: DeltaF (). isZero ()) // \u30b7\u30fc\u30af\u306e\u9023\u7d9a\uff08\u30ce\u30a4\u30ba\u306e\u539f\u56e0\uff09\u3092\u9632\u3050 { audio . seekTime ( posSec ); } } if ( SimpleGUI :: CheckBox ( loop , U \"Loop\" , Vec2 { 1130 , 60 })) { audio . setLoop ( loop ); } if ( SimpleGUI :: Slider ( U \"volume: {:.2f}\" _fmt ( volume ), volume , Vec2 { 600 , 110 }, 140 , 130 )) { audio . setVolume ( volume ); } if ( SimpleGUI :: Button ( U \"0.0 in 2s\" , Vec2 { 880 , 110 }, 110 , audio . isActive ())) { audio . fadeVolume ( 0.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.5 in 2s\" , Vec2 { 1000 , 110 }, 110 , audio . isActive ())) { audio . fadeVolume ( 0.5 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0 in 2s\" , Vec2 { 1120 , 110 }, 110 , audio . isActive ())) { audio . fadeVolume ( 1.0 , 2 s ); } if ( SimpleGUI :: Slider ( U \"pan: {:.2f}\" _fmt ( pan ), pan , -1.0 , 1.0 , Vec2 { 600 , 150 }, 140 , 130 )) { audio . setPan ( pan ); } if ( SimpleGUI :: Button ( U \"-1.0 in 2s\" , Vec2 { 880 , 150 }, 110 , audio . isActive ())) { audio . fadePan ( -1.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.0 in 2s\" , Vec2 { 1000 , 150 }, 110 , audio . isActive ())) { audio . fadePan ( 0.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0 in 2s\" , Vec2 { 1120 , 150 }, 110 , audio . isActive ())) { audio . fadePan ( 1.0 , 2 s ); } if ( SimpleGUI :: Slider ( U \"speed: {:.3f}\" _fmt ( speed ), speed , 0.0 , 4.0 , Vec2 { 600 , 190 }, 140 , 130 )) { audio . setSpeed ( speed ); } if ( SimpleGUI :: Button ( U \"0.8 in 2s\" , Vec2 { 880 , 190 }, 110 , audio . isActive ())) { audio . fadeSpeed ( 0.8 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0 in 2s\" , Vec2 { 1000 , 190 }, 110 , audio . isActive ())) { audio . fadeSpeed ( 1.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.2 in 2s\" , Vec2 { 1120 , 190 }, 110 , audio . isActive ())) { audio . fadeSpeed ( 1.2 , 2 s ); } bool updatePitch = false ; bool updateLPF = false ; bool updateHPF = false ; bool updateEcho = false ; bool updateReverb = false ; if ( SimpleGUI :: CheckBox ( pitch , U \"Pitch\" , Vec2 { 600 , 240 }, 120 , GlobalAudio :: SupportsPitchShift ())) { if ( pitch ) { updatePitch = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 0 ); } } updatePitch |= SimpleGUI :: Slider ( U \"pitchShift: {:.2f}\" _fmt ( pitchShift ), pitchShift , -12.0 , 12.0 , Vec2 { 720 , 240 }, 160 , 300 ); if ( SimpleGUI :: CheckBox ( lpf , U \"LPF\" , Vec2 { 600 , 280 }, 120 )) { if ( lpf ) { updateLPF = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 1 ); } } updateLPF |= SimpleGUI :: Slider ( U \"cutoffFrequency: {:.0f}\" _fmt ( lpfCutoffFrequency ), lpfCutoffFrequency , 10 , 4000 , Vec2 { 720 , 280 }, 220 , 240 ); updateLPF |= SimpleGUI :: Slider ( U \"resonance: {:.2f}\" _fmt ( lpfResonance ), lpfResonance , 0.1 , 8.0 , Vec2 { 720 , 310 }, 220 , 240 ); updateLPF |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( lpfWet ), lpfWet , Vec2 { 720 , 340 }, 220 , 240 ); if ( SimpleGUI :: CheckBox ( hpf , U \"HPF\" , Vec2 { 600 , 380 }, 120 )) { if ( hpf ) { updateHPF = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 2 ); } } updateHPF |= SimpleGUI :: Slider ( U \"cutoffFrequency: {:.0f}\" _fmt ( hpfCutoffFrequency ), hpfCutoffFrequency , 10 , 4000 , Vec2 { 720 , 380 }, 220 , 240 ); updateHPF |= SimpleGUI :: Slider ( U \"resonance: {:.2f}\" _fmt ( hpfResonance ), hpfResonance , 0.1 , 8.0 , Vec2 { 720 , 410 }, 220 , 240 ); updateHPF |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( hpfWet ), hpfWet , Vec2 { 720 , 440 }, 220 , 240 ); if ( SimpleGUI :: CheckBox ( echo , U \"Echo\" , Vec2 { 600 , 480 }, 120 )) { if ( echo ) { updateEcho = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 3 ); } } updateEcho |= SimpleGUI :: Slider ( U \"delay: {:.2f}\" _fmt ( delay ), delay , Vec2 { 720 , 480 }, 220 , 240 ); updateEcho |= SimpleGUI :: Slider ( U \"decay: {:.2f}\" _fmt ( decay ), decay , Vec2 { 720 , 510 }, 220 , 240 ); updateEcho |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( echoWet ), echoWet , Vec2 { 720 , 540 }, 220 , 240 ); if ( SimpleGUI :: CheckBox ( reverb , U \"Reverb\" , Vec2 { 600 , 580 }, 120 )) { if ( reverb ) { updateReverb = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 4 ); } } updateReverb |= SimpleGUI :: CheckBox ( freeze , U \"freeze\" , Vec2 { 720 , 580 }, 110 ); updateReverb |= SimpleGUI :: Slider ( U \"roomSize: {:.2f}\" _fmt ( roomSize ), roomSize , 0.001 , 1.0 , { 830 , 580 }, 150 , 200 ); updateReverb |= SimpleGUI :: Slider ( U \"damp: {:.2f}\" _fmt ( damp ), damp , Vec2 { 720 , 610 }, 220 , 240 ); updateReverb |= SimpleGUI :: Slider ( U \"width: {:.2f}\" _fmt ( width ), width , Vec2 { 720 , 640 }, 220 , 240 ); updateReverb |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( reverbWet ), reverbWet , Vec2 { 720 , 670 }, 220 , 240 ); if ( pitch && updatePitch ) { GlobalAudio :: BusSetPitchShiftFilter ( MixBus0 , 0 , pitchShift ); } if ( lpf && updateLPF ) { GlobalAudio :: BusSetLowPassFilter ( MixBus0 , 1 , lpfCutoffFrequency , lpfResonance , lpfWet ); } if ( hpf && updateHPF ) { GlobalAudio :: BusSetHighPassFilter ( MixBus0 , 2 , hpfCutoffFrequency , hpfResonance , hpfWet ); } if ( echo && updateEcho ) { GlobalAudio :: BusSetEchoFilter ( MixBus0 , 3 , delay , decay , echoWet ); } if ( reverb && updateReverb ) { GlobalAudio :: BusSetReverbFilter ( MixBus0 , 4 , freeze , roomSize , damp , width , reverbWet ); } } // \u518d\u751f\u4e2d\u306e\u97f3\u58f0\u304c\u3042\u308c\u3070\u3001\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3055\u305b\u3066\u304b\u3089\u7d42\u4e86 if ( GlobalAudio :: GetActiveVoiceCount ()) { GlobalAudio :: FadeVolume ( 0.0 , 0.5 s ); System :: Sleep ( 0.5 s ); } } 12.17 \u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa \u00b6 \u30c7\u30fc\u30bf\u3092\u6301\u305f\u306a\u3044\u7a7a\uff08\u304b\u3089\uff09\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3059\u308b\u3068\u3001\u300c\u30d5\u30ef\u300d\u3068\u9cf4\u308b 0.5 \u79d2\u306e\u97f3\u304c\u518d\u751f\u3055\u308c\u307e\u3059\u3002\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u3082\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u7a7a\u3067\u3042\u308b\u304b\u306f if (audio.isEmpty()) \u3082\u3057\u304f\u306f if (not audio) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u3044\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b Audio audioA ; if ( not audioA ) { Print << U \"audioA is empty\" ; } // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b Audio audioB { U \"aaa/bbb.wav\" }; if ( not audioB ) { Print << U \"audioB is empty\" ; } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Play A\" , Vec2 { 200 , 20 })) { audioA . playOneShot (); } if ( SimpleGUI :: Button ( U \"Play B\" , Vec2 { 200 , 60 })) { audioB . playOneShot (); } } } 12.18 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4ee3\u5165 \u00b6 Audio \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ; while ( System :: Update ()) { ClearPrint (); Print << audio . isEmpty (); // \u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( not audio ) && MouseL . down ()) { // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4f5c\u6210\u3057\u3066\u4ee3\u5165 audio = Audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); } } }","title":"12. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"ja-jp/learn/audio/#12-\u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u52b9\u679c\u97f3\u3084\u97f3\u697d\u306e\u518d\u751f\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"12. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"ja-jp/learn/audio/#121-\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u305f\u3044\u3068\u304d\u306f Audio \u3092\u4f5c\u6210\u3057\u3001 .play() \u3067\u518d\u751f\u3057\u307e\u3059\u3002\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b .play() \u3092\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\u540c\u3058\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b .playOneShot() \u3092\u4f7f\u3044\u307e\u3059\u3002 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Audio \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Texture \u3084 Font \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Audio \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Audio \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210 const Audio audio { U \"example/test.mp3\" }; // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } }","title":"12.1 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f"},{"location":"ja-jp/learn/audio/#\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8","text":"OpenSiv3D v0.6.6 \u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u90e8\u306e\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f OS \u306b\u3088\u3063\u3066\u5bfe\u5fdc\u72b6\u6cc1\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 Windows macOS Linux Web WAVE .wav \u2714 \u2714 \u2714 \u2714 MP3 .mp3 \u2714 \u2714 \u2714 \u2714* AAC .m4a \u2714 \u2714 \u2714 \u2714* OggVorbis .ogg \u2714 \u2714 \u2714 \u2714 Opus .opus \u2714 \u2714 \u2714 \u2714 MIDI .mid \u2714 \u2714 \u2714 \u2714 WMA .wma \u2714 FLAC .flac \u2714 \u2714 AIFF .aif, .aiff, .aifc \u2714 (*) \u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u3068\u3001\u7279\u5225\u306a\u95a2\u6570\u306e\u4f7f\u7528\u304c\u5fc5\u8981\u3067\u3059\u3002","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"ja-jp/learn/audio/#122-\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f","text":"Siv3D \u3067\u306f\u3001WAVE, MP3, OggVorbis, FLAC \u5f62\u5f0f\u306e\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3068\u306f\u3001\u6700\u521d\u306b\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\u306e\u5168\u90e8\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u306f\u306a\u304f\u3001\u4e00\u90e8\u3060\u3051\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u306a\u304c\u3089\u3001\u7d9a\u304f\u90e8\u5206\u3092\u9010\u6b21\u8aad\u307f\u8fbc\u3080\u65b9\u5f0f\u306e\u3053\u3068\u3067\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u4f7f\u3046\u3068\u3001\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u3084\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u6642\u9593\u304c\u5927\u5e45\u306b\u6539\u5584\u3055\u308c\u307e\u3059\u3002 Audio \u3067\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Audio::Stream \u3092\u6e21\u3057\u3066\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u3082\u3057 Audio::Stream \u3092\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u81ea\u52d5\u7684\u306b\u901a\u5e38\u306e\u8aad\u307f\u8fbc\u307f\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u3042\u308b Audio \u3067\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u306f\u3001 .isStreaming() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3067\u306f \u533a\u9593\u30eb\u30fc\u30d7\u518d\u751f\u306b\u304a\u3044\u3066\u3001\u30eb\u30fc\u30d7\u672b\u5c3e\u4f4d\u7f6e\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u7d42\u7aef\u4ee5\u5916\u306b\u8a2d\u5b9a\u3067\u304d\u306a\u3044 \uff08\u97f3\u58f0\u6ce2\u5f62\u51e6\u7406\uff09\u30aa\u30fc\u30c7\u30a3\u30aa\u5168\u4f53\u306e\u97f3\u58f0\u6ce2\u5f62\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044 \uff08\u97f3\u58f0\u6ce2\u5f62\u51e6\u7406\uff09FFT \u306e\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u5c11\u306a\u304f\u306a\u308b \u3068\u3044\u3063\u305f\u4e00\u90e8\u5236\u7d04\u304c\u751f\u3058\u307e\u3059\u304c\u3001\u901a\u5e38\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f\u7528\u9014\u3067\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210\uff08\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3092\u30ea\u30af\u30a8\u30b9\u30c8\uff09 const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; // \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u306b\u306a\u308b\u304b\u3092\u53d6\u5f97 Print << audio . isStreaming (); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } }","title":"12.2 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f"},{"location":"ja-jp/learn/audio/#123-\u4e00\u6642\u505c\u6b62\u3068\u505c\u6b62","text":"\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f .pause() , \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059\u306b\u306f .stop() \u3092\u547c\u3073\u307e\u3059\u3002 \u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u518d\u751f\u4e2d\u3067\u3042\u308b\u304b\u306f .isPlaying() , \u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b\u306f .isPaused() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; while ( System :: Update ()) { ClearPrint (); // \u518d\u751f\u3055\u308c\u3066\u3044\u308b\u304b Print << U \"isPlaying: \" << audio . isPlaying (); // \u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b Print << U \"isPaused: \" << audio . isPaused (); if ( SimpleGUI :: Button ( U \"Play\" , Vec2 { 200 , 20 })) { // \u518d\u751f\u30fb\u518d\u958b audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 { 200 , 60 })) { // \u4e00\u6642\u505c\u6b62 audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 { 200 , 100 })) { // \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop (); } } }","title":"12.3 \u4e00\u6642\u505c\u6b62\u3068\u505c\u6b62"},{"location":"ja-jp/learn/audio/#124-\u97f3\u91cf\u3092\u5909\u3048\u308b","text":"\u97f3\u91cf\u3092\u5909\u3048\u308b\u306b\u306f .setVolume() \u306b 0.0\uff5e1.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u5927\u306e 1.0 \u3067\u3059\u3002 \u73fe\u5728\u306e\u97f3\u91cf\u306f .getVolume() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); double volume = 1.0 ; while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u97f3\u91cf\u3092\u53d6\u5f97 Print << audio . getVolume (); if ( SimpleGUI :: Slider ( U \"volume: {:.2f}\" _fmt ( volume ), volume , Vec2 { 200 , 20 }, 160 , 140 )) { // \u97f3\u91cf\u3092\u8a2d\u5b9a audio . setVolume ( volume ); } } }","title":"12.4 \u97f3\u91cf\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/audio/#125-\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8","text":".play() , .pause() , .stop() \u306b\u6642\u9593\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u6642\u9593\u3092\u304b\u3051\u3066\u97f3\u91cf\u304c\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; while ( System :: Update ()) { ClearPrint (); // \u518d\u751f\u3055\u308c\u3066\u3044\u308b\u304b Print << U \"isPlaying: \" << audio . isPlaying (); // \u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b Print << U \"isPaused: \" << audio . isPaused (); // \u73fe\u5728\u306e\u97f3\u91cf Print << audio . getVolume (); if ( SimpleGUI :: Button ( U \"Play\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u518d\u751f\u30fb\u518d\u958b audio . play ( 2 s ); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 { 200 , 60 })) { // 2 \u79d2\u304b\u3051\u3066\u4e00\u6642\u505c\u6b62 audio . pause ( 2 s ); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 { 200 , 100 })) { // 2 \u79d2\u304b\u3051\u3066\u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop ( 2 s ); } } }","title":"12.5 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8"},{"location":"ja-jp/learn/audio/#126-\u518d\u751f\u4e2d\u306b\u97f3\u91cf\u3092\u5f90\u3005\u306b\u5909\u3048\u308b","text":".fadeVolume(volume, duration) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u6642\u9593 duration \u3060\u3051\u304b\u3051\u3066\u3001\u97f3\u91cf\u304c\u5f90\u3005\u306b volume \u306b\u5909\u5316\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u97f3\u91cf Print << audio . getVolume (); if ( SimpleGUI :: Button ( U \"1.0\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u97f3\u91cf\u3092 1.0 \u306b audio . fadeVolume ( 1.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.5\" , Vec2 { 200 , 60 })) { // 1 \u79d2\u304b\u3051\u3066\u97f3\u91cf\u3092 0.5 \u306b audio . fadeVolume ( 0.5 , 1 s ); } if ( SimpleGUI :: Button ( U \"0.1\" , Vec2 { 200 , 100 })) { // 1.5 \u79d2\u304b\u3051\u3066\u97f3\u91cf\u3092 0.1 \u306b audio . fadeVolume ( 0.1 , 1.5 s ); } } }","title":"12.6 \u518d\u751f\u4e2d\u306b\u97f3\u91cf\u3092\u5f90\u3005\u306b\u5909\u3048\u308b"},{"location":"ja-jp/learn/audio/#127-\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b","text":"\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b\u306b\u306f .setSpeed(speed) \u307e\u305f\u306f .fadeSpeed(speed, duration) \u3092\u4f7f\u3063\u3066\u3001\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u306e\u500d\u7387\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1.0 \u3067\u3059\u3002\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u304c\u901f\u304f\u306a\u308b\u3068\u97f3\u306f\u9ad8\u304f\u805e\u3053\u3048\u3001\u9045\u304f\u306a\u308b\u3068\u4f4e\u304f\u805e\u3053\u3048\u307e\u3059\u3002\u30b9\u30d4\u30fc\u30c9\u3092\u65e9\u304f\u3057\u3066\u3082\u97f3\u306e\u9ad8\u4f4e\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b\u300c\u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u6a5f\u80fd\u300d\u3068\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002 \u73fe\u5728\u306e\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u306f .getSpeed() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u30b9\u30d4\u30fc\u30c9 Print << audio . getSpeed (); if ( SimpleGUI :: Button ( U \"1.2\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u30b9\u30d4\u30fc\u30c9\u3092 1.2 \u306b audio . fadeSpeed ( 1.2 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0\" , Vec2 { 200 , 60 })) { // 1 \u79d2\u304b\u3051\u3066\u30b9\u30d4\u30fc\u30c9\u3092 1.0 \u306b audio . fadeSpeed ( 1.0 , 1 s ); } if ( SimpleGUI :: Button ( U \"0.8\" , Vec2 { 200 , 100 })) { // 1.5 \u79d2\u304b\u3051\u3066\u30b9\u30d4\u30fc\u30c9\u3092 0.8 \u306b audio . fadeSpeed ( 0.8 , 1.5 s ); } } }","title":"12.7 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/audio/#128-\u30d1\u30f3\u3092\u5909\u3048\u308b","text":"\u5de6\u53f3\u306e\u97f3\u91cf\u30d0\u30e9\u30f3\u30b9\uff08\u30d1\u30f3\uff09\u3092\u5909\u3048\u308b\u306b\u306f .setPan(pan) \u307e\u305f\u306f .fadePan(pan, duration) \u3092\u4f7f\u3063\u3066\u3001\u30d1\u30f3\u3092 -1.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 0.0 \u3067\u3001\u5de6\u304c\u8ca0\u306e\u65b9\u5411\u3001\u53f3\u304c\u6b63\u306e\u65b9\u5411\u3067\u3059\u3002 \u73fe\u5728\u306e\u30d1\u30f3\u306f .getPan() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u73fe\u5728\u306e\u30d1\u30f3 Print << audio . getPan (); if ( SimpleGUI :: Button ( U \"0.9\" , Vec2 { 200 , 20 })) { // 2 \u79d2\u304b\u3051\u3066\u30d1\u30f3\u3092 0.9 \u306b audio . fadePan ( 0.9 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.0\" , Vec2 { 200 , 60 })) { // 1 \u79d2\u304b\u3051\u3066\u30d1\u30f3\u3092 0.0 \u306b audio . fadePan ( 0.0 , 1 s ); } if ( SimpleGUI :: Button ( U \"-0.9\" , Vec2 { 200 , 100 })) { // 1.5 \u79d2\u304b\u3051\u3066\u30d1\u30f3\u3092 -0.9 \u306b audio . fadePan ( -0.9 , 1.5 s ); } } }","title":"12.8 \u30d1\u30f3\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/audio/#129-\u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u5408\u8a08\u518d\u751f\u6642\u9593\uff08\u79d2\uff09\u306f .lengthSec() , \u5408\u8a08\u518d\u751f\u30b5\u30f3\u30d7\u30eb\u306f .samples() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e\u3092 .posSec() \u3067\u306f\u79d2\u3001 .posSample() \u3067\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u97f3\u697d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u5408\u308f\u305b\u305f\u6f14\u51fa\u3084\u3001\u97f3\u697d\u30b2\u30fc\u30e0\u306e\u5224\u5b9a\u306a\u3069\u306f\u3001\u3053\u306e\u518d\u751f\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53\u306e\u9577\u3055 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); } }","title":"12.9 \u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/audio/#1210-\u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b","text":"\u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 .seekSamples() \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001 .seekTime() \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u6642\u9593\uff08\u79d2\uff09\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); if ( SimpleGUI :: Button ( U \"0 samples\" , Vec2 { 300 , 20 })) { // 0 \u30b5\u30f3\u30d7\u30eb\u76ee\uff08\u66f2\u306e\u5148\u982d\uff09\u306b\u79fb\u52d5 audio . seekSamples ( 0 ); } if ( SimpleGUI :: Button ( U \"441,000 samples\" , Vec2 { 300 , 60 })) { // 441,000 \u30b5\u30f3\u30d7\u30eb\u76ee\u306b\u79fb\u52d5 audio . seekSamples ( 441000 ); } if ( SimpleGUI :: Button ( U \"20.0 sec\" , Vec2 { 300 , 100 })) { // 20 \u79d2\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5 audio . seekTime ( 20.0 ); } } }","title":"12.10 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/learn/audio/#1211-\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b","text":"\u66f2\u306e\u518d\u751f\u304c\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u81ea\u52d5\u7684\u306b\u5148\u982d\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Loop::Yes \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio { Audio :: Stream , U \"example/test.mp3\" , Loop :: Yes }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u30eb\u30fc\u30d7\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b Print << audio . isLoop (); // \u30eb\u30fc\u30d7\u56de\u6570 Print << audio . loopCount (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); } }","title":"12.11 \u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b"},{"location":"ja-jp/learn/audio/#1212-\u533a\u9593\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u518d\u751f\u304c\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u7d42\u7aef\u4f4d\u7f6e\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u5148\u982d\u4f4d\u7f6e\u306b\u623b\u3063\u3066\u533a\u9593\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u308b\u306b\u306f\u3001\u30eb\u30fc\u30d7\u533a\u9593\u306e\u5148\u982d\u4f4d\u7f6e\u3092 Arg::loopBegin , \u7d42\u7aef\u4f4d\u7f6e\u3092 Arg::loopEnd \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u4f4d\u7f6e\u306e\u6307\u5b9a\u65b9\u6cd5\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u304b\u6642\u9593\u304b\u3092\u9078\u3079\u307e\u3059\u304c\u3001begin \u3068 end \u3067\u63c3\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Arg::loopEnd \u3092\u6307\u5b9a\u3059\u308b\u3068\u305d\u308c\u4ee5\u964d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u306f\u4fdd\u6301\u305b\u305a\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u7bc0\u7d04\u3055\u308c\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u518d\u751f\u3067\u306f\u3001 Arg::loopEnd \u3092\u6307\u5b9a\u3067\u304d\u306a\u3044\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002\u5fc5\u8981\u306a\u5834\u5408\u306f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u3042\u3089\u304b\u3058\u3081\u30ab\u30c3\u30c8\u3057\u307e\u3059\u3002 \u30eb\u30fc\u30d7\u306e\u672b\u5c3e\u3068\u5148\u982d\u306e\u6ce2\u5f62\u306b\u305a\u308c\u304c\u3042\u308b\u3068\u3001\u30eb\u30fc\u30d7\u306e\u77ac\u9593\u306b\u30ce\u30a4\u30ba\u97f3\u304c\u751f\u3058\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 1.5 \u79d2\uff5e44.5 \u79d2\u306e\u533a\u9593\u3092\u30eb\u30fc\u30d7 const Audio audio { U \"example/test.mp3\" , Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s }; audio . play (); while ( System :: Update ()) { ClearPrint (); // \u30eb\u30fc\u30d7\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b Print << audio . isLoop (); // \u30eb\u30fc\u30d7\u56de\u6570 Print << audio . loopCount (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); } }","title":"12.12 \u533a\u9593\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b"},{"location":"ja-jp/learn/audio/#1213-\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b","text":"\u697d\u5668\u306e\u7a2e\u985e\u3068\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3092\u6307\u5b9a\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3057\u3001\u305d\u3053\u304b\u3089 Audio \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b GMInstrument \u3067\u5217\u6319\u3055\u308c\u308b\u697d\u5668\u540d\u3001 PianoKey \u3067\u5217\u6319\u3055\u308c\u308b\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3092\u6e21\u3057\u307e\u3059\u3002 \u97f3\u306e\u9577\u3055\u306f \u30ce\u30fc\u30c8\u30fb\u30aa\u30f3\uff08\u9cf4\u3089\u3059\uff09\u6642\u9593 \u30ce\u30fc\u30c8\u30fb\u30aa\u30f3\u6642\u9593\u3068\u30ce\u30fc\u30c8\u30fb\u30aa\u30d5\uff08\u9cf4\u3089\u3057\u7d42\u3048\u308b\uff09\u6642\u9593 \u306e 2 \u901a\u308a\u306e\u8a2d\u5b9a\u306e\u4ed5\u65b9\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u8005\u3067\u306f 1.0 \u79d2\u306e\u30ce\u30fc\u30c8\u30fb\u30aa\u30d5\u6642\u9593\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano { GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet { GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s }; // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3\u3002\u30ce\u30fc\u30c8\u30fb\u30aa\u30f3 2.0 \u79d2\u3001\u30ce\u30fc\u30c8\u30fb\u30aa\u30d5 0.5 \u79d2 const Audio trumpet { GMInstrument :: Trumpet , PianoKey :: E4 , 2.0 s , 0.5 s }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 { 20 , 20 })) { piano . play (); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 { 20 , 60 })) { clarinet . play (); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 { 20 , 100 })) { trumpet . play (); } } }","title":"12.13 \u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b"},{"location":"ja-jp/learn/audio/#1214-\u540c\u3058\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b","text":"1 \u3064\u306e Audio \u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306b\u306f .play() \u306e\u4ee3\u308f\u308a\u306b .playOneShot() \u3092\u4f7f\u3044\u307e\u3059\u3002 .playOneShot() \u306e\u5f15\u6570\u306b\u306f\u97f3\u91cf\u3001\u30d1\u30f3\u3001\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u6e21\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3\u3002 const Audio piano { GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet { GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s }; // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet { GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 { 20 , 20 })) { // \u97f3\u91cf 0.5 \u3067\u518d\u751f piano . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 { 20 , 60 })) { clarinet . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 { 20 , 100 })) { trumpet . playOneShot ( 0.5 ); } } }","title":"12.14 \u540c\u3058\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b"},{"location":"ja-jp/learn/audio/#1215-\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3068\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u3092 BGM, \u74b0\u5883\u97f3\u3001\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u30dc\u30a4\u30b9\u306a\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u985e\u3057\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u97f3\u91cf\u306a\u3069\u3092\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u3001 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9 \u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306f MixBus0 \uff5e MixBus3 \u306e 4 \u3064\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u3044\u305a\u308c\u304b\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3092\u901a\u3057\u3066\u518d\u751f\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f MixBus0 \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306f\u6700\u7d42\u7684\u306b \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa \u306b\u3088\u3063\u3066\u7d71\u5408\u3055\u308c\u307e\u3059\u3002 \u500b\u3005\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u3002 \u97f3\u91cf\u306e\u8abf\u6574 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb\u306e\u53d6\u5f97 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u306e FFT \u306e\u7d50\u679c\u53d6\u5f97 \u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u306e\u9069\u7528\uff08\u6b21\u7bc0\u3067\u8aac\u660e\uff09 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306f\u6b21\u306e\u3088\u3046\u306a\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u3002 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4e00\u6589\u505c\u6b62\u30fb\u518d\u958b \u97f3\u91cf\u306e\u8abf\u6574 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u30b5\u30f3\u30d7\u30eb\u306e\u53d6\u5f97 \u518d\u751f\u4e2d\u306e\u6ce2\u5f62\u306e FFT \u306e\u7d50\u679c\u53d6\u5f97 \u6700\u7d42\u7684\u306a\u51fa\u529b\u97f3\u91cf\u306f\u3001 Audio \u3067\u8a2d\u5b9a\u3055\u308c\u305f\u97f3\u91cf \u00d7 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306e\u97f3\u91cf \u00d7 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u97f3\u91cf = \u6700\u7d42\u51fa\u529b \u306b\u306a\u308a\u307e\u3059\u3002 Audio \u3092\u3069\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3067\u518d\u751f\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001 .play() \u307e\u305f\u306f .playOneShot() \u306e\u5f15\u6570\u306b MixBus0 \uff5e MixBus3 \u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f MixBus0 \uff09\u3002 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306e\u97f3\u91cf\u3092\u8abf\u6574\u3059\u308b\u306b\u306f GlobalAudio::BusSetVolume(busIndex, volume) , GlobalAudio::BusFadeVolume(busIndex, volume, duration) \u3092\u547c\u3073\u307e\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u97f3\u91cf\u3092\u8abf\u6574\u3059\u308b\u306b\u306f GlobalAudio::SetVolume(volume) , GlobalAudio::FadeVolume(volume, duration) \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio pianoC { GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; // \u30d4\u30a2\u30ce\u306e D4 (\u30ec) \u306e\u97f3 const Audio pianoD { GMInstrument :: Piano1 , PianoKey :: D4 , 0.5 s }; // \u30d4\u30a2\u30ce\u306e E4 (\u30df) \u306e\u97f3 const Audio pianoE { GMInstrument :: Piano1 , PianoKey :: E4 , 0.5 s }; double globalVolume = 1.0 , mixBus0Volume = 1.0 , mixBus1Volume = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"Global Vol\" , globalVolume , Vec2 { 20 , 20 }, 120 , 200 )) { // \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u97f3\u91cf\u3092\u5909\u66f4 GlobalAudio :: SetVolume ( globalVolume ); } if ( SimpleGUI :: Slider ( U \"Bus0 Vol\" , mixBus0Volume , Vec2 { 20 , 60 }, 120 , 120 )) { // MixBus0 \u306e\u97f3\u91cf\u3092\u5909\u66f4 GlobalAudio :: BusSetVolume ( MixBus0 , mixBus0Volume ); } if ( SimpleGUI :: Slider ( U \"Bus1 Vol\" , mixBus1Volume , Vec2 { 300 , 60 }, 120 , 120 )) { // MixBus1 \u306e\u97f3\u91cf\u3092\u5909\u66f4 GlobalAudio :: BusSetVolume ( MixBus1 , mixBus1Volume ); } if ( SimpleGUI :: Button ( U \"C Bus0\" , Vec2 { 20 , 100 })) { pianoC . playOneShot ( MixBus0 , 0.5 ); } if ( SimpleGUI :: Button ( U \"D Bus0\" , Vec2 { 20 , 140 })) { pianoD . playOneShot ( MixBus0 , 0.5 ); } if ( SimpleGUI :: Button ( U \"E Bus0\" , Vec2 { 20 , 180 })) { pianoE . playOneShot ( MixBus0 , 0.5 ); } if ( SimpleGUI :: Button ( U \"C Bus1\" , Vec2 { 300 , 100 })) { pianoC . playOneShot ( MixBus1 , 0.5 ); } if ( SimpleGUI :: Button ( U \"D Bus1\" , Vec2 { 300 , 140 })) { pianoD . playOneShot ( MixBus1 , 0.5 ); } if ( SimpleGUI :: Button ( U \"E Bus1\" , Vec2 { 300 , 180 })) { pianoE . playOneShot ( MixBus1 , 0.5 ); } } }","title":"12.15 \u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u3068\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa"},{"location":"ja-jp/learn/audio/#1216-\u30b5\u30f3\u30d7\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf","text":"1 \u3064\u306e\u30df\u30ad\u30b7\u30f3\u30b0\u30d0\u30b9\u306b\u306f\u6700\u5927 8 \u3064\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u518d\u751f\u4e2d\u306b\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306e\u97f3\u58f0\u6ce2\u5f62\u52a0\u5de5\u304c\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\uff08\u5f15\u6570\u306f\u7701\u7565) \u8aac\u660e GlobalAudio::BusClearFilter() \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a3\u30eb\u30bf\u3092\u30aa\u30d5\u306b\u3057\u307e\u3059 GlobalAudio::BusSetLowPassFilter() \u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetHighPassFilter() \u30cf\u30a4\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetEchoFilter() \u30a8\u30b3\u30fc\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetReverbFilter() \u30ea\u30d0\u30fc\u30d6\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 GlobalAudio::BusSetPitchShiftFilter() \u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059 OpenSiv3D v0.6.6 Web \u7248\u3067\u306f\u3001\u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002 GlobalAudio::SupportsPitchShift() \u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u5b9f\u884c\u74b0\u5883\u3067\u30d4\u30c3\u30c1\u30b7\u30d5\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528\u3067\u304d\u308b\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf\u6a5f\u80fd\u306e\u30c7\u30e2\u3067\u3059\u3002\u3053\u308c\u307e\u3067\u306e\u7ae0\u3067\u306f\u6271\u3063\u3066\u3044\u306a\u3044\u3001\u3044\u304f\u3064\u304b\u306e\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u300cOpen audio file\u300d\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u30d1\u30bd\u30b3\u30f3\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Audio audio ; double posSec = 0.0 ; double volume = 1.0 ; double pan = 0.0 ; double speed = 1.0 ; bool loop = false ; Array < float > busSamples ; Array < float > globalSamples ; FFTResult busFFT ; FFTResult globalFFT ; LineString lines ( 256 , Vec2 { 0 , 0 }); bool pitch = false ; double pitchShift = 0.0 ; bool lpf = false ; double lpfCutoffFrequency = 800.0 ; double lpfResonance = 0.5 ; double lpfWet = 1.0 ; bool hpf = false ; double hpfCutoffFrequency = 800.0 ; double hpfResonance = 0.5 ; double hpfWet = 1.0 ; bool echo = false ; double delay = 0.1 ; double decay = 0.5 ; double echoWet = 0.5 ; bool reverb = false ; bool freeze = false ; double roomSize = 0.5 ; double damp = 0.0 ; double width = 0.5 ; double reverbWet = 0.5 ; while ( System :: Update ()) { ClearPrint (); Print << U \"GlobalAudio::GetActiveVoiceCount(): \" << GlobalAudio :: GetActiveVoiceCount (); Print << U \"isEmpty : \" << audio . isEmpty (); Print << U \"isStreaming : \" << audio . isStreaming (); Print << U \"sampleRate : \" << audio . sampleRate (); Print << U \"samples : \" << audio . samples (); Print << U \"lengthSec : \" << audio . lengthSec (); Print << U \"posSample : \" << audio . posSample (); Print << U \"posSec : \" << ( posSec = audio . posSec ()); Print << U \"isActive : \" << audio . isActive (); Print << U \"isPlaying : \" << audio . isPlaying (); Print << U \"isPaused : \" << audio . isPaused (); Print << U \"samplesPlayed : \" << audio . samplesPlayed (); Print << U \"isLoop : \" << ( loop = audio . isLoop ()); Print << U \"getLoopTimingtLoop : \" << audio . getLoopTiming (). beginPos << U \", \" << audio . getLoopTiming (). endPos ; Print << U \"loopCount : \" << audio . loopCount (); Print << U \"getVolume : \" << ( volume = audio . getVolume ()); Print << U \"getPan : \" << ( pan = audio . getPan ()); Print << U \"getSpeed : \" << ( speed = audio . getSpeed ()); if ( SimpleGUI :: Button ( U \"Open audio file\" , Vec2 { 60 , 560 })) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio ( Audio :: Stream ); } { GlobalAudio :: BusGetSamples ( MixBus0 , busSamples ); GlobalAudio :: BusGetFFT ( MixBus0 , busFFT ); for ( auto [ i , s ] : Indexed ( busSamples )) { lines [ i ]. set (( 300.0 + i ), ( 200.0 - s * 100.0 )); } if ( busSamples ) { lines . draw ( 2 , Palette :: Orange ); } for ( auto [ i , s ] : Indexed ( busFFT . buffer )) { RectF { Arg :: bottomLeft ( 300 + i , 300 ), 1 , ( s * 4 ) }. draw (); } } { GlobalAudio :: GetSamples ( globalSamples ); GlobalAudio :: GetFFT ( globalFFT ); for ( auto [ i , s ] : Indexed ( globalSamples )) { lines [ i ]. set (( 300.0 + i ), ( 550.0 - s * 100.0 )); } if ( globalSamples ) { lines . draw ( 2 , Palette :: Orange ); } for ( auto [ i , s ] : Indexed ( globalFFT . buffer )) { RectF { Arg :: bottomLeft ( 300 + i , 650 ), 1 , ( s * 4 ) }. draw (); } } if ( SimpleGUI :: Button ( U \"Play\" , Vec2 { 600 , 20 }, 80 , ! audio . isPlaying ())) { audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 { 690 , 20 }, 80 , ( audio . isPlaying () && ! audio . isPaused ()))) { audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 { 780 , 20 }, 80 , ( audio . isPlaying () || audio . isPaused ()))) { audio . stop (); } if ( SimpleGUI :: Button ( U \"Play in 2s\" , Vec2 { 870 , 20 }, 120 , ! audio . isPlaying ())) { audio . play ( 2 s ); } if ( SimpleGUI :: Button ( U \"Pause in 2s\" , Vec2 { 1000 , 20 }, 120 , ( audio . isPlaying () && ! audio . isPaused ()))) { audio . pause ( 2 s ); } if ( SimpleGUI :: Button ( U \"Stop in 2s\" , Vec2 { 1130 , 20 }, 120 , ( audio . isPlaying () || audio . isPaused ()))) { audio . stop ( 2 s ); } if ( SimpleGUI :: Slider ( U \"{:.1f} / {:.1f}\" _fmt ( posSec , audio . lengthSec ()), posSec , 0.0 , audio . lengthSec (), Vec2 { 600 , 60 }, 160 , 360 )) { if ( MouseL . down () || ! Cursor :: DeltaF (). isZero ()) // \u30b7\u30fc\u30af\u306e\u9023\u7d9a\uff08\u30ce\u30a4\u30ba\u306e\u539f\u56e0\uff09\u3092\u9632\u3050 { audio . seekTime ( posSec ); } } if ( SimpleGUI :: CheckBox ( loop , U \"Loop\" , Vec2 { 1130 , 60 })) { audio . setLoop ( loop ); } if ( SimpleGUI :: Slider ( U \"volume: {:.2f}\" _fmt ( volume ), volume , Vec2 { 600 , 110 }, 140 , 130 )) { audio . setVolume ( volume ); } if ( SimpleGUI :: Button ( U \"0.0 in 2s\" , Vec2 { 880 , 110 }, 110 , audio . isActive ())) { audio . fadeVolume ( 0.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.5 in 2s\" , Vec2 { 1000 , 110 }, 110 , audio . isActive ())) { audio . fadeVolume ( 0.5 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0 in 2s\" , Vec2 { 1120 , 110 }, 110 , audio . isActive ())) { audio . fadeVolume ( 1.0 , 2 s ); } if ( SimpleGUI :: Slider ( U \"pan: {:.2f}\" _fmt ( pan ), pan , -1.0 , 1.0 , Vec2 { 600 , 150 }, 140 , 130 )) { audio . setPan ( pan ); } if ( SimpleGUI :: Button ( U \"-1.0 in 2s\" , Vec2 { 880 , 150 }, 110 , audio . isActive ())) { audio . fadePan ( -1.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"0.0 in 2s\" , Vec2 { 1000 , 150 }, 110 , audio . isActive ())) { audio . fadePan ( 0.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0 in 2s\" , Vec2 { 1120 , 150 }, 110 , audio . isActive ())) { audio . fadePan ( 1.0 , 2 s ); } if ( SimpleGUI :: Slider ( U \"speed: {:.3f}\" _fmt ( speed ), speed , 0.0 , 4.0 , Vec2 { 600 , 190 }, 140 , 130 )) { audio . setSpeed ( speed ); } if ( SimpleGUI :: Button ( U \"0.8 in 2s\" , Vec2 { 880 , 190 }, 110 , audio . isActive ())) { audio . fadeSpeed ( 0.8 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.0 in 2s\" , Vec2 { 1000 , 190 }, 110 , audio . isActive ())) { audio . fadeSpeed ( 1.0 , 2 s ); } if ( SimpleGUI :: Button ( U \"1.2 in 2s\" , Vec2 { 1120 , 190 }, 110 , audio . isActive ())) { audio . fadeSpeed ( 1.2 , 2 s ); } bool updatePitch = false ; bool updateLPF = false ; bool updateHPF = false ; bool updateEcho = false ; bool updateReverb = false ; if ( SimpleGUI :: CheckBox ( pitch , U \"Pitch\" , Vec2 { 600 , 240 }, 120 , GlobalAudio :: SupportsPitchShift ())) { if ( pitch ) { updatePitch = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 0 ); } } updatePitch |= SimpleGUI :: Slider ( U \"pitchShift: {:.2f}\" _fmt ( pitchShift ), pitchShift , -12.0 , 12.0 , Vec2 { 720 , 240 }, 160 , 300 ); if ( SimpleGUI :: CheckBox ( lpf , U \"LPF\" , Vec2 { 600 , 280 }, 120 )) { if ( lpf ) { updateLPF = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 1 ); } } updateLPF |= SimpleGUI :: Slider ( U \"cutoffFrequency: {:.0f}\" _fmt ( lpfCutoffFrequency ), lpfCutoffFrequency , 10 , 4000 , Vec2 { 720 , 280 }, 220 , 240 ); updateLPF |= SimpleGUI :: Slider ( U \"resonance: {:.2f}\" _fmt ( lpfResonance ), lpfResonance , 0.1 , 8.0 , Vec2 { 720 , 310 }, 220 , 240 ); updateLPF |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( lpfWet ), lpfWet , Vec2 { 720 , 340 }, 220 , 240 ); if ( SimpleGUI :: CheckBox ( hpf , U \"HPF\" , Vec2 { 600 , 380 }, 120 )) { if ( hpf ) { updateHPF = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 2 ); } } updateHPF |= SimpleGUI :: Slider ( U \"cutoffFrequency: {:.0f}\" _fmt ( hpfCutoffFrequency ), hpfCutoffFrequency , 10 , 4000 , Vec2 { 720 , 380 }, 220 , 240 ); updateHPF |= SimpleGUI :: Slider ( U \"resonance: {:.2f}\" _fmt ( hpfResonance ), hpfResonance , 0.1 , 8.0 , Vec2 { 720 , 410 }, 220 , 240 ); updateHPF |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( hpfWet ), hpfWet , Vec2 { 720 , 440 }, 220 , 240 ); if ( SimpleGUI :: CheckBox ( echo , U \"Echo\" , Vec2 { 600 , 480 }, 120 )) { if ( echo ) { updateEcho = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 3 ); } } updateEcho |= SimpleGUI :: Slider ( U \"delay: {:.2f}\" _fmt ( delay ), delay , Vec2 { 720 , 480 }, 220 , 240 ); updateEcho |= SimpleGUI :: Slider ( U \"decay: {:.2f}\" _fmt ( decay ), decay , Vec2 { 720 , 510 }, 220 , 240 ); updateEcho |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( echoWet ), echoWet , Vec2 { 720 , 540 }, 220 , 240 ); if ( SimpleGUI :: CheckBox ( reverb , U \"Reverb\" , Vec2 { 600 , 580 }, 120 )) { if ( reverb ) { updateReverb = true ; } else { GlobalAudio :: BusClearFilter ( MixBus0 , 4 ); } } updateReverb |= SimpleGUI :: CheckBox ( freeze , U \"freeze\" , Vec2 { 720 , 580 }, 110 ); updateReverb |= SimpleGUI :: Slider ( U \"roomSize: {:.2f}\" _fmt ( roomSize ), roomSize , 0.001 , 1.0 , { 830 , 580 }, 150 , 200 ); updateReverb |= SimpleGUI :: Slider ( U \"damp: {:.2f}\" _fmt ( damp ), damp , Vec2 { 720 , 610 }, 220 , 240 ); updateReverb |= SimpleGUI :: Slider ( U \"width: {:.2f}\" _fmt ( width ), width , Vec2 { 720 , 640 }, 220 , 240 ); updateReverb |= SimpleGUI :: Slider ( U \"wet: {:.2f}\" _fmt ( reverbWet ), reverbWet , Vec2 { 720 , 670 }, 220 , 240 ); if ( pitch && updatePitch ) { GlobalAudio :: BusSetPitchShiftFilter ( MixBus0 , 0 , pitchShift ); } if ( lpf && updateLPF ) { GlobalAudio :: BusSetLowPassFilter ( MixBus0 , 1 , lpfCutoffFrequency , lpfResonance , lpfWet ); } if ( hpf && updateHPF ) { GlobalAudio :: BusSetHighPassFilter ( MixBus0 , 2 , hpfCutoffFrequency , hpfResonance , hpfWet ); } if ( echo && updateEcho ) { GlobalAudio :: BusSetEchoFilter ( MixBus0 , 3 , delay , decay , echoWet ); } if ( reverb && updateReverb ) { GlobalAudio :: BusSetReverbFilter ( MixBus0 , 4 , freeze , roomSize , damp , width , reverbWet ); } } // \u518d\u751f\u4e2d\u306e\u97f3\u58f0\u304c\u3042\u308c\u3070\u3001\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3055\u305b\u3066\u304b\u3089\u7d42\u4e86 if ( GlobalAudio :: GetActiveVoiceCount ()) { GlobalAudio :: FadeVolume ( 0.0 , 0.5 s ); System :: Sleep ( 0.5 s ); } }","title":"12.16 \uff08\u30b5\u30f3\u30d7\u30eb\uff09\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a3\u30eb\u30bf"},{"location":"ja-jp/learn/audio/#1217-\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa","text":"\u30c7\u30fc\u30bf\u3092\u6301\u305f\u306a\u3044\u7a7a\uff08\u304b\u3089\uff09\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3059\u308b\u3068\u3001\u300c\u30d5\u30ef\u300d\u3068\u9cf4\u308b 0.5 \u79d2\u306e\u97f3\u304c\u518d\u751f\u3055\u308c\u307e\u3059\u3002\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u3082\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u7a7a\u3067\u3042\u308b\u304b\u306f if (audio.isEmpty()) \u3082\u3057\u304f\u306f if (not audio) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u3044\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b Audio audioA ; if ( not audioA ) { Print << U \"audioA is empty\" ; } // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b Audio audioB { U \"aaa/bbb.wav\" }; if ( not audioB ) { Print << U \"audioB is empty\" ; } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Play A\" , Vec2 { 200 , 20 })) { audioA . playOneShot (); } if ( SimpleGUI :: Button ( U \"Play B\" , Vec2 { 200 , 60 })) { audioB . playOneShot (); } } }","title":"12.17 \u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa"},{"location":"ja-jp/learn/audio/#1218-\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4ee3\u5165","text":"Audio \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ; while ( System :: Update ()) { ClearPrint (); Print << audio . isEmpty (); // \u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( not audio ) && MouseL . down ()) { // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4f5c\u6210\u3057\u3066\u4ee3\u5165 audio = Audio { Audio :: Stream , U \"example/test.mp3\" }; audio . play (); } } }","title":"12.18 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4ee3\u5165"},{"location":"ja-jp/learn/basic/","text":"2. Siv3D \u306e\u57fa\u672c \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 2.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0 \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f <Siv3D.hpp> \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> \u7d4c\u9a13\u306e\u3042\u308b C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u3067\u3042\u308b\u5834\u5408\u3001\u307b\u304b\u306b\u3082 <iostream> \u3084 <vector> \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306f\u4e0d\u8981\u3067\u3059\u3002\u3059\u3067\u306b <Siv3D.hpp> \u306e\u4e2d\u3067\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u306f\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u4e0d\u8981\u306a\u30d8\u30c3\u30c0\u306e\u4f8b <string> \u00b6 Siv3D.hpp \u5185\u3067\u3059\u3067\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::string \u306e\u7f6e\u304d\u63db\u3048\u3068\u3057\u3066 String \u304c\u3042\u308a\u307e\u3059\u3002 <vector> \u00b6 Siv3D.hpp \u5185\u3067\u3059\u3067\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::vector \u306e\u7f6e\u304d\u63db\u3048\u3068\u3057\u3066 Array \u304c\u3042\u308a\u307e\u3059\u3002 <fstream> \u00b6 std::ofstream \u306e\u7f6e\u304d\u63db\u3048\u3068\u3057\u3066 TextWriter \u3084 BinaryWriter \u304c\u3042\u308a\u307e\u3059\u3002 std::ifstream \u306e\u7f6e\u304d\u63db\u3048\u3068\u3057\u3066 TextReader \u3084 BinaryReader \u304c\u3042\u308a\u307e\u3059\u3002 <cmath> \u00b6 Siv3D.hpp \u5185\u3067\u3059\u3067\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Math:: \u540d\u524d\u7a7a\u9593\u306b\u4e3b\u8981\u306a\u6570\u5b66\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 <filesystem> \u00b6 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u304c FileSystem:: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 C++ \u306e\u6587\u6cd5\u5fa9\u7fd2\u300cinclude\u300d # include <\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9> \u307e\u305f\u306f # include \"\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\" \u3067\u3001\u30d8\u30c3\u30c0 \u30d1\u30b9 \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 # include <Siv3D.hpp> \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D.hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 2.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 \u00b6 \u901a\u5e38\u306e C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main() \u3067\u3059\u304c\u3001Siv3D \u3067\u306f main() \u95a2\u6570\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306b\u3059\u3067\u306b\u5b9f\u88c5\u6e08\u307f\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002Siv3D \u306e\u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u306e\u306f Main() \u95a2\u6570\u3067\u3059\u3002 // Siv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u306b\u3042\u308b\u30b3\u30fc\u30c9\uff08\u8aac\u660e\u306e\u305f\u3081\u306b\u7c21\u7565\u5316\u3057\u3066\u3044\u307e\u3059\uff09 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } Main() \u95a2\u6570\u306e\u524d\u3067\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u304a\u304b\u3052\u3067\u3001 Main() \u95a2\u6570\u306e\u4e2d\u3067\u306f\u4f55\u3082\u305b\u305a\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001 Main() \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3042\u3068\u306b\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u306a\u3069\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306e\u7d42\u4e86\u51e6\u7406\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002 2.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u306e Main() \u95a2\u6570\u306f\u4e00\u77ac\u3067\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u8868\u793a\u3055\u308c\u305a\u3001\u4f55\u3082\u8d77\u3053\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 C++ \u306e\u6587\u6cd5\u5fa9\u7fd2\u300c\u95a2\u6570\u306e\u5b9a\u7fa9\u300d \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002 2.4 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3057\u7d9a\u3051\u308b \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3092\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308c\u307e\u305b\u3093\u3002 Main() \u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u7d9a\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } while \u6587\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304d\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System::Update() \u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u306e\u5165\u529b\u306e\u53d6\u5f97\u306a\u3069\u3092\u7d99\u7d9a\u7684\u306b\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 System::Update() \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3059\u305f\u3081\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3044\u3064\u307e\u3067\u3082\u7d9a\u304d\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001 Esc \u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main() \u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u4ee5\u4e0b\u306e 3 \u3064\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u64cd\u4f5c\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b Esc \u3092\u62bc\u3059 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c System::Exit() \u3092\u547c\u3076 \u3053\u306e\u8a2d\u5b9a\u306f\u3001 System::SetTerminationTriggers() \u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3082\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u304b\u3001System::Exit() \u3092\u547c\u3076\u64cd\u4f5c\u3092\u7d42\u4e86\u64cd\u4f5c\u306b\u8a2d\u5b9a, // \u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3082\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u308b System :: SetTerminationTriggers ( UserAction :: CloseButtonClicked ); while ( System :: Update ()) { } } \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30e2\u30cb\u30bf\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306b\u76f4\u8fd1\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u8868\u793a Window :: SetTitle ( Profiler :: FPS ()); } } 2.5 \u30c7\u30d0\u30c3\u30b0\u8868\u793a \u00b6 \u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f U\" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f UTF-32 \u3068\u3044\u3046\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3 \" \u306e\u5148\u982d\u306b\u306f\u5e38\u306b U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u3001 U\"Hello\" \u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 2.6 \u3055\u307e\u3056\u307e\u306a\u5024\u306e\u8868\u793a \u00b6 Siv3D \u3067\u63d0\u4f9b\u3055\u308c\u308b\u578b\u306e\u307b\u3068\u3093\u3069\u306f Print \u3067\u5024\u306e\u5185\u5bb9\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb Print << U \"Hello, Siv3D!\" ; // << \u306e\u9023\u7d9a Print << U \"This\" << U \" is \" << U \"fun!\" ; // \u6587\u5b57\u30ea\u30c6\u30e9\u30eb Print << U '\u3042' ; // \u6574\u6570 Print << 100 * 5 + 5 ; // \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << U \"\u03c0 = \" << Math :: Pi ; // bool Print << Math :: IsPrime ( 65537 ); // \u6642\u9593\u578b Print << 1 h + 3 s ; // \u6570\u5f0f\u30d1\u30fc\u30b5\u306e\u7d50\u679c (double \u578b\uff09 Print << Eval ( U \"10^3 + sqrt(81) + 0.001\" ); // \u7bc4\u56f2 Print << Range ( 0 , 10 ); // \u65e5\u4ed8\u3068\u6642\u523b\u30af\u30e9\u30b9 Print << DateTime :: Now (); while ( System :: Update ()) { } } 2.7 \u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u3042\u3075\u308c \u00b6 \u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u3089\u308c\u307e\u3059\u3002\u753b\u9762\u5916\u306b\u51fa\u305f\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u53bb\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } 2.8 \u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u6d88\u53bb \u00b6 ClearPrint() \u3092\u4f7f\u3046\u3068\u3001 Print \u3067\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3057\u305f\u5185\u5bb9\u3092\u5373\u5ea7\u306b\u6d88\u53bb\u3057\u307e\u3059\u3002 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint() \u3059\u308b\u3068\u3001\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067 Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb ClearPrint (); Print << count ; ++ count ; } } 2.9 \u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b \u00b6 Siv3D \u306e\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3088\u304f\u4f7f\u3046\u91cd\u8981\u306a\u3082\u306e\u306b \u2605 \u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002 \u6570\u5024 \u00b6 \u578b\u540d \u8aac\u660e bool \u2605 \u30d6\u30fc\u30ea\u30a2\u30f3\u578b\uff08 false \u307e\u305f\u306f true \uff09 int8 \u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u578b\uff08-128 \uff5e 127\uff09 uint8 \u7b26\u53f7\u7121\u3057 8-bit \u6574\u6570\u578b\uff080 \uff5e 255\uff09 int16 \u7b26\u53f7\u4ed8\u304d 16-bit \u6574\u6570\u578b\uff08-32,768 \uff5e 32,767\uff09 uint16 \u7b26\u53f7\u7121\u3057 16-bit \u6574\u6570\u578b\uff080 \uff5e 65,535\uff09 int32 \u2605 \u7b26\u53f7\u4ed8\u304d 32-bit \u6574\u6570\u578b\uff08-2,147,483,648 \uff5e 2,147,483,647\uff09 uint32 \u2605 \u7b26\u53f7\u7121\u3057 32-bit \u6574\u6570\u578b\uff080 \uff5e 4,294,967,295\uff09 int64 \u7b26\u53f7\u4ed8\u304d 64-bit \u6574\u6570\u578b\uff08-9,223,372,036,854,775,808 \uff5e 9,223,372,036,854,775,807\uff09 uint64 \u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 int128 \u7b26\u53f7\u4ed8\u304d 128-bit \u6574\u6570\u578b uint128 \u7b26\u53f7\u7121\u3057 128-bit \u6574\u6570\u578b float \u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b double \u2605 \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b size_t \u2605 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u8868\u73fe\u3059\u308b\u7b26\u53f7\u7121\u3057 64-bit \u6574\u6570\u578b\uff080 \uff5e 18,446,744,073,709,551,615\uff09 BigInt \u4efb\u610f\u7cbe\u5ea6\u591a\u500d\u9577\u6574\u6570\u578b HalfFloat \u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b BigFloat \u6709\u52b9\u6570\u5b57 100 \u6841\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b \u6587\u5b57\u3084\u6587\u5b57\u5217 \u00b6 \u578b\u540d \u8aac\u660e char8 UTF-8 \u306e 1 \u8981\u7d20\uff08 char \u306e\u5225\u540d\uff09 char16 UTF-16 \u306e 1 \u8981\u7d20\uff08 char16_t \u306e\u5225\u540d\uff09 char32 \u2605 UTF-32 \u306e 1 \u8981\u7d20\uff08 char32_t \u306e\u5225\u540d\uff09 String \u2605 \u6587\u5b57\u5217\u30af\u30e9\u30b9\u3002\u8981\u7d20\u306f char32 StringView \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9 FilePath \u2605 \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\uff08 String \u306e\u5225\u540d\uff09 FilePathView \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc\uff08 StringView \u306e\u5225\u540d\uff09 \u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u578b\u540d \u8aac\u660e Array<Type, Allocator> \u2605 \u52d5\u7684\u914d\u5217\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::vector \u306e\u7f6e\u304d\u63db\u3048\uff09 Grid<Type, Allocator> \u2605 \u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217 HashSet<Type, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Set\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_set \u306e\u7f6e\u304d\u63db\u3048\uff09 HashTable<Key, Value, Hash, Eq, Alloc> \u2605 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Map\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_map \u306e\u7f6e\u304d\u63db\u3048\uff09 None_t Optional \u578b\u3067\u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\uff08 std::nullopt_t \u306e\u5225\u540d\uff09 Optional<Type> \u2605 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u578b\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::optional \u306e\u7f6e\u304d\u63db\u3048\uff09 std::array<Type, size_t> \u2605 \u56fa\u5b9a\u9577\u914d\u5217 Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int32 , uint64 \u306e\u3088\u3046\u306a\u660e\u793a\u7684\u306a\u30b5\u30a4\u30ba\u3092\u6301\u3064\u578b\u540d\u3092\u4f7f\u3044\u3001 int , unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002\u524d\u8005\u306e\u3088\u3046\u306a\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { bool a = true ; int32 b = 123 ; double c = 0.5 ; BigInt d = 111222333444555666777888999000 _big ; BigFloat e = 0.1234567890123456789 _bigF ; Byte f { 0xF7 }; char32 g = U '\u3042' ; String h = U \"Hello!\" ; Array < int32 > i = { 10 , 20 , 30 , 40 }; Array < String > j = { U \"aaa\" , U \"bbb\" }; HalfFloat k = 3.333333f ; Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; Print << h ; Print << i << U \" : \" << i . size (); Print << j << U \" : \" << j . size (); Print << k << U \" : \" << sizeof ( k ); while ( System :: Update ()) { } } 2.10 Print \u4ee5\u5916\u306e\u51fa\u529b \u00b6 Print \u4ee5\u5916\u306b\u3082\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b Console , \u30ed\u30b0\u51fa\u529b Logger , \u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u51fa\u529b Say \u3092\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u306b\u51fa\u529b Console << U \"Hello, Console!\" ; // \u30ed\u30b0\u306b\u51fa\u529b (Visual Studio \u306e\u5834\u5408\u300c\u51fa\u529b\u300d\u30a6\u30a3\u30f3\u30c9\u30a6\uff09 Logger << U \"Hello, Logger!\" ; // \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8aad\u307f\u4e0a\u3052\u8a00\u8a9e\u3092\u8a2d\u5b9a\uff08OS \u306b\u8aad\u307f\u4e0a\u3052\u30a8\u30f3\u30b8\u30f3\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u4f7f\u3048\u306a\u3044\uff09 TextToSpeech :: SetDefaultLanguage ( LanguageCode :: EnglishUS ); //TextToSpeech::SetDefaultLanguage(LanguageCode::Japanese); // \u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u51fa\u529b Say << U \"Hello, Say!\" ; while ( System :: Update ()) { } } 2.11 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762\uff08\u30b7\u30fc\u30f3\uff09 \u3067\u3059\u3002Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19\u304c 0\u300d\u300cY \u5ea7\u6a19\u304c 0\u300d\u3092\u8868\u3059 (0, 0) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f (799, 599) \u3067\u3059\u3002 Cursor::Pos() \u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u6210\u5206\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002 Point \u578b\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } } 2.12 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u64cd\u4f5c \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b Esc \u3092\u62bc\u3059 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c System::Exit() \u3092\u547c\u3076 \u3053\u306e\u52d5\u4f5c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u306f\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 2.4 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u4fdd\u5b58\u3059\u308b \u00b6 Print Screen \u3092\u62bc\u3059 F12 \u3092\u62bc\u3059 \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e Screenshot \u30d5\u30a9\u30eb\u30c0\u3001\u307e\u305f\u306f\u30d4\u30af\u30c1\u30e3\u30d5\u30a9\u30eb\u30c0\u306b\u5b9f\u884c\u4e2d\u306e\u753b\u9762\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u4e0a\u7d1a\u8005\u5411\u3051 ScreenCapture::SetShortcutKeys() \u3092\u4f7f\u3063\u3066\u3001\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u4fdd\u5b58\u3059\u308b\u3088\u3046\u8a2d\u5b9a ScreenCapture :: SetShortcutKeys ({ KeyA }); while ( System :: Update ()) { Circle { Scene :: Center (), 100 }. draw (); } } \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8868\u793a\u3059\u308b \u00b6 F1 \u3092\u62bc\u3059 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092 Web \u30d6\u30e9\u30a6\u30b6\u3067\u8868\u793a\u3057\u307e\u3059\u3002 \u4e0a\u7d1a\u8005\u5411\u3051 LicenseManager:: \u540d\u524d\u7a7a\u9593\u306e\u95a2\u6570\u3092\u4f7f\u3044\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002 LicenseManager::ShowInBrowser() \u3092\u547c\u3076\u3053\u3068\u3067\u660e\u793a\u7684\u306b\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \"Licenses\" \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Licenses\" , Vec2 { 20 , 20 })) { // \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8868\u793a LicenseManager :: ShowInBrowser (); } } } \u5168\u753b\u9762\u8868\u793a\u306b\u3059\u308b\uff08Windows \u306e\u307f\uff09 \u00b6 Alt + Enter \u3092\u62bc\u3059 \u3082\u3046\u4e00\u5ea6\u3001 Alt + Enter \u3092\u62bc\u3059\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u8868\u793a\u306b\u623b\u308a\u307e\u3059\u3002","title":"2. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/learn/basic/#2-siv3d-\u306e\u57fa\u672c","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"2. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/learn/basic/#21-\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f <Siv3D.hpp> \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> \u7d4c\u9a13\u306e\u3042\u308b C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u3067\u3042\u308b\u5834\u5408\u3001\u307b\u304b\u306b\u3082 <iostream> \u3084 <vector> \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306f\u4e0d\u8981\u3067\u3059\u3002\u3059\u3067\u306b <Siv3D.hpp> \u306e\u4e2d\u3067\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u306f\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u4e0d\u8981\u306a\u30d8\u30c3\u30c0\u306e\u4f8b","title":"2.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0"},{"location":"ja-jp/learn/basic/#22-\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8","text":"\u901a\u5e38\u306e C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main() \u3067\u3059\u304c\u3001Siv3D \u3067\u306f main() \u95a2\u6570\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306b\u3059\u3067\u306b\u5b9f\u88c5\u6e08\u307f\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002Siv3D \u306e\u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u306e\u306f Main() \u95a2\u6570\u3067\u3059\u3002 // Siv3D \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u306b\u3042\u308b\u30b3\u30fc\u30c9\uff08\u8aac\u660e\u306e\u305f\u3081\u306b\u7c21\u7565\u5316\u3057\u3066\u3044\u307e\u3059\uff09 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } Main() \u95a2\u6570\u306e\u524d\u3067\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u304a\u304b\u3052\u3067\u3001 Main() \u95a2\u6570\u306e\u4e2d\u3067\u306f\u4f55\u3082\u305b\u305a\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001 Main() \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3042\u3068\u306b\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u306a\u3069\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306e\u7d42\u4e86\u51e6\u7406\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002","title":"2.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8"},{"location":"ja-jp/learn/basic/#23-\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0","text":"\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u306e Main() \u95a2\u6570\u306f\u4e00\u77ac\u3067\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u8868\u793a\u3055\u308c\u305a\u3001\u4f55\u3082\u8d77\u3053\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 C++ \u306e\u6587\u6cd5\u5fa9\u7fd2\u300c\u95a2\u6570\u306e\u5b9a\u7fa9\u300d \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002","title":"2.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/learn/basic/#24-\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3057\u7d9a\u3051\u308b","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3092\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308c\u307e\u305b\u3093\u3002 Main() \u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u7d9a\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } while \u6587\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304d\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System::Update() \u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u306e\u5165\u529b\u306e\u53d6\u5f97\u306a\u3069\u3092\u7d99\u7d9a\u7684\u306b\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 System::Update() \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3059\u305f\u3081\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3044\u3064\u307e\u3067\u3082\u7d9a\u304d\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001 Esc \u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main() \u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u4ee5\u4e0b\u306e 3 \u3064\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u64cd\u4f5c\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b Esc \u3092\u62bc\u3059 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c System::Exit() \u3092\u547c\u3076 \u3053\u306e\u8a2d\u5b9a\u306f\u3001 System::SetTerminationTriggers() \u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3082\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u304b\u3001System::Exit() \u3092\u547c\u3076\u64cd\u4f5c\u3092\u7d42\u4e86\u64cd\u4f5c\u306b\u8a2d\u5b9a, // \u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3082\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u308b System :: SetTerminationTriggers ( UserAction :: CloseButtonClicked ); while ( System :: Update ()) { } } \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30e2\u30cb\u30bf\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306b\u76f4\u8fd1\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u8868\u793a Window :: SetTitle ( Profiler :: FPS ()); } }","title":"2.4 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3057\u7d9a\u3051\u308b"},{"location":"ja-jp/learn/basic/#25-\u30c7\u30d0\u30c3\u30b0\u8868\u793a","text":"\u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f U\" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f UTF-32 \u3068\u3044\u3046\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3 \" \u306e\u5148\u982d\u306b\u306f\u5e38\u306b U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u3001 U\"Hello\" \u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002","title":"2.5 \u30c7\u30d0\u30c3\u30b0\u8868\u793a"},{"location":"ja-jp/learn/basic/#26-\u3055\u307e\u3056\u307e\u306a\u5024\u306e\u8868\u793a","text":"Siv3D \u3067\u63d0\u4f9b\u3055\u308c\u308b\u578b\u306e\u307b\u3068\u3093\u3069\u306f Print \u3067\u5024\u306e\u5185\u5bb9\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb Print << U \"Hello, Siv3D!\" ; // << \u306e\u9023\u7d9a Print << U \"This\" << U \" is \" << U \"fun!\" ; // \u6587\u5b57\u30ea\u30c6\u30e9\u30eb Print << U '\u3042' ; // \u6574\u6570 Print << 100 * 5 + 5 ; // \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << U \"\u03c0 = \" << Math :: Pi ; // bool Print << Math :: IsPrime ( 65537 ); // \u6642\u9593\u578b Print << 1 h + 3 s ; // \u6570\u5f0f\u30d1\u30fc\u30b5\u306e\u7d50\u679c (double \u578b\uff09 Print << Eval ( U \"10^3 + sqrt(81) + 0.001\" ); // \u7bc4\u56f2 Print << Range ( 0 , 10 ); // \u65e5\u4ed8\u3068\u6642\u523b\u30af\u30e9\u30b9 Print << DateTime :: Now (); while ( System :: Update ()) { } }","title":"2.6 \u3055\u307e\u3056\u307e\u306a\u5024\u306e\u8868\u793a"},{"location":"ja-jp/learn/basic/#27-\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u3042\u3075\u308c","text":"\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u3089\u308c\u307e\u3059\u3002\u753b\u9762\u5916\u306b\u51fa\u305f\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u53bb\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } }","title":"2.7 \u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u3042\u3075\u308c"},{"location":"ja-jp/learn/basic/#28-\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u6d88\u53bb","text":"ClearPrint() \u3092\u4f7f\u3046\u3068\u3001 Print \u3067\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3057\u305f\u5185\u5bb9\u3092\u5373\u5ea7\u306b\u6d88\u53bb\u3057\u307e\u3059\u3002 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint() \u3059\u308b\u3068\u3001\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067 Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb ClearPrint (); Print << count ; ++ count ; } }","title":"2.8 \u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u6d88\u53bb"},{"location":"ja-jp/learn/basic/#29-\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b","text":"Siv3D \u306e\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3088\u304f\u4f7f\u3046\u91cd\u8981\u306a\u3082\u306e\u306b \u2605 \u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002","title":"2.9 \u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b"},{"location":"ja-jp/learn/basic/#210-print-\u4ee5\u5916\u306e\u51fa\u529b","text":"Print \u4ee5\u5916\u306b\u3082\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b Console , \u30ed\u30b0\u51fa\u529b Logger , \u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u51fa\u529b Say \u3092\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u306b\u51fa\u529b Console << U \"Hello, Console!\" ; // \u30ed\u30b0\u306b\u51fa\u529b (Visual Studio \u306e\u5834\u5408\u300c\u51fa\u529b\u300d\u30a6\u30a3\u30f3\u30c9\u30a6\uff09 Logger << U \"Hello, Logger!\" ; // \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8aad\u307f\u4e0a\u3052\u8a00\u8a9e\u3092\u8a2d\u5b9a\uff08OS \u306b\u8aad\u307f\u4e0a\u3052\u30a8\u30f3\u30b8\u30f3\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u4f7f\u3048\u306a\u3044\uff09 TextToSpeech :: SetDefaultLanguage ( LanguageCode :: EnglishUS ); //TextToSpeech::SetDefaultLanguage(LanguageCode::Japanese); // \u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u51fa\u529b Say << U \"Hello, Say!\" ; while ( System :: Update ()) { } }","title":"2.10 Print \u4ee5\u5916\u306e\u51fa\u529b"},{"location":"ja-jp/learn/basic/#211-\u753b\u9762\u306e\u5ea7\u6a19\u7cfb","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762\uff08\u30b7\u30fc\u30f3\uff09 \u3067\u3059\u3002Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19\u304c 0\u300d\u300cY \u5ea7\u6a19\u304c 0\u300d\u3092\u8868\u3059 (0, 0) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f (799, 599) \u3067\u3059\u3002 Cursor::Pos() \u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u6210\u5206\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002 Point \u578b\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"2.11 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb"},{"location":"ja-jp/learn/basic/#212-\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u64cd\u4f5c","text":"","title":"2.12 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u64cd\u4f5c"},{"location":"ja-jp/learn/basic/#\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b Esc \u3092\u62bc\u3059 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c System::Exit() \u3092\u547c\u3076 \u3053\u306e\u52d5\u4f5c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u306f\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 2.4 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b"},{"location":"ja-jp/learn/basic/#\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u4fdd\u5b58\u3059\u308b","text":"Print Screen \u3092\u62bc\u3059 F12 \u3092\u62bc\u3059 \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e Screenshot \u30d5\u30a9\u30eb\u30c0\u3001\u307e\u305f\u306f\u30d4\u30af\u30c1\u30e3\u30d5\u30a9\u30eb\u30c0\u306b\u5b9f\u884c\u4e2d\u306e\u753b\u9762\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u4e0a\u7d1a\u8005\u5411\u3051 ScreenCapture::SetShortcutKeys() \u3092\u4f7f\u3063\u3066\u3001\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u4fdd\u5b58\u3059\u308b\u3088\u3046\u8a2d\u5b9a ScreenCapture :: SetShortcutKeys ({ KeyA }); while ( System :: Update ()) { Circle { Scene :: Center (), 100 }. draw (); } }","title":"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u4fdd\u5b58\u3059\u308b"},{"location":"ja-jp/learn/basic/#\u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8868\u793a\u3059\u308b","text":"F1 \u3092\u62bc\u3059 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092 Web \u30d6\u30e9\u30a6\u30b6\u3067\u8868\u793a\u3057\u307e\u3059\u3002 \u4e0a\u7d1a\u8005\u5411\u3051 LicenseManager:: \u540d\u524d\u7a7a\u9593\u306e\u95a2\u6570\u3092\u4f7f\u3044\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002 LicenseManager::ShowInBrowser() \u3092\u547c\u3076\u3053\u3068\u3067\u660e\u793a\u7684\u306b\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \"Licenses\" \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Licenses\" , Vec2 { 20 , 20 })) { // \u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8868\u793a LicenseManager :: ShowInBrowser (); } } }","title":"\u30e9\u30a4\u30bb\u30f3\u30b9\u60c5\u5831\u3092\u8868\u793a\u3059\u308b"},{"location":"ja-jp/learn/basic/#\u5168\u753b\u9762\u8868\u793a\u306b\u3059\u308bwindows-\u306e\u307f","text":"Alt + Enter \u3092\u62bc\u3059 \u3082\u3046\u4e00\u5ea6\u3001 Alt + Enter \u3092\u62bc\u3059\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u8868\u793a\u306b\u623b\u308a\u307e\u3059\u3002","title":"\u5168\u753b\u9762\u8868\u793a\u306b\u3059\u308b\uff08Windows \u306e\u307f\uff09"},{"location":"ja-jp/learn/data-structure/","text":"6. \u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u6587\u5b57\u3084\u6587\u5b57\u5217 \u00b6 \u6587\u5b57\u3084\u6587\u5b57\u5217\u306b\u95a2\u3059\u308b\u4e3b\u306a\u578b\u3001\u30af\u30e9\u30b9 \u578b\u540d \u8aac\u660e char32 UTF-32 \u306e 1 \u8981\u7d20\uff08 char32_t \u306e\u5225\u540d\uff09 String \u6587\u5b57\u5217\u30af\u30e9\u30b9\u3002\u8981\u7d20\u306f char32 \u30c7\u30fc\u30bf\u69cb\u9020\u306b\u95a2\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9 \u578b\u540d \u8aac\u660e Array<Type, Allocator> \u52d5\u7684\u914d\u5217\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::vector \u306e\u7f6e\u304d\u63db\u3048\uff09 Grid<Type, Allocator> \u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217 HashSet<Type, Hash, Eq, Alloc> \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Set\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_set \u306e\u7f6e\u304d\u63db\u3048\uff09 HashTable<Key, Value, Hash, Eq, Alloc> \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u3088\u308b Map\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::unordered_map \u306e\u7f6e\u304d\u63db\u3048\uff09 Optional<Type> \u7121\u52b9\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u578b\uff08C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::optional \u306e\u7f6e\u304d\u63db\u3048\uff09 std::array<Type, size_t> \u56fa\u5b9a\u9577\u914d\u5217 6.1 \u6587\u5b57\u5217\u30af\u30e9\u30b9 \u00b6 Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8868\u73fe\u3059\u308b char32 \u578b\uff08\u6587\u5b57\uff09\u306e\u96c6\u5408\u3067\u3059\u3002UTF-32 \u306e\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f\u3001 U'\u3042' , U\"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 String \u306e\u5185\u90e8\u30c7\u30fc\u30bf\u306f std::u32string \u3067\u3001\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u306f\u30e1\u30e2\u30ea\u4e0a\u3067\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002Siv3D \u306e String \u306f C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6587\u5b57\u5217\u30af\u30e9\u30b9\u3088\u308a\u591a\u304f\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u69d8\u3005\u306a\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002 6.1.1 String \u306e\u57fa\u672c \u00b6 .size() \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String s = U \"Siv3D\" ; Print << s ; // \u6587\u5b57\u5217\u306e\u9577\u3055 Print << s . size (); while ( System :: Update ()) { } } 6.1.2 \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6587\u5b57\u306b\u30a2\u30af\u30bb\u30b9 \u00b6 [] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front() , .back() \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u305e\u308c\u5148\u982d\u3001\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { String s = U \"Siv3D\" ; // 0 \u756a\u76ee\u306e\u8981\u7d20 Print << s [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20 Print << s [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20 Print << s . front (); // \u672b\u5c3e\u306e\u8981\u7d20 Print << s . back (); s [ 3 ] = U '4' ; Print << s ; while ( System :: Update ()) { } } 6.1.3 \u7a7a\u306e\u6587\u5b57\u5217 \u00b6 \u8981\u7d20\u3092\u4fdd\u6301\u3057\u3066\u3044\u306a\u3044\u6587\u5b57\u5217\u3092\u300c\u7a7a\u306e\u6587\u5b57\u5217\u300d\u3068\u547c\u3073\u307e\u3059\u3002 String \u578b\u306e\u5024 s \u304c\u7a7a\u3067\u3042\u308b\u304b\u306f\u3001 if (s.isEmpty()) \u3084 if (s) / if (not s) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 not \u306f ! \u3068\u540c\u3058\u3067\u3059\u3002Siv3D \u3067\u306f ! \u3088\u308a\u3082\u8996\u8a8d\u6027\u306e\u9ad8\u3044 not \u3092\u4f7f\u3046\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { String s ; if ( s . isEmpty ()) { Print << U \"s.isEmpty()\" ; } if ( not s ) { Print << U \"not s\" ; } while ( System :: Update ()) { } } 6.1.4 \u6587\u5b57\u30fb\u6587\u5b57\u5217\u306e\u8ffd\u52a0 \u00b6 \u5225\u306e\u6587\u5b57\u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u306b\u306f << \u3092\u4f7f\u3044\u307e\u3059\u3002\u5225\u306e\u6587\u5b57\u5217\u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u306b\u306f += \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { String s ; s << U 'S' << 'i' ; Print << s ; s += U \"v3D\" ; Print << s ; while ( System :: Update ()) { } } 6.1.5 \u6587\u5b57\u5217\u306e\u6d88\u53bb \u00b6 .clear() \u3092\u4f7f\u3046\u3068\u81ea\u8eab\u306e\u6587\u5b57\u5217\u3092\u6d88\u53bb\u3057\u3066\u7a7a\u306e\u6587\u5b57\u5217\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { String s = U \"Siv3D\" ; Print << s ; s = U \"Hello\" ; Print << s ; s . clear (); // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 Print << s ; s = U \"Siv3D\" ; Print << s ; while ( System :: Update ()) { } } 6.1.6 \u8981\u7d20\u306e\u524a\u9664 \u00b6 .pop_front() \u306f\u5148\u982d\u306e\u8981\u7d20\u3092\u6d88\u53bb\u3057\u307e\u3059\u3002 .pop_back() \u306f\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u3044\u305a\u308c\u3082\u7a7a\u306e\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { String s = U \"Siv3D\" ; s . pop_front (); Print << s ; s . pop_back (); Print << s ; while ( System :: Update ()) { } } 6.2 \u52d5\u7684\u914d\u5217 \u00b6 Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array<Type> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std::vector \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b\u52a0\u3048\u3001\u3055\u3089\u306b\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f std::vector \u3088\u308a\u3082 Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 Array \u306f std::vector \u3068\u540c\u69d8\u306b\u3001\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u8981\u7d20\u306e\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 6.2.1 \u8981\u7d20\u4e00\u89a7\u306e\u8868\u793a \u00b6 Array \u306e\u8981\u7d20\u304c Print \u3067\u8868\u793a\u3067\u304d\u308b\u578b\u3067\u3042\u308c\u3070\u3001 Array \u3092 Print \u306b\u9001\u308b\u3053\u3068\u3067\u3001\u8981\u7d20\u4e00\u89a7\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << values ; Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; Print << points ; while ( System :: Update ()) { } } 6.2.2 \u8981\u7d20\u306e\u8ffd\u52a0 \u00b6 Array \u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle { point , 10 }. draw (); } } } 6.2.3 \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 \u00b6 [] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front() , .back() \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u305e\u308c\u5148\u982d\u3001\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } } 6.2.4 \u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size() , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear() \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle { point , 10 }. draw (); } } } 6.2.5 \u7a7a\u306e\u914d\u5217 \u00b6 \u8981\u7d20\u6570\u304c 0 \u306e\u914d\u5217\u3092\u300c\u7a7a\u306e\u914d\u5217\u300d\u3068\u547c\u3073\u307e\u3059\u3002\u914d\u5217 a \u304c\u7a7a\u3067\u3042\u308b\u304b\u306f\u3001 if (a.isEmpty()) \u3084 if (a) / if (not a) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 not \u306f ! \u3068\u540c\u3058\u3067\u3059\u3002Siv3D \u3067\u306f ! \u3088\u308a\u3082\u8996\u8a8d\u6027\u306e\u9ad8\u3044 not \u3092\u4f7f\u3046\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( not points ) { Print << U \"B\" ; } while ( System :: Update ()) { } } 6.2.6 \u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back() \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back() \u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle { point , 10 }. draw (); } } } 6.2.7 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if() \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return ( 5 < n ); }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return ( 250 < v . y ); }); Print << U \"after: \" << points ; while ( System :: Update ()) { } } 6.2.8 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664 \u00b6 .erase() \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle { point , 30 }. draw (); } } } 6.2.9 \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3057\u3001\u6307\u5b9a\u3057\u305f\u500b\u6570\u3060\u3051\u5024\u3092\u30b3\u30d4\u30fc\u3057\u305f\u914d\u5217\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f {} \u3067\u306f\u306a\u304f () \u3092\u4f7f\u3046\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2{ 0, 0 } Array < Vec2 > points ( 5 , Vec2 { 0 , 0 }); Print << points ; while ( System :: Update ()) { } } 6.3 \u4e8c\u6b21\u5143\u914d\u5217 \u00b6 \u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u914d\u5217\u304c\u5fc5\u8981\u306a\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid<Type> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u4fbf\u5229\u306b\u52b9\u7387\u7684\u306b\u6271\u3048\u307e\u3059\u3002 Grid \u306e\u5185\u90e8\u3067\u306f 1 \u3064\u306e Array \u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u9023\u7d9a\u7684\u306b\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002 Grid \u30af\u30e9\u30b9\u306f\u3001\u5b9f\u8cea\u7684\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u69cb\u9020\u3067\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u7c21\u7565\u5316 template < class Type > class Grid { Array < Type > m_data ; size_t m_width ; size_t m_height ; }; Grid \u578b\u306e\u5909\u6570 grid \u306b\u5bfe\u3059\u308b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3088\u308b\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9 grid[y][x] = value; \u306f\u3001\u5185\u90e8\u3067\u306f m_data[y * m_width + x] = value; \u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001 Point \u578b\u306e\u5024 pos \u306b\u3088\u308b grid[pos] = value; \u306f\u3001 m_data[pos.y * m_width + pos.x] = value; \u306b\u306a\u308a\u307e\u3059\u3002 6.3.1 Grid \u306e\u57fa\u672c \u00b6 .size() \u306f\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\uff09\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b5\u30a4\u30ba\u306e X \u6210\u5206\u3001Y \u6210\u5206\u306f .width() , .height() \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002 \u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u3001 [y][x] \u306e\u4ed6\u306b Point \u578b\u306e\u5024\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Size{ \u5e45, \u9ad8\u3055 } Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << U \"width: \" << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055\uff08\u884c\u6570\uff09 Print << U \"height: \" << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 (X \u3068 Y \u306e\u9806\u756a\u306b\u6ce8\u610f) Print << grid [ Point { 5 , 1 }]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect { ( x * 100 ), ( y * 100 ), 100 }. draw ( ColorF { grid [ y ][ x ] }); } } } } 6.3.2 \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Grid \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , -1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } } 6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb \u00b6 \u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable<Key, Value> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std::unordered_map \u3088\u308a\u3082\u9ad8\u901f\u306a\u5b9f\u88c5\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std::unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a8\u30f3\u30c8\u30ea\u306e\u524a\u9664 table . erase ( U \"Red\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it -> second += 100 ; } Print << U \"---\" ; // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } } 6.5 \u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8 \u00b6 \u30ad\u30fc\u3068\u306e\u307f\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u30ad\u30fc\u3092\u691c\u7d22\u3067\u304d\u308b\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u3068\u3057\u3066\u3001Siv3D \u306f HashSet<Key> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std::unordered_set \u3088\u308a\u3082\u9ad8\u901f\u306a\u5b9f\u88c5\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std::unordered_set \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashSet < String > table = { U \"Red\" , U \"Green\" , U \"Black\" , U \"White\" }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" ); // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a8\u30f3\u30c8\u30ea\u3092\u524a\u9664 table . erase ( U \"Red\" ); Print << U \"---\" ; for ( const auto & key : table ) { Print << key ; } while ( System :: Update ()) { } } 6.6 \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b \u00b6 Optioanl<Type> \u578b\u3092\u4f7f\u3046\u3068\u3001\u4efb\u610f\u306e\u578b Type \u304c\u300c\u7121\u52b9\u5024\u300d\u3082\u4fdd\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30a4\u30ba\u304c 0 \u304b 1 \u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b Array<Type> \u3068\u8003\u3048\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std::optional<Type> \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b\u306e\u5024 opt \u304c\u6709\u52b9\u5024\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u304b\u306f if (opt) \u3084 if (opt.has_value()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Type \u578b\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f *opt \u307e\u305f\u306f opt.value() \u3092\u4f7f\u3044\u307e\u3059\u3002\u5f8c\u8005\u306f\u6709\u52b9\u5024\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3001\u4fdd\u6301\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f std::bad_optional_access \u4f8b\u5916\u3092\u6295\u3052\u307e\u3059\u3002 opt.value_or(x) \u306f\u3001\u6709\u52b9\u5024\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u306e\u5024\u3092\u3001\u4fdd\u6301\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u4ee3\u308f\u308a\u306b x \u3092\u8fd4\u3057\u307e\u3059\u3002 Type \u578b\u306e\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f opt-> \u3092\u4f7f\u3044\u307e\u3059\u3002 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b none \u304a\u3088\u3073\u305d\u308c\u3068\u540c\u5024\u306e unspecified \u3068\u3044\u3046\u5b9a\u6570\u304c\u3042\u308a\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b\u306e\u5024\u306b\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u6700\u521d\u306f\u7121\u52b9\u5024 Optional < Point > pos ; if ( not pos ) { Print << U \"not pos\" ; } // \u6709\u52b9\u5024\u3092\u6301\u305f\u305b\u308b pos = Point { 100 , 200 }; if ( pos ) { Print << * pos ; } // \u7121\u52b9\u5024\u306b\u3059\u308b pos . reset (); Print << pos . has_value (); // pos \u304c\u7121\u52b9\u5024\u306e\u5834\u5408 Point{ -1, -1 } \u3092\u8fd4\u3059 Print << pos . value_or ( Point { -1 , -1 }); pos = Point { 100 , 200 }; Print << pos . value_or ( Point { -1 , -1 }); Print << pos -> x ; Print << pos -> y ; // \u7121\u52b9\u5024\u3092\u4ee3\u5165\u3059\u308b pos = none ; Print << pos . has_value (); while ( System :: Update ()) { } } 6.7 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std::array \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306f std::deque \u3084 std::list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u304c\u9023\u7d9a\u3059\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u3088\u3046\u306a\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6. \u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/learn/data-structure/#6-\u30c7\u30fc\u30bf\u69cb\u9020","text":"","title":"6. \u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/learn/data-structure/#61-\u6587\u5b57\u5217\u30af\u30e9\u30b9","text":"Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8868\u73fe\u3059\u308b char32 \u578b\uff08\u6587\u5b57\uff09\u306e\u96c6\u5408\u3067\u3059\u3002UTF-32 \u306e\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f\u3001 U'\u3042' , U\"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 String \u306e\u5185\u90e8\u30c7\u30fc\u30bf\u306f std::u32string \u3067\u3001\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u306f\u30e1\u30e2\u30ea\u4e0a\u3067\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002Siv3D \u306e String \u306f C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6587\u5b57\u5217\u30af\u30e9\u30b9\u3088\u308a\u591a\u304f\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u69d8\u3005\u306a\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002","title":"6.1 \u6587\u5b57\u5217\u30af\u30e9\u30b9"},{"location":"ja-jp/learn/data-structure/#611-string-\u306e\u57fa\u672c","text":".size() \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String s = U \"Siv3D\" ; Print << s ; // \u6587\u5b57\u5217\u306e\u9577\u3055 Print << s . size (); while ( System :: Update ()) { } }","title":"6.1.1 String \u306e\u57fa\u672c"},{"location":"ja-jp/learn/data-structure/#612-\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6587\u5b57\u306b\u30a2\u30af\u30bb\u30b9","text":"[] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front() , .back() \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u305e\u308c\u5148\u982d\u3001\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { String s = U \"Siv3D\" ; // 0 \u756a\u76ee\u306e\u8981\u7d20 Print << s [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20 Print << s [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20 Print << s . front (); // \u672b\u5c3e\u306e\u8981\u7d20 Print << s . back (); s [ 3 ] = U '4' ; Print << s ; while ( System :: Update ()) { } }","title":"6.1.2 \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6587\u5b57\u306b\u30a2\u30af\u30bb\u30b9"},{"location":"ja-jp/learn/data-structure/#613-\u7a7a\u306e\u6587\u5b57\u5217","text":"\u8981\u7d20\u3092\u4fdd\u6301\u3057\u3066\u3044\u306a\u3044\u6587\u5b57\u5217\u3092\u300c\u7a7a\u306e\u6587\u5b57\u5217\u300d\u3068\u547c\u3073\u307e\u3059\u3002 String \u578b\u306e\u5024 s \u304c\u7a7a\u3067\u3042\u308b\u304b\u306f\u3001 if (s.isEmpty()) \u3084 if (s) / if (not s) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 not \u306f ! \u3068\u540c\u3058\u3067\u3059\u3002Siv3D \u3067\u306f ! \u3088\u308a\u3082\u8996\u8a8d\u6027\u306e\u9ad8\u3044 not \u3092\u4f7f\u3046\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { String s ; if ( s . isEmpty ()) { Print << U \"s.isEmpty()\" ; } if ( not s ) { Print << U \"not s\" ; } while ( System :: Update ()) { } }","title":"6.1.3 \u7a7a\u306e\u6587\u5b57\u5217"},{"location":"ja-jp/learn/data-structure/#614-\u6587\u5b57\u6587\u5b57\u5217\u306e\u8ffd\u52a0","text":"\u5225\u306e\u6587\u5b57\u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u306b\u306f << \u3092\u4f7f\u3044\u307e\u3059\u3002\u5225\u306e\u6587\u5b57\u5217\u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u306b\u306f += \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { String s ; s << U 'S' << 'i' ; Print << s ; s += U \"v3D\" ; Print << s ; while ( System :: Update ()) { } }","title":"6.1.4 \u6587\u5b57\u30fb\u6587\u5b57\u5217\u306e\u8ffd\u52a0"},{"location":"ja-jp/learn/data-structure/#615-\u6587\u5b57\u5217\u306e\u6d88\u53bb","text":".clear() \u3092\u4f7f\u3046\u3068\u81ea\u8eab\u306e\u6587\u5b57\u5217\u3092\u6d88\u53bb\u3057\u3066\u7a7a\u306e\u6587\u5b57\u5217\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { String s = U \"Siv3D\" ; Print << s ; s = U \"Hello\" ; Print << s ; s . clear (); // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 Print << s ; s = U \"Siv3D\" ; Print << s ; while ( System :: Update ()) { } }","title":"6.1.5 \u6587\u5b57\u5217\u306e\u6d88\u53bb"},{"location":"ja-jp/learn/data-structure/#616-\u8981\u7d20\u306e\u524a\u9664","text":".pop_front() \u306f\u5148\u982d\u306e\u8981\u7d20\u3092\u6d88\u53bb\u3057\u307e\u3059\u3002 .pop_back() \u306f\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u3044\u305a\u308c\u3082\u7a7a\u306e\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { String s = U \"Siv3D\" ; s . pop_front (); Print << s ; s . pop_back (); Print << s ; while ( System :: Update ()) { } }","title":"6.1.6 \u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/learn/data-structure/#62-\u52d5\u7684\u914d\u5217","text":"Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array<Type> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std::vector \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b\u52a0\u3048\u3001\u3055\u3089\u306b\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f std::vector \u3088\u308a\u3082 Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 Array \u306f std::vector \u3068\u540c\u69d8\u306b\u3001\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u8981\u7d20\u306e\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.2 \u52d5\u7684\u914d\u5217"},{"location":"ja-jp/learn/data-structure/#621-\u8981\u7d20\u4e00\u89a7\u306e\u8868\u793a","text":"Array \u306e\u8981\u7d20\u304c Print \u3067\u8868\u793a\u3067\u304d\u308b\u578b\u3067\u3042\u308c\u3070\u3001 Array \u3092 Print \u306b\u9001\u308b\u3053\u3068\u3067\u3001\u8981\u7d20\u4e00\u89a7\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << values ; Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; Print << points ; while ( System :: Update ()) { } }","title":"6.2.1 \u8981\u7d20\u4e00\u89a7\u306e\u8868\u793a"},{"location":"ja-jp/learn/data-structure/#622-\u8981\u7d20\u306e\u8ffd\u52a0","text":"Array \u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle { point , 10 }. draw (); } } }","title":"6.2.2 \u8981\u7d20\u306e\u8ffd\u52a0"},{"location":"ja-jp/learn/data-structure/#623-\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9","text":"[] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front() , .back() \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u305e\u308c\u5148\u982d\u3001\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } }","title":"6.2.3 \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9"},{"location":"ja-jp/learn/data-structure/#624-\u8981\u7d20\u306e\u6570\u8981\u7d20\u306e\u524a\u9664","text":"\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size() , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear() \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle { point , 10 }. draw (); } } }","title":"6.2.4 \u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/learn/data-structure/#625-\u7a7a\u306e\u914d\u5217","text":"\u8981\u7d20\u6570\u304c 0 \u306e\u914d\u5217\u3092\u300c\u7a7a\u306e\u914d\u5217\u300d\u3068\u547c\u3073\u307e\u3059\u3002\u914d\u5217 a \u304c\u7a7a\u3067\u3042\u308b\u304b\u306f\u3001 if (a.isEmpty()) \u3084 if (a) / if (not a) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 not \u306f ! \u3068\u540c\u3058\u3067\u3059\u3002Siv3D \u3067\u306f ! \u3088\u308a\u3082\u8996\u8a8d\u6027\u306e\u9ad8\u3044 not \u3092\u4f7f\u3046\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( not points ) { Print << U \"B\" ; } while ( System :: Update ()) { } }","title":"6.2.5 \u7a7a\u306e\u914d\u5217"},{"location":"ja-jp/learn/data-structure/#626-\u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664","text":"\u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back() \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back() \u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle { point , 10 }. draw (); } } }","title":"6.2.6 \u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/learn/data-structure/#627-\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664","text":"\u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if() \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return ( 5 < n ); }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return ( 250 < v . y ); }); Print << U \"after: \" << points ; while ( System :: Update ()) { } }","title":"6.2.7 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/learn/data-structure/#628-\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664","text":".erase() \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 { 100 , 100 }, Vec2 { 200 , 200 }, Vec2 { 300 , 300 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle { point , 30 }. draw (); } } }","title":"6.2.8 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/learn/data-structure/#629-\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3057\u3001\u6307\u5b9a\u3057\u305f\u500b\u6570\u3060\u3051\u5024\u3092\u30b3\u30d4\u30fc\u3057\u305f\u914d\u5217\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f {} \u3067\u306f\u306a\u304f () \u3092\u4f7f\u3046\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2{ 0, 0 } Array < Vec2 > points ( 5 , Vec2 { 0 , 0 }); Print << points ; while ( System :: Update ()) { } }","title":"6.2.9 \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"ja-jp/learn/data-structure/#63-\u4e8c\u6b21\u5143\u914d\u5217","text":"\u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u914d\u5217\u304c\u5fc5\u8981\u306a\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid<Type> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u4fbf\u5229\u306b\u52b9\u7387\u7684\u306b\u6271\u3048\u307e\u3059\u3002 Grid \u306e\u5185\u90e8\u3067\u306f 1 \u3064\u306e Array \u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u9023\u7d9a\u7684\u306b\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002 Grid \u30af\u30e9\u30b9\u306f\u3001\u5b9f\u8cea\u7684\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u69cb\u9020\u3067\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u7c21\u7565\u5316 template < class Type > class Grid { Array < Type > m_data ; size_t m_width ; size_t m_height ; }; Grid \u578b\u306e\u5909\u6570 grid \u306b\u5bfe\u3059\u308b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3088\u308b\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9 grid[y][x] = value; \u306f\u3001\u5185\u90e8\u3067\u306f m_data[y * m_width + x] = value; \u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001 Point \u578b\u306e\u5024 pos \u306b\u3088\u308b grid[pos] = value; \u306f\u3001 m_data[pos.y * m_width + pos.x] = value; \u306b\u306a\u308a\u307e\u3059\u3002","title":"6.3 \u4e8c\u6b21\u5143\u914d\u5217"},{"location":"ja-jp/learn/data-structure/#631-grid-\u306e\u57fa\u672c","text":".size() \u306f\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\uff09\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b5\u30a4\u30ba\u306e X \u6210\u5206\u3001Y \u6210\u5206\u306f .width() , .height() \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002 \u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u3001 [y][x] \u306e\u4ed6\u306b Point \u578b\u306e\u5024\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Size{ \u5e45, \u9ad8\u3055 } Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << U \"width: \" << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055\uff08\u884c\u6570\uff09 Print << U \"height: \" << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 (X \u3068 Y \u306e\u9806\u756a\u306b\u6ce8\u610f) Print << grid [ Point { 5 , 1 }]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect { ( x * 100 ), ( y * 100 ), 100 }. draw ( ColorF { grid [ y ][ x ] }); } } } }","title":"6.3.1 Grid \u306e\u57fa\u672c"},{"location":"ja-jp/learn/data-structure/#632-\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316","text":"Grid \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , -1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } }","title":"6.3.2 \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"ja-jp/learn/data-structure/#64-\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb","text":"\u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable<Key, Value> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std::unordered_map \u3088\u308a\u3082\u9ad8\u901f\u306a\u5b9f\u88c5\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std::unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a8\u30f3\u30c8\u30ea\u306e\u524a\u9664 table . erase ( U \"Red\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it -> second += 100 ; } Print << U \"---\" ; // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } }","title":"6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"ja-jp/learn/data-structure/#65-\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8","text":"\u30ad\u30fc\u3068\u306e\u307f\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u30ad\u30fc\u3092\u691c\u7d22\u3067\u304d\u308b\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u3068\u3057\u3066\u3001Siv3D \u306f HashSet<Key> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std::unordered_set \u3088\u308a\u3082\u9ad8\u901f\u306a\u5b9f\u88c5\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std::unordered_set \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashSet < String > table = { U \"Red\" , U \"Green\" , U \"Black\" , U \"White\" }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" ); // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a8\u30f3\u30c8\u30ea\u3092\u524a\u9664 table . erase ( U \"Red\" ); Print << U \"---\" ; for ( const auto & key : table ) { Print << key ; } while ( System :: Update ()) { } }","title":"6.5 \u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8"},{"location":"ja-jp/learn/data-structure/#66-\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b","text":"Optioanl<Type> \u578b\u3092\u4f7f\u3046\u3068\u3001\u4efb\u610f\u306e\u578b Type \u304c\u300c\u7121\u52b9\u5024\u300d\u3082\u4fdd\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30a4\u30ba\u304c 0 \u304b 1 \u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b Array<Type> \u3068\u8003\u3048\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std::optional<Type> \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b\u306e\u5024 opt \u304c\u6709\u52b9\u5024\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u304b\u306f if (opt) \u3084 if (opt.has_value()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Type \u578b\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f *opt \u307e\u305f\u306f opt.value() \u3092\u4f7f\u3044\u307e\u3059\u3002\u5f8c\u8005\u306f\u6709\u52b9\u5024\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3001\u4fdd\u6301\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f std::bad_optional_access \u4f8b\u5916\u3092\u6295\u3052\u307e\u3059\u3002 opt.value_or(x) \u306f\u3001\u6709\u52b9\u5024\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u306e\u5024\u3092\u3001\u4fdd\u6301\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u4ee3\u308f\u308a\u306b x \u3092\u8fd4\u3057\u307e\u3059\u3002 Type \u578b\u306e\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f opt-> \u3092\u4f7f\u3044\u307e\u3059\u3002 \u7121\u52b9\u5024\u3092\u8868\u73fe\u3059\u308b none \u304a\u3088\u3073\u305d\u308c\u3068\u540c\u5024\u306e unspecified \u3068\u3044\u3046\u5b9a\u6570\u304c\u3042\u308a\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b\u306e\u5024\u306b\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u6700\u521d\u306f\u7121\u52b9\u5024 Optional < Point > pos ; if ( not pos ) { Print << U \"not pos\" ; } // \u6709\u52b9\u5024\u3092\u6301\u305f\u305b\u308b pos = Point { 100 , 200 }; if ( pos ) { Print << * pos ; } // \u7121\u52b9\u5024\u306b\u3059\u308b pos . reset (); Print << pos . has_value (); // pos \u304c\u7121\u52b9\u5024\u306e\u5834\u5408 Point{ -1, -1 } \u3092\u8fd4\u3059 Print << pos . value_or ( Point { -1 , -1 }); pos = Point { 100 , 200 }; Print << pos . value_or ( Point { -1 , -1 }); Print << pos -> x ; Print << pos -> y ; // \u7121\u52b9\u5024\u3092\u4ee3\u5165\u3059\u308b pos = none ; Print << pos . has_value (); while ( System :: Update ()) { } }","title":"6.6 \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b"},{"location":"ja-jp/learn/data-structure/#67-\u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020","text":"Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std::array \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306f std::deque \u3084 std::list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u304c\u9023\u7d9a\u3059\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u3088\u3046\u306a\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6.7 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/learn/font/","text":"8. \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 8.1 Font \u00b6 \u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw() \u307e\u305f\u306f .drawAt() \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u57fa\u672c\u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font { 50 }; while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001\u305d\u308c\u305e\u308c\u3092 Format \u3057\u305f\u6587\u5b57\u5217\u3092\u3064\u306a\u3052\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 , ColorF { 0.5 , 1.0 , 0.5 }); font ( U \"{}/{}/{}\" _fmt ( 2021 , 12 , 31 )). draw ( 50 , 500 , ColorF { 1.0 , 0.5 , 0.0 }); } } 8.2 \u6539\u884c\u3059\u308b \u00b6 \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 '\\n' \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 }; while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } } 8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u57fa\u672c\u30b5\u30a4\u30ba \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u57fa\u672c\u30b5\u30a4\u30ba\u306f\u3042\u3068\u304b\u3089\u5909\u66f4\u3067\u304d\u307e\u305b\u3093\u30021 \u3064\u306e Font \u304b\u3089\u3055\u307e\u3056\u307e\u306a\u30b5\u30a4\u30ba\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u306f\u306e\u3061\u307b\u3069\u7d39\u4ecb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u57fa\u672c\u30b5\u30a4\u30ba 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 { 20 }; // \u57fa\u672c\u30b5\u30a4\u30ba 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 { 40 }; // \u57fa\u672c\u30b5\u30a4\u30ba 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 { 60 }; // \u57fa\u672c\u30b5\u30a4\u30ba 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 { 80 }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } } 8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e \u00b6 Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u3068\u30015 \u5730\u57df\u5411\u3051\u306e CJK\uff08\u4e2d\u56fd\u8a9e\u30fb\u97d3\u56fd\u8a9e\u30fb\u65e5\u672c\u8a9e\u5bfe\u5fdc\uff09\u30d5\u30a9\u30f3\u30c8\u3001\u767d\u9ed2\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8\u3001\u30ab\u30e9\u30fc\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u304a\u3044\u3066 Typeface:: \u3067\u66f8\u4f53\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface::Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Typeface \u8aac\u660e Typeface::Thin \u7d30\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Light \u3084\u3084\u7d30\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Regular \u901a\u5e38\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Medium \u3084\u3084\u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Bold \u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Heavy \u3068\u3066\u3082\u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Black \u6700\u3082\u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_JP \u65e5\u672c\u8a9e\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_KR \u97d3\u56fd\u8a9e\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_SC \u7c21\u4f53\u5b57\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_TC \u53f0\u6e7e\u7e41\u4f53\u5b57\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_HK \u9999\u6e2f\u7e41\u4f53\u5b57\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::MonochromeEmoji \u30e2\u30ce\u30af\u30ed\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Typeface::ColorEmoji \u30ab\u30e9\u30fc\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 # include <Siv3D.hpp> void Main () { const Font fontThin { 36 , Typeface :: Thin }; const Font fontLight { 36 , Typeface :: Light }; const Font fontRegular { 36 , Typeface :: Regular }; const Font fontMedium { 36 , Typeface :: Medium }; const Font fontBold { 36 , Typeface :: Bold }; const Font fontHeavy { 36 , Typeface :: Heavy }; const Font fontBlack { 36 , Typeface :: Black }; const Font fontJP { 36 , Typeface :: CJK_Regular_JP }; const Font fontKR { 36 , Typeface :: CJK_Regular_KR }; const Font fontSC { 36 , Typeface :: CJK_Regular_SC }; const Font fontTC { 36 , Typeface :: CJK_Regular_TC }; const Font fontHK { 36 , Typeface :: CJK_Regular_HK }; const Font fontMono { 36 , Typeface :: MonochromeEmoji }; // \u30ab\u30e9\u30fc\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8\u306f\u3001\u30b5\u30a4\u30ba\u306e\u6307\u5b9a\u304c\u7121\u8996\u3055\u308c\u308b\u4ed5\u69d8 const Font fontEmoji { 36 , Typeface :: ColorEmoji }; const String s0 = U \"Hello, Siv3D!\" ; const String s1 = U \"\u3053\u3093\u306b\u3061\u306f \u4f60\u597d \uc548\ub155\ud558\uc138\uc694 \u9aa8\u66dc\u559d\u611b\u9059\u6247\" ; const String s2 = U \"\ud83d\udc08\ud83d\udc15\ud83d\ude80\" ; while ( System :: Update ()) { fontThin ( s0 ). draw ( 20 , 20 ); fontLight ( s0 ). draw ( 20 , 60 ); fontRegular ( s0 ). draw ( 20 , 100 ); fontMedium ( s0 ). draw ( 20 , 140 ); fontBold ( s0 ). draw ( 20 , 180 ); fontHeavy ( s0 ). draw ( 20 , 220 ); fontBlack ( s0 ). draw ( 20 , 260 ); fontJP ( s1 ). draw ( 20 , 300 ); fontKR ( s1 ). draw ( 20 , 340 ); fontSC ( s1 ). draw ( 20 , 380 ); fontTC ( s1 ). draw ( 20 , 420 ); fontHK ( s1 ). draw ( 20 , 460 ); fontMono ( s2 ). draw ( 20 , 500 ); fontEmoji ( s2 ). draw ( 20 , 540 ); } } 8.5 \u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u306e\u8ffd\u52a0 \u00b6 1 \u3064\u3067\u5168\u3066\u306e\u6587\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u69d8\u3005\u306a\u8a00\u8a9e\u3084\u5b57\u7a2e\u304c\u4ea4\u3056\u308b\u30c6\u30ad\u30b9\u30c8\u3092 1 \u3064\u306e Font \u3067\u8868\u793a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u57fa\u672c\u306e\u30d5\u30a9\u30f3\u30c8\u3067\u63cf\u3051\u306a\u3044\u6587\u5b57\u304c\u898b\u3064\u304b\u3063\u305f\u3068\u304d\u3001\u3082\u3057\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3067\u63cf\u3051\u305f\u3089\u3001\u305d\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u306b\u306f\u3001 .addFallback() \u3067\u4f5c\u6210\u6e08\u307f\u306e Font \u3092\u6e21\u3057\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u306f\u4f55\u500b\u3067\u3082\u8a2d\u5b9a\u3067\u304d\u3001\u5148\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u304c\u512a\u5148\u3057\u3066\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font fontA { 36 , Typeface :: Regular }; const Font fontB { 36 , Typeface :: Regular }; const Font fontC { 36 , Typeface :: Regular }; const Font fontJP { 36 , Typeface :: CJK_Regular_JP }; const Font fontEmoji { 36 , Typeface :: ColorEmoji }; // fontB \u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092 1 \u3064\u8ffd\u52a0 fontB . addFallback ( fontJP ); // fontC \u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092 2 \u3064\u8ffd\u52a0 fontC . addFallback ( fontJP ); fontC . addFallback ( fontEmoji ); const String s = U \"Hello! \u3053\u3093\u306b\u3061\u306f \u4f60\u597d \uc548\ub155\ud558\uc138\uc694 \ud83d\udc08\ud83d\udc15\ud83d\ude80\" ; while ( System :: Update ()) { fontA ( s ). draw ( 20 , 20 ); fontB ( s ). draw ( 20 , 60 ); fontC ( s ). draw ( 20 , 100 ); } } 8.6 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046 \u00b6 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // RocknRollOne-Regular.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font { 50 , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; while ( System :: Update ()) { font ( U \"Hello, Siv3D! \\n \u3053\u3093\u306b\u3061\u306f\uff01\" ). draw ( 20 , 20 ); } } 8.7 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem::GetFolderPath() \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem::GetFolderPath() \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ /usr/share/fonts/ SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ /usr/local/share/fonts/ (\u5b58\u5728\u3059\u308b\u5834\u5408) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ /usr/local/share/fonts/ (\u5b58\u5728\u3059\u308b\u5834\u5408) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font { 60 , FileSystem :: GetFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" }; # elif SIV3D_PLATFORM(MACOS) const Font font { 60 , FileSystem :: GetFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" }; # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } SIV3D_PLATFORM(WINDOWS) \u3084 SIV3D_PLATFORM(MACOS) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002 8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Regular }; // \u30dc\u30fc\u30eb\u30c9 const Font fontBold { 50 , Typeface :: Regular , FontStyle :: Bold }; // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic { 50 , Typeface :: Regular , FontStyle :: Italic }; // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic { 50 , Typeface :: Regular , FontStyle :: BoldItalic }; const String text = U \"Hello, Siv3D! \u3053\u3093\u306b\u3061\u306f\u3002\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } } 8.9 \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a9\u30f3\u30c8\u306f\u30d5\u30a9\u30f3\u30c8\u30b9\u30bf\u30a4\u30eb\u306b FontStyle::Bitmap \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305a\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Font font { 32 , U \"example/font/DotGothic16/DotGothic16-Regular.ttf\" }; const Font fontB { 32 , U \"example/font/DotGothic16/DotGothic16-Regular.ttf\" , FontStyle :: Bitmap }; const String text = U \"Hello, Siv3D! \u3053\u3093\u306b\u3061\u306f\u3002\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 , Palette :: Black ); fontB ( text ). draw ( 20 , 60 , Palette :: Black ); } } 8.10 \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 \u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase() \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 { 20 }; const Font font30 { 30 , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; const Font font50 { 50 }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font30 ( text ). draw ( 160 , 100 ); font50 ( text ). draw ( 380 , 100 ); Rect { 0 , 400 , 800 , 10 }. draw ( ColorF { 0.3 }); // (20, 400) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 400) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font30 ( text ). drawBase ( 160 , 400 ); // (380, 400) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font50 ( text ). drawBase ( 380 , 400 ); } } 8.11 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 }; constexpr Vec2 pos { 400 , 300 }; const String text = U \"Hello, Siv3D!\" ; size_t index = 0 ; while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index , { U \"topLeft\" , U \"bottomLeft\" , U \"bottomRight\" , U \"bottomCenter\" , U \"leftCenter\" , U \"center\" }, Vec2 { 20 , 20 }); Circle { pos , 2 }. draw ( Palette :: Red ); if ( index == 0 ) { font ( text ). draw ( pos ); } else if ( index == 1 ) { // \u5de6\u4e0b\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos ); } else if ( index == 2 ) { // \u53f3\u4e0b\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos ); } else if ( index == 3 ) { // \u4e0b\u8fba\u4e2d\u592e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter = pos ); } else if ( index == 4 ) { // \u5de6\u8fba\u4e2d\u592e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: leftCenter = pos ); } else { // \u4e2d\u592e\u3092\u57fa\u6e96 font ( text ). drawAt ( pos ); } } } 8.12 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b \u00b6 Font \u306e .draw() \u3084 .drawAt() \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region() \u3084 .regionAt() \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u306a\u3057\u3067\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 }; const String text = U \"Hello, Siv3D!\" ; constexpr Vec2 pos { 20 , 20 }; // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const RectF rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF { 0.25 }); // \u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092 font ( text ) . drawAt ( Scene :: Center ()) . stretched ( 40 , 0 ) // \u6a2a\u306b\u5e83\u3052\u3066 . shearedX ( 20 ) // \u5e73\u884c\u56db\u8fba\u5f62\u306b\u3057\u3066 . drawFrame ( 2 ); // \u67a0\u3092\u63cf\u304f } } 8.13 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 Font::draw() \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u9577\u65b9\u5f62\u5185\u306b\u30c6\u30ad\u30b9\u30c8\u304c\u53ce\u307e\u3063\u305f\u5834\u5408\u3001\u95a2\u6570\u306f true \u3092\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001\u30c6\u30ad\u30b9\u30c8\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Font font { 25 , Typeface :: Bold }; const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 { 50 , 20 , 200 , 100 }; constexpr Rect rect2 { 50 , 160 , 300 , 100 }; constexpr Rect rect3 { 50 , 300 , 400 , 100 }; while ( System :: Update ()) { rect1 . draw (); if ( not font ( text ). draw ( rect1 . stretched ( -10 ), ColorF { 0.25 })) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); if ( not font ( text ). draw ( rect2 . stretched ( -10 ), ColorF { 0.25 })) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); if ( not font ( text ). draw ( rect3 . stretched ( -10 ), ColorF ( 0.25 ))) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } } 8.14 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b \u00b6 String \u306f\u3001 .substr(0, N) \u3092\u4f7f\u3046\u3068\u30010 \u6587\u5b57\u76ee\u304b\u3089 N \u6587\u5b57\u5206\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002N \u3092\u6642\u9593\u306b\u5fdc\u3058\u3066\u5897\u3084\u3059\u3053\u3068\u3067 1 \u6587\u5b57\u305a\u3064\u30c6\u30ad\u30b9\u30c8\u304c\u5897\u3048\u3066\u3044\u304f\u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002N \u304c\u5b9f\u969b\u306e\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3082\u305d\u306e\u5206\u306f\u7121\u8996\u3055\u308c\u308b\u306e\u3067\u5927\u4e08\u592b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } } 8.15 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\uff082 \u56de\u63cf\u753b\u3059\u308b\u624b\u6cd5\uff09 \u00b6 \u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2::movedBy(x, y) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.7 , 0.9 , 0.8 }); const Font font { 100 , Typeface :: Bold }; constexpr Vec2 center { 400 , 150 }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF { 0.0 , 0.5 }); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } } 8.16 \u81ea\u7531\u306b\u62e1\u5927\u7e2e\u5c0f\u3067\u304d\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046\uff08SDF / MSDF\uff09 \u00b6 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u57fa\u672c\u30b5\u30a4\u30ba\u3067\u5404\u6587\u5b57\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3057\u305f\uff08 \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f \uff09\u3002\u305d\u306e\u305f\u3081\u3001\u57fa\u672c\u30b5\u30a4\u30ba\u3088\u308a\u5927\u304d\u306a\u30b5\u30a4\u30ba\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u753b\u50cf\u304c\u307c\u3084\u3051\u308b\u3068\u3044\u3046\u5236\u9650\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u8f2a\u90ed\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 \u4e00\u65b9\u3001 SDF \u65b9\u5f0f / MSDF \u65b9\u5f0f \u306f\u3001\u6587\u5b57\u3054\u3068\u306e Distance field \u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u57fa\u672c\u30b5\u30a4\u30ba\u4ee5\u4e0a\u306b\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002SDF / MSDF \u306b\u306f\u5f71\u3084\u8f2a\u90ed\u306a\u3069\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092 1 \u56de\u306e draw \u3067\u884c\u3048\u308b\u4ed5\u7d44\u307f\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u5404\u65b9\u5f0f\u306e\u5229\u70b9\u3068\u6b20\u70b9\u3092\u6b21\u306e\u8868\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002 \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u624b\u6cd5 \u7e2e\u5c0f \u62e1\u5927 \u5f71 \u8f2a\u90ed \u5b9f\u884c\u6642\u8ca0\u8377 \u5099\u8003 FontMethod::Bitmap \u3007 \u25b3 \u3007 (2 \u56de draw) \u00d7 \u4f4e \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u624b\u6cd5 FontMethod::SDF \u3007 \u3007 \u3007 \u3007 \u4e2d \u6587\u5b57\u306e\u89d2\u304c\u4e38\u304f\u306a\u308b\u306a\u3069\u3001\u7d30\u90e8\u306e\u60c5\u5831\u304c\u5931\u308f\u308c\u3084\u3059\u3044 FontMethod::MSDF \u25ce \u25ce \u3007 \u3007 \u9ad8 SDF \u3088\u308a\u9ad8\u54c1\u8cea SDF / MSDF \u30d5\u30a9\u30f3\u30c8\u3067\u8a2d\u5b9a\u3059\u308b\u57fa\u672c\u30b5\u30a4\u30ba\u306f\u3001 Distance Field \u306e\u30b5\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u306f\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5fdc\u3058\u3066\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u304b\u3068\u3044\u3063\u3066\u5927\u304d\u3059\u304e\u308b\u3068\u63cf\u753b\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002SDF / MSDF \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a\u57fa\u672c\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 .draw() \u3084 .drawAt() , .drawBase() \u306f\u3001\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5404\u65b9\u5f0f\u306b\u3064\u3044\u3066\u3001\u57fa\u672c\u30b5\u30a4\u30ba\u3088\u308a\u5927\u304d\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u3044\u305f\u3068\u304d\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u57fa\u672c\u30b5\u30a4\u30ba const int32 baseSize = 40 ; const Font font { baseSize , Typeface :: Bold }; const Font fontSDF { FontMethod :: SDF , baseSize , Typeface :: Bold }; const Font fontMSDF { FontMethod :: MSDF , baseSize , Typeface :: Bold }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u6587\u5b57\u306e\u30b5\u30a4\u30ba\uff08\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u57fa\u672c\u30b5\u30a4\u30ba\u3067\u63cf\u304b\u308c\u308b\uff09 const double fontSize = 120 ; // \u901a\u5e38\uff08\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f\uff09 font ( text ). draw ( 20 , 20 ); font ( text ). draw ( fontSize , 20 , 50 ); // SDF \u65b9\u5f0f fontSDF ( text ). draw ( 20 , 220 ); fontSDF ( text ). draw ( fontSize , 20 , 250 ); // MSDF \u65b9\u5f0f fontMSDF ( text ). draw ( 20 , 420 ); fontMSDF ( text ). draw ( fontSize , 20 , 450 ); } } 8.17 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\uff08SDF / MSDF\uff09 \u00b6 SDF / MSDF \u65b9\u5f0f\u306e\u30d5\u30a9\u30f3\u30c8\u306f\u3001 TextStyle \u3092 .draw() \u3084 .drawAt() , .drawBase() \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7c21\u5358\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u4e0e\u3067\u304d\u307e\u3059\u3002\u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\u306b\u306f TextStyle::Shadow(\u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8, \u5f71\u306e\u8272) \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u3068\u3066\u3082\u5927\u304d\u304f Distance Field \u306e\u7bc4\u56f2\u5916\u306b\u53ca\u3093\u3060\u5834\u5408\u3001\u5f71\u304c\u9014\u5207\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u308c\u3092\u9632\u3050\u306b\u306f Font \u306e .setBufferThickness(Distance Field \u306e\u4f59\u767d\u306e\u30b5\u30a4\u30ba) \u3067\u3001Distance Field \u3092\u5927\u304d\u3081\u306b\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 2 \u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u3084\u63cf\u753b\u8ca0\u8377\u304c\u5897\u52a0\u3057\u307e\u3059\u304c\u3001\u5f71\u3084\u8f2a\u90ed\u306e\u52b9\u679c\u3092\u3088\u308a\u5e83\u304f\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const int32 baseSize = 40 ; const Font fontSDF { FontMethod :: SDF , baseSize , Typeface :: Bold }; const Font fontMSDF { FontMethod :: MSDF , baseSize , Typeface :: Bold }; const String text = U \"Hello, Siv3D!\" ; const int32 bufferThickness = 3 ; fontSDF . setBufferThickness ( bufferThickness ); fontMSDF . setBufferThickness ( bufferThickness ); while ( System :: Update ()) { const Vec2 shadowOffset { 2 , 2 }; const ColorF shadowColor { 0.0 , 0.5 }; const double fontSize = 120 ; // SDF \u65b9\u5f0f fontSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), 20 , 20 ); fontSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), fontSize , 20 , 60 ); // MSDF \u65b9\u5f0f fontMSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), 20 , 220 ); fontMSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), fontSize , 20 , 260 ); } } 8.18 \u6587\u5b57\u306b\u8f2a\u90ed\u3092\u4ed8\u3051\u308b\uff08SDF / MSDF\uff09 \u00b6 \u6587\u5b57\u306b\u8f2a\u90ed\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\u306b\u306f - TextStyle::Outline(\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272) - TextStyle::Outline(\u5185\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u5916\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272) \u306e\u3044\u305a\u308c\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u6587\u5b57\u306b\u8f2a\u90ed\u3068\u5f71\u3001\u4e21\u65b9\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\u306b\u306f - TextStyle::OutlineShadow(\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272, \u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8, \u5f71\u306e\u8272) - TextStyle::OutlineShadow(\u5185\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u5916\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272, \u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8, \u5f71\u306e\u8272) \u306e\u3044\u305a\u308c\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const int32 baseSize = 40 ; const Font fontSDF { FontMethod :: SDF , baseSize , Typeface :: Bold }; const Font fontMSDF { FontMethod :: MSDF , baseSize , Typeface :: Bold }; const String text = U \"Hello, Siv3D!\" ; const int32 bufferThickness = 3 ; fontSDF . setBufferThickness ( bufferThickness ); fontMSDF . setBufferThickness ( bufferThickness ); while ( System :: Update ()) { const double outlineScale = 0.2 ; const ColorF outlineColor { 0.0 , 0.3 , 0.6 }; const Vec2 shadowOffset { 2 , 2 }; const ColorF shadowColor { 0.0 , 0.5 }; const double fontSize = 120 ; // SDF \u65b9\u5f0f fontSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), 20 , 20 ); fontSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), fontSize , 20 , 40 ); fontSDF ( text ). draw ( TextStyle :: OutlineShadow ( outlineScale , outlineColor , shadowOffset , shadowColor ), fontSize , 20 , 150 ); // MSDF \u65b9\u5f0f fontMSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), 20 , 300 ); fontMSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), fontSize , 20 , 320 ); fontMSDF ( text ). draw ( TextStyle :: OutlineShadow ( outlineScale , outlineColor , shadowOffset , shadowColor ), fontSize , 20 , 430 ); } } 8.19 \u6587\u5b57\u5358\u4f4d\u3067\u81ea\u7531\u63cf\u753b\u3092\u3059\u308b\uff08\u57fa\u672c\uff09 \u00b6 Font \u306e .getGlyphs(text) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u500b\u3005\u306e\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Glyph \u306e .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .getOffset() \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font . getGlyphs ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV { penPos . x }; // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b // FontMethod \u304c\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f\u306e\u5834\u5408\u306b\u9650\u308a\u3001Math::Round() \u3067\u6574\u6570\u5ea7\u6a19\u306b\u3059\u308b\u3068\u54c1\u8cea\u304c\u5411\u4e0a glyph . texture . draw ( Math :: Round ( penPos + glyph . getOffset ()), color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } } 8.20 \u6587\u5b57\u5358\u4f4d\u3067\u81ea\u7531\u63cf\u753b\u3092\u3059\u308b\uff08\u5fdc\u7528\uff09 \u00b6 for (auto [i, value] : Indexed(values)) \u306f\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 size_t i = 0 ; for ( const auto & value : values ) { ++ i ; } \u3053\u308c\u3092\u5229\u7528\u3057\u3066\u30011 \u6587\u5b57\u3054\u3068\u306b\u63cf\u753b\u3059\u308b\u4f4d\u7f6e\u3092\u305a\u3089\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { const double t = Scene :: Time (); constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7\u3002index \u306b\u306f\u4f55\u756a\u76ee\u3067\u3042\u308b\u304b\u304c\u683c\u7d0d\u3055\u308c\u308b for ( auto [ index , glyph ] : Indexed ( font . getGlyphs ( text ))) { if ( glyph . codePoint == U '\\n' ) { penPos . x = basePos . x ; penPos . y += font . height (); continue ; } const double offsetY = Math :: Sin ( index * 45 _deg + t * 180 _deg ) * 10 ; glyph . texture . draw ( penPos + glyph . getOffset () + Vec2 { 0 , offsetY }); penPos . x += glyph . xAdvance ; } } } \uff08\u88dc\u8db3 1\uff09\u81ea\u7531\u63cf\u753b\u3067\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u304c SDF / MSDF \u65b9\u5f0f\u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b ScopedCustomShader2D \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6709\u52b9\u306a\u30b9\u30b3\u30fc\u30d7\u3067\u63cf\u753b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // MSDF \u30d5\u30a9\u30f3\u30c8 const Font font { FontMethod :: MSDF , 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { const double t = Scene :: Time (); constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; { // MSDF \u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b\u306e\u305f\u3081\u306e\u8a2d\u5b9a const ScopedCustomShader2D shader { Font :: GetPixelShader ( font . method ()) }; for ( auto [ index , glyph ] : Indexed ( font . getGlyphs ( text ))) { if ( glyph . codePoint == U '\\n' ) { penPos . x = basePos . x ; penPos . y += font . height (); continue ; } const double offsetY = Math :: Sin ( index * 45 _deg + t * 180 _deg ) * 10 ; glyph . texture . draw ( penPos + glyph . getOffset () + Vec2 { 0 , offsetY }); penPos . x += glyph . xAdvance ; } } } } \uff08\u88dc\u8db3 2\uff09\u81ea\u7531\u63cf\u753b\u3067\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u304c SDF / MSDF \u65b9\u5f0f\u304b\u3064\u3001 TextStyle \u3092\u9069\u7528\u3059\u308b\u5834\u5408\u306f\u3055\u3089\u306b\u4e8b\u524d\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // MSDF \u30d5\u30a9\u30f3\u30c8 const Font font { FontMethod :: MSDF , 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { const double t = Scene :: Time (); constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; { // MSDF \u30d5\u30a9\u30f3\u30c8 + \u5f71 + \u8f2a\u90ed\u63cf\u753b\u306e\u305f\u3081\u306e\u8a2d\u5b9a const ScopedCustomShader2D shader { Font :: GetPixelShader ( font . method (), TextStyle :: Type :: OutlineShadow ) }; Graphics2D :: SetSDFParameters ( TextStyle :: OutlineShadow ( 0.2 , ColorF { 0.8 , 0.4 , 0.0 }, Vec2 { 2 , 2 }, ColorF { 0.0 , 0.5 })); for ( auto [ index , glyph ] : Indexed ( font . getGlyphs ( text ))) { if ( glyph . codePoint == U '\\n' ) { penPos . x = basePos . x ; penPos . y += font . height (); continue ; } const double offsetY = Math :: Sin ( index * 45 _deg + t * 180 _deg ) * 10 ; glyph . texture . draw ( penPos + glyph . getOffset () + Vec2 { 0 , offsetY }); penPos . x += glyph . xAdvance ; } } } } 8.21 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b \u00b6 \uff08OpenSiv3D v0.6.6 \u3067\u306f\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u306f\u672a\u5b9f\u88c5\u3067\u3059\u3002\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u5b9f\u88c5\u4e88\u5b9a\u3067\u3059\uff09 8.22 \u30d5\u30a9\u30f3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9 \u00b6 Siv3D \u306e Font \u306f\u3001\u521d\u3081\u3066\u63cf\u304f\u6587\u5b57\u306e\u753b\u50cf\u3092\u5185\u90e8\u3067\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u305f\u3081\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u30b2\u30fc\u30e0\u306e\u9014\u4e2d\u3067\u5927\u91cf\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u521d\u3081\u3066\u8868\u793a\u3059\u308b\u3068\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u5b9f\u884c\u6642\u9593\u304c\u9577\u304f\u306a\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4e00\u77ac\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 .preload(text) \u3092\u4f7f\u3046\u3068\u3001 text \u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u3092\uff08\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u9664\u53bb\u3057\u3066\uff09\u5185\u90e8\u306b\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3059\u308b\u305f\u3081\u3001\u30b2\u30fc\u30e0\u306e\u5b9f\u884c\u4e2d\u306e\u8ca0\u8377\u3092\u6291\u5236\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001 .getTexture() \u3092\u4f7f\u3046\u3068\u3001 Font \u306e\u5185\u90e8\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308b Texture \u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Font font { 30 }; font . preload ( U \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,!?0123456789\" ); while ( System :: Update ()) { font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 , ColorF { 0.25 }); font . getTexture (). draw ( 20 , 100 ); } } 8.23 \u7a7a\u306e\u30d5\u30a9\u30f3\u30c8 \u00b6 \u30c7\u30fc\u30bf\u3092\u6301\u305f\u306a\u3044\u7a7a\uff08\u304b\u3089\uff09\u306e\u30d5\u30a9\u30f3\u30c8\u306f\u4f55\u3082\u63cf\u304d\u307e\u305b\u3093\u3002\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u3082\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u304c\u7a7a\u3067\u3042\u308b\u304b\u306f if (font.isEmpty()) \u3082\u3057\u304f\u306f if (not font) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u3044\u3068\u3001\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8\u306b\u306a\u308b Font fontA ; if ( not fontA ) { Print << U \"fontA is empty\" ; } // \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8\u306b\u306a\u308b Font fontB { 40 , U \"aaa/bbb.ttf\" }; if ( not fontB ) { Print << U \"fontB is empty\" ; } while ( System :: Update ()) { // \u4f55\u3082\u63cf\u304b\u308c\u306a\u3044 fontA ( U \"Hello, Siv3D!\" ). draw ( 100 , 100 ); // \u4f55\u3082\u63cf\u304b\u308c\u306a\u3044 fontB ( U \"Hello, Siv3D!\" ). draw ( 100 , 200 ); } } 8.24 \u30d5\u30a9\u30f3\u30c8\u306e\u4ee3\u5165 \u00b6 Font \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Font font ; while ( System :: Update ()) { // \u30d5\u30a9\u30f3\u30c8\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( not font ) && MouseL . down ()) { // \u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u4ee3\u5165 font = Font { 40 }; } if ( font ) { font ( U \"Helo, Siv3D!\" ). draw ( 20 , 20 ); } } } 8.25 \uff08\u30b5\u30f3\u30d7\u30eb\uff09TextStyle \u30d7\u30ec\u30d3\u30e5\u30fc \u00b6 TextStyle \u306e\u52b9\u679c\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3067\u304d\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30de\u30a6\u30b9\u306e\u53f3\u30af\u30ea\u30c3\u30af\u79fb\u52d5\u3084\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u8996\u70b9\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // \u5927\u304d\u3044\u3068\u62e1\u5927\u63cf\u753b\u6642\u306b\u304d\u308c\u3044\u306b\u306a\u308b\u304c\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u751f\u6210\u6642\u9593\u30fb\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u5897\u3048\u308b constexpr int32 fontSize = 70 ; // \u3053\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3001\u6587\u5b57\u306e\u5468\u56f2\u306b\u8f2a\u90ed\u3084\u5f71\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u52a0\u3067\u304d\u308b\u3002\u30d5\u30a9\u30f3\u30c8\u306e\u751f\u6210\u6642\u9593\u30fb\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u5897\u3048\u308b constexpr int32 bufferThickness = 5 ; // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f\u3067\u306f\u8f2a\u90ed\u3084\u5f71\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u5229\u7528\u306f\u4e0d\u53ef const Font fontBitmap { FontMethod :: Bitmap , fontSize , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; // SDF \u65b9\u5f0f const Font fontSDF { FontMethod :: SDF , fontSize , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; fontSDF . setBufferThickness ( bufferThickness ); // MSDF \u65b9\u5f0f const Font fontMSDF { FontMethod :: MSDF , fontSize , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; fontMSDF . setBufferThickness ( bufferThickness ); bool outline = false ; bool shadow = false ; double inner = 0.1 , outer = 0.1 ; Vec2 shadowOffset { 2.0 , 2.0 }; ColorF textColor { 1.0 }; ColorF outlineColor { 0.0 }; ColorF shadowColor { 0.0 , 0.5 }; HSV background = ColorF { 0.8 }; Camera2D camera { Scene :: Center (), 1.0 }; while ( System :: Update ()) { Scene :: SetBackground ( background ); TextStyle textStyle ; { if ( outline && shadow ) { textStyle = TextStyle :: OutlineShadow ( inner , outer , outlineColor , shadowOffset , shadowColor ); } else if ( outline ) { textStyle = TextStyle :: Outline ( inner , outer , outlineColor ); } else if ( shadow ) { textStyle = TextStyle :: Shadow ( shadowOffset , shadowColor ); } } camera . update (); { auto t = camera . createTransformer (); fontBitmap ( U \"Siv3D, \u6e0b\u4e09\u6b21\u5143 (Bitmap)\" ). draw ( Vec2 { 100 , 250 }, textColor ); fontSDF ( U \"Siv3D, \u6e0b\u4e09\u6b21\u5143 (SDF)\" ). draw ( textStyle , Vec2 { 100 , 330 }, textColor ); fontMSDF ( U \"Siv3D, \u6e0b\u4e09\u6b21\u5143 (MSDF)\" ). draw ( textStyle , Vec2 { 100 , 410 }, textColor ); } SimpleGUI :: CheckBox ( outline , U \"Outline\" , Vec2 { 20 , 20 }, 130 ); SimpleGUI :: Slider ( U \"Inner: {:.2f}\" _fmt ( inner ), inner , -0.5 , 0.5 , Vec2 { 160 , 20 }, 120 , 120 , outline ); SimpleGUI :: Slider ( U \"Outer: {:.2f}\" _fmt ( outer ), outer , -0.5 , 0.5 , Vec2 { 160 , 60 }, 120 , 120 , outline ); SimpleGUI :: CheckBox ( shadow , U \"Shadow\" , Vec2 { 20 , 100 }, 130 ); SimpleGUI :: Slider ( U \"offsetX: {:.1f}\" _fmt ( shadowOffset . x ), shadowOffset . x , -5.0 , 5.0 , Vec2 { 160 , 100 }, 120 , 120 , shadow ); SimpleGUI :: Slider ( U \"offsetY: {:.1f}\" _fmt ( shadowOffset . y ), shadowOffset . y , -5.0 , 5.0 , Vec2 { 160 , 140 }, 120 , 120 , shadow ); SimpleGUI :: Headline ( U \"Text\" , Vec2 { 420 , 20 }); SimpleGUI :: Slider ( U \"R\" , textColor . r , Vec2 { 420 , 60 }, 20 , 80 ); SimpleGUI :: Slider ( U \"G\" , textColor . g , Vec2 { 420 , 100 }, 20 , 80 ); SimpleGUI :: Slider ( U \"B\" , textColor . b , Vec2 { 420 , 140 }, 20 , 80 ); SimpleGUI :: Slider ( U \"A\" , textColor . a , Vec2 { 420 , 180 }, 20 , 80 ); SimpleGUI :: Headline ( U \"Outline\" , Vec2 { 540 , 20 }); SimpleGUI :: Slider ( U \"R\" , outlineColor . r , Vec2 { 540 , 60 }, 20 , 80 , outline ); SimpleGUI :: Slider ( U \"G\" , outlineColor . g , Vec2 { 540 , 100 }, 20 , 80 , outline ); SimpleGUI :: Slider ( U \"B\" , outlineColor . b , Vec2 { 540 , 140 }, 20 , 80 , outline ); SimpleGUI :: Slider ( U \"A\" , outlineColor . a , Vec2 { 540 , 180 }, 20 , 80 , outline ); SimpleGUI :: Headline ( U \"Shadow\" , Vec2 { 660 , 20 }); SimpleGUI :: Slider ( U \"R\" , shadowColor . r , Vec2 { 660 , 60 }, 20 , 80 , shadow ); SimpleGUI :: Slider ( U \"G\" , shadowColor . g , Vec2 { 660 , 100 }, 20 , 80 , shadow ); SimpleGUI :: Slider ( U \"B\" , shadowColor . b , Vec2 { 660 , 140 }, 20 , 80 , shadow ); SimpleGUI :: Slider ( U \"A\" , shadowColor . a , Vec2 { 660 , 180 }, 20 , 80 , shadow ); SimpleGUI :: ColorPicker ( background , Vec2 { 780 , 20 }); } }","title":"8. \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"ja-jp/learn/font/#8-\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"8. \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"ja-jp/learn/font/#81-font","text":"\u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw() \u307e\u305f\u306f .drawAt() \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u57fa\u672c\u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font { 50 }; while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001\u305d\u308c\u305e\u308c\u3092 Format \u3057\u305f\u6587\u5b57\u5217\u3092\u3064\u306a\u3052\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 , ColorF { 0.5 , 1.0 , 0.5 }); font ( U \"{}/{}/{}\" _fmt ( 2021 , 12 , 31 )). draw ( 50 , 500 , ColorF { 1.0 , 0.5 , 0.0 }); } }","title":"8.1 Font"},{"location":"ja-jp/learn/font/#82-\u6539\u884c\u3059\u308b","text":"\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 '\\n' \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 }; while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } }","title":"8.2 \u6539\u884c\u3059\u308b"},{"location":"ja-jp/learn/font/#83-\u30d5\u30a9\u30f3\u30c8\u306e\u57fa\u672c\u30b5\u30a4\u30ba","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u57fa\u672c\u30b5\u30a4\u30ba\u306f\u3042\u3068\u304b\u3089\u5909\u66f4\u3067\u304d\u307e\u305b\u3093\u30021 \u3064\u306e Font \u304b\u3089\u3055\u307e\u3056\u307e\u306a\u30b5\u30a4\u30ba\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u306f\u306e\u3061\u307b\u3069\u7d39\u4ecb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u57fa\u672c\u30b5\u30a4\u30ba 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 { 20 }; // \u57fa\u672c\u30b5\u30a4\u30ba 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 { 40 }; // \u57fa\u672c\u30b5\u30a4\u30ba 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 { 60 }; // \u57fa\u672c\u30b5\u30a4\u30ba 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 { 80 }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } }","title":"8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u57fa\u672c\u30b5\u30a4\u30ba"},{"location":"ja-jp/learn/font/#84-\u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e","text":"Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u3068\u30015 \u5730\u57df\u5411\u3051\u306e CJK\uff08\u4e2d\u56fd\u8a9e\u30fb\u97d3\u56fd\u8a9e\u30fb\u65e5\u672c\u8a9e\u5bfe\u5fdc\uff09\u30d5\u30a9\u30f3\u30c8\u3001\u767d\u9ed2\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8\u3001\u30ab\u30e9\u30fc\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u304a\u3044\u3066 Typeface:: \u3067\u66f8\u4f53\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface::Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Typeface \u8aac\u660e Typeface::Thin \u7d30\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Light \u3084\u3084\u7d30\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Regular \u901a\u5e38\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Medium \u3084\u3084\u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Bold \u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Heavy \u3068\u3066\u3082\u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::Black \u6700\u3082\u592a\u3044\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_JP \u65e5\u672c\u8a9e\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_KR \u97d3\u56fd\u8a9e\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_SC \u7c21\u4f53\u5b57\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_TC \u53f0\u6e7e\u7e41\u4f53\u5b57\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::CJK_Regular_HK \u9999\u6e2f\u7e41\u4f53\u5b57\u30c7\u30b6\u30a4\u30f3\u306e CJK \u30d5\u30a9\u30f3\u30c8 Typeface::MonochromeEmoji \u30e2\u30ce\u30af\u30ed\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Typeface::ColorEmoji \u30ab\u30e9\u30fc\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 # include <Siv3D.hpp> void Main () { const Font fontThin { 36 , Typeface :: Thin }; const Font fontLight { 36 , Typeface :: Light }; const Font fontRegular { 36 , Typeface :: Regular }; const Font fontMedium { 36 , Typeface :: Medium }; const Font fontBold { 36 , Typeface :: Bold }; const Font fontHeavy { 36 , Typeface :: Heavy }; const Font fontBlack { 36 , Typeface :: Black }; const Font fontJP { 36 , Typeface :: CJK_Regular_JP }; const Font fontKR { 36 , Typeface :: CJK_Regular_KR }; const Font fontSC { 36 , Typeface :: CJK_Regular_SC }; const Font fontTC { 36 , Typeface :: CJK_Regular_TC }; const Font fontHK { 36 , Typeface :: CJK_Regular_HK }; const Font fontMono { 36 , Typeface :: MonochromeEmoji }; // \u30ab\u30e9\u30fc\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8\u306f\u3001\u30b5\u30a4\u30ba\u306e\u6307\u5b9a\u304c\u7121\u8996\u3055\u308c\u308b\u4ed5\u69d8 const Font fontEmoji { 36 , Typeface :: ColorEmoji }; const String s0 = U \"Hello, Siv3D!\" ; const String s1 = U \"\u3053\u3093\u306b\u3061\u306f \u4f60\u597d \uc548\ub155\ud558\uc138\uc694 \u9aa8\u66dc\u559d\u611b\u9059\u6247\" ; const String s2 = U \"\ud83d\udc08\ud83d\udc15\ud83d\ude80\" ; while ( System :: Update ()) { fontThin ( s0 ). draw ( 20 , 20 ); fontLight ( s0 ). draw ( 20 , 60 ); fontRegular ( s0 ). draw ( 20 , 100 ); fontMedium ( s0 ). draw ( 20 , 140 ); fontBold ( s0 ). draw ( 20 , 180 ); fontHeavy ( s0 ). draw ( 20 , 220 ); fontBlack ( s0 ). draw ( 20 , 260 ); fontJP ( s1 ). draw ( 20 , 300 ); fontKR ( s1 ). draw ( 20 , 340 ); fontSC ( s1 ). draw ( 20 , 380 ); fontTC ( s1 ). draw ( 20 , 420 ); fontHK ( s1 ). draw ( 20 , 460 ); fontMono ( s2 ). draw ( 20 , 500 ); fontEmoji ( s2 ). draw ( 20 , 540 ); } }","title":"8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"ja-jp/learn/font/#85-\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u306e\u8ffd\u52a0","text":"1 \u3064\u3067\u5168\u3066\u306e\u6587\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u69d8\u3005\u306a\u8a00\u8a9e\u3084\u5b57\u7a2e\u304c\u4ea4\u3056\u308b\u30c6\u30ad\u30b9\u30c8\u3092 1 \u3064\u306e Font \u3067\u8868\u793a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u57fa\u672c\u306e\u30d5\u30a9\u30f3\u30c8\u3067\u63cf\u3051\u306a\u3044\u6587\u5b57\u304c\u898b\u3064\u304b\u3063\u305f\u3068\u304d\u3001\u3082\u3057\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3067\u63cf\u3051\u305f\u3089\u3001\u305d\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u306b\u306f\u3001 .addFallback() \u3067\u4f5c\u6210\u6e08\u307f\u306e Font \u3092\u6e21\u3057\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u306f\u4f55\u500b\u3067\u3082\u8a2d\u5b9a\u3067\u304d\u3001\u5148\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u304c\u512a\u5148\u3057\u3066\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font fontA { 36 , Typeface :: Regular }; const Font fontB { 36 , Typeface :: Regular }; const Font fontC { 36 , Typeface :: Regular }; const Font fontJP { 36 , Typeface :: CJK_Regular_JP }; const Font fontEmoji { 36 , Typeface :: ColorEmoji }; // fontB \u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092 1 \u3064\u8ffd\u52a0 fontB . addFallback ( fontJP ); // fontC \u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u3092 2 \u3064\u8ffd\u52a0 fontC . addFallback ( fontJP ); fontC . addFallback ( fontEmoji ); const String s = U \"Hello! \u3053\u3093\u306b\u3061\u306f \u4f60\u597d \uc548\ub155\ud558\uc138\uc694 \ud83d\udc08\ud83d\udc15\ud83d\ude80\" ; while ( System :: Update ()) { fontA ( s ). draw ( 20 , 20 ); fontB ( s ). draw ( 20 , 60 ); fontC ( s ). draw ( 20 , 100 ); } }","title":"8.5 \u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30d5\u30a9\u30f3\u30c8\u306e\u8ffd\u52a0"},{"location":"ja-jp/learn/font/#86-\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046","text":"\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // RocknRollOne-Regular.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font { 50 , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; while ( System :: Update ()) { font ( U \"Hello, Siv3D! \\n \u3053\u3093\u306b\u3061\u306f\uff01\" ). draw ( 20 , 20 ); } }","title":"8.6 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046"},{"location":"ja-jp/learn/font/#87-pc-\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046","text":"PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem::GetFolderPath() \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem::GetFolderPath() \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ /usr/share/fonts/ SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ /usr/local/share/fonts/ (\u5b58\u5728\u3059\u308b\u5834\u5408) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ /usr/local/share/fonts/ (\u5b58\u5728\u3059\u308b\u5834\u5408) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font { 60 , FileSystem :: GetFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" }; # elif SIV3D_PLATFORM(MACOS) const Font font { 60 , FileSystem :: GetFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" }; # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } SIV3D_PLATFORM(WINDOWS) \u3084 SIV3D_PLATFORM(MACOS) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002","title":"8.7 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/learn/font/#88-\u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Regular }; // \u30dc\u30fc\u30eb\u30c9 const Font fontBold { 50 , Typeface :: Regular , FontStyle :: Bold }; // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic { 50 , Typeface :: Regular , FontStyle :: Italic }; // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic { 50 , Typeface :: Regular , FontStyle :: BoldItalic }; const String text = U \"Hello, Siv3D! \u3053\u3093\u306b\u3061\u306f\u3002\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } }","title":"8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/font/#89-\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046","text":"\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a9\u30f3\u30c8\u306f\u30d5\u30a9\u30f3\u30c8\u30b9\u30bf\u30a4\u30eb\u306b FontStyle::Bitmap \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305a\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Font font { 32 , U \"example/font/DotGothic16/DotGothic16-Regular.ttf\" }; const Font fontB { 32 , U \"example/font/DotGothic16/DotGothic16-Regular.ttf\" , FontStyle :: Bitmap }; const String text = U \"Hello, Siv3D! \u3053\u3093\u306b\u3061\u306f\u3002\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 , Palette :: Black ); fontB ( text ). draw ( 20 , 60 , Palette :: Black ); } }","title":"8.9 \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/learn/font/#810-\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f","text":"\u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase() \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 { 20 }; const Font font30 { 30 , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; const Font font50 { 50 }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font30 ( text ). draw ( 160 , 100 ); font50 ( text ). draw ( 380 , 100 ); Rect { 0 , 400 , 800 , 10 }. draw ( ColorF { 0.3 }); // (20, 400) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 400) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font30 ( text ). drawBase ( 160 , 400 ); // (380, 400) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font50 ( text ). drawBase ( 380 , 400 ); } }","title":"8.10 \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"ja-jp/learn/font/#811-\u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b","text":"\u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 }; constexpr Vec2 pos { 400 , 300 }; const String text = U \"Hello, Siv3D!\" ; size_t index = 0 ; while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index , { U \"topLeft\" , U \"bottomLeft\" , U \"bottomRight\" , U \"bottomCenter\" , U \"leftCenter\" , U \"center\" }, Vec2 { 20 , 20 }); Circle { pos , 2 }. draw ( Palette :: Red ); if ( index == 0 ) { font ( text ). draw ( pos ); } else if ( index == 1 ) { // \u5de6\u4e0b\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos ); } else if ( index == 2 ) { // \u53f3\u4e0b\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos ); } else if ( index == 3 ) { // \u4e0b\u8fba\u4e2d\u592e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter = pos ); } else if ( index == 4 ) { // \u5de6\u8fba\u4e2d\u592e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: leftCenter = pos ); } else { // \u4e2d\u592e\u3092\u57fa\u6e96 font ( text ). drawAt ( pos ); } } }","title":"8.11 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"ja-jp/learn/font/#812-\u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b","text":"Font \u306e .draw() \u3084 .drawAt() \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region() \u3084 .regionAt() \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u306a\u3057\u3067\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 }; const String text = U \"Hello, Siv3D!\" ; constexpr Vec2 pos { 20 , 20 }; // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const RectF rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF { 0.25 }); // \u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092 font ( text ) . drawAt ( Scene :: Center ()) . stretched ( 40 , 0 ) // \u6a2a\u306b\u5e83\u3052\u3066 . shearedX ( 20 ) // \u5e73\u884c\u56db\u8fba\u5f62\u306b\u3057\u3066 . drawFrame ( 2 ); // \u67a0\u3092\u63cf\u304f } }","title":"8.12 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/learn/font/#813-\u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f","text":"Font::draw() \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u9577\u65b9\u5f62\u5185\u306b\u30c6\u30ad\u30b9\u30c8\u304c\u53ce\u307e\u3063\u305f\u5834\u5408\u3001\u95a2\u6570\u306f true \u3092\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001\u30c6\u30ad\u30b9\u30c8\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Font font { 25 , Typeface :: Bold }; const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 { 50 , 20 , 200 , 100 }; constexpr Rect rect2 { 50 , 160 , 300 , 100 }; constexpr Rect rect3 { 50 , 300 , 400 , 100 }; while ( System :: Update ()) { rect1 . draw (); if ( not font ( text ). draw ( rect1 . stretched ( -10 ), ColorF { 0.25 })) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); if ( not font ( text ). draw ( rect2 . stretched ( -10 ), ColorF { 0.25 })) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); if ( not font ( text ). draw ( rect3 . stretched ( -10 ), ColorF ( 0.25 ))) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } }","title":"8.13 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"ja-jp/learn/font/#814-\u30c6\u30ad\u30b9\u30c8\u3092-1-\u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b","text":"String \u306f\u3001 .substr(0, N) \u3092\u4f7f\u3046\u3068\u30010 \u6587\u5b57\u76ee\u304b\u3089 N \u6587\u5b57\u5206\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002N \u3092\u6642\u9593\u306b\u5fdc\u3058\u3066\u5897\u3084\u3059\u3053\u3068\u3067 1 \u6587\u5b57\u305a\u3064\u30c6\u30ad\u30b9\u30c8\u304c\u5897\u3048\u3066\u3044\u304f\u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002N \u304c\u5b9f\u969b\u306e\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3082\u305d\u306e\u5206\u306f\u7121\u8996\u3055\u308c\u308b\u306e\u3067\u5927\u4e08\u592b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } }","title":"8.14 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b"},{"location":"ja-jp/learn/font/#815-\u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b2-\u56de\u63cf\u753b\u3059\u308b\u624b\u6cd5","text":"\u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2::movedBy(x, y) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.7 , 0.9 , 0.8 }); const Font font { 100 , Typeface :: Bold }; constexpr Vec2 center { 400 , 150 }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF { 0.0 , 0.5 }); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } }","title":"8.15 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\uff082 \u56de\u63cf\u753b\u3059\u308b\u624b\u6cd5\uff09"},{"location":"ja-jp/learn/font/#816-\u81ea\u7531\u306b\u62e1\u5927\u7e2e\u5c0f\u3067\u304d\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046sdf--msdf","text":"\u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u57fa\u672c\u30b5\u30a4\u30ba\u3067\u5404\u6587\u5b57\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3057\u305f\uff08 \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f \uff09\u3002\u305d\u306e\u305f\u3081\u3001\u57fa\u672c\u30b5\u30a4\u30ba\u3088\u308a\u5927\u304d\u306a\u30b5\u30a4\u30ba\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u753b\u50cf\u304c\u307c\u3084\u3051\u308b\u3068\u3044\u3046\u5236\u9650\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u8f2a\u90ed\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 \u4e00\u65b9\u3001 SDF \u65b9\u5f0f / MSDF \u65b9\u5f0f \u306f\u3001\u6587\u5b57\u3054\u3068\u306e Distance field \u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u57fa\u672c\u30b5\u30a4\u30ba\u4ee5\u4e0a\u306b\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002SDF / MSDF \u306b\u306f\u5f71\u3084\u8f2a\u90ed\u306a\u3069\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092 1 \u56de\u306e draw \u3067\u884c\u3048\u308b\u4ed5\u7d44\u307f\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u5404\u65b9\u5f0f\u306e\u5229\u70b9\u3068\u6b20\u70b9\u3092\u6b21\u306e\u8868\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002 \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u624b\u6cd5 \u7e2e\u5c0f \u62e1\u5927 \u5f71 \u8f2a\u90ed \u5b9f\u884c\u6642\u8ca0\u8377 \u5099\u8003 FontMethod::Bitmap \u3007 \u25b3 \u3007 (2 \u56de draw) \u00d7 \u4f4e \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u624b\u6cd5 FontMethod::SDF \u3007 \u3007 \u3007 \u3007 \u4e2d \u6587\u5b57\u306e\u89d2\u304c\u4e38\u304f\u306a\u308b\u306a\u3069\u3001\u7d30\u90e8\u306e\u60c5\u5831\u304c\u5931\u308f\u308c\u3084\u3059\u3044 FontMethod::MSDF \u25ce \u25ce \u3007 \u3007 \u9ad8 SDF \u3088\u308a\u9ad8\u54c1\u8cea SDF / MSDF \u30d5\u30a9\u30f3\u30c8\u3067\u8a2d\u5b9a\u3059\u308b\u57fa\u672c\u30b5\u30a4\u30ba\u306f\u3001 Distance Field \u306e\u30b5\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u306f\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5fdc\u3058\u3066\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u304b\u3068\u3044\u3063\u3066\u5927\u304d\u3059\u304e\u308b\u3068\u63cf\u753b\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002SDF / MSDF \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a\u57fa\u672c\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 .draw() \u3084 .drawAt() , .drawBase() \u306f\u3001\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5404\u65b9\u5f0f\u306b\u3064\u3044\u3066\u3001\u57fa\u672c\u30b5\u30a4\u30ba\u3088\u308a\u5927\u304d\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u3044\u305f\u3068\u304d\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u57fa\u672c\u30b5\u30a4\u30ba const int32 baseSize = 40 ; const Font font { baseSize , Typeface :: Bold }; const Font fontSDF { FontMethod :: SDF , baseSize , Typeface :: Bold }; const Font fontMSDF { FontMethod :: MSDF , baseSize , Typeface :: Bold }; const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u6587\u5b57\u306e\u30b5\u30a4\u30ba\uff08\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u57fa\u672c\u30b5\u30a4\u30ba\u3067\u63cf\u304b\u308c\u308b\uff09 const double fontSize = 120 ; // \u901a\u5e38\uff08\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f\uff09 font ( text ). draw ( 20 , 20 ); font ( text ). draw ( fontSize , 20 , 50 ); // SDF \u65b9\u5f0f fontSDF ( text ). draw ( 20 , 220 ); fontSDF ( text ). draw ( fontSize , 20 , 250 ); // MSDF \u65b9\u5f0f fontMSDF ( text ). draw ( 20 , 420 ); fontMSDF ( text ). draw ( fontSize , 20 , 450 ); } }","title":"8.16 \u81ea\u7531\u306b\u62e1\u5927\u7e2e\u5c0f\u3067\u304d\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046\uff08SDF / MSDF\uff09"},{"location":"ja-jp/learn/font/#817-\u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308bsdf--msdf","text":"SDF / MSDF \u65b9\u5f0f\u306e\u30d5\u30a9\u30f3\u30c8\u306f\u3001 TextStyle \u3092 .draw() \u3084 .drawAt() , .drawBase() \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7c21\u5358\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u4e0e\u3067\u304d\u307e\u3059\u3002\u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\u306b\u306f TextStyle::Shadow(\u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8, \u5f71\u306e\u8272) \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u3068\u3066\u3082\u5927\u304d\u304f Distance Field \u306e\u7bc4\u56f2\u5916\u306b\u53ca\u3093\u3060\u5834\u5408\u3001\u5f71\u304c\u9014\u5207\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u308c\u3092\u9632\u3050\u306b\u306f Font \u306e .setBufferThickness(Distance Field \u306e\u4f59\u767d\u306e\u30b5\u30a4\u30ba) \u3067\u3001Distance Field \u3092\u5927\u304d\u3081\u306b\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 2 \u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u3084\u63cf\u753b\u8ca0\u8377\u304c\u5897\u52a0\u3057\u307e\u3059\u304c\u3001\u5f71\u3084\u8f2a\u90ed\u306e\u52b9\u679c\u3092\u3088\u308a\u5e83\u304f\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const int32 baseSize = 40 ; const Font fontSDF { FontMethod :: SDF , baseSize , Typeface :: Bold }; const Font fontMSDF { FontMethod :: MSDF , baseSize , Typeface :: Bold }; const String text = U \"Hello, Siv3D!\" ; const int32 bufferThickness = 3 ; fontSDF . setBufferThickness ( bufferThickness ); fontMSDF . setBufferThickness ( bufferThickness ); while ( System :: Update ()) { const Vec2 shadowOffset { 2 , 2 }; const ColorF shadowColor { 0.0 , 0.5 }; const double fontSize = 120 ; // SDF \u65b9\u5f0f fontSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), 20 , 20 ); fontSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), fontSize , 20 , 60 ); // MSDF \u65b9\u5f0f fontMSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), 20 , 220 ); fontMSDF ( text ). draw ( TextStyle :: Shadow ( shadowOffset , shadowColor ), fontSize , 20 , 260 ); } }","title":"8.17 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\uff08SDF / MSDF\uff09"},{"location":"ja-jp/learn/font/#818-\u6587\u5b57\u306b\u8f2a\u90ed\u3092\u4ed8\u3051\u308bsdf--msdf","text":"\u6587\u5b57\u306b\u8f2a\u90ed\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\u306b\u306f - TextStyle::Outline(\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272) - TextStyle::Outline(\u5185\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u5916\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272) \u306e\u3044\u305a\u308c\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u6587\u5b57\u306b\u8f2a\u90ed\u3068\u5f71\u3001\u4e21\u65b9\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b\u306b\u306f - TextStyle::OutlineShadow(\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272, \u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8, \u5f71\u306e\u8272) - TextStyle::OutlineShadow(\u5185\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u5916\u5074\u65b9\u5411\u306e\u8f2a\u90ed\u30b9\u30b1\u30fc\u30eb, \u8f2a\u90ed\u306e\u8272, \u5f71\u306e\u30aa\u30d5\u30bb\u30c3\u30c8, \u5f71\u306e\u8272) \u306e\u3044\u305a\u308c\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const int32 baseSize = 40 ; const Font fontSDF { FontMethod :: SDF , baseSize , Typeface :: Bold }; const Font fontMSDF { FontMethod :: MSDF , baseSize , Typeface :: Bold }; const String text = U \"Hello, Siv3D!\" ; const int32 bufferThickness = 3 ; fontSDF . setBufferThickness ( bufferThickness ); fontMSDF . setBufferThickness ( bufferThickness ); while ( System :: Update ()) { const double outlineScale = 0.2 ; const ColorF outlineColor { 0.0 , 0.3 , 0.6 }; const Vec2 shadowOffset { 2 , 2 }; const ColorF shadowColor { 0.0 , 0.5 }; const double fontSize = 120 ; // SDF \u65b9\u5f0f fontSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), 20 , 20 ); fontSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), fontSize , 20 , 40 ); fontSDF ( text ). draw ( TextStyle :: OutlineShadow ( outlineScale , outlineColor , shadowOffset , shadowColor ), fontSize , 20 , 150 ); // MSDF \u65b9\u5f0f fontMSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), 20 , 300 ); fontMSDF ( text ). draw ( TextStyle :: Outline ( outlineScale , outlineColor ), fontSize , 20 , 320 ); fontMSDF ( text ). draw ( TextStyle :: OutlineShadow ( outlineScale , outlineColor , shadowOffset , shadowColor ), fontSize , 20 , 430 ); } }","title":"8.18 \u6587\u5b57\u306b\u8f2a\u90ed\u3092\u4ed8\u3051\u308b\uff08SDF / MSDF\uff09"},{"location":"ja-jp/learn/font/#819-\u6587\u5b57\u5358\u4f4d\u3067\u81ea\u7531\u63cf\u753b\u3092\u3059\u308b\u57fa\u672c","text":"Font \u306e .getGlyphs(text) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u500b\u3005\u306e\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Glyph \u306e .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .getOffset() \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font . getGlyphs ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV { penPos . x }; // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b // FontMethod \u304c\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f\u306e\u5834\u5408\u306b\u9650\u308a\u3001Math::Round() \u3067\u6574\u6570\u5ea7\u6a19\u306b\u3059\u308b\u3068\u54c1\u8cea\u304c\u5411\u4e0a glyph . texture . draw ( Math :: Round ( penPos + glyph . getOffset ()), color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } }","title":"8.19 \u6587\u5b57\u5358\u4f4d\u3067\u81ea\u7531\u63cf\u753b\u3092\u3059\u308b\uff08\u57fa\u672c\uff09"},{"location":"ja-jp/learn/font/#820-\u6587\u5b57\u5358\u4f4d\u3067\u81ea\u7531\u63cf\u753b\u3092\u3059\u308b\u5fdc\u7528","text":"for (auto [i, value] : Indexed(values)) \u306f\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 size_t i = 0 ; for ( const auto & value : values ) { ++ i ; } \u3053\u308c\u3092\u5229\u7528\u3057\u3066\u30011 \u6587\u5b57\u3054\u3068\u306b\u63cf\u753b\u3059\u308b\u4f4d\u7f6e\u3092\u305a\u3089\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { const Font font { 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { const double t = Scene :: Time (); constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7\u3002index \u306b\u306f\u4f55\u756a\u76ee\u3067\u3042\u308b\u304b\u304c\u683c\u7d0d\u3055\u308c\u308b for ( auto [ index , glyph ] : Indexed ( font . getGlyphs ( text ))) { if ( glyph . codePoint == U '\\n' ) { penPos . x = basePos . x ; penPos . y += font . height (); continue ; } const double offsetY = Math :: Sin ( index * 45 _deg + t * 180 _deg ) * 10 ; glyph . texture . draw ( penPos + glyph . getOffset () + Vec2 { 0 , offsetY }); penPos . x += glyph . xAdvance ; } } } \uff08\u88dc\u8db3 1\uff09\u81ea\u7531\u63cf\u753b\u3067\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u304c SDF / MSDF \u65b9\u5f0f\u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b ScopedCustomShader2D \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6709\u52b9\u306a\u30b9\u30b3\u30fc\u30d7\u3067\u63cf\u753b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // MSDF \u30d5\u30a9\u30f3\u30c8 const Font font { FontMethod :: MSDF , 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { const double t = Scene :: Time (); constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; { // MSDF \u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b\u306e\u305f\u3081\u306e\u8a2d\u5b9a const ScopedCustomShader2D shader { Font :: GetPixelShader ( font . method ()) }; for ( auto [ index , glyph ] : Indexed ( font . getGlyphs ( text ))) { if ( glyph . codePoint == U '\\n' ) { penPos . x = basePos . x ; penPos . y += font . height (); continue ; } const double offsetY = Math :: Sin ( index * 45 _deg + t * 180 _deg ) * 10 ; glyph . texture . draw ( penPos + glyph . getOffset () + Vec2 { 0 , offsetY }); penPos . x += glyph . xAdvance ; } } } } \uff08\u88dc\u8db3 2\uff09\u81ea\u7531\u63cf\u753b\u3067\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u304c SDF / MSDF \u65b9\u5f0f\u304b\u3064\u3001 TextStyle \u3092\u9069\u7528\u3059\u308b\u5834\u5408\u306f\u3055\u3089\u306b\u4e8b\u524d\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // MSDF \u30d5\u30a9\u30f3\u30c8 const Font font { FontMethod :: MSDF , 50 , Typeface :: Bold }; const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { const double t = Scene :: Time (); constexpr Vec2 basePos { 20 , 20 }; Vec2 penPos { basePos }; { // MSDF \u30d5\u30a9\u30f3\u30c8 + \u5f71 + \u8f2a\u90ed\u63cf\u753b\u306e\u305f\u3081\u306e\u8a2d\u5b9a const ScopedCustomShader2D shader { Font :: GetPixelShader ( font . method (), TextStyle :: Type :: OutlineShadow ) }; Graphics2D :: SetSDFParameters ( TextStyle :: OutlineShadow ( 0.2 , ColorF { 0.8 , 0.4 , 0.0 }, Vec2 { 2 , 2 }, ColorF { 0.0 , 0.5 })); for ( auto [ index , glyph ] : Indexed ( font . getGlyphs ( text ))) { if ( glyph . codePoint == U '\\n' ) { penPos . x = basePos . x ; penPos . y += font . height (); continue ; } const double offsetY = Math :: Sin ( index * 45 _deg + t * 180 _deg ) * 10 ; glyph . texture . draw ( penPos + glyph . getOffset () + Vec2 { 0 , offsetY }); penPos . x += glyph . xAdvance ; } } } }","title":"8.20 \u6587\u5b57\u5358\u4f4d\u3067\u81ea\u7531\u63cf\u753b\u3092\u3059\u308b\uff08\u5fdc\u7528\uff09"},{"location":"ja-jp/learn/font/#821-\u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b","text":"\uff08OpenSiv3D v0.6.6 \u3067\u306f\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u306b\u95a2\u3059\u308b\u6a5f\u80fd\u306f\u672a\u5b9f\u88c5\u3067\u3059\u3002\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u5b9f\u88c5\u4e88\u5b9a\u3067\u3059\uff09","title":"8.21 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/font/#822-\u30d5\u30a9\u30f3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9","text":"Siv3D \u306e Font \u306f\u3001\u521d\u3081\u3066\u63cf\u304f\u6587\u5b57\u306e\u753b\u50cf\u3092\u5185\u90e8\u3067\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u305f\u3081\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u30b2\u30fc\u30e0\u306e\u9014\u4e2d\u3067\u5927\u91cf\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u521d\u3081\u3066\u8868\u793a\u3059\u308b\u3068\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u5b9f\u884c\u6642\u9593\u304c\u9577\u304f\u306a\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4e00\u77ac\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 .preload(text) \u3092\u4f7f\u3046\u3068\u3001 text \u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u3092\uff08\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u9664\u53bb\u3057\u3066\uff09\u5185\u90e8\u306b\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3059\u308b\u305f\u3081\u3001\u30b2\u30fc\u30e0\u306e\u5b9f\u884c\u4e2d\u306e\u8ca0\u8377\u3092\u6291\u5236\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001 .getTexture() \u3092\u4f7f\u3046\u3068\u3001 Font \u306e\u5185\u90e8\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308b Texture \u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Font font { 30 }; font . preload ( U \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,!?0123456789\" ); while ( System :: Update ()) { font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 , ColorF { 0.25 }); font . getTexture (). draw ( 20 , 100 ); } }","title":"8.22 \u30d5\u30a9\u30f3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9"},{"location":"ja-jp/learn/font/#823-\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8","text":"\u30c7\u30fc\u30bf\u3092\u6301\u305f\u306a\u3044\u7a7a\uff08\u304b\u3089\uff09\u306e\u30d5\u30a9\u30f3\u30c8\u306f\u4f55\u3082\u63cf\u304d\u307e\u305b\u3093\u3002\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u3082\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u304c\u7a7a\u3067\u3042\u308b\u304b\u306f if (font.isEmpty()) \u3082\u3057\u304f\u306f if (not font) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u3044\u3068\u3001\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8\u306b\u306a\u308b Font fontA ; if ( not fontA ) { Print << U \"fontA is empty\" ; } // \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8\u306b\u306a\u308b Font fontB { 40 , U \"aaa/bbb.ttf\" }; if ( not fontB ) { Print << U \"fontB is empty\" ; } while ( System :: Update ()) { // \u4f55\u3082\u63cf\u304b\u308c\u306a\u3044 fontA ( U \"Hello, Siv3D!\" ). draw ( 100 , 100 ); // \u4f55\u3082\u63cf\u304b\u308c\u306a\u3044 fontB ( U \"Hello, Siv3D!\" ). draw ( 100 , 200 ); } }","title":"8.23 \u7a7a\u306e\u30d5\u30a9\u30f3\u30c8"},{"location":"ja-jp/learn/font/#824-\u30d5\u30a9\u30f3\u30c8\u306e\u4ee3\u5165","text":"Font \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Font font ; while ( System :: Update ()) { // \u30d5\u30a9\u30f3\u30c8\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( not font ) && MouseL . down ()) { // \u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u4ee3\u5165 font = Font { 40 }; } if ( font ) { font ( U \"Helo, Siv3D!\" ). draw ( 20 , 20 ); } } }","title":"8.24 \u30d5\u30a9\u30f3\u30c8\u306e\u4ee3\u5165"},{"location":"ja-jp/learn/font/#825-\u30b5\u30f3\u30d7\u30ebtextstyle-\u30d7\u30ec\u30d3\u30e5\u30fc","text":"TextStyle \u306e\u52b9\u679c\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3067\u304d\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30de\u30a6\u30b9\u306e\u53f3\u30af\u30ea\u30c3\u30af\u79fb\u52d5\u3084\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u8996\u70b9\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // \u5927\u304d\u3044\u3068\u62e1\u5927\u63cf\u753b\u6642\u306b\u304d\u308c\u3044\u306b\u306a\u308b\u304c\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u751f\u6210\u6642\u9593\u30fb\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u5897\u3048\u308b constexpr int32 fontSize = 70 ; // \u3053\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3001\u6587\u5b57\u306e\u5468\u56f2\u306b\u8f2a\u90ed\u3084\u5f71\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u52a0\u3067\u304d\u308b\u3002\u30d5\u30a9\u30f3\u30c8\u306e\u751f\u6210\u6642\u9593\u30fb\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u5897\u3048\u308b constexpr int32 bufferThickness = 5 ; // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u65b9\u5f0f\u3067\u306f\u8f2a\u90ed\u3084\u5f71\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u5229\u7528\u306f\u4e0d\u53ef const Font fontBitmap { FontMethod :: Bitmap , fontSize , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; // SDF \u65b9\u5f0f const Font fontSDF { FontMethod :: SDF , fontSize , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; fontSDF . setBufferThickness ( bufferThickness ); // MSDF \u65b9\u5f0f const Font fontMSDF { FontMethod :: MSDF , fontSize , U \"example/font/RocknRoll/RocknRollOne-Regular.ttf\" }; fontMSDF . setBufferThickness ( bufferThickness ); bool outline = false ; bool shadow = false ; double inner = 0.1 , outer = 0.1 ; Vec2 shadowOffset { 2.0 , 2.0 }; ColorF textColor { 1.0 }; ColorF outlineColor { 0.0 }; ColorF shadowColor { 0.0 , 0.5 }; HSV background = ColorF { 0.8 }; Camera2D camera { Scene :: Center (), 1.0 }; while ( System :: Update ()) { Scene :: SetBackground ( background ); TextStyle textStyle ; { if ( outline && shadow ) { textStyle = TextStyle :: OutlineShadow ( inner , outer , outlineColor , shadowOffset , shadowColor ); } else if ( outline ) { textStyle = TextStyle :: Outline ( inner , outer , outlineColor ); } else if ( shadow ) { textStyle = TextStyle :: Shadow ( shadowOffset , shadowColor ); } } camera . update (); { auto t = camera . createTransformer (); fontBitmap ( U \"Siv3D, \u6e0b\u4e09\u6b21\u5143 (Bitmap)\" ). draw ( Vec2 { 100 , 250 }, textColor ); fontSDF ( U \"Siv3D, \u6e0b\u4e09\u6b21\u5143 (SDF)\" ). draw ( textStyle , Vec2 { 100 , 330 }, textColor ); fontMSDF ( U \"Siv3D, \u6e0b\u4e09\u6b21\u5143 (MSDF)\" ). draw ( textStyle , Vec2 { 100 , 410 }, textColor ); } SimpleGUI :: CheckBox ( outline , U \"Outline\" , Vec2 { 20 , 20 }, 130 ); SimpleGUI :: Slider ( U \"Inner: {:.2f}\" _fmt ( inner ), inner , -0.5 , 0.5 , Vec2 { 160 , 20 }, 120 , 120 , outline ); SimpleGUI :: Slider ( U \"Outer: {:.2f}\" _fmt ( outer ), outer , -0.5 , 0.5 , Vec2 { 160 , 60 }, 120 , 120 , outline ); SimpleGUI :: CheckBox ( shadow , U \"Shadow\" , Vec2 { 20 , 100 }, 130 ); SimpleGUI :: Slider ( U \"offsetX: {:.1f}\" _fmt ( shadowOffset . x ), shadowOffset . x , -5.0 , 5.0 , Vec2 { 160 , 100 }, 120 , 120 , shadow ); SimpleGUI :: Slider ( U \"offsetY: {:.1f}\" _fmt ( shadowOffset . y ), shadowOffset . y , -5.0 , 5.0 , Vec2 { 160 , 140 }, 120 , 120 , shadow ); SimpleGUI :: Headline ( U \"Text\" , Vec2 { 420 , 20 }); SimpleGUI :: Slider ( U \"R\" , textColor . r , Vec2 { 420 , 60 }, 20 , 80 ); SimpleGUI :: Slider ( U \"G\" , textColor . g , Vec2 { 420 , 100 }, 20 , 80 ); SimpleGUI :: Slider ( U \"B\" , textColor . b , Vec2 { 420 , 140 }, 20 , 80 ); SimpleGUI :: Slider ( U \"A\" , textColor . a , Vec2 { 420 , 180 }, 20 , 80 ); SimpleGUI :: Headline ( U \"Outline\" , Vec2 { 540 , 20 }); SimpleGUI :: Slider ( U \"R\" , outlineColor . r , Vec2 { 540 , 60 }, 20 , 80 , outline ); SimpleGUI :: Slider ( U \"G\" , outlineColor . g , Vec2 { 540 , 100 }, 20 , 80 , outline ); SimpleGUI :: Slider ( U \"B\" , outlineColor . b , Vec2 { 540 , 140 }, 20 , 80 , outline ); SimpleGUI :: Slider ( U \"A\" , outlineColor . a , Vec2 { 540 , 180 }, 20 , 80 , outline ); SimpleGUI :: Headline ( U \"Shadow\" , Vec2 { 660 , 20 }); SimpleGUI :: Slider ( U \"R\" , shadowColor . r , Vec2 { 660 , 60 }, 20 , 80 , shadow ); SimpleGUI :: Slider ( U \"G\" , shadowColor . g , Vec2 { 660 , 100 }, 20 , 80 , shadow ); SimpleGUI :: Slider ( U \"B\" , shadowColor . b , Vec2 { 660 , 140 }, 20 , 80 , shadow ); SimpleGUI :: Slider ( U \"A\" , shadowColor . a , Vec2 { 660 , 180 }, 20 , 80 , shadow ); SimpleGUI :: ColorPicker ( background , Vec2 { 780 , 20 }); } }","title":"8.25 \uff08\u30b5\u30f3\u30d7\u30eb\uff09TextStyle \u30d7\u30ec\u30d3\u30e5\u30fc"},{"location":"ja-jp/learn/geometry/","text":"11. \u3042\u305f\u308a\u5224\u5b9a \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 11.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc \u00b6 \u3042\u308b\u56f3\u5f62 shape \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 shape.mouseOver() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3082\u3046\u5c11\u3057\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } } 11.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af \u00b6 \u3042\u308b\u56f3\u5f62 shape \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 shape.leftClicked() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 .leftClicked() \u306f\u3001\u30af\u30ea\u30c3\u30af\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u62bc\u3057\u8fbc\u3093\u3060\u30d5\u30ec\u30fc\u30e0\u306e\u307f true \u3092\u8fd4\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u305d\u308c\u4ee5\u964d\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } } 11.3 \u56f3\u5f62\u304c\u62bc\u3055\u308c\u3066\u3044\u308b \u00b6 \u3042\u308b\u56f3\u5f62 shape \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 shape.leftPressed() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 .leftPressed() \u306f\u3001\u30af\u30ea\u30c3\u30af\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u62bc\u3057\u8fbc\u3093\u3060\u30d5\u30ec\u30fc\u30e0\u304a\u3088\u3073\u3001\u305d\u308c\u4ee5\u964d\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u5834\u5408\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } } 11.4 \u56f3\u5f62\u306e\u4ea4\u5dee \u00b6 2 \u3064\u306e\u56f3\u5f62 a \u3068 b \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 a.intersects(b) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect { 100 , 50 , 200 , 100 }; constexpr Circle circle { 200 , 400 , 100 }; const Polygon star = Shape2D :: Star ( 200 , Vec2 { 550 , 300 }); while ( System :: Update ()) { const Circle c { Cursor :: Pos (), 30 }; rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } 11.5 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080 \u00b6 \u3042\u308b\u56f3\u5f62 a \u304c\u5225\u306e\u56f3\u5f62 b \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 a.contains(b) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect { 100 , 50 , 200 , 100 }; constexpr Circle circle { 200 , 400 , 100 }; const Polygon star = Shape2D :: Star ( 200 , Vec2 { 550 , 300 }); while ( System :: Update ()) { const Circle c { Cursor :: Pos (), 30 }; rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } 11.6 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9 \u00b6 \u3042\u308b\u56f3\u5f62 a \u3068 b \u306e\u4ea4\u5dee\u4f4d\u7f6e\u3092\u6c42\u3081\u305f\u3044\u5834\u5408\u306f\u3001 a.intersectsAt(b) \u3092\u4f7f\u3046\u3068\u3001\u4ea4\u5dee\u60c5\u5831\u3092 Optional<Array<Vec2>> \u578b\u306e\u5024\u3068\u3057\u3066\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5834\u5408\u306b\u6709\u52b9\u5024\u3092\u3082\u3061\u3001\u305d\u306e\u4ea4\u5dee\u70b9\u3092\u914d\u5217\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u30022 \u3064\u306e\u7dda\u5206\u304c\u30d4\u30c3\u30bf\u30ea\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u30b1\u30fc\u30b9\u3067\u306f\u3001\u6709\u52b9\u5024\u3068\u3057\u3066\u7a7a\u306e\u914d\u5217\u3092\u8fd4\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect { 100 , 50 , 200 , 100 }; constexpr Circle circle { 200 , 400 , 100 }; constexpr Triangle triangle { Vec2 { 500 , 100 }, Vec2 { 700 , 500 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { const Line line { Scene :: Center (), Cursor :: Pos () }; // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : * points ) { Circle { point , 4 }. draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : * points ) { Circle { point , 4 }. draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : * points ) { Circle { point , 4 }. draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } }","title":"11. \u3042\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/learn/geometry/#11-\u3042\u305f\u308a\u5224\u5b9a","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"11. \u3042\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/learn/geometry/#111-\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc","text":"\u3042\u308b\u56f3\u5f62 shape \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 shape.mouseOver() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3082\u3046\u5c11\u3057\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"11.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc"},{"location":"ja-jp/learn/geometry/#112-\u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af","text":"\u3042\u308b\u56f3\u5f62 shape \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 shape.leftClicked() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 .leftClicked() \u306f\u3001\u30af\u30ea\u30c3\u30af\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u62bc\u3057\u8fbc\u3093\u3060\u30d5\u30ec\u30fc\u30e0\u306e\u307f true \u3092\u8fd4\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u305d\u308c\u4ee5\u964d\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } }","title":"11.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af"},{"location":"ja-jp/learn/geometry/#113-\u56f3\u5f62\u304c\u62bc\u3055\u308c\u3066\u3044\u308b","text":"\u3042\u308b\u56f3\u5f62 shape \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 shape.leftPressed() \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 .leftPressed() \u306f\u3001\u30af\u30ea\u30c3\u30af\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u62bc\u3057\u8fbc\u3093\u3060\u30d5\u30ec\u30fc\u30e0\u304a\u3088\u3073\u3001\u305d\u308c\u4ee5\u964d\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u5834\u5408\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle { Scene :: Center (), 100 }; while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"11.3 \u56f3\u5f62\u304c\u62bc\u3055\u308c\u3066\u3044\u308b"},{"location":"ja-jp/learn/geometry/#114-\u56f3\u5f62\u306e\u4ea4\u5dee","text":"2 \u3064\u306e\u56f3\u5f62 a \u3068 b \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 a.intersects(b) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect { 100 , 50 , 200 , 100 }; constexpr Circle circle { 200 , 400 , 100 }; const Polygon star = Shape2D :: Star ( 200 , Vec2 { 550 , 300 }); while ( System :: Update ()) { const Circle c { Cursor :: Pos (), 30 }; rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } }","title":"11.4 \u56f3\u5f62\u306e\u4ea4\u5dee"},{"location":"ja-jp/learn/geometry/#115-\u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080","text":"\u3042\u308b\u56f3\u5f62 a \u304c\u5225\u306e\u56f3\u5f62 b \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 a.contains(b) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect { 100 , 50 , 200 , 100 }; constexpr Circle circle { 200 , 400 , 100 }; const Polygon star = Shape2D :: Star ( 200 , Vec2 { 550 , 300 }); while ( System :: Update ()) { const Circle c { Cursor :: Pos (), 30 }; rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } }","title":"11.5 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080"},{"location":"ja-jp/learn/geometry/#116-\u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9","text":"\u3042\u308b\u56f3\u5f62 a \u3068 b \u306e\u4ea4\u5dee\u4f4d\u7f6e\u3092\u6c42\u3081\u305f\u3044\u5834\u5408\u306f\u3001 a.intersectsAt(b) \u3092\u4f7f\u3046\u3068\u3001\u4ea4\u5dee\u60c5\u5831\u3092 Optional<Array<Vec2>> \u578b\u306e\u5024\u3068\u3057\u3066\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5834\u5408\u306b\u6709\u52b9\u5024\u3092\u3082\u3061\u3001\u305d\u306e\u4ea4\u5dee\u70b9\u3092\u914d\u5217\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u30022 \u3064\u306e\u7dda\u5206\u304c\u30d4\u30c3\u30bf\u30ea\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u30b1\u30fc\u30b9\u3067\u306f\u3001\u6709\u52b9\u5024\u3068\u3057\u3066\u7a7a\u306e\u914d\u5217\u3092\u8fd4\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect { 100 , 50 , 200 , 100 }; constexpr Circle circle { 200 , 400 , 100 }; constexpr Triangle triangle { Vec2 { 500 , 100 }, Vec2 { 700 , 500 }, Vec2 { 400 , 400 } }; while ( System :: Update ()) { const Line line { Scene :: Center (), Cursor :: Pos () }; // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : * points ) { Circle { point , 4 }. draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : * points ) { Circle { point , 4 }. draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : * points ) { Circle { point , 4 }. draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } }","title":"11.6 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9"},{"location":"ja-jp/learn/gui/","text":"7. GUI \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 7.1 \u30dc\u30bf\u30f3 \u00b6 \u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::Button() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::Button() \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 { 100 , 100 })) { Scene :: SetBackground ( ColorF { 0.8 , 0.2 , 0.2 }); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 { 100 , 150 })) { Scene :: SetBackground ( ColorF { 0.2 , 0.8 , 0.2 }); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 { 100 , 200 })) { Scene :: SetBackground ( ColorF { 0.2 , 0.2 , 0.8 }); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 { 100 , 250 }, 200 )) { Scene :: SetBackground ( ColorF { 0.9 }); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 { 100 , 300 }, 200 )) { Scene :: SetBackground ( ColorF { 0.1 }); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 { 100 , 350 }, 200 , false )) { Scene :: SetBackground ( ColorF { 0.5 }); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 { 100 , 400 }, unspecified , false )) { Scene :: SetBackground ( ColorF { 0.8 , 0.8 , 0.1 }); } } } 7.2 \u30b9\u30e9\u30a4\u30c0\u30fc \u00b6 \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::Slider() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u3092\u6301\u305f\u306a\u3044\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI::VerticalSlider() \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI::Slider() \u3068 SimpleGUI::VerticalSlider() \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); ColorF color1 { 1.0 }; ColorF color2 { 1.0 , 0.5 , 0.0 }; ColorF color3 { 0.2 , 0.6 , 0.9 }; double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 { 100 , 40 }); SimpleGUI :: Slider ( color1 . g , Vec2 { 100 , 80 }); SimpleGUI :: Slider ( color1 . b , Vec2 { 100 , 120 }); Circle { 50 , 100 , 30 }. draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 { 100 , 200 }); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 { 100 , 240 }); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 { 100 , 280 }); Circle { 50 , 260 , 30 }. draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 { 100 , 360 }, 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 { 100 , 400 }, 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 { 100 , 440 }, 100 , 200 ); Circle { 50 , 420 , 30 }. draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 { 500 , 40 }, 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 { 500 , 100 }, 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 { 500 , 160 }, 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 { 560 , 160 }, 200 , false ); } } 7.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::CheckBox() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::CheckBox() \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); bool checked0 = false ; bool checked1 = true ; bool checked2 = false ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked0 , U \"Label0\" , Vec2 { 100 , 40 }); SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 { 100 , 80 }); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 { 100 , 120 }); // \u5e45 200px SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 { 100 , 180 }, 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 { 100 , 220 }, 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 { 100 , 260 }, unspecified , false ); } } 7.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 \u00b6 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::RadioButtons() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::RadioButtons() \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF { 0.8 , 0.2 , 0.2 }, ColorF { 0.2 , 0.8 , 0.2 }, ColorF { 0.2 , 0.2 , 0.8 } }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 { 100 , 40 }); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 { 100 , 180 })) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 { 400 , 40 }, 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 { 400 , 140 }, 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 { 400 , 240 }, unspecified , false ); } } 7.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::TextBox() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI::TextBox() \u306f\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); TextEditState te0 ; TextEditState te1 ; te1 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState te2 ; TextEditState te3 ; while ( System :: Update ()) { ClearPrint (); Print << te0 . active ; // \u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b Print << te0 . text ; // \u5165\u529b\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8 (String) SimpleGUI :: TextBox ( te0 , Vec2 { 100 , 140 }); SimpleGUI :: TextBox ( te1 , Vec2 { 100 , 200 }); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 { 320 , 200 })) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb te1 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( te2 , Vec2 { 100 , 260 }, 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( te3 , Vec2 { 100 , 320 }, 100 , 4 , false ); } } 7.6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5165\u529b\u3092 Tab \u30ad\u30fc\u3067\u9032\u3081\u308b \u00b6 SimpleGUI::TextBox() \u3067\u306f\u3001\u3042\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u6642\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3084 Tab \u30ad\u30fc\u3092\u62bc\u3057\u305f\u308a\u3001\u7121\u95a2\u4fc2\u306a\u5834\u6240\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u308a\u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u304c\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u308a\u307e\u3059\u3002 \u3042\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u304c\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3057\u305f\u3068\u304d\u306b\u3001 TextEditState \u306e bool \u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570 .tabKey \u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3001\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3078\u306e\u79fb\u52d5\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); TextEditState te0 , te1 ; bool avtivateNextTextBox = false ; while ( System :: Update ()) { // Tab \u30ad\u30fc\u306e\u62bc\u4e0b\u3068\u540c\u3058\u30d5\u30ec\u30fc\u30e0\u3067\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3057\u3066\u3057\u307e\u3046\u3068 // \u305d\u306e Tab \u30ad\u30fc\u306e\u62bc\u4e0b\u3067\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3082\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u30011 \u30d5\u30ec\u30fc\u30e0\u5f8c\u306b\u30a2\u30af\u30c6\u30a3\u30d6\u5316 if ( avtivateNextTextBox ) { // \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u30a2\u30af\u30c6\u30a3\u30d6\u5316 te1 . active = true ; avtivateNextTextBox = false ; } const bool previous = te0 . active ; SimpleGUI :: TextBox ( te0 , Vec2 { 100 , 100 }, 200 ); // \u975e\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3055\u308c\u305f if ( previous && ( te0 . active == false )) { // Tab \u30ad\u30fc\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3059\u308b\u30d5\u30e9\u30b0\u3092 true \u306b avtivateNextTextBox = te0 . tabKey ; } SimpleGUI :: TextBox ( te1 , Vec2 { 100 , 140 }, 200 ); } } 7.7 \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc \u00b6 \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306f SimpleGUI::ColorPicker() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4f4d\u7f6e\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::ColorPicker() \u306f\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); HSV color0 = Palette :: Orange ; HSV color1 = Palette :: Skyblue ; while ( System :: Update ()) { SimpleGUI :: ColorPicker ( color0 , Vec2 { 100 , 100 }); Rect { 100 , 300 , 100 }. draw ( color0 ); SimpleGUI :: ColorPicker ( color1 , Vec2 { 300 , 100 }, false ); Rect { 300 , 300 , 100 }. draw ( color1 ); } } 7.8 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 \u00b6 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::ListBox() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); ListBoxState ls1 { { U \"\u5317\u6d77\u9053\" , U \"\u9752\u68ee\u770c\" , U \"\u5ca9\u624b\u770c\" , U \"\u5bae\u57ce\u770c\" , U \"\u79cb\u7530\u770c\" , U \"\u5c71\u5f62\u770c\" , U \"\u798f\u5cf6\u770c\" , U \"\u8328\u57ce\u770c\" , U \"\u6803\u6728\u770c\" , U \"\u7fa4\u99ac\u770c\" , U \"\u57fc\u7389\u770c\" , U \"\u5343\u8449\u770c\" , U \"\u6771\u4eac\u90fd\" , U \"\u795e\u5948\u5ddd\u770c\" , U \"\u65b0\u6f5f\u770c\" , U \"\u5bcc\u5c71\u770c\" , U \"\u77f3\u5ddd\u770c\" , U \"\u798f\u4e95\u770c\" , U \"\u5c71\u68a8\u770c\" , U \"\u9577\u91ce\u770c\" , U \"\u5c90\u961c\u770c\" , U \"\u9759\u5ca1\u770c\" , U \"\u611b\u77e5\u770c\" , U \"\u4e09\u91cd\u770c\" , U \"\u6ecb\u8cc0\u770c\" , U \"\u4eac\u90fd\u5e9c\" , U \"\u5927\u962a\u5e9c\" , U \"\u5175\u5eab\u770c\" , U \"\u5948\u826f\u770c\" , U \"\u548c\u6b4c\u5c71\u770c\" , U \"\u9ce5\u53d6\u770c\" , U \"\u5cf6\u6839\u770c\" , U \"\u5ca1\u5c71\u770c\" , U \"\u5e83\u5cf6\u770c\" , U \"\u5c71\u53e3\u770c\" , U \"\u5fb3\u5cf6\u770c\" , U \"\u9999\u5ddd\u770c\" , U \"\u611b\u5a9b\u770c\" , U \"\u9ad8\u77e5\u770c\" , U \"\u798f\u5ca1\u770c\" , U \"\u4f50\u8cc0\u770c\" , U \"\u9577\u5d0e\u770c\" , U \"\u718a\u672c\u770c\" , U \"\u5927\u5206\u770c\" , U \"\u5bae\u5d0e\u770c\" , U \"\u9e7f\u5150\u5cf6\u770c\" , U \"\u6c96\u7e04\u770c\" , } }; ListBoxState ls2 { { U \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\uff081905\u5e741\u6708 - 1906\u5e748\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1905\u5e7410\u6708 - 1907\u5e745\u6708\u3001\u5927\u5009\u66f8\u5e97\u30fb\u670d\u90e8\u66f8\u5e97\uff09\" , U \"\u574a\u3063\u3061\u3083\u3093\uff081906\u5e744\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1907\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u8349\u6795\uff081906\u5e749\u6708\u3001\u300e\u65b0\u5c0f\u8aac\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u4e8c\u767e\u5341\u65e5\uff081906\u5e7410\u6708\u3001\u300e\u4e2d\u592e\u516c\u8ad6\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u91ce\u5206\uff081907\u5e741\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1908\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u865e\u7f8e\u4eba\u8349\uff081907\u5e746\u6708 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1908\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5751\u592b\uff081908\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u4e09\u56db\u90ce\uff081908\u5e749 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1909\u5e745\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u305d\u308c\u304b\u3089\uff081909\u5e746 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1910\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u9580\uff081910\u5e743\u6708 - 6\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1911\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5f7c\u5cb8\u904e\u8fc4\uff081912\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1912\u5e749\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u884c\u4eba\uff081912\u5e7412\u6708 - 1913\u5e7411\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e741\u6708\u3001\u5927\u5009\u66f8\u5e97\uff09\" , U \"\u3053\u309d\u308d\uff081914\u5e744\u6708 - 8\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e749\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u9053\u8349\uff081915\u5e746\u6708 - 9\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1915\u5e7410\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u660e\u6697\uff081916\u5e745\u6708 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1917\u5e741\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , } }; ListBoxState ls3 = ls2 ; ls2 . selectedItemIndex = 3 ; while ( System :: Update ()) { ClearPrint (); if ( ls1 . selectedItemIndex ) { Print << ls1 . items [ * ls1 . selectedItemIndex ]; } if ( ls2 . selectedItemIndex ) { Print << ls2 . items [ * ls2 . selectedItemIndex ]; } if ( ls3 . selectedItemIndex ) { Print << ls3 . items [ * ls3 . selectedItemIndex ]; } SimpleGUI :: ListBox ( ls1 , Vec2 { 620 , 20 }, 120 , 156 ); SimpleGUI :: ListBox ( ls2 , Vec2 { 780 , 20 }, 240 , 156 , false ); SimpleGUI :: ListBox ( ls3 , Vec2 { 20 , 200 }, 1020 , 480 ); } } 7.9 \u898b\u51fa\u3057 \u00b6 GUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306b\u898b\u51fa\u3057\u3092\u4ed8\u3051\u305f\u3044\u5834\u5408\u3001 SimpleGUI::Headline \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u898b\u51fa\u3057\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u306e\u9ad8\u3055\u306f 40px \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); bool checked0 = false ; bool checked1 = true ; bool checked2 = false ; HSV color = Palette :: Orange ; while ( System :: Update ()) { SimpleGUI :: Headline ( U \"Checkbox\" , Vec2 { 100 , 60 }); SimpleGUI :: CheckBox ( checked0 , U \"Label0\" , Vec2 { 100 , 100 }, 160 ); SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 { 100 , 140 }, 160 ); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 { 100 , 180 }, 160 ); SimpleGUI :: Headline ( U \"ColorPicker\" , Vec2 { 300 , 60 }, 160 , false ); SimpleGUI :: ColorPicker ( color , Vec2 { 300 , 100 }, false ); } }","title":"7. GUI"},{"location":"ja-jp/learn/gui/#7-gui","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"7. GUI"},{"location":"ja-jp/learn/gui/#71-\u30dc\u30bf\u30f3","text":"\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::Button() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::Button() \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 { 100 , 100 })) { Scene :: SetBackground ( ColorF { 0.8 , 0.2 , 0.2 }); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 { 100 , 150 })) { Scene :: SetBackground ( ColorF { 0.2 , 0.8 , 0.2 }); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 { 100 , 200 })) { Scene :: SetBackground ( ColorF { 0.2 , 0.2 , 0.8 }); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 { 100 , 250 }, 200 )) { Scene :: SetBackground ( ColorF { 0.9 }); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 { 100 , 300 }, 200 )) { Scene :: SetBackground ( ColorF { 0.1 }); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 { 100 , 350 }, 200 , false )) { Scene :: SetBackground ( ColorF { 0.5 }); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 { 100 , 400 }, unspecified , false )) { Scene :: SetBackground ( ColorF { 0.8 , 0.8 , 0.1 }); } } }","title":"7.1 \u30dc\u30bf\u30f3"},{"location":"ja-jp/learn/gui/#72-\u30b9\u30e9\u30a4\u30c0\u30fc","text":"\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::Slider() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u3092\u6301\u305f\u306a\u3044\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI::VerticalSlider() \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI::Slider() \u3068 SimpleGUI::VerticalSlider() \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); ColorF color1 { 1.0 }; ColorF color2 { 1.0 , 0.5 , 0.0 }; ColorF color3 { 0.2 , 0.6 , 0.9 }; double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 { 100 , 40 }); SimpleGUI :: Slider ( color1 . g , Vec2 { 100 , 80 }); SimpleGUI :: Slider ( color1 . b , Vec2 { 100 , 120 }); Circle { 50 , 100 , 30 }. draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 { 100 , 200 }); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 { 100 , 240 }); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 { 100 , 280 }); Circle { 50 , 260 , 30 }. draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 { 100 , 360 }, 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 { 100 , 400 }, 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 { 100 , 440 }, 100 , 200 ); Circle { 50 , 420 , 30 }. draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 { 500 , 40 }, 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 { 500 , 100 }, 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 { 500 , 160 }, 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 { 560 , 160 }, 200 , false ); } }","title":"7.2 \u30b9\u30e9\u30a4\u30c0\u30fc"},{"location":"ja-jp/learn/gui/#73-\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9","text":"\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::CheckBox() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::CheckBox() \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); bool checked0 = false ; bool checked1 = true ; bool checked2 = false ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked0 , U \"Label0\" , Vec2 { 100 , 40 }); SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 { 100 , 80 }); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 { 100 , 120 }); // \u5e45 200px SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 { 100 , 180 }, 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 { 100 , 220 }, 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 { 100 , 260 }, unspecified , false ); } }","title":"7.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/learn/gui/#74-\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3","text":"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::RadioButtons() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::RadioButtons() \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF { 0.8 , 0.2 , 0.2 }, ColorF { 0.2 , 0.8 , 0.2 }, ColorF { 0.2 , 0.2 , 0.8 } }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 { 100 , 40 }); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 { 100 , 180 })) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 { 400 , 40 }, 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 { 400 , 140 }, 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 { 400 , 240 }, unspecified , false ); } }","title":"7.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3"},{"location":"ja-jp/learn/gui/#75-\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::TextBox() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI::TextBox() \u306f\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); TextEditState te0 ; TextEditState te1 ; te1 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState te2 ; TextEditState te3 ; while ( System :: Update ()) { ClearPrint (); Print << te0 . active ; // \u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b Print << te0 . text ; // \u5165\u529b\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8 (String) SimpleGUI :: TextBox ( te0 , Vec2 { 100 , 140 }); SimpleGUI :: TextBox ( te1 , Vec2 { 100 , 200 }); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 { 320 , 200 })) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb te1 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( te2 , Vec2 { 100 , 260 }, 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( te3 , Vec2 { 100 , 320 }, 100 , 4 , false ); } }","title":"7.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/learn/gui/#76-\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5165\u529b\u3092-tab-\u30ad\u30fc\u3067\u9032\u3081\u308b","text":"SimpleGUI::TextBox() \u3067\u306f\u3001\u3042\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u6642\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3084 Tab \u30ad\u30fc\u3092\u62bc\u3057\u305f\u308a\u3001\u7121\u95a2\u4fc2\u306a\u5834\u6240\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u308a\u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u304c\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u308a\u307e\u3059\u3002 \u3042\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u304c\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3057\u305f\u3068\u304d\u306b\u3001 TextEditState \u306e bool \u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570 .tabKey \u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3001\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3078\u306e\u79fb\u52d5\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); TextEditState te0 , te1 ; bool avtivateNextTextBox = false ; while ( System :: Update ()) { // Tab \u30ad\u30fc\u306e\u62bc\u4e0b\u3068\u540c\u3058\u30d5\u30ec\u30fc\u30e0\u3067\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3057\u3066\u3057\u307e\u3046\u3068 // \u305d\u306e Tab \u30ad\u30fc\u306e\u62bc\u4e0b\u3067\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3082\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u30011 \u30d5\u30ec\u30fc\u30e0\u5f8c\u306b\u30a2\u30af\u30c6\u30a3\u30d6\u5316 if ( avtivateNextTextBox ) { // \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u30a2\u30af\u30c6\u30a3\u30d6\u5316 te1 . active = true ; avtivateNextTextBox = false ; } const bool previous = te0 . active ; SimpleGUI :: TextBox ( te0 , Vec2 { 100 , 100 }, 200 ); // \u975e\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3055\u308c\u305f if ( previous && ( te0 . active == false )) { // Tab \u30ad\u30fc\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u30a2\u30af\u30c6\u30a3\u30d6\u5316\u3059\u308b\u30d5\u30e9\u30b0\u3092 true \u306b avtivateNextTextBox = te0 . tabKey ; } SimpleGUI :: TextBox ( te1 , Vec2 { 100 , 140 }, 200 ); } }","title":"7.6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5165\u529b\u3092 Tab \u30ad\u30fc\u3067\u9032\u3081\u308b"},{"location":"ja-jp/learn/gui/#77-\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc","text":"\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306f SimpleGUI::ColorPicker() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4f4d\u7f6e\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI::ColorPicker() \u306f\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); HSV color0 = Palette :: Orange ; HSV color1 = Palette :: Skyblue ; while ( System :: Update ()) { SimpleGUI :: ColorPicker ( color0 , Vec2 { 100 , 100 }); Rect { 100 , 300 , 100 }. draw ( color0 ); SimpleGUI :: ColorPicker ( color1 , Vec2 { 300 , 100 }, false ); Rect { 300 , 300 , 100 }. draw ( color1 ); } }","title":"7.7 \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc"},{"location":"ja-jp/learn/gui/#78-\u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9","text":"\u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI::ListBox() \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); ListBoxState ls1 { { U \"\u5317\u6d77\u9053\" , U \"\u9752\u68ee\u770c\" , U \"\u5ca9\u624b\u770c\" , U \"\u5bae\u57ce\u770c\" , U \"\u79cb\u7530\u770c\" , U \"\u5c71\u5f62\u770c\" , U \"\u798f\u5cf6\u770c\" , U \"\u8328\u57ce\u770c\" , U \"\u6803\u6728\u770c\" , U \"\u7fa4\u99ac\u770c\" , U \"\u57fc\u7389\u770c\" , U \"\u5343\u8449\u770c\" , U \"\u6771\u4eac\u90fd\" , U \"\u795e\u5948\u5ddd\u770c\" , U \"\u65b0\u6f5f\u770c\" , U \"\u5bcc\u5c71\u770c\" , U \"\u77f3\u5ddd\u770c\" , U \"\u798f\u4e95\u770c\" , U \"\u5c71\u68a8\u770c\" , U \"\u9577\u91ce\u770c\" , U \"\u5c90\u961c\u770c\" , U \"\u9759\u5ca1\u770c\" , U \"\u611b\u77e5\u770c\" , U \"\u4e09\u91cd\u770c\" , U \"\u6ecb\u8cc0\u770c\" , U \"\u4eac\u90fd\u5e9c\" , U \"\u5927\u962a\u5e9c\" , U \"\u5175\u5eab\u770c\" , U \"\u5948\u826f\u770c\" , U \"\u548c\u6b4c\u5c71\u770c\" , U \"\u9ce5\u53d6\u770c\" , U \"\u5cf6\u6839\u770c\" , U \"\u5ca1\u5c71\u770c\" , U \"\u5e83\u5cf6\u770c\" , U \"\u5c71\u53e3\u770c\" , U \"\u5fb3\u5cf6\u770c\" , U \"\u9999\u5ddd\u770c\" , U \"\u611b\u5a9b\u770c\" , U \"\u9ad8\u77e5\u770c\" , U \"\u798f\u5ca1\u770c\" , U \"\u4f50\u8cc0\u770c\" , U \"\u9577\u5d0e\u770c\" , U \"\u718a\u672c\u770c\" , U \"\u5927\u5206\u770c\" , U \"\u5bae\u5d0e\u770c\" , U \"\u9e7f\u5150\u5cf6\u770c\" , U \"\u6c96\u7e04\u770c\" , } }; ListBoxState ls2 { { U \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\uff081905\u5e741\u6708 - 1906\u5e748\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1905\u5e7410\u6708 - 1907\u5e745\u6708\u3001\u5927\u5009\u66f8\u5e97\u30fb\u670d\u90e8\u66f8\u5e97\uff09\" , U \"\u574a\u3063\u3061\u3083\u3093\uff081906\u5e744\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1907\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u8349\u6795\uff081906\u5e749\u6708\u3001\u300e\u65b0\u5c0f\u8aac\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u4e8c\u767e\u5341\u65e5\uff081906\u5e7410\u6708\u3001\u300e\u4e2d\u592e\u516c\u8ad6\u300f/\u300e\u9d89\u7c60\u300f\u53ce\u9332\uff09\" , U \"\u91ce\u5206\uff081907\u5e741\u6708\u3001\u300e\u30db\u30c8\u30c8\u30ae\u30b9\u300f/1908\u5e74\u3001\u6625\u967d\u5802\u520a\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u865e\u7f8e\u4eba\u8349\uff081907\u5e746\u6708 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1908\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5751\u592b\uff081908\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/\u300e\u8349\u5408\u300f\u53ce\u9332\uff09\" , U \"\u4e09\u56db\u90ce\uff081908\u5e749 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1909\u5e745\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u305d\u308c\u304b\u3089\uff081909\u5e746 - 10\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1910\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u9580\uff081910\u5e743\u6708 - 6\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1911\u5e741\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u5f7c\u5cb8\u904e\u8fc4\uff081912\u5e741\u6708 - 4\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1912\u5e749\u6708\u3001\u6625\u967d\u5802\uff09\" , U \"\u884c\u4eba\uff081912\u5e7412\u6708 - 1913\u5e7411\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e741\u6708\u3001\u5927\u5009\u66f8\u5e97\uff09\" , U \"\u3053\u309d\u308d\uff081914\u5e744\u6708 - 8\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1914\u5e749\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u9053\u8349\uff081915\u5e746\u6708 - 9\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1915\u5e7410\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , U \"\u660e\u6697\uff081916\u5e745\u6708 - 12\u6708\u3001\u300e\u671d\u65e5\u65b0\u805e\u300f/1917\u5e741\u6708\u3001\u5ca9\u6ce2\u66f8\u5e97\uff09\" , } }; ListBoxState ls3 = ls2 ; ls2 . selectedItemIndex = 3 ; while ( System :: Update ()) { ClearPrint (); if ( ls1 . selectedItemIndex ) { Print << ls1 . items [ * ls1 . selectedItemIndex ]; } if ( ls2 . selectedItemIndex ) { Print << ls2 . items [ * ls2 . selectedItemIndex ]; } if ( ls3 . selectedItemIndex ) { Print << ls3 . items [ * ls3 . selectedItemIndex ]; } SimpleGUI :: ListBox ( ls1 , Vec2 { 620 , 20 }, 120 , 156 ); SimpleGUI :: ListBox ( ls2 , Vec2 { 780 , 20 }, 240 , 156 , false ); SimpleGUI :: ListBox ( ls3 , Vec2 { 20 , 200 }, 1020 , 480 ); } }","title":"7.8 \u30ea\u30b9\u30c8\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/learn/gui/#79-\u898b\u51fa\u3057","text":"GUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306b\u898b\u51fa\u3057\u3092\u4ed8\u3051\u305f\u3044\u5834\u5408\u3001 SimpleGUI::Headline \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306b\u306f\u898b\u51fa\u3057\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u306e\u9ad8\u3055\u306f 40px \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); bool checked0 = false ; bool checked1 = true ; bool checked2 = false ; HSV color = Palette :: Orange ; while ( System :: Update ()) { SimpleGUI :: Headline ( U \"Checkbox\" , Vec2 { 100 , 60 }); SimpleGUI :: CheckBox ( checked0 , U \"Label0\" , Vec2 { 100 , 100 }, 160 ); SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 { 100 , 140 }, 160 ); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 { 100 , 180 }, 160 ); SimpleGUI :: Headline ( U \"ColorPicker\" , Vec2 { 300 , 60 }, 160 , false ); SimpleGUI :: ColorPicker ( color , Vec2 { 300 , 100 }, false ); } }","title":"7.9 \u898b\u51fa\u3057"},{"location":"ja-jp/learn/hello-siv3d/","text":"1. \u306f\u3058\u3081\u3066\u306e Siv3D \u00b6 \u3053\u306e\u7ae0\u3067\u306f Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u96f0\u56f2\u6c17\u3092\u4f53\u9a13\u3057\u307e\u3059\u3002 1.1 \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u00b6 Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u6700\u521d\u306b\u6b21\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3044\u304d\u306a\u308a\u5168\u90e8\u7406\u89e3\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u306f\u52d5\u304b\u3057\u3066\u4f53\u9a13\u3057\u307e\u3057\u3087\u3046\u3002 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> // OpenSiv3D v0.6.6 void Main () { // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; // \u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new emoji font const Font emojiFont { 60 , Typeface :: ColorEmoji }; // `font` \u304c\u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b | Set emojiFont as a fallback font . addFallback ( emojiFont ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an image file const Texture texture { U \"example/windmill.png\" }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; // \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b\u5ea7\u6a19 | Coordinates of the emoji Vec2 emojiPos { 300 , 150 }; // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306b\u30c7\u30d0\u30c3\u30b0\u51fa\u529b | Print a text Print << U \"Push [A] key\" ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u30b5\u30a4\u30ba\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u7d75\u6587\u5b57\u3092\u63cf\u304f | Draw a texture with animated size emoji . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( emojiPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); // \u3082\u3057 [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 | When [A] key is down if ( KeyA . down ()) { // \u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30d0\u30c3\u30b0\u8868\u793a | Print a randomly selected text Print << Sample ({ U \"Hello!\" , U \"\u3053\u3093\u306b\u3061\u306f\" , U \"\u4f60\u597d\" , U \"\uc548\ub155\ud558\uc138\uc694?\" }); } // \u3082\u3057 [Button] \u304c\u62bc\u3055\u308c\u305f\u3089 | When [Button] is pushed if ( SimpleGUI :: Button ( U \"Button\" , Vec2 { 640 , 40 })) { // \u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u5ea7\u6a19\u3092\u79fb\u52d5 // Move the coordinates to a random position in the screen emojiPos = RandomVec2 ( Scene :: Rect ()); } } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3059\u308b\u3068\u3001\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u304c\u8ffd\u968f\u3057\u307e\u3059 \u53f3\u4e0a\u306e\u300cButton\u300d\u3068\u66f8\u304b\u308c\u305f\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u30cd\u30b3\u306e\u4f4d\u7f6e\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u308f\u308a\u307e\u3059 A \u30ad\u30fc\u3092\u62bc\u3059\u3068\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u306e\u5de6\u5074\u306b\u8868\u793a\u3055\u308c\u307e\u3059 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059 1.2 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3059\u308b \u00b6 Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7df4\u7fd2\u3068\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u767b\u5834\u3059\u308b \u6570\u5b57 \u3084 \u7d75\u6587\u5b57 \u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Visual Studio \u3084 Xcode \u3067\u306f\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3068\u304d\u306b\u3001\u53e4\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u4e2d\u306e\u307e\u307e\u3060\u3068\u30d3\u30eb\u30c9\u306b\u5931\u6557\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3059\u308b\u524d\u306b\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u3066\u3001 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86 \u3057\u307e\u3057\u3087\u3046\u3002 \u80cc\u666f\u8272\u3092\u5909\u3048\u308b \u00b6 // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u306e\u8a2d\u5b9a\u3067\u3059\u30023 \u3064\u306e\u6570\u5b57\u306f\u5de6\u304b\u3089\u9806\u306b R, G, B \u3067\u3059\u3002\u3053\u308c\u3089\u306e\u6570\u5b57\u3092 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u5909\u66f4\u3057\u3066\u3001\u80cc\u666f\u8272\u3092\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6587\u5b57\u306e\u5927\u304d\u3055\u3092\u5909\u3048\u308b \u00b6 // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; \u57fa\u672c\u30b5\u30a4\u30ba\u3092 60 \u306b\u6307\u5b9a\u3057\u3066\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d5\u30a9\u30f3\u30c8\u306f\u753b\u9762\u4e2d\u5fc3\u306e\u30c6\u30ad\u30b9\u30c8\u300cHello, Siv3D!\ud83d\ude80\u300d\u306e\u8868\u793a\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u6570\u5b57\u3092\u3060\u3044\u305f\u3044 10\uff5e200 \u306e\u7bc4\u56f2\u3067\u5909\u66f4\u3057\u3066\u3001\u6587\u5b57\u306e\u5927\u304d\u3055\u304c\u5909\u308f\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u3092\u5909\u3048\u308b \u00b6 // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; \u7d75\u6587\u5b57 \ud83d\udc08 \u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u7d75\u6587\u5b57\u3092 \ud83d\udc15 \u3084 \ud83d\udc27, \ud83c\udf54 \u306b\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u306e\u524d\u5f8c\u306b\u4f59\u8a08\u306a\u7a7a\u767d\u3092\u4ed8\u3051\u308b\u3068\u8a8d\u8b58\u3055\u308c\u306a\u3044 \u306e\u3067\u6c17\u3092\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002 \u300c\u3044\u306c\u300d\u3068\u65e5\u672c\u8a9e\u3067\u5165\u529b\u3057\u3066\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u72ac\u306e\u7d75\u6587\u5b57\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059 Windows \u3067\u306f Win + . \u30ad\u30fc\u3092\u62bc\u3059\u3068\u767b\u5834\u3059\u308b\u7d75\u6587\u5b57\u5165\u529b\u30e1\u30cb\u30e5\u30fc\u304c\u4fbf\u5229\u3067\u3059 \u30aa\u30f3\u30e9\u30a4\u30f3\u7d75\u6587\u5b57\u767e\u79d1\u4e8b\u5178 emojipedia \u304b\u3089\u76ee\u7684\u306e\u7d75\u6587\u5b57\u3092\u691c\u7d22\u3059\u308b\u306e\u3082\u826f\u3044\u3067\u3057\u3087\u3046 \u753b\u50cf\u306e\u63cf\u753b\u4f4d\u7f6e\u3092\u5909\u3048\u308b \u00b6 // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); \u753b\u50cf\u30d5\u30a1\u30a4\u30eb example/windmill.png \u304b\u3089\u4f5c\u6210\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e (x, y) = (200, 200) \u306b\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\u6570\u5b57\u3092\u5909\u3048\u3066\u3001\u4f4d\u7f6e\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30c6\u30ad\u30b9\u30c8\u3092\u5909\u3048\u308b \u00b6 // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); \u300cHello, Siv3D!\ud83d\ude80\u300d\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u300c\u3053\u3093\u306b\u3061\u306f, Siv3D!\ud83d\ude80\u300d\u306b\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \" \u306e\u524d\u306b\u3042\u308b U \u306f UTF-32 \u6587\u5b57\u30b3\u30fc\u30c9\u3092\u610f\u5473\u3057\u307e\u3059\u3002Siv3D \u306f\u307b\u307c\u3059\u3079\u3066\u306e\u95a2\u6570\u3067 UTF-32 \u6587\u5b57\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u305f\u3081\u3001 U\" \u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002 \u30de\u30a6\u30b9\u306b\u8ffd\u968f\u3059\u308b\u5186\u3092\u5909\u3048\u308b \u00b6 // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); \u5186\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b\u534a\u5f84 40 \u30d4\u30af\u30bb\u30eb\u3001(R, G, B, \u4e0d\u900f\u660e\u5ea6) = (1.0, 0.0, 0.0, 0.5) \u3067\u63cf\u3044\u3066\u3044\u307e\u3059\u3002\u5186\u306e\u534a\u5f84\u3084\u8272\u3001\u4e0d\u900f\u660e\u5ea6\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4e0d\u900f\u660e\u5ea6\u306f 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3057\u30010.0 \u3067\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 1.3 \u904a\u3079\u308b\u30b5\u30f3\u30d7\u30eb \u00b6 Siv3D \u306e\u69d8\u3005\u306a\u6a5f\u80fd\u3092\u4f53\u9a13\u3067\u304d\u308b\u304a\u3059\u3059\u3081\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u3053\u306e Web \u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u30b3\u30fc\u30c9\u30a8\u30ea\u30a2\u306e\u53f3\u4e0a\u306b\u3042\u308b\u300cCopy to Clipboard\u300d\u30a2\u30a4\u30b3\u30f3\u3092\u62bc\u3059\u3068\u3001 \u30b3\u30fc\u30c9\u3092\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u306b\u30b3\u30d4\u30fc \u3067\u304d\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u66f8\u3044\u3066\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u65b0\u3057\u3044\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3082\u767a\u5c55\u7684\u306a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u610f\u5473\u3092\u7406\u89e3\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4eca\u306f\u307e\u3060\u6c17\u306b\u3057\u306a\u304f\u3066\u5927\u4e08\u592b\u3067\u3059\u3002 1 | \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057 \u00b6 \u30de\u30a6\u30b9\u3067\u30d1\u30c9\u30eb\u3092\u79fb\u52d5\u3055\u305b\u3066\u30d6\u30ed\u30c3\u30af\u3092\u5168\u90e8\u6d88\u3057\u307e\u3057\u3087\u3046\u3002 \u305f\u3060\u3057\u3001\u30af\u30ea\u30a2\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002 \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> //////////////////////////////// // // \u5b9a\u6570 // //////////////////////////////// // \u753b\u9762\u306e\u30b5\u30a4\u30ba (800x600) constexpr Size SceneSize = Scene :: DefaultSceneSize ; // 1 \u3064\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size BrickSize { 40 , 20 }; // \u6a2a\u306b\u4f55\u500b\u306e\u30d6\u30ed\u30c3\u30af\u304c\u4e26\u3076\u304b constexpr int32 BrickCountX = ( SceneSize . x / BrickSize . x ); // \u7e26\u306b\u4f55\u500b\u306e\u30d6\u30ed\u30c3\u30af\u304c\u4e26\u3076\u304b constexpr int32 BrickCountY = 5 ; // \u30d6\u30ed\u30c3\u30af\u3092\u4e26\u3079\u59cb\u3081\u308b\u5ea7\u6a19 constexpr Point BrickStartPosition { 0 , 60 }; // \u30dc\u30fc\u30eb\u306e\u521d\u671f\u4f4d\u7f6e\uff08\u30d4\u30af\u30bb\u30eb\uff09 constexpr Vec2 BallInitialPos { ( SceneSize . x * 0.5 ), ( SceneSize . y * 0.75 ) }; // \u30dc\u30fc\u30eb\u306e\u901f\u3055\uff08\u30d4\u30af\u30bb\u30eb / \u79d2\uff09 constexpr double BallSpeedPerSec = 480.0 ; // \u30d1\u30c9\u30eb\u306e Y \u5ea7\u6a19 constexpr int32 PaddleY = 500 ; // \u30d1\u30c9\u30eb\u306e\u30b5\u30a4\u30ba constexpr Size PaddleSize { 60 , 10 }; //////////////////////////////// // // \u521d\u671f\u72b6\u614b\u3092\u4f5c\u308b\u95a2\u6570 // //////////////////////////////// // \u30d6\u30ed\u30c3\u30af\uff08brick: \u30ec\u30f3\u30ac\uff09\u306e\u521d\u671f\u914d\u5217\u3092\u4f5c\u308b\u95a2\u6570 Array < Rect > MakeBricks () { // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217\uff081 \u3064\u306e\u30d6\u30ed\u30c3\u30af\u3092 Rect \u3067\u8868\u73fe\uff09 Array < Rect > bricks ; for ( int32 y = 0 ; y < BrickCountY ; ++ y ) { for ( int32 x = 0 ; x < BrickCountX ; ++ x ) { // \u30d6\u30ed\u30c3\u30af\u306e\u5de6\u4e0a\u306e X \u5ea7\u6a19 const int32 posX = ( x * BrickSize . x + BrickStartPosition . x ); // \u30d6\u30ed\u30c3\u30af\u306e\u5de6\u4e0a\u306e Y \u5ea7\u6a19 const int32 posY = ( y * BrickSize . y + BrickStartPosition . y ); // Rect \u3092\u8ffd\u52a0 bricks << Rect { posX , posY , BrickSize }; } } return bricks ; } // \u521d\u671f\u306e\u30dc\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570 Circle MakeBall () { return { BallInitialPos , 8 }; } // \u521d\u671f\u306e\u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 MakeBallVelocity () { return { 0 , - BallSpeedPerSec }; } //////////////////////////////// // // Main // //////////////////////////////// void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > bricks = MakeBricks (); // \u30dc\u30fc\u30eb\uff08\u4e2d\u5fc3\u5ea7\u6a19\u3068\u534a\u5f84\uff09 Circle ball = MakeBall (); // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity = MakeBallVelocity (); while ( System :: Update ()) { //////////////////////////////// // // \u72b6\u614b\u306e\u66f4\u65b0 // //////////////////////////////// // \u30d1\u30c9\u30eb const Rect paddle { Arg :: center ( Cursor :: Pos (). x , PaddleY ), PaddleSize }; // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = bricks . begin (); it != bricks . end (); ++ it ) { // \u30d6\u30ed\u30c3\u30af\u3068\u30dc\u30fc\u30eb\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30d6\u30ed\u30c3\u30af\u306e\u4e0a\u8fba\u3001\u307e\u305f\u306f\u5e95\u8fba\u3068\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e Y \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . y *= -1 ; } else { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e X \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . x *= -1 ; } // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 bricks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089 if (( ball . y < 0 ) && ( ballVelocity . y < 0 )) { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e Y \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . y *= -1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089 if ((( ball . x < 0 ) && ( ballVelocity . x < 0 )) || (( SceneSize . x < ball . x ) && ( 0 < ballVelocity . x ))) { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e X \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . x *= -1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089 if (( 0 < ballVelocity . y ) && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u65b9\u5411\uff08\u901f\u5ea6\u30d9\u30af\u30c8\u30eb\uff09\u3092\u5909\u3048\u308b ballVelocity = Vec2 { ( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y } . setLength ( BallSpeedPerSec ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055\u304c BallSpeedPerSec \u306b\u306a\u308b\u3088\u3046\u3001\u30d9\u30af\u30c8\u30eb\u306e\u9577\u3055\u3092\u8abf\u6574 } // \u753b\u9762\u306e\u5e95\u3092\u8d8a\u3048\u305f\u3089\uff08\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u306a\u3063\u305f\u3089\uff09 if ( SceneSize . y <= ball . y ) { // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217\u3092\u30ea\u30bb\u30c3\u30c8 bricks = MakeBricks (); // \u30dc\u30fc\u30eb\u3092\u30ea\u30bb\u30c3\u30c8 ball = MakeBall (); // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u3092\u30ea\u30bb\u30c3\u30c8 ballVelocity = MakeBallVelocity (); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3059\u308b Cursor :: RequestStyle ( CursorStyle :: Hidden ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & brick : bricks ) { brick . stretched ( -1 ) // 1 px \u7e2e\u307e\u305b\u308b\u3053\u3068\u3067\u5883\u754c\u7dda\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b . draw ( HSV { brick . y - 40 }); // Y \u5ea7\u6a19\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . rounded ( 3 ) // \u89d2\u3092\u5c11\u3057\u4e38\u304f\u3059\u308b . draw (); } } 2 | \u4e07\u83ef\u93e1\u30da\u30a4\u30f3\u30c8 \u00b6 \u4e07\u83ef\u93e1\u306e\u3088\u3046\u306a\u6a21\u69d8\u3092\u63cf\u3051\u307e\u3059\u3002\u53f3\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u66f8\u3044\u305f\u3082\u306e\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002 \u4e07\u83ef\u93e1\u30da\u30a4\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size CanvasSize { 600 , 600 }; // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( CanvasSize ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color BackgroundColor { 20 , 40 , 60 }; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image { CanvasSize , BackgroundColor }; // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = ( Cursor :: PosF () - Scene :: Center ()); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line { cs [ 0 ], cs [ 1 ] }. moveBy ( Scene :: Center ()) . overwrite ( image , 2 , HSV { ( Scene :: Time () * 60 ), 0.5 , 1.0 }); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( BackgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } } 3 | QR \u30b3\u30fc\u30c9\u751f\u6210 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30ab\u30e1\u30e9\u3067\u8aad\u307f\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 QR \u30b3\u30fc\u30c9\u751f\u6210\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u8eab TextEditState textEdit { U \"abc\" }; String previous ; // QR \u30b3\u30fc\u30c9\u3092\u66f8\u304d\u8fbc\u3080\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b SimpleGUI :: TextBox ( textEdit , Vec2 { 20 , 20 }, 1240 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( const String current = textEdit . text ; current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( const auto qr = QR :: EncodeText ( current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( QR :: MakeImage ( qr ). scaled ( 500 , 500 , InterpolationAlgorithm :: Nearest )); } previous = current ; } texture . drawAt ( 640 , 400 ); } } 4 | \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9 \u00b6 \u56db\u89d2\u3084\u4e38\u3092\u63cf\u304f\u3068\u7269\u4f53\u304c\u751f\u6210\u3055\u308c\u3066\u7269\u7406\u6f14\u7b97\u3092\u3057\u307e\u3059\u3002 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3084\u53f3\u30af\u30ea\u30c3\u30af\u3067\u8996\u70b9\u3092\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // 2D \u7269\u7406\u6f14\u7b97\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30b9\u30c6\u30c3\u30d7\uff08\u79d2\uff09 constexpr double StepSec = ( 1.0 / 200.0 ); // 2D \u7269\u7406\u6f14\u7b97\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u84c4\u7a4d\u6642\u9593\uff08\u79d2\uff09 double accumulatorSec = 0.0 ; // 2D \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // [_] \u5730\u9762 const P2Body ground = world . createLine ( P2Static , Vec2 { 0 , 0 }, Line { -600 , 0 , 600 , 0 }); // \u7269\u4f53 Array < P2Body > bodies ; // 2D \u30ab\u30e1\u30e9 Camera2D camera { Vec2 { 0 , -300 } }; LineString points ; while ( System :: Update ()) { for ( accumulatorSec += Scene :: DeltaTime (); StepSec <= accumulatorSec ; accumulatorSec -= StepSec ) { // 2D \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0 world . update ( StepSec ); } // \u5730\u9762\u3088\u308a\u4e0b\u306b\u843d\u3061\u305f\u7269\u4f53\u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & b ) { return ( 200 < b . getPos (). y ); }); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3082\u3057\u304f\u306f\u30af\u30ea\u30c3\u30af\u3057\u305f\u307e\u307e\u306e\u79fb\u52d5\u304c\u767a\u751f\u3057\u305f\u3089 if ( MouseL . down () || ( MouseL . pressed () && ( not Cursor :: DeltaF (). isZero ()))) { points << Cursor :: PosF (); } else if ( MouseL . up ()) { points = points . simplified ( 2.0 ); if ( const Polygon polygon = Polygon :: CorrectOne ( points )) { const Vec2 pos = polygon . centroid (); bodies << world . createPolygon ( P2Dynamic , pos , polygon . movedBy ( - pos )); } points . clear (); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV { body . id () * 10.0 }); } // \u5730\u9762\u3092\u63cf\u753b ground . draw ( Palette :: Skyblue ); points . draw ( 3 ); } // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3092\u63cf\u753b camera . draw ( Palette :: Orange ); } } 5 | kd-tree \u00b6 kd-\u6728\u306f\u8fd1\u304f\u306b\u3042\u308b\u30e6\u30cb\u30c3\u30c8\u3092\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002 \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30b2\u30fc\u30e0\u306a\u3069\u3067\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002 kd-tree \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> struct Unit { Circle circle ; ColorF color ; void draw () const { circle . draw ( color ); } }; // Unit \u3092 KDTree \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30c0\u30d7\u30bf struct UnitAdapter : KDTreeAdapter < Array < Unit > , Vec2 > { static const element_type * GetPointer ( const point_type & point ) { return point . getPointer (); } static element_type GetElement ( const dataset_type & dataset , size_t index , size_t dim ) { return dataset [ index ]. circle . center . elem ( dim ); } }; void Main () { // 200 \u500b\u306e Unit \u3092\u751f\u6210 Array < Unit > units ( 200 ); for ( auto & unit : units ) { unit . circle = Circle { RandomVec2 ( Scene :: Rect ()), 4 }; unit . color = RandomColorF (); } // kd-tree \u3092\u69cb\u7bc9 KDTree < UnitAdapter > kdTree { units }; // radius search \u3059\u308b\u969b\u306e\u63a2\u7d22\u8ddd\u96e2 constexpr double SearchDistance = 80.0 ; while ( System :: Update ()) { const Vec2 cursorPos = Cursor :: PosF (); Circle { cursorPos , SearchDistance }. draw ( ColorF { 1.0 , 0.2 }); // SearchDistance \u4ee5\u5185\u306e\u8ddd\u96e2\u306b\u3042\u308b Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . radiusSearch ( cursorPos , SearchDistance )) { Line { cursorPos , units [ index ]. circle . center }. draw ( 4 ); } // \u30e6\u30cb\u30c3\u30c8\u3092\u63cf\u753b for ( const auto & unit : units ) { unit . draw (); } } } 6 | \u97f3\u697d\u30d7\u30ec\u30fc\u30e4\u30fc \u00b6 \u30d1\u30bd\u30b3\u30f3\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u751f\u3057\u3066\u3001\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3082\u8868\u793a\u3057\u307e\u3059\u3002 \u30d1\u30bd\u30b3\u30f3\u306b\u518d\u751f\u3067\u304d\u308b\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u3001\u30b5\u30f3\u30d7\u30eb\u7528\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u304c App/example/test.mp3 \u306b\u3042\u308a\u307e\u3059\u3002\u30d5\u30ea\u30fc\u306e BGM \u7d20\u6750 (MP3) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u8a66\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u97f3\u697d\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool seeking = false ; while ( System :: Update ()) { ClearPrint (); // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF { audio . posSec () }, U \"M:ss\" ) + U \" / \" + FormatTime ( SecondsF { audio . lengthSec () }, U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = ( static_cast < double > ( audio . posSample ()) / audio . samples ()); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( Min ( Scene :: Width (), static_cast < int32 > ( fft . buffer . size ())))) { const double size = ( Pow ( fft . buffer [ i ], 0.6f ) * 1000 ); RectF { Arg :: bottomLeft ( i , 480 ), 1 , size }. draw ( HSV { 240.0 - i }); } // \u5468\u6ce2\u6570\u8868\u793a Rect { Cursor :: Pos (). x , 0 , 1 , 480 }. draw (); Print << U \"{:.2f} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 { 40 , 500 }, 120 )) { // \u73fe\u5728\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092 0.5 \u79d2\u304b\u3051\u3066\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3055\u305b\u3066\u505c\u6b62 audio . stop ( 0.5 s ); // \u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u304b\u3089\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u958b\u304f audio = Dialog :: OpenAudio (); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); } // \u518d\u751f if ( SimpleGUI :: Button ( U \" \\U000F040A Play\" , Vec2 { 170 , 500 }, 120 , audio && ( not audio . isPlaying ()))) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \" \\U000F03E4 Pause\" , Vec2 { 300 , 500 }, 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 { 40 , 540 }, 120 , 590 , ( not audio . isEmpty ()))) { audio . pause ( 0.05 s ); while ( audio . isPlaying ()) // \u518d\u751f\u304c\u6b62\u307e\u308b\u307e\u3067\u5f85\u6a5f { System :: Sleep ( 0.01 s ); } // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . seekSamples ( static_cast < size_t > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 seeking = true ; } else if ( seeking && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.05 s ); seeking = false ; } } // \u7d42\u4e86\u6642\u306b\u518d\u751f\u4e2d\u306e\u5834\u5408\u3001\u97f3\u91cf\u3092\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8 if ( audio . isPlaying ()) { audio . fadeVolume ( 0.0 , 0.3 s ); System :: Sleep ( 0.3 s ); } } 7 | \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 \u00b6 \u5236\u5fa1\u70b9\u3092\u3082\u3068\u306b\u9053\u8def\u3092\u4f5c\u308a\u3001\u59cb\u70b9\u304b\u3089\u7d42\u70b9\u307e\u3067\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u307e\u3059\u3002 \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 0.8 }); // \u5236\u5fa1\u70b9 Array < Vec2 > points ; // \u9053\u8def\u7528\u30dd\u30ea\u30b4\u30f3 Polygon polygon ; // \u7d4c\u8def LineString path ; // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; while ( System :: Update ()) { // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u5236\u5fa1\u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u4f5c\u308a\u4e38\u304f\u592a\u3089\u305b\u3066\u9053\u8def\u3092\u4f5c\u308b polygon = Spline2D { points }. calculateRoundBuffer ( 24 , 8 , 12 ); // \u30dd\u30ea\u30b4\u30f3\u304b\u3089\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u3092\u69cb\u7bc9\uff08\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u534a\u5f84 20 \u30d4\u30af\u30bb\u30eb\uff09 navMesh . build ( polygon , { . agentRadius = 20.0 }); // \u5236\u5fa1\u70b9\u306e\u5148\u982d\u304b\u3089\u7d42\u70b9\u307e\u3067\u306e\u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( points . front (), points . back ()); } // \u9053\u8def\u3092\u63cf\u753b polygon . draw ( ColorF { 1.0 }). drawFrame ( 2 , ColorF { 0.7 }); // \u7d4c\u8def\u304c\u3042\u308c\u3070 if ( path ) { // \u7d4c\u8def\u3092\u63cf\u753b path . draw ( 8 , ColorF { 0.1 , 0.5 , 0.9 }); // \u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u306b\u5186\u3092\u63cf\u753b path . front (). asCircle ( 12 ). draw ( ColorF { 1.0 , 0.3 , 0.0 }); // \u30b4\u30fc\u30eb\u5730\u70b9\u306b\u5186\u3092\u63cf\u753b path . back (). asCircle ( 12 ). draw ( ColorF { 1.0 , 0.3 , 0.0 }); } } } 8 | \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf \u00b6 \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3068\u306f: \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 (Wikipedia) \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 = 0 ; bool current : 1 = 0 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ( Cell {}); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = Cell { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color { 0 , 255 , 0 } : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 Width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 Height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid (( Width + 2 ), ( Height + 2 ), Cell { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image { Width , Height , Palette :: Black }; // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; Stopwatch stopwatch { StartImmediately :: Yes }; // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 { 700 , 40 }, 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 { 700 , 80 }, 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 { 700 , 160 }, 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 { 700 , 200 }, 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 { 700 , 240 }, 170 ) || ( autoStep && stopwatch . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; stopwatch . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 { 700 , 320 }, 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect { 0 , 0 , 599 }. mouseOver ()) { const Point target = ( Cursor :: Pos () / 10 + Point { 1 , 1 }); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { const ScopedRenderStates2D sampler { SamplerState :: ClampNearest }; texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect { 0 , i * 10 , 600 , 1 }. draw ( ColorF { 0.4 }); Rect { i * 10 , 0 , 1 , 600 }. draw ( ColorF { 0.4 }); } } // \u76e4\u9762\u4e0a\u3067\u306f\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4ee3\u308f\u308a\u306b\u9078\u629e\u30bb\u30eb\u3092\u5f37\u8abf\u8868\u793a if ( Rect { 0 , 0 , 599 }. mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect { Cursor :: Pos () / 10 * 10 , 10 }. draw ( Palette :: Orange ); } } } 9 | \u6a21\u5199\u30a2\u30d7\u30ea \u00b6 \u771f\u3063\u767d\u306a\u753b\u50cf\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u8272\u306e\u5186\u3092\u91cd\u306d\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u76ee\u6a19\u306e\u753b\u50cf\u306b\u8fd1\u3065\u3051\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u30d1\u30bd\u30b3\u30f3\u306b\u9069\u5f53\u306a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u3001\u30b5\u30f3\u30d7\u30eb\u7528\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304c App/example/ \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308a\u307e\u3059\u3002 \u30e9\u30f3\u30c0\u30e0\u306a\u8272\u306e\u5186\u3067\u76ee\u7684\u306e\u7d75\u3092\u4f5c\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 const Point pos = RandomPoint ( Rect { image . size () }); // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 const ColorF color { Random (), Random (), Random (), Random () }; // \u30e9\u30f3\u30c0\u30e0\u306a\u534a\u5f84 const int32 size = Random ( 1 , 10 ); // \u5186\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Circle { pos , size }. paint ( image , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } } 10 | \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790 \u00b6 \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u58f0\u6ce2\u5f62\u306e\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u8868\u793a\u3057\u307e\u3059\u3002 \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\uff08\u305f\u3060\u3061\u306b\u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8\uff09 Microphone mic { StartImmediately :: Yes }; if ( not mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error { U \"Microphone not available\" }; } FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = ( Pow ( fft . buffer [ i ], 0.6f ) * 1200 ); RectF { Arg :: bottomLeft ( i , 600 ), 1 , size }. draw ( HSV { 240 - i }); } // \u5468\u6ce2\u6570\u8868\u793a Rect { Cursor :: Pos (). x , 0 , 1 , Scene :: Height () }. draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } 11 | \u30d4\u30a2\u30ce \u00b6 \u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30d4\u30a2\u30ce\u3092\u6f14\u594f\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u697d\u5668\u306e\u97f3\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 \u30d4\u30a2\u30ce\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size KeySize { 55 , 400 }; // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument Instrument = GMInstrument :: Shamisen ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize (( 12 * KeySize . x ), KeySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio { Instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s }; } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Input , NumKeys > Keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyEnter , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > KeyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( Keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( KeyPositions [ i ])) { RectF { ( KeyPositions [ i ] / 2 * KeySize . x ), 0 , KeySize } . stretched ( -1 ). draw ( Keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( KeyPositions [ i ])) { RectF { ( KeySize . x * 0.68 + KeyPositions [ i ] / 2 * KeySize . x ), 0 , ( KeySize . x * 0.58 ), ( KeySize . y * 0.62 ) } . draw ( Keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } } 12 | 3D \u63cf\u753b \u00b6 3D \u63cf\u753b\u3082\u6271\u3048\u307e\u3059\u3002 3D \u63cf\u753b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30a6\u30a4\u30f3\u30c9\u30a6\u3068\u30b7\u30fc\u30f3\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u80cc\u666f\u8272 (\u30ea\u30cb\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306a\u306e\u3067 removeSRGBCurve() \u3067 sRGB \u30ab\u30fc\u30d6\u3092\u9664\u53bb\uff09 const ColorF backgroundColor = ColorF { 0.4 , 0.6 , 0.8 }. removeSRGBCurve (); // UV \u30c1\u30a7\u30c3\u30af\u7528\u30c6\u30af\u30b9\u30c1\u30e3 (\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f7f\u7528\u3002\u30ea\u30cb\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6b63\u3057\u304f\u6271\u308f\u308c\u308b\u3088\u3046\u3001sRGB \u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308b\u3068\u660e\u793a\uff09 const Texture uvChecker { U \"example/texture/uv.png\" , TextureDesc :: MippedSRGB }; // 3D \u30b7\u30fc\u30f3\u3092\u63cf\u304f\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5bfe\u5fdc\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 // \u30ea\u30cb\u30a2\u8272\u7a7a\u9593\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306b TextureFormat::R8G8B8A8_Unorm_SRGB // \u5965\u884c\u304d\u306e\u6bd4\u8f03\u306e\u305f\u3081\u306e\u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u3082\u4f7f\u3046\u306e\u3067 HasDepth::Yes // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306a\u306e\u3067\u3001\u63cf\u753b\u5185\u5bb9\u3092\u4f7f\u3046\u524d\u306b resolve() \u304c\u5fc5\u8981 const MSRenderTexture renderTexture { Scene :: Size (), TextureFormat :: R8G8B8A8_Unorm_SRGB , HasDepth :: Yes }; // 3D \u30b7\u30fc\u30f3\u306e\u30c7\u30d0\u30c3\u30b0\u7528\u30ab\u30e1\u30e9 // \u7e26\u65b9\u5411\u306e\u8996\u91ce\u89d2 30\u00b0, \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e (10, 16, -32) // \u524d\u5f8c\u79fb\u52d5: [W][S], \u5de6\u53f3\u79fb\u52d5: [A][D], \u4e0a\u4e0b\u79fb\u52d5: [E][X], \u6ce8\u8996\u70b9\u79fb\u52d5: \u30a2\u30ed\u30fc\u30ad\u30fc, \u52a0\u901f: [Shift][Ctrl] DebugCamera3D camera { renderTexture . size (), 30 _deg , Vec3 { 10 , 16 , -32 } }; while ( System :: Update ()) { // \u30c7\u30d0\u30c3\u30b0\u30ab\u30e1\u30e9\u306e\u66f4\u65b0 (\u30ab\u30e1\u30e9\u306e\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9: 2.0) camera . update ( 2.0 ); // 3D \u30b7\u30fc\u30f3\u306b\u30ab\u30e1\u30e9\u3092\u8a2d\u5b9a Graphics3D :: SetCameraTransform ( camera ); // 3D \u63cf\u753b { // renderTexture \u3092\u80cc\u666f\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u3001 // renderTexture \u3092 3D \u63cf\u753b\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b const ScopedRenderTarget3D target { renderTexture . clear ( backgroundColor ) }; // \u5e8a\u3092\u63cf\u753b Plane { 64 }. draw ( uvChecker ); // \u30dc\u30c3\u30af\u30b9\u3092\u63cf\u753b Box { -8 , 2 , 0 , 4 }. draw ( ColorF { 0.8 , 0.6 , 0.4 }. removeSRGBCurve ()); // \u7403\u3092\u63cf\u753b Sphere { 0 , 2 , 0 , 2 }. draw ( ColorF { 0.4 , 0.8 , 0.6 }. removeSRGBCurve ()); // \u5186\u67f1\u3092\u63cf\u753b Cylinder { 8 , 2 , 0 , 2 , 4 }. draw ( ColorF { 0.6 , 0.4 , 0.8 }. removeSRGBCurve ()); } // 3D \u30b7\u30fc\u30f3\u3092 2D \u30b7\u30fc\u30f3\u306b\u63cf\u753b { // renderTexture \u3092 resolve \u3059\u308b\u524d\u306b 3D \u63cf\u753b\u3092\u5b9f\u884c\u3059\u308b Graphics3D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ea\u30be\u30eb\u30d6 renderTexture . resolve (); // \u30ea\u30cb\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305f renderTexture \u3092\u30b7\u30fc\u30f3\u306b\u8ee2\u9001 Shader :: LinearToScreen ( renderTexture ); } } }","title":"1. \u306f\u3058\u3081\u3066\u306e Siv3D"},{"location":"ja-jp/learn/hello-siv3d/#1-\u306f\u3058\u3081\u3066\u306e-siv3d","text":"\u3053\u306e\u7ae0\u3067\u306f Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u96f0\u56f2\u6c17\u3092\u4f53\u9a13\u3057\u307e\u3059\u3002","title":"1. \u306f\u3058\u3081\u3066\u306e Siv3D"},{"location":"ja-jp/learn/hello-siv3d/#11-\u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9","text":"Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u6700\u521d\u306b\u6b21\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3044\u304d\u306a\u308a\u5168\u90e8\u7406\u89e3\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u306f\u52d5\u304b\u3057\u3066\u4f53\u9a13\u3057\u307e\u3057\u3087\u3046\u3002 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> // OpenSiv3D v0.6.6 void Main () { // \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; // \u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new emoji font const Font emojiFont { 60 , Typeface :: ColorEmoji }; // `font` \u304c\u7d75\u6587\u5b57\u7528\u30d5\u30a9\u30f3\u30c8\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b | Set emojiFont as a fallback font . addFallback ( emojiFont ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an image file const Texture texture { U \"example/windmill.png\" }; // \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; // \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b\u5ea7\u6a19 | Coordinates of the emoji Vec2 emojiPos { 300 , 150 }; // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306b\u30c7\u30d0\u30c3\u30b0\u51fa\u529b | Print a text Print << U \"Push [A] key\" ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u30b5\u30a4\u30ba\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u7d75\u6587\u5b57\u3092\u63cf\u304f | Draw a texture with animated size emoji . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( emojiPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); // \u3082\u3057 [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 | When [A] key is down if ( KeyA . down ()) { // \u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30d0\u30c3\u30b0\u8868\u793a | Print a randomly selected text Print << Sample ({ U \"Hello!\" , U \"\u3053\u3093\u306b\u3061\u306f\" , U \"\u4f60\u597d\" , U \"\uc548\ub155\ud558\uc138\uc694?\" }); } // \u3082\u3057 [Button] \u304c\u62bc\u3055\u308c\u305f\u3089 | When [Button] is pushed if ( SimpleGUI :: Button ( U \"Button\" , Vec2 { 640 , 40 })) { // \u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u5ea7\u6a19\u3092\u79fb\u52d5 // Move the coordinates to a random position in the screen emojiPos = RandomVec2 ( Scene :: Rect ()); } } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3059\u308b\u3068\u3001\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u304c\u8ffd\u968f\u3057\u307e\u3059 \u53f3\u4e0a\u306e\u300cButton\u300d\u3068\u66f8\u304b\u308c\u305f\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u30cd\u30b3\u306e\u4f4d\u7f6e\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u308f\u308a\u307e\u3059 A \u30ad\u30fc\u3092\u62bc\u3059\u3068\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u306e\u5de6\u5074\u306b\u8868\u793a\u3055\u308c\u307e\u3059 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3068\u7d42\u4e86\u3057\u307e\u3059","title":"1.1 \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9"},{"location":"ja-jp/learn/hello-siv3d/#12-\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3059\u308b","text":"Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7df4\u7fd2\u3068\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u767b\u5834\u3059\u308b \u6570\u5b57 \u3084 \u7d75\u6587\u5b57 \u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Visual Studio \u3084 Xcode \u3067\u306f\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3068\u304d\u306b\u3001\u53e4\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u4e2d\u306e\u307e\u307e\u3060\u3068\u30d3\u30eb\u30c9\u306b\u5931\u6557\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3059\u308b\u524d\u306b\u3001 Esc \u3092\u62bc\u3059\u304b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u3066\u3001 \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86 \u3057\u307e\u3057\u3087\u3046\u3002","title":"1.2 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6539\u9020\u3059\u308b"},{"location":"ja-jp/learn/hello-siv3d/#\u80cc\u666f\u8272\u3092\u5909\u3048\u308b","text":"// \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a | Set background color Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u306e\u8a2d\u5b9a\u3067\u3059\u30023 \u3064\u306e\u6570\u5b57\u306f\u5de6\u304b\u3089\u9806\u306b R, G, B \u3067\u3059\u3002\u3053\u308c\u3089\u306e\u6570\u5b57\u3092 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u5909\u66f4\u3057\u3066\u3001\u80cc\u666f\u8272\u3092\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u80cc\u666f\u8272\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/hello-siv3d/#\u6587\u5b57\u306e\u5927\u304d\u3055\u3092\u5909\u3048\u308b","text":"// \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 | Create a new font const Font font { 60 }; \u57fa\u672c\u30b5\u30a4\u30ba\u3092 60 \u306b\u6307\u5b9a\u3057\u3066\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d5\u30a9\u30f3\u30c8\u306f\u753b\u9762\u4e2d\u5fc3\u306e\u30c6\u30ad\u30b9\u30c8\u300cHello, Siv3D!\ud83d\ude80\u300d\u306e\u8868\u793a\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u6570\u5b57\u3092\u3060\u3044\u305f\u3044 10\uff5e200 \u306e\u7bc4\u56f2\u3067\u5909\u66f4\u3057\u3066\u3001\u6587\u5b57\u306e\u5927\u304d\u3055\u304c\u5909\u308f\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u6587\u5b57\u306e\u5927\u304d\u3055\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/hello-siv3d/#\u7d75\u6587\u5b57\u3092\u5909\u3048\u308b","text":"// \u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 | Create a texture from an emoji const Texture emoji { U \"\ud83d\udc08\" _emoji }; \u7d75\u6587\u5b57 \ud83d\udc08 \u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u7d75\u6587\u5b57\u3092 \ud83d\udc15 \u3084 \ud83d\udc27, \ud83c\udf54 \u306b\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u306e\u524d\u5f8c\u306b\u4f59\u8a08\u306a\u7a7a\u767d\u3092\u4ed8\u3051\u308b\u3068\u8a8d\u8b58\u3055\u308c\u306a\u3044 \u306e\u3067\u6c17\u3092\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002 \u300c\u3044\u306c\u300d\u3068\u65e5\u672c\u8a9e\u3067\u5165\u529b\u3057\u3066\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u72ac\u306e\u7d75\u6587\u5b57\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059 Windows \u3067\u306f Win + . \u30ad\u30fc\u3092\u62bc\u3059\u3068\u767b\u5834\u3059\u308b\u7d75\u6587\u5b57\u5165\u529b\u30e1\u30cb\u30e5\u30fc\u304c\u4fbf\u5229\u3067\u3059 \u30aa\u30f3\u30e9\u30a4\u30f3\u7d75\u6587\u5b57\u767e\u79d1\u4e8b\u5178 emojipedia \u304b\u3089\u76ee\u7684\u306e\u7d75\u6587\u5b57\u3092\u691c\u7d22\u3059\u308b\u306e\u3082\u826f\u3044\u3067\u3057\u3087\u3046","title":"\u7d75\u6587\u5b57\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/hello-siv3d/#\u753b\u50cf\u306e\u63cf\u753b\u4f4d\u7f6e\u3092\u5909\u3048\u308b","text":"// \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f | Draw a texture texture . draw ( 200 , 200 ); \u753b\u50cf\u30d5\u30a1\u30a4\u30eb example/windmill.png \u304b\u3089\u4f5c\u6210\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e (x, y) = (200, 200) \u306b\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\u6570\u5b57\u3092\u5909\u3048\u3066\u3001\u4f4d\u7f6e\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u753b\u50cf\u306e\u63cf\u753b\u4f4d\u7f6e\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/hello-siv3d/#\u30c6\u30ad\u30b9\u30c8\u3092\u5909\u3048\u308b","text":"// \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f | Put a text in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\ude80\" ). drawAt ( Scene :: Center (), Palette :: Black ); \u300cHello, Siv3D!\ud83d\ude80\u300d\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u300c\u3053\u3093\u306b\u3061\u306f, Siv3D!\ud83d\ude80\u300d\u306b\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \" \u306e\u524d\u306b\u3042\u308b U \u306f UTF-32 \u6587\u5b57\u30b3\u30fc\u30c9\u3092\u610f\u5473\u3057\u307e\u3059\u3002Siv3D \u306f\u307b\u307c\u3059\u3079\u3066\u306e\u95a2\u6570\u3067 UTF-32 \u6587\u5b57\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u305f\u3081\u3001 U\" \u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30c6\u30ad\u30b9\u30c8\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/hello-siv3d/#\u30de\u30a6\u30b9\u306b\u8ffd\u968f\u3059\u308b\u5186\u3092\u5909\u3048\u308b","text":"// \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u968f\u3059\u308b\u534a\u900f\u660e\u306a\u5186\u3092\u63cf\u304f | Draw a red transparent circle that follows the mouse cursor Circle { Cursor :: Pos (), 40 }. draw ( ColorF { 1 , 0 , 0 , 0.5 }); \u5186\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b\u534a\u5f84 40 \u30d4\u30af\u30bb\u30eb\u3001(R, G, B, \u4e0d\u900f\u660e\u5ea6) = (1.0, 0.0, 0.0, 0.5) \u3067\u63cf\u3044\u3066\u3044\u307e\u3059\u3002\u5186\u306e\u534a\u5f84\u3084\u8272\u3001\u4e0d\u900f\u660e\u5ea6\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4e0d\u900f\u660e\u5ea6\u306f 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3057\u30010.0 \u3067\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30de\u30a6\u30b9\u306b\u8ffd\u968f\u3059\u308b\u5186\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/hello-siv3d/#13-\u904a\u3079\u308b\u30b5\u30f3\u30d7\u30eb","text":"Siv3D \u306e\u69d8\u3005\u306a\u6a5f\u80fd\u3092\u4f53\u9a13\u3067\u304d\u308b\u304a\u3059\u3059\u3081\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u3053\u306e Web \u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u30b3\u30fc\u30c9\u30a8\u30ea\u30a2\u306e\u53f3\u4e0a\u306b\u3042\u308b\u300cCopy to Clipboard\u300d\u30a2\u30a4\u30b3\u30f3\u3092\u62bc\u3059\u3068\u3001 \u30b3\u30fc\u30c9\u3092\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u306b\u30b3\u30d4\u30fc \u3067\u304d\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u66f8\u3044\u3066\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u65b0\u3057\u3044\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3082\u767a\u5c55\u7684\u306a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u610f\u5473\u3092\u7406\u89e3\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4eca\u306f\u307e\u3060\u6c17\u306b\u3057\u306a\u304f\u3066\u5927\u4e08\u592b\u3067\u3059\u3002","title":"1.3 \u904a\u3079\u308b\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/learn/hello-siv3d/#1--\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057","text":"\u30de\u30a6\u30b9\u3067\u30d1\u30c9\u30eb\u3092\u79fb\u52d5\u3055\u305b\u3066\u30d6\u30ed\u30c3\u30af\u3092\u5168\u90e8\u6d88\u3057\u307e\u3057\u3087\u3046\u3002 \u305f\u3060\u3057\u3001\u30af\u30ea\u30a2\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002 \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> //////////////////////////////// // // \u5b9a\u6570 // //////////////////////////////// // \u753b\u9762\u306e\u30b5\u30a4\u30ba (800x600) constexpr Size SceneSize = Scene :: DefaultSceneSize ; // 1 \u3064\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size BrickSize { 40 , 20 }; // \u6a2a\u306b\u4f55\u500b\u306e\u30d6\u30ed\u30c3\u30af\u304c\u4e26\u3076\u304b constexpr int32 BrickCountX = ( SceneSize . x / BrickSize . x ); // \u7e26\u306b\u4f55\u500b\u306e\u30d6\u30ed\u30c3\u30af\u304c\u4e26\u3076\u304b constexpr int32 BrickCountY = 5 ; // \u30d6\u30ed\u30c3\u30af\u3092\u4e26\u3079\u59cb\u3081\u308b\u5ea7\u6a19 constexpr Point BrickStartPosition { 0 , 60 }; // \u30dc\u30fc\u30eb\u306e\u521d\u671f\u4f4d\u7f6e\uff08\u30d4\u30af\u30bb\u30eb\uff09 constexpr Vec2 BallInitialPos { ( SceneSize . x * 0.5 ), ( SceneSize . y * 0.75 ) }; // \u30dc\u30fc\u30eb\u306e\u901f\u3055\uff08\u30d4\u30af\u30bb\u30eb / \u79d2\uff09 constexpr double BallSpeedPerSec = 480.0 ; // \u30d1\u30c9\u30eb\u306e Y \u5ea7\u6a19 constexpr int32 PaddleY = 500 ; // \u30d1\u30c9\u30eb\u306e\u30b5\u30a4\u30ba constexpr Size PaddleSize { 60 , 10 }; //////////////////////////////// // // \u521d\u671f\u72b6\u614b\u3092\u4f5c\u308b\u95a2\u6570 // //////////////////////////////// // \u30d6\u30ed\u30c3\u30af\uff08brick: \u30ec\u30f3\u30ac\uff09\u306e\u521d\u671f\u914d\u5217\u3092\u4f5c\u308b\u95a2\u6570 Array < Rect > MakeBricks () { // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217\uff081 \u3064\u306e\u30d6\u30ed\u30c3\u30af\u3092 Rect \u3067\u8868\u73fe\uff09 Array < Rect > bricks ; for ( int32 y = 0 ; y < BrickCountY ; ++ y ) { for ( int32 x = 0 ; x < BrickCountX ; ++ x ) { // \u30d6\u30ed\u30c3\u30af\u306e\u5de6\u4e0a\u306e X \u5ea7\u6a19 const int32 posX = ( x * BrickSize . x + BrickStartPosition . x ); // \u30d6\u30ed\u30c3\u30af\u306e\u5de6\u4e0a\u306e Y \u5ea7\u6a19 const int32 posY = ( y * BrickSize . y + BrickStartPosition . y ); // Rect \u3092\u8ffd\u52a0 bricks << Rect { posX , posY , BrickSize }; } } return bricks ; } // \u521d\u671f\u306e\u30dc\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570 Circle MakeBall () { return { BallInitialPos , 8 }; } // \u521d\u671f\u306e\u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 MakeBallVelocity () { return { 0 , - BallSpeedPerSec }; } //////////////////////////////// // // Main // //////////////////////////////// void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > bricks = MakeBricks (); // \u30dc\u30fc\u30eb\uff08\u4e2d\u5fc3\u5ea7\u6a19\u3068\u534a\u5f84\uff09 Circle ball = MakeBall (); // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity = MakeBallVelocity (); while ( System :: Update ()) { //////////////////////////////// // // \u72b6\u614b\u306e\u66f4\u65b0 // //////////////////////////////// // \u30d1\u30c9\u30eb const Rect paddle { Arg :: center ( Cursor :: Pos (). x , PaddleY ), PaddleSize }; // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = bricks . begin (); it != bricks . end (); ++ it ) { // \u30d6\u30ed\u30c3\u30af\u3068\u30dc\u30fc\u30eb\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30d6\u30ed\u30c3\u30af\u306e\u4e0a\u8fba\u3001\u307e\u305f\u306f\u5e95\u8fba\u3068\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e Y \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . y *= -1 ; } else { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e X \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . x *= -1 ; } // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 bricks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089 if (( ball . y < 0 ) && ( ballVelocity . y < 0 )) { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e Y \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . y *= -1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089 if ((( ball . x < 0 ) && ( ballVelocity . x < 0 )) || (( SceneSize . x < ball . x ) && ( 0 < ballVelocity . x ))) { // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u306e X \u6210\u5206\u3092\u53cd\u8ee2 ballVelocity . x *= -1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089 if (( 0 < ballVelocity . y ) && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u65b9\u5411\uff08\u901f\u5ea6\u30d9\u30af\u30c8\u30eb\uff09\u3092\u5909\u3048\u308b ballVelocity = Vec2 { ( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y } . setLength ( BallSpeedPerSec ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055\u304c BallSpeedPerSec \u306b\u306a\u308b\u3088\u3046\u3001\u30d9\u30af\u30c8\u30eb\u306e\u9577\u3055\u3092\u8abf\u6574 } // \u753b\u9762\u306e\u5e95\u3092\u8d8a\u3048\u305f\u3089\uff08\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u306a\u3063\u305f\u3089\uff09 if ( SceneSize . y <= ball . y ) { // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217\u3092\u30ea\u30bb\u30c3\u30c8 bricks = MakeBricks (); // \u30dc\u30fc\u30eb\u3092\u30ea\u30bb\u30c3\u30c8 ball = MakeBall (); // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6\u3092\u30ea\u30bb\u30c3\u30c8 ballVelocity = MakeBallVelocity (); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3059\u308b Cursor :: RequestStyle ( CursorStyle :: Hidden ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & brick : bricks ) { brick . stretched ( -1 ) // 1 px \u7e2e\u307e\u305b\u308b\u3053\u3068\u3067\u5883\u754c\u7dda\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b . draw ( HSV { brick . y - 40 }); // Y \u5ea7\u6a19\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . rounded ( 3 ) // \u89d2\u3092\u5c11\u3057\u4e38\u304f\u3059\u308b . draw (); } }","title":"1 | \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057"},{"location":"ja-jp/learn/hello-siv3d/#2--\u4e07\u83ef\u93e1\u30da\u30a4\u30f3\u30c8","text":"\u4e07\u83ef\u93e1\u306e\u3088\u3046\u306a\u6a21\u69d8\u3092\u63cf\u3051\u307e\u3059\u3002\u53f3\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u66f8\u3044\u305f\u3082\u306e\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002 \u4e07\u83ef\u93e1\u30da\u30a4\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size CanvasSize { 600 , 600 }; // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( CanvasSize ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color BackgroundColor { 20 , 40 , 60 }; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image { CanvasSize , BackgroundColor }; // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = ( Cursor :: PosF () - Scene :: Center ()); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line { cs [ 0 ], cs [ 1 ] }. moveBy ( Scene :: Center ()) . overwrite ( image , 2 , HSV { ( Scene :: Time () * 60 ), 0.5 , 1.0 }); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( BackgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } }","title":"2 | \u4e07\u83ef\u93e1\u30da\u30a4\u30f3\u30c8"},{"location":"ja-jp/learn/hello-siv3d/#3--qr-\u30b3\u30fc\u30c9\u751f\u6210","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30ab\u30e1\u30e9\u3067\u8aad\u307f\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 QR \u30b3\u30fc\u30c9\u751f\u6210\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u8eab TextEditState textEdit { U \"abc\" }; String previous ; // QR \u30b3\u30fc\u30c9\u3092\u66f8\u304d\u8fbc\u3080\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b SimpleGUI :: TextBox ( textEdit , Vec2 { 20 , 20 }, 1240 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( const String current = textEdit . text ; current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( const auto qr = QR :: EncodeText ( current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( QR :: MakeImage ( qr ). scaled ( 500 , 500 , InterpolationAlgorithm :: Nearest )); } previous = current ; } texture . drawAt ( 640 , 400 ); } }","title":"3 | QR \u30b3\u30fc\u30c9\u751f\u6210"},{"location":"ja-jp/learn/hello-siv3d/#4--\u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9","text":"\u56db\u89d2\u3084\u4e38\u3092\u63cf\u304f\u3068\u7269\u4f53\u304c\u751f\u6210\u3055\u308c\u3066\u7269\u7406\u6f14\u7b97\u3092\u3057\u307e\u3059\u3002 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3084\u53f3\u30af\u30ea\u30c3\u30af\u3067\u8996\u70b9\u3092\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // 2D \u7269\u7406\u6f14\u7b97\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30b9\u30c6\u30c3\u30d7\uff08\u79d2\uff09 constexpr double StepSec = ( 1.0 / 200.0 ); // 2D \u7269\u7406\u6f14\u7b97\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u84c4\u7a4d\u6642\u9593\uff08\u79d2\uff09 double accumulatorSec = 0.0 ; // 2D \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // [_] \u5730\u9762 const P2Body ground = world . createLine ( P2Static , Vec2 { 0 , 0 }, Line { -600 , 0 , 600 , 0 }); // \u7269\u4f53 Array < P2Body > bodies ; // 2D \u30ab\u30e1\u30e9 Camera2D camera { Vec2 { 0 , -300 } }; LineString points ; while ( System :: Update ()) { for ( accumulatorSec += Scene :: DeltaTime (); StepSec <= accumulatorSec ; accumulatorSec -= StepSec ) { // 2D \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0 world . update ( StepSec ); } // \u5730\u9762\u3088\u308a\u4e0b\u306b\u843d\u3061\u305f\u7269\u4f53\u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & b ) { return ( 200 < b . getPos (). y ); }); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3082\u3057\u304f\u306f\u30af\u30ea\u30c3\u30af\u3057\u305f\u307e\u307e\u306e\u79fb\u52d5\u304c\u767a\u751f\u3057\u305f\u3089 if ( MouseL . down () || ( MouseL . pressed () && ( not Cursor :: DeltaF (). isZero ()))) { points << Cursor :: PosF (); } else if ( MouseL . up ()) { points = points . simplified ( 2.0 ); if ( const Polygon polygon = Polygon :: CorrectOne ( points )) { const Vec2 pos = polygon . centroid (); bodies << world . createPolygon ( P2Dynamic , pos , polygon . movedBy ( - pos )); } points . clear (); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV { body . id () * 10.0 }); } // \u5730\u9762\u3092\u63cf\u753b ground . draw ( Palette :: Skyblue ); points . draw ( 3 ); } // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3092\u63cf\u753b camera . draw ( Palette :: Orange ); } }","title":"4 | \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9"},{"location":"ja-jp/learn/hello-siv3d/#5--kd-tree","text":"kd-\u6728\u306f\u8fd1\u304f\u306b\u3042\u308b\u30e6\u30cb\u30c3\u30c8\u3092\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002 \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30b2\u30fc\u30e0\u306a\u3069\u3067\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002 kd-tree \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> struct Unit { Circle circle ; ColorF color ; void draw () const { circle . draw ( color ); } }; // Unit \u3092 KDTree \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30c0\u30d7\u30bf struct UnitAdapter : KDTreeAdapter < Array < Unit > , Vec2 > { static const element_type * GetPointer ( const point_type & point ) { return point . getPointer (); } static element_type GetElement ( const dataset_type & dataset , size_t index , size_t dim ) { return dataset [ index ]. circle . center . elem ( dim ); } }; void Main () { // 200 \u500b\u306e Unit \u3092\u751f\u6210 Array < Unit > units ( 200 ); for ( auto & unit : units ) { unit . circle = Circle { RandomVec2 ( Scene :: Rect ()), 4 }; unit . color = RandomColorF (); } // kd-tree \u3092\u69cb\u7bc9 KDTree < UnitAdapter > kdTree { units }; // radius search \u3059\u308b\u969b\u306e\u63a2\u7d22\u8ddd\u96e2 constexpr double SearchDistance = 80.0 ; while ( System :: Update ()) { const Vec2 cursorPos = Cursor :: PosF (); Circle { cursorPos , SearchDistance }. draw ( ColorF { 1.0 , 0.2 }); // SearchDistance \u4ee5\u5185\u306e\u8ddd\u96e2\u306b\u3042\u308b Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . radiusSearch ( cursorPos , SearchDistance )) { Line { cursorPos , units [ index ]. circle . center }. draw ( 4 ); } // \u30e6\u30cb\u30c3\u30c8\u3092\u63cf\u753b for ( const auto & unit : units ) { unit . draw (); } } }","title":"5 | kd-tree"},{"location":"ja-jp/learn/hello-siv3d/#6--\u97f3\u697d\u30d7\u30ec\u30fc\u30e4\u30fc","text":"\u30d1\u30bd\u30b3\u30f3\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u751f\u3057\u3066\u3001\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3082\u8868\u793a\u3057\u307e\u3059\u3002 \u30d1\u30bd\u30b3\u30f3\u306b\u518d\u751f\u3067\u304d\u308b\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u3001\u30b5\u30f3\u30d7\u30eb\u7528\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u304c App/example/test.mp3 \u306b\u3042\u308a\u307e\u3059\u3002\u30d5\u30ea\u30fc\u306e BGM \u7d20\u6750 (MP3) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u8a66\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u97f3\u697d\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool seeking = false ; while ( System :: Update ()) { ClearPrint (); // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF { audio . posSec () }, U \"M:ss\" ) + U \" / \" + FormatTime ( SecondsF { audio . lengthSec () }, U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = ( static_cast < double > ( audio . posSample ()) / audio . samples ()); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( Min ( Scene :: Width (), static_cast < int32 > ( fft . buffer . size ())))) { const double size = ( Pow ( fft . buffer [ i ], 0.6f ) * 1000 ); RectF { Arg :: bottomLeft ( i , 480 ), 1 , size }. draw ( HSV { 240.0 - i }); } // \u5468\u6ce2\u6570\u8868\u793a Rect { Cursor :: Pos (). x , 0 , 1 , 480 }. draw (); Print << U \"{:.2f} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 { 40 , 500 }, 120 )) { // \u73fe\u5728\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092 0.5 \u79d2\u304b\u3051\u3066\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3055\u305b\u3066\u505c\u6b62 audio . stop ( 0.5 s ); // \u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u304b\u3089\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u958b\u304f audio = Dialog :: OpenAudio (); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); } // \u518d\u751f if ( SimpleGUI :: Button ( U \" \\U000F040A Play\" , Vec2 { 170 , 500 }, 120 , audio && ( not audio . isPlaying ()))) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \" \\U000F03E4 Pause\" , Vec2 { 300 , 500 }, 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 { 40 , 540 }, 120 , 590 , ( not audio . isEmpty ()))) { audio . pause ( 0.05 s ); while ( audio . isPlaying ()) // \u518d\u751f\u304c\u6b62\u307e\u308b\u307e\u3067\u5f85\u6a5f { System :: Sleep ( 0.01 s ); } // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . seekSamples ( static_cast < size_t > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 seeking = true ; } else if ( seeking && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.05 s ); seeking = false ; } } // \u7d42\u4e86\u6642\u306b\u518d\u751f\u4e2d\u306e\u5834\u5408\u3001\u97f3\u91cf\u3092\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8 if ( audio . isPlaying ()) { audio . fadeVolume ( 0.0 , 0.3 s ); System :: Sleep ( 0.3 s ); } }","title":"6 | \u97f3\u697d\u30d7\u30ec\u30fc\u30e4\u30fc"},{"location":"ja-jp/learn/hello-siv3d/#7--\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5","text":"\u5236\u5fa1\u70b9\u3092\u3082\u3068\u306b\u9053\u8def\u3092\u4f5c\u308a\u3001\u59cb\u70b9\u304b\u3089\u7d42\u70b9\u307e\u3067\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u307e\u3059\u3002 \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 0.8 }); // \u5236\u5fa1\u70b9 Array < Vec2 > points ; // \u9053\u8def\u7528\u30dd\u30ea\u30b4\u30f3 Polygon polygon ; // \u7d4c\u8def LineString path ; // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; while ( System :: Update ()) { // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u5236\u5fa1\u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u4f5c\u308a\u4e38\u304f\u592a\u3089\u305b\u3066\u9053\u8def\u3092\u4f5c\u308b polygon = Spline2D { points }. calculateRoundBuffer ( 24 , 8 , 12 ); // \u30dd\u30ea\u30b4\u30f3\u304b\u3089\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5\u3092\u69cb\u7bc9\uff08\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u534a\u5f84 20 \u30d4\u30af\u30bb\u30eb\uff09 navMesh . build ( polygon , { . agentRadius = 20.0 }); // \u5236\u5fa1\u70b9\u306e\u5148\u982d\u304b\u3089\u7d42\u70b9\u307e\u3067\u306e\u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( points . front (), points . back ()); } // \u9053\u8def\u3092\u63cf\u753b polygon . draw ( ColorF { 1.0 }). drawFrame ( 2 , ColorF { 0.7 }); // \u7d4c\u8def\u304c\u3042\u308c\u3070 if ( path ) { // \u7d4c\u8def\u3092\u63cf\u753b path . draw ( 8 , ColorF { 0.1 , 0.5 , 0.9 }); // \u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u306b\u5186\u3092\u63cf\u753b path . front (). asCircle ( 12 ). draw ( ColorF { 1.0 , 0.3 , 0.0 }); // \u30b4\u30fc\u30eb\u5730\u70b9\u306b\u5186\u3092\u63cf\u753b path . back (). asCircle ( 12 ). draw ( ColorF { 1.0 , 0.3 , 0.0 }); } } }","title":"7 | \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5"},{"location":"ja-jp/learn/hello-siv3d/#8--\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0-\u30a8\u30c7\u30a3\u30bf","text":"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3068\u306f: \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 (Wikipedia) \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 = 0 ; bool current : 1 = 0 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ( Cell {}); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = Cell { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color { 0 , 255 , 0 } : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 Width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 Height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid (( Width + 2 ), ( Height + 2 ), Cell { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image { Width , Height , Palette :: Black }; // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; Stopwatch stopwatch { StartImmediately :: Yes }; // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 { 700 , 40 }, 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 { 700 , 80 }, 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 { 700 , 160 }, 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 { 700 , 200 }, 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 { 700 , 240 }, 170 ) || ( autoStep && stopwatch . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; stopwatch . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 { 700 , 320 }, 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect { 0 , 0 , 599 }. mouseOver ()) { const Point target = ( Cursor :: Pos () / 10 + Point { 1 , 1 }); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { const ScopedRenderStates2D sampler { SamplerState :: ClampNearest }; texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect { 0 , i * 10 , 600 , 1 }. draw ( ColorF { 0.4 }); Rect { i * 10 , 0 , 1 , 600 }. draw ( ColorF { 0.4 }); } } // \u76e4\u9762\u4e0a\u3067\u306f\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4ee3\u308f\u308a\u306b\u9078\u629e\u30bb\u30eb\u3092\u5f37\u8abf\u8868\u793a if ( Rect { 0 , 0 , 599 }. mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect { Cursor :: Pos () / 10 * 10 , 10 }. draw ( Palette :: Orange ); } } }","title":"8 | \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf"},{"location":"ja-jp/learn/hello-siv3d/#9--\u6a21\u5199\u30a2\u30d7\u30ea","text":"\u771f\u3063\u767d\u306a\u753b\u50cf\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u8272\u306e\u5186\u3092\u91cd\u306d\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u76ee\u6a19\u306e\u753b\u50cf\u306b\u8fd1\u3065\u3051\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u30d1\u30bd\u30b3\u30f3\u306b\u9069\u5f53\u306a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u3001\u30b5\u30f3\u30d7\u30eb\u7528\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304c App/example/ \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308a\u307e\u3059\u3002 \u30e9\u30f3\u30c0\u30e0\u306a\u8272\u306e\u5186\u3067\u76ee\u7684\u306e\u7d75\u3092\u4f5c\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 const Point pos = RandomPoint ( Rect { image . size () }); // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 const ColorF color { Random (), Random (), Random (), Random () }; // \u30e9\u30f3\u30c0\u30e0\u306a\u534a\u5f84 const int32 size = Random ( 1 , 10 ); // \u5186\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Circle { pos , size }. paint ( image , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } }","title":"9 | \u6a21\u5199\u30a2\u30d7\u30ea"},{"location":"ja-jp/learn/hello-siv3d/#10--\u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790","text":"\u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u58f0\u6ce2\u5f62\u306e\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u8868\u793a\u3057\u307e\u3059\u3002 \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\uff08\u305f\u3060\u3061\u306b\u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8\uff09 Microphone mic { StartImmediately :: Yes }; if ( not mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error { U \"Microphone not available\" }; } FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = ( Pow ( fft . buffer [ i ], 0.6f ) * 1200 ); RectF { Arg :: bottomLeft ( i , 600 ), 1 , size }. draw ( HSV { 240 - i }); } // \u5468\u6ce2\u6570\u8868\u793a Rect { Cursor :: Pos (). x , 0 , 1 , Scene :: Height () }. draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"10 | \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790"},{"location":"ja-jp/learn/hello-siv3d/#11--\u30d4\u30a2\u30ce","text":"\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30d4\u30a2\u30ce\u3092\u6f14\u594f\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u697d\u5668\u306e\u97f3\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 \u30d4\u30a2\u30ce\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size KeySize { 55 , 400 }; // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument Instrument = GMInstrument :: Shamisen ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize (( 12 * KeySize . x ), KeySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio { Instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s }; } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Input , NumKeys > Keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyEnter , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > KeyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( Keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( KeyPositions [ i ])) { RectF { ( KeyPositions [ i ] / 2 * KeySize . x ), 0 , KeySize } . stretched ( -1 ). draw ( Keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( KeyPositions [ i ])) { RectF { ( KeySize . x * 0.68 + KeyPositions [ i ] / 2 * KeySize . x ), 0 , ( KeySize . x * 0.58 ), ( KeySize . y * 0.62 ) } . draw ( Keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"11 | \u30d4\u30a2\u30ce"},{"location":"ja-jp/learn/hello-siv3d/#12--3d-\u63cf\u753b","text":"3D \u63cf\u753b\u3082\u6271\u3048\u307e\u3059\u3002 3D \u63cf\u753b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b # include <Siv3D.hpp> void Main () { // \u30a6\u30a4\u30f3\u30c9\u30a6\u3068\u30b7\u30fc\u30f3\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u80cc\u666f\u8272 (\u30ea\u30cb\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306a\u306e\u3067 removeSRGBCurve() \u3067 sRGB \u30ab\u30fc\u30d6\u3092\u9664\u53bb\uff09 const ColorF backgroundColor = ColorF { 0.4 , 0.6 , 0.8 }. removeSRGBCurve (); // UV \u30c1\u30a7\u30c3\u30af\u7528\u30c6\u30af\u30b9\u30c1\u30e3 (\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f7f\u7528\u3002\u30ea\u30cb\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6b63\u3057\u304f\u6271\u308f\u308c\u308b\u3088\u3046\u3001sRGB \u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308b\u3068\u660e\u793a\uff09 const Texture uvChecker { U \"example/texture/uv.png\" , TextureDesc :: MippedSRGB }; // 3D \u30b7\u30fc\u30f3\u3092\u63cf\u304f\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5bfe\u5fdc\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 // \u30ea\u30cb\u30a2\u8272\u7a7a\u9593\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306b TextureFormat::R8G8B8A8_Unorm_SRGB // \u5965\u884c\u304d\u306e\u6bd4\u8f03\u306e\u305f\u3081\u306e\u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u3082\u4f7f\u3046\u306e\u3067 HasDepth::Yes // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306a\u306e\u3067\u3001\u63cf\u753b\u5185\u5bb9\u3092\u4f7f\u3046\u524d\u306b resolve() \u304c\u5fc5\u8981 const MSRenderTexture renderTexture { Scene :: Size (), TextureFormat :: R8G8B8A8_Unorm_SRGB , HasDepth :: Yes }; // 3D \u30b7\u30fc\u30f3\u306e\u30c7\u30d0\u30c3\u30b0\u7528\u30ab\u30e1\u30e9 // \u7e26\u65b9\u5411\u306e\u8996\u91ce\u89d2 30\u00b0, \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e (10, 16, -32) // \u524d\u5f8c\u79fb\u52d5: [W][S], \u5de6\u53f3\u79fb\u52d5: [A][D], \u4e0a\u4e0b\u79fb\u52d5: [E][X], \u6ce8\u8996\u70b9\u79fb\u52d5: \u30a2\u30ed\u30fc\u30ad\u30fc, \u52a0\u901f: [Shift][Ctrl] DebugCamera3D camera { renderTexture . size (), 30 _deg , Vec3 { 10 , 16 , -32 } }; while ( System :: Update ()) { // \u30c7\u30d0\u30c3\u30b0\u30ab\u30e1\u30e9\u306e\u66f4\u65b0 (\u30ab\u30e1\u30e9\u306e\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9: 2.0) camera . update ( 2.0 ); // 3D \u30b7\u30fc\u30f3\u306b\u30ab\u30e1\u30e9\u3092\u8a2d\u5b9a Graphics3D :: SetCameraTransform ( camera ); // 3D \u63cf\u753b { // renderTexture \u3092\u80cc\u666f\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u3001 // renderTexture \u3092 3D \u63cf\u753b\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b const ScopedRenderTarget3D target { renderTexture . clear ( backgroundColor ) }; // \u5e8a\u3092\u63cf\u753b Plane { 64 }. draw ( uvChecker ); // \u30dc\u30c3\u30af\u30b9\u3092\u63cf\u753b Box { -8 , 2 , 0 , 4 }. draw ( ColorF { 0.8 , 0.6 , 0.4 }. removeSRGBCurve ()); // \u7403\u3092\u63cf\u753b Sphere { 0 , 2 , 0 , 2 }. draw ( ColorF { 0.4 , 0.8 , 0.6 }. removeSRGBCurve ()); // \u5186\u67f1\u3092\u63cf\u753b Cylinder { 8 , 2 , 0 , 2 , 4 }. draw ( ColorF { 0.6 , 0.4 , 0.8 }. removeSRGBCurve ()); } // 3D \u30b7\u30fc\u30f3\u3092 2D \u30b7\u30fc\u30f3\u306b\u63cf\u753b { // renderTexture \u3092 resolve \u3059\u308b\u524d\u306b 3D \u63cf\u753b\u3092\u5b9f\u884c\u3059\u308b Graphics3D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ea\u30be\u30eb\u30d6 renderTexture . resolve (); // \u30ea\u30cb\u30a2\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305f renderTexture \u3092\u30b7\u30fc\u30f3\u306b\u8ee2\u9001 Shader :: LinearToScreen ( renderTexture ); } } }","title":"12 | 3D \u63cf\u753b"},{"location":"ja-jp/learn/keyboard/","text":"9. \u30ad\u30fc\u30dc\u30fc\u30c9 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 9.1 \u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b\u3092\u8abf\u3079\u308b \u00b6 \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u306b\u306f\u300cKey\uff5e\u300d\u3068\u540d\u4ed8\u3051\u3089\u308c\u305f Input \u578b\u306e\u5024\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 A, B, C, ... \u306f KeyA , KeyB , KeyC , ... 1, 2, 3, ... \u306f Key1 , Key2 , Key3 , ... F1, F2, F3, ... \u306f KeyF1 , KeyF2 , KeyF3 , ... \u2191, \u2193, \u2190, \u2192 \u306f KeyUp , KeyDown , KeyLeft , KeyRight \u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeySpace \u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u306f KeyEnter \u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeyBackspace Tab \u30ad\u30fc\u306f KeyTab Esc \u30ad\u30fc\u306f KeyEscape PageUp, PageDown \u306f KeyPageUp , KeyPageDown Delete \u30ad\u30fc\u306f KeyDelete Numpad \u306e 0, 1, 2, ... \u306f KeyNum0 , KeyNum1 , KeyNum2 , ... \u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyShift \u5de6\u30b7\u30d5\u30c8\u30ad\u30fc\u3001\u53f3\u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyLShift , KeyRShift \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30ad\u30fc\u306f KeyControl (macOS) \u30b3\u30de\u30f3\u30c9\u30ad\u30fc\u306f KeyCommand \u300c,\u300d\u300c.\u300d\u300c/\u300d\u30ad\u30fc\u306f KeyComma , KeyPeriod , KeySlash \u4e0a\u8a18\u4ee5\u5916\u306e\u30ad\u30fc\u306f <Siv3D/Keyboard.hpp> \u3092\u53c2\u7167 Input \u578b\u306e\u5024\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u62bc\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down() , \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b\u304b\u3092 .pressed() , \u96e2\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up() \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570 \u62bc\u3057\u3066\u3044\u306a\u3044\u3068\u304d \u62bc\u3057\u305f\u77ac\u9593 \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b \u96e2\u3057\u305f\u77ac\u9593 \u96e2\u3057\u7d9a\u3051\u3066\u3044\u308b .down() false \u2714 true false false false .pressed() false \u2714 true \u2714 true false false .up() false false false \u2714 true false # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { const double delta = ( Scene :: DeltaTime () * 200 ); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } // [C] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u4e2d\u592e\u306b\u623b\u308b if ( KeyC . down ()) { pos = Scene :: Center (); } Circle { pos , 50 }. draw (); } } 9.2 \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593\u3092\u8abf\u3079\u308b \u00b6 Input \u306e .pressedDuration() \u306f\u3001\u305d\u306e\u5165\u529b\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u306f .up() \u304c true \u306b\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u6709\u52b9\u3067\u3059\u3002 .up() \u3055\u308c\u305f\u3068\u304d\u306b .pressedDuration() \u3092\u8abf\u3079\u308b\u3068\u3001\u305d\u306e\u30ad\u30fc\u304c\u96e2\u3055\u308c\u308b\u307e\u3067\u4f55\u79d2\u9593\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u305f\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << KeyA . pressedDuration (); if ( 1 s <= KeySpace . pressedDuration ()) { Print << U \"Space\" ; } } } 9.3 \u30ad\u30fc\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b \u00b6 Input \u306e .name() \u306f\u3001\u305d\u306e\u30ad\u30fc\u306e\u540d\u524d\u3092 String \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << KeyA . name (); Print << KeySpace . name (); Print << KeyLeft . name (); Print << Key3 . name (); Print << KeyF11 . name (); while ( System :: Update ()) { } } 9.4 \u3059\u3079\u3066\u306e\u30ad\u30fc\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b \u00b6 Keyboard::GetAllInputs() \u306f\u3001 .down() , .pressed() , .up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30ad\u30fc\u306e\u4e00\u89a7\u3092 Array<Input> \u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // down() / pressed() / up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u30ad\u30fc\u4e00\u89a7\u3092\u53d6\u5f97 const Array < Input > keys = Keyboard :: GetAllInputs (); for ( const auto & key : keys ) { Print << key . name () << ( key . pressed () ? U \" pressed\" : U \" up\" ); } } } 9.5 \u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b \u00b6 9.5.1 A \u307e\u305f\u306f B \u00b6 | \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u305d\u306e\u3044\u305a\u308c\u304b\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // [\u30b9\u30da\u30fc\u30b9] \u307e\u305f\u306f [\u30a8\u30f3\u30bf\u30fc] \u304c\u62bc\u3055\u308c\u3066\u3044\u308b if (( KeySpace | KeyEnter ). pressed ()) { Print << U \"KeySpace / KeyEnter\" ; } } } 9.5.2 A \u3092\u62bc\u3057\u306a\u304c\u3089 B \u00b6 + \u3092\u4f7f\u3063\u3066 2 \u3064\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u5de6\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u306a\u304c\u3089\u3001\u53f3\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // [Ctrl + C] \u307e\u305f\u306f [Command + C] \u304c\u62bc\u3055\u308c\u305f if (( KeyControl + KeyC ). down () || ( KeyCommand + KeyC ). down ()) { Print << U \"Ctrl + C / Command + C\" ; } } } 9.6 \u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0 \u00b6 InputGroup \u578b\u306f Input \u3084\u3001 Input \u306e | , + \u306b\u3088\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u5fdc\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { InputGroup inputLeft = KeyLeft ; InputGroup inputRight = KeyRight ; InputGroup inputJump = KeySpace ; size_t index = 0 ; const Array < String > options { U \"[\u2190] [\u2192] [Space]\" , U \"[A] [D] [W]\" , U \"[\u2190]/[A] [\u2192]/[D] [Space]/[W]\" }; const Texture texture { U \"\ud83d\udc25\" _emoji }; Vec2 pos { 400 , 450 }; double jumpY = 0.0 ; while ( System :: Update ()) { // \ud83d\udc25 \u306e\u79fb\u52d5 { const double deltaTime = Scene :: DeltaTime (); if ( inputLeft . pressed ()) { pos . x -= ( deltaTime * 200 ); } if ( inputRight . pressed ()) { pos . x += ( deltaTime * 200 ); } if ( inputJump . down ()) { jumpY = 500.0 ; } pos . y = Min ( pos . y - deltaTime * jumpY , 450.0 ); jumpY = Max ( jumpY - deltaTime * 1000.0 , -1000.0 ); } // \u80cc\u666f\u3068 \ud83d\udc25 \u306e\u63cf\u753b { Rect { 800 , 500 } . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.4 , 0.7 , 1.0 }); Rect { 0 , 500 , 800 , 100 } . draw ( ColorF { 0.2 , 0.5 , 0.3 }); texture . drawAt ( pos ); } // \u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0 if ( SimpleGUI :: RadioButtons ( index , options , Vec2 { 20 , 20 })) { if ( index == 0 ) { inputLeft = KeyLeft ; inputRight = KeyRight ; inputJump = KeySpace ; } else if ( index == 1 ) { inputLeft = KeyA ; inputRight = KeyD ; inputJump = KeyW ; } else { inputLeft = ( KeyLeft | KeyA ); inputRight = ( KeyRight | KeyD ); inputJump = ( KeySpace | KeyW ); } } } } 9.7 \u30c6\u30ad\u30b9\u30c8\u5165\u529b \u00b6 TextInput::UpdateText() \u306b String \u578b\u306e\u5909\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 TextInput::GetEditingText() \u306f\u672a\u5909\u63db\u306e\u6587\u5b57\u5165\u529b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 30 }; String text ; constexpr Rect area { 50 , 50 , 700 , 300 }; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u6587\u5b57\u5165\u529b\u3092\u53d6\u5f97 const String editingText = TextInput :: GetEditingText (); area . draw ( ColorF { 0.3 }); font ( text + U '|' + editingText ). draw ( area . stretched ( -20 )); } }","title":"9. \u30ad\u30fc\u30dc\u30fc\u30c9"},{"location":"ja-jp/learn/keyboard/#9-\u30ad\u30fc\u30dc\u30fc\u30c9","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"9. \u30ad\u30fc\u30dc\u30fc\u30c9"},{"location":"ja-jp/learn/keyboard/#91-\u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b\u3092\u8abf\u3079\u308b","text":"\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u306b\u306f\u300cKey\uff5e\u300d\u3068\u540d\u4ed8\u3051\u3089\u308c\u305f Input \u578b\u306e\u5024\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 A, B, C, ... \u306f KeyA , KeyB , KeyC , ... 1, 2, 3, ... \u306f Key1 , Key2 , Key3 , ... F1, F2, F3, ... \u306f KeyF1 , KeyF2 , KeyF3 , ... \u2191, \u2193, \u2190, \u2192 \u306f KeyUp , KeyDown , KeyLeft , KeyRight \u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeySpace \u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u306f KeyEnter \u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeyBackspace Tab \u30ad\u30fc\u306f KeyTab Esc \u30ad\u30fc\u306f KeyEscape PageUp, PageDown \u306f KeyPageUp , KeyPageDown Delete \u30ad\u30fc\u306f KeyDelete Numpad \u306e 0, 1, 2, ... \u306f KeyNum0 , KeyNum1 , KeyNum2 , ... \u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyShift \u5de6\u30b7\u30d5\u30c8\u30ad\u30fc\u3001\u53f3\u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyLShift , KeyRShift \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30ad\u30fc\u306f KeyControl (macOS) \u30b3\u30de\u30f3\u30c9\u30ad\u30fc\u306f KeyCommand \u300c,\u300d\u300c.\u300d\u300c/\u300d\u30ad\u30fc\u306f KeyComma , KeyPeriod , KeySlash \u4e0a\u8a18\u4ee5\u5916\u306e\u30ad\u30fc\u306f <Siv3D/Keyboard.hpp> \u3092\u53c2\u7167 Input \u578b\u306e\u5024\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u62bc\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down() , \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b\u304b\u3092 .pressed() , \u96e2\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up() \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570 \u62bc\u3057\u3066\u3044\u306a\u3044\u3068\u304d \u62bc\u3057\u305f\u77ac\u9593 \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b \u96e2\u3057\u305f\u77ac\u9593 \u96e2\u3057\u7d9a\u3051\u3066\u3044\u308b .down() false \u2714 true false false false .pressed() false \u2714 true \u2714 true false false .up() false false false \u2714 true false # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { const double delta = ( Scene :: DeltaTime () * 200 ); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } // [C] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u4e2d\u592e\u306b\u623b\u308b if ( KeyC . down ()) { pos = Scene :: Center (); } Circle { pos , 50 }. draw (); } }","title":"9.1 \u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/learn/keyboard/#92-\u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593\u3092\u8abf\u3079\u308b","text":"Input \u306e .pressedDuration() \u306f\u3001\u305d\u306e\u5165\u529b\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u306f .up() \u304c true \u306b\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u6709\u52b9\u3067\u3059\u3002 .up() \u3055\u308c\u305f\u3068\u304d\u306b .pressedDuration() \u3092\u8abf\u3079\u308b\u3068\u3001\u305d\u306e\u30ad\u30fc\u304c\u96e2\u3055\u308c\u308b\u307e\u3067\u4f55\u79d2\u9593\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u305f\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << KeyA . pressedDuration (); if ( 1 s <= KeySpace . pressedDuration ()) { Print << U \"Space\" ; } } }","title":"9.2 \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/learn/keyboard/#93-\u30ad\u30fc\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b","text":"Input \u306e .name() \u306f\u3001\u305d\u306e\u30ad\u30fc\u306e\u540d\u524d\u3092 String \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << KeyA . name (); Print << KeySpace . name (); Print << KeyLeft . name (); Print << Key3 . name (); Print << KeyF11 . name (); while ( System :: Update ()) { } }","title":"9.3 \u30ad\u30fc\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/keyboard/#94-\u3059\u3079\u3066\u306e\u30ad\u30fc\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b","text":"Keyboard::GetAllInputs() \u306f\u3001 .down() , .pressed() , .up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30ad\u30fc\u306e\u4e00\u89a7\u3092 Array<Input> \u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // down() / pressed() / up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u30ad\u30fc\u4e00\u89a7\u3092\u53d6\u5f97 const Array < Input > keys = Keyboard :: GetAllInputs (); for ( const auto & key : keys ) { Print << key . name () << ( key . pressed () ? U \" pressed\" : U \" up\" ); } } }","title":"9.4 \u3059\u3079\u3066\u306e\u30ad\u30fc\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/keyboard/#95-\u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b","text":"","title":"9.5 \u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b"},{"location":"ja-jp/learn/keyboard/#951-a-\u307e\u305f\u306f-b","text":"| \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u305d\u306e\u3044\u305a\u308c\u304b\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // [\u30b9\u30da\u30fc\u30b9] \u307e\u305f\u306f [\u30a8\u30f3\u30bf\u30fc] \u304c\u62bc\u3055\u308c\u3066\u3044\u308b if (( KeySpace | KeyEnter ). pressed ()) { Print << U \"KeySpace / KeyEnter\" ; } } }","title":"9.5.1 A \u307e\u305f\u306f B"},{"location":"ja-jp/learn/keyboard/#952-a-\u3092\u62bc\u3057\u306a\u304c\u3089-b","text":"+ \u3092\u4f7f\u3063\u3066 2 \u3064\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u5de6\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u306a\u304c\u3089\u3001\u53f3\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // [Ctrl + C] \u307e\u305f\u306f [Command + C] \u304c\u62bc\u3055\u308c\u305f if (( KeyControl + KeyC ). down () || ( KeyCommand + KeyC ). down ()) { Print << U \"Ctrl + C / Command + C\" ; } } }","title":"9.5.2 A \u3092\u62bc\u3057\u306a\u304c\u3089 B"},{"location":"ja-jp/learn/keyboard/#96-\u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0","text":"InputGroup \u578b\u306f Input \u3084\u3001 Input \u306e | , + \u306b\u3088\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u5fdc\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { InputGroup inputLeft = KeyLeft ; InputGroup inputRight = KeyRight ; InputGroup inputJump = KeySpace ; size_t index = 0 ; const Array < String > options { U \"[\u2190] [\u2192] [Space]\" , U \"[A] [D] [W]\" , U \"[\u2190]/[A] [\u2192]/[D] [Space]/[W]\" }; const Texture texture { U \"\ud83d\udc25\" _emoji }; Vec2 pos { 400 , 450 }; double jumpY = 0.0 ; while ( System :: Update ()) { // \ud83d\udc25 \u306e\u79fb\u52d5 { const double deltaTime = Scene :: DeltaTime (); if ( inputLeft . pressed ()) { pos . x -= ( deltaTime * 200 ); } if ( inputRight . pressed ()) { pos . x += ( deltaTime * 200 ); } if ( inputJump . down ()) { jumpY = 500.0 ; } pos . y = Min ( pos . y - deltaTime * jumpY , 450.0 ); jumpY = Max ( jumpY - deltaTime * 1000.0 , -1000.0 ); } // \u80cc\u666f\u3068 \ud83d\udc25 \u306e\u63cf\u753b { Rect { 800 , 500 } . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.4 , 0.7 , 1.0 }); Rect { 0 , 500 , 800 , 100 } . draw ( ColorF { 0.2 , 0.5 , 0.3 }); texture . drawAt ( pos ); } // \u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0 if ( SimpleGUI :: RadioButtons ( index , options , Vec2 { 20 , 20 })) { if ( index == 0 ) { inputLeft = KeyLeft ; inputRight = KeyRight ; inputJump = KeySpace ; } else if ( index == 1 ) { inputLeft = KeyA ; inputRight = KeyD ; inputJump = KeyW ; } else { inputLeft = ( KeyLeft | KeyA ); inputRight = ( KeyRight | KeyD ); inputJump = ( KeySpace | KeyW ); } } } }","title":"9.6 \u30ad\u30fc\u30b3\u30f3\u30d5\u30a3\u30b0"},{"location":"ja-jp/learn/keyboard/#97-\u30c6\u30ad\u30b9\u30c8\u5165\u529b","text":"TextInput::UpdateText() \u306b String \u578b\u306e\u5909\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 TextInput::GetEditingText() \u306f\u672a\u5909\u63db\u306e\u6587\u5b57\u5165\u529b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font { 30 }; String text ; constexpr Rect area { 50 , 50 , 700 , 300 }; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u6587\u5b57\u5165\u529b\u3092\u53d6\u5f97 const String editingText = TextInput :: GetEditingText (); area . draw ( ColorF { 0.3 }); font ( text + U '|' + editingText ). draw ( area . stretched ( -20 )); } }","title":"9.7 \u30c6\u30ad\u30b9\u30c8\u5165\u529b"},{"location":"ja-jp/learn/make-1/","text":"\u6f14\u7fd2 A - \u30a2\u30a4\u30c6\u30e0\u96c6\u3081\u30b2\u30fc\u30e0 \u00b6 \u7a7a\u304b\u3089\u843d\u3061\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u96c6\u3081\u308b\u30b2\u30fc\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5 \u00b6 # include <Siv3D.hpp> void Main () { // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u7d75\u6587\u5b57\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture { U \"\ud83d\ude03\" _emoji }; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double playerSpeed = 500.0 ; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5ea7\u6a19 Vec2 playerPos { 400 , 500 }; while ( System :: Update ()) { //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// // \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) const double deltaTime = Scene :: DeltaTime (); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5\u306b\u95a2\u3059\u308b\u51e6\u7406 { if ( KeyLeft . pressed ()) // [\u2190] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x -= ( playerSpeed * deltaTime ); } else if ( KeyRight . pressed ()) // [\u2192] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x += ( playerSpeed * deltaTime ); } // \u58c1\u306e\u5916\u306b\u51fa\u306a\u3044\u3088\u3046\u306b\u3059\u308b // Clamp(x, min, max) \u306f, x \u3092 min\uff5emax \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u305f\u5024\u3092\u8fd4\u3059 playerPos . x = Clamp ( playerPos . x , 0.0 , 800.0 ); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u80cc\u666f\u306f\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e Rect Scene :: Rect () . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.3 , 0.7 , 1.0 }); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b playerTexture . drawAt ( playerPos ); } } 2. \u843d\u3061\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0 \u00b6 # include <Siv3D.hpp> // \u30a2\u30a4\u30c6\u30e0\u306e\u60c5\u5831 struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u73fe\u5728\u4f4d\u7f6e Vec2 pos ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059 ID int32 type ; }; void Main () { // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u7d75\u6587\u5b57\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture { U \"\ud83d\ude03\" _emoji }; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double playerSpeed = 500.0 ; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5ea7\u6a19 Vec2 playerPos { 400 , 500 }; // \u30a2\u30a4\u30c6\u30e0\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture itemTexture { U \"\ud83c\udf70\" _emoji }; // \u73fe\u5728\u753b\u9762\u4e0a\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217 Array < Item > items ; // \u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3059\u308b\u6642\u9593\u9593\u9694\uff08\u79d2\uff09 const double SpawnTime = 0.5 ; // \u6700\u5f8c\u306b\u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 double itemTimer = 0.0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u843d\u4e0b\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double ItemSpeed = 200.0 ; while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\u306e\u53ef\u8996\u5316 ClearPrint (); Print << U \"\u30b2\u30fc\u30e0\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570: \" << items . size (); //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// // \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) const double deltaTime = Scene :: DeltaTime (); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5\u306b\u95a2\u3059\u308b\u51e6\u7406 { if ( KeyLeft . pressed ()) // [\u2190] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x -= ( playerSpeed * deltaTime ); } else if ( KeyRight . pressed ()) // [\u2192] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x += ( playerSpeed * deltaTime ); } // \u58c1\u306e\u5916\u306b\u51fa\u306a\u3044\u3088\u3046\u306b\u3059\u308b // Clamp(x, min, max) \u306f, x \u3092 min\uff5emax \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u305f\u5024\u3092\u8fd4\u3059 playerPos . x = Clamp ( playerPos . x , 0.0 , 800.0 ); } // \u30a2\u30a4\u30c6\u30e0\u306e\u51fa\u73fe\u3068\u79fb\u52d5\u3068\u6d88\u6ec5\u306b\u95a2\u3059\u308b\u51e6\u7406 { itemTimer += deltaTime ; // spawnTime \u304c\u7d4c\u904e\u3059\u308b\u3054\u3068\u306b\u65b0\u3057\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u51fa\u73fe\u3055\u305b\u308b while ( itemTimer >= SpawnTime ) { Item item ; item . pos . x = Random ( 100 , 700 ); // \u30a2\u30a4\u30c6\u30e0\u306e X \u5ea7\u6a19 item . pos . y = -100 ; // \u30a2\u30a4\u30c6\u30e0\u306e Y \u5ea7\u6a19 item . type = 0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3002 = Random(0, 3); \u3068\u3059\u308c\u3070 0\uff5e3 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u306b // \u914d\u5217\u306b\u8ffd\u52a0 items << item ; itemTimer -= SpawnTime ; } // \u3059\u3079\u3066\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u3064\u3044\u3066\u79fb\u52d5\u51e6\u7406 for ( auto & item : items ) { item . pos . y += deltaTime * ItemSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u6d88\u53bb\u3059\u308b items . remove_if ([]( const Item & item ) { return ( item . pos . y > 700 ); }); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u80cc\u666f\u306f\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e Rect Scene :: Rect () . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.3 , 0.7 , 1.0 }); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b playerTexture . drawAt ( playerPos ); // \u30a2\u30a4\u30c6\u30e0\u306e\u63cf\u753b for ( const auto & item : items ) { itemTexture . drawAt ( item . pos ); } } } 3. \u30a2\u30a4\u30c6\u30e0\u3068\u306e\u5f53\u305f\u308a\u5224\u5b9a \u00b6 # include <Siv3D.hpp> // \u30a2\u30a4\u30c6\u30e0\u306e\u60c5\u5831 struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u73fe\u5728\u4f4d\u7f6e Vec2 pos ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059 ID int32 type ; }; void Main () { // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u7d75\u6587\u5b57\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture { U \"\ud83d\ude03\" _emoji }; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double playerSpeed = 500.0 ; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5ea7\u6a19 Vec2 playerPos { 400 , 500 }; // \u30a2\u30a4\u30c6\u30e0\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture itemTexture { U \"\ud83c\udf70\" _emoji }; // \u73fe\u5728\u753b\u9762\u4e0a\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217 Array < Item > items ; // \u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3059\u308b\u6642\u9593\u9593\u9694\uff08\u79d2\uff09 const double SpawnTime = 0.5 ; // \u6700\u5f8c\u306b\u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 double itemTimer = 0.0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u843d\u4e0b\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double ItemSpeed = 200.0 ; // \u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\u306e\u53ef\u8996\u5316 ClearPrint (); Print << U \"\u30b2\u30fc\u30e0\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570: \" << items . size (); //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// // \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) const double deltaTime = Scene :: DeltaTime (); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5\u306b\u95a2\u3059\u308b\u51e6\u7406 { if ( KeyLeft . pressed ()) // [\u2190] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x -= ( playerSpeed * deltaTime ); } else if ( KeyRight . pressed ()) // [\u2192] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x += ( playerSpeed * deltaTime ); } // \u58c1\u306e\u5916\u306b\u51fa\u306a\u3044\u3088\u3046\u306b\u3059\u308b // Clamp(x, min, max) \u306f, x \u3092 min\uff5emax \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u305f\u5024\u3092\u8fd4\u3059 playerPos . x = Clamp ( playerPos . x , 0.0 , 800.0 ); } // \u30a2\u30a4\u30c6\u30e0\u306e\u51fa\u73fe\u3068\u79fb\u52d5\u3068\u6d88\u6ec5\u306b\u95a2\u3059\u308b\u51e6\u7406 { itemTimer += deltaTime ; // spawnTime \u304c\u7d4c\u904e\u3059\u308b\u3054\u3068\u306b\u65b0\u3057\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u51fa\u73fe\u3055\u305b\u308b while ( itemTimer >= SpawnTime ) { Item item ; item . pos . x = Random ( 100 , 700 ); // \u30a2\u30a4\u30c6\u30e0\u306e X \u5ea7\u6a19 item . pos . y = -100 ; // \u30a2\u30a4\u30c6\u30e0\u306e Y \u5ea7\u6a19 item . type = 0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3002 = Random(0, 3); \u3068\u3059\u308c\u3070 0\uff5e3 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u306b // \u914d\u5217\u306b\u8ffd\u52a0 items << item ; itemTimer -= SpawnTime ; } // \u3059\u3079\u3066\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u3064\u3044\u3066\u79fb\u52d5\u51e6\u7406 for ( auto & item : items ) { item . pos . y += deltaTime * ItemSpeed ; } // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u3042\u305f\u308a\u5224\u5b9a\u306e\u5186 const Circle playerCirlce { playerPos , 60 }; // \u30a2\u30a4\u30c6\u30e0\u306e\u3042\u305f\u308a\u5224\u5b9a\u3068\u56de\u53ce\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u306e\u524a\u9664 for ( auto it = items . begin (); it != items . end ();) { // \u30a2\u30a4\u30c6\u30e0\u306e\u3042\u305f\u308a\u5224\u5b9a\u306e\u5186 const Circle itemCircle { it -> pos , 60 }; // \u4ea4\u5dee\u3057\u305f\u3089\u30a2\u30a4\u30c6\u30e0\u3092\u524a\u9664 if ( playerCirlce . intersects ( itemCircle )) { // (\u524a\u9664\u3059\u308b\u524d\u306b) \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 score += 100 ; // \u30a2\u30a4\u30c6\u30e0\u3092\u524a\u9664 it = items . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6b21\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u9032\u3081\u308b ++ it ; } } // \u753b\u9762\u5916\u306b\u51fa\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u6d88\u53bb\u3059\u308b items . remove_if ([]( const Item & item ) { return ( item . pos . y > 700 ); }); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u80cc\u666f\u306f\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e Rect Scene :: Rect () . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.3 , 0.7 , 1.0 }); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b playerTexture . drawAt ( playerPos ); // \u30a2\u30a4\u30c6\u30e0\u306e\u63cf\u753b for ( const auto & item : items ) { itemTexture . drawAt ( item . pos ); } // \u5f53\u305f\u308a\u5224\u5b9a\u306e\u53ef\u8996\u5316\uff08\u30c7\u30d0\u30c3\u30b0\u7528\uff09 Circle { playerPos , 60 }. drawFrame ( 2 , Palette :: Red ); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5f53\u305f\u308a\u5224\u5b9a\u5186 for ( const auto & item : items ) { // \u30a2\u30a4\u30c6\u30e0\u306e\u5f53\u305f\u308a\u5224\u5b9a\u5186 Circle { item . pos , 60 }. drawFrame ( 2 , Palette :: Red ); } } }","title":"\u6f14\u7fd2 A - \u30a2\u30a4\u30c6\u30e0\u96c6\u3081\u30b2\u30fc\u30e0"},{"location":"ja-jp/learn/make-1/#\u6f14\u7fd2-a---\u30a2\u30a4\u30c6\u30e0\u96c6\u3081\u30b2\u30fc\u30e0","text":"\u7a7a\u304b\u3089\u843d\u3061\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u96c6\u3081\u308b\u30b2\u30fc\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u6f14\u7fd2 A - \u30a2\u30a4\u30c6\u30e0\u96c6\u3081\u30b2\u30fc\u30e0"},{"location":"ja-jp/learn/make-1/#1-\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5","text":"# include <Siv3D.hpp> void Main () { // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u7d75\u6587\u5b57\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture { U \"\ud83d\ude03\" _emoji }; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double playerSpeed = 500.0 ; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5ea7\u6a19 Vec2 playerPos { 400 , 500 }; while ( System :: Update ()) { //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// // \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) const double deltaTime = Scene :: DeltaTime (); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5\u306b\u95a2\u3059\u308b\u51e6\u7406 { if ( KeyLeft . pressed ()) // [\u2190] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x -= ( playerSpeed * deltaTime ); } else if ( KeyRight . pressed ()) // [\u2192] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x += ( playerSpeed * deltaTime ); } // \u58c1\u306e\u5916\u306b\u51fa\u306a\u3044\u3088\u3046\u306b\u3059\u308b // Clamp(x, min, max) \u306f, x \u3092 min\uff5emax \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u305f\u5024\u3092\u8fd4\u3059 playerPos . x = Clamp ( playerPos . x , 0.0 , 800.0 ); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u80cc\u666f\u306f\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e Rect Scene :: Rect () . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.3 , 0.7 , 1.0 }); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b playerTexture . drawAt ( playerPos ); } }","title":"1. \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5"},{"location":"ja-jp/learn/make-1/#2-\u843d\u3061\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0","text":"# include <Siv3D.hpp> // \u30a2\u30a4\u30c6\u30e0\u306e\u60c5\u5831 struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u73fe\u5728\u4f4d\u7f6e Vec2 pos ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059 ID int32 type ; }; void Main () { // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u7d75\u6587\u5b57\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture { U \"\ud83d\ude03\" _emoji }; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double playerSpeed = 500.0 ; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5ea7\u6a19 Vec2 playerPos { 400 , 500 }; // \u30a2\u30a4\u30c6\u30e0\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture itemTexture { U \"\ud83c\udf70\" _emoji }; // \u73fe\u5728\u753b\u9762\u4e0a\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217 Array < Item > items ; // \u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3059\u308b\u6642\u9593\u9593\u9694\uff08\u79d2\uff09 const double SpawnTime = 0.5 ; // \u6700\u5f8c\u306b\u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 double itemTimer = 0.0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u843d\u4e0b\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double ItemSpeed = 200.0 ; while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\u306e\u53ef\u8996\u5316 ClearPrint (); Print << U \"\u30b2\u30fc\u30e0\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570: \" << items . size (); //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// // \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) const double deltaTime = Scene :: DeltaTime (); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5\u306b\u95a2\u3059\u308b\u51e6\u7406 { if ( KeyLeft . pressed ()) // [\u2190] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x -= ( playerSpeed * deltaTime ); } else if ( KeyRight . pressed ()) // [\u2192] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x += ( playerSpeed * deltaTime ); } // \u58c1\u306e\u5916\u306b\u51fa\u306a\u3044\u3088\u3046\u306b\u3059\u308b // Clamp(x, min, max) \u306f, x \u3092 min\uff5emax \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u305f\u5024\u3092\u8fd4\u3059 playerPos . x = Clamp ( playerPos . x , 0.0 , 800.0 ); } // \u30a2\u30a4\u30c6\u30e0\u306e\u51fa\u73fe\u3068\u79fb\u52d5\u3068\u6d88\u6ec5\u306b\u95a2\u3059\u308b\u51e6\u7406 { itemTimer += deltaTime ; // spawnTime \u304c\u7d4c\u904e\u3059\u308b\u3054\u3068\u306b\u65b0\u3057\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u51fa\u73fe\u3055\u305b\u308b while ( itemTimer >= SpawnTime ) { Item item ; item . pos . x = Random ( 100 , 700 ); // \u30a2\u30a4\u30c6\u30e0\u306e X \u5ea7\u6a19 item . pos . y = -100 ; // \u30a2\u30a4\u30c6\u30e0\u306e Y \u5ea7\u6a19 item . type = 0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3002 = Random(0, 3); \u3068\u3059\u308c\u3070 0\uff5e3 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u306b // \u914d\u5217\u306b\u8ffd\u52a0 items << item ; itemTimer -= SpawnTime ; } // \u3059\u3079\u3066\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u3064\u3044\u3066\u79fb\u52d5\u51e6\u7406 for ( auto & item : items ) { item . pos . y += deltaTime * ItemSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u6d88\u53bb\u3059\u308b items . remove_if ([]( const Item & item ) { return ( item . pos . y > 700 ); }); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u80cc\u666f\u306f\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e Rect Scene :: Rect () . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.3 , 0.7 , 1.0 }); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b playerTexture . drawAt ( playerPos ); // \u30a2\u30a4\u30c6\u30e0\u306e\u63cf\u753b for ( const auto & item : items ) { itemTexture . drawAt ( item . pos ); } } }","title":"2. \u843d\u3061\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0"},{"location":"ja-jp/learn/make-1/#3-\u30a2\u30a4\u30c6\u30e0\u3068\u306e\u5f53\u305f\u308a\u5224\u5b9a","text":"# include <Siv3D.hpp> // \u30a2\u30a4\u30c6\u30e0\u306e\u60c5\u5831 struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u73fe\u5728\u4f4d\u7f6e Vec2 pos ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3092\u8868\u3059 ID int32 type ; }; void Main () { // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u7d75\u6587\u5b57\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture { U \"\ud83d\ude03\" _emoji }; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double playerSpeed = 500.0 ; // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5ea7\u6a19 Vec2 playerPos { 400 , 500 }; // \u30a2\u30a4\u30c6\u30e0\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture itemTexture { U \"\ud83c\udf70\" _emoji }; // \u73fe\u5728\u753b\u9762\u4e0a\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217 Array < Item > items ; // \u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3059\u308b\u6642\u9593\u9593\u9694\uff08\u79d2\uff09 const double SpawnTime = 0.5 ; // \u6700\u5f8c\u306b\u30a2\u30a4\u30c6\u30e0\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 double itemTimer = 0.0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u843d\u4e0b\u30b9\u30d4\u30fc\u30c9\uff08\u30d4\u30af\u30bb\u30eb / \u79d2) const double ItemSpeed = 200.0 ; // \u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\u306e\u53ef\u8996\u5316 ClearPrint (); Print << U \"\u30b2\u30fc\u30e0\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570: \" << items . size (); //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// // \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) const double deltaTime = Scene :: DeltaTime (); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u79fb\u52d5\u306b\u95a2\u3059\u308b\u51e6\u7406 { if ( KeyLeft . pressed ()) // [\u2190] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x -= ( playerSpeed * deltaTime ); } else if ( KeyRight . pressed ()) // [\u2192] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 { playerPos . x += ( playerSpeed * deltaTime ); } // \u58c1\u306e\u5916\u306b\u51fa\u306a\u3044\u3088\u3046\u306b\u3059\u308b // Clamp(x, min, max) \u306f, x \u3092 min\uff5emax \u306e\u7bc4\u56f2\u306b\u53ce\u3081\u305f\u5024\u3092\u8fd4\u3059 playerPos . x = Clamp ( playerPos . x , 0.0 , 800.0 ); } // \u30a2\u30a4\u30c6\u30e0\u306e\u51fa\u73fe\u3068\u79fb\u52d5\u3068\u6d88\u6ec5\u306b\u95a2\u3059\u308b\u51e6\u7406 { itemTimer += deltaTime ; // spawnTime \u304c\u7d4c\u904e\u3059\u308b\u3054\u3068\u306b\u65b0\u3057\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u51fa\u73fe\u3055\u305b\u308b while ( itemTimer >= SpawnTime ) { Item item ; item . pos . x = Random ( 100 , 700 ); // \u30a2\u30a4\u30c6\u30e0\u306e X \u5ea7\u6a19 item . pos . y = -100 ; // \u30a2\u30a4\u30c6\u30e0\u306e Y \u5ea7\u6a19 item . type = 0 ; // \u30a2\u30a4\u30c6\u30e0\u306e\u7a2e\u985e\u3002 = Random(0, 3); \u3068\u3059\u308c\u3070 0\uff5e3 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u306b // \u914d\u5217\u306b\u8ffd\u52a0 items << item ; itemTimer -= SpawnTime ; } // \u3059\u3079\u3066\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u3064\u3044\u3066\u79fb\u52d5\u51e6\u7406 for ( auto & item : items ) { item . pos . y += deltaTime * ItemSpeed ; } // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u3042\u305f\u308a\u5224\u5b9a\u306e\u5186 const Circle playerCirlce { playerPos , 60 }; // \u30a2\u30a4\u30c6\u30e0\u306e\u3042\u305f\u308a\u5224\u5b9a\u3068\u56de\u53ce\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u306e\u524a\u9664 for ( auto it = items . begin (); it != items . end ();) { // \u30a2\u30a4\u30c6\u30e0\u306e\u3042\u305f\u308a\u5224\u5b9a\u306e\u5186 const Circle itemCircle { it -> pos , 60 }; // \u4ea4\u5dee\u3057\u305f\u3089\u30a2\u30a4\u30c6\u30e0\u3092\u524a\u9664 if ( playerCirlce . intersects ( itemCircle )) { // (\u524a\u9664\u3059\u308b\u524d\u306b) \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 score += 100 ; // \u30a2\u30a4\u30c6\u30e0\u3092\u524a\u9664 it = items . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6b21\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u9032\u3081\u308b ++ it ; } } // \u753b\u9762\u5916\u306b\u51fa\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u6d88\u53bb\u3059\u308b items . remove_if ([]( const Item & item ) { return ( item . pos . y > 700 ); }); } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u80cc\u666f\u306f\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e Rect Scene :: Rect () . draw ( Arg :: top = ColorF { 0.1 , 0.4 , 0.8 }, Arg :: bottom = ColorF { 0.3 , 0.7 , 1.0 }); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b playerTexture . drawAt ( playerPos ); // \u30a2\u30a4\u30c6\u30e0\u306e\u63cf\u753b for ( const auto & item : items ) { itemTexture . drawAt ( item . pos ); } // \u5f53\u305f\u308a\u5224\u5b9a\u306e\u53ef\u8996\u5316\uff08\u30c7\u30d0\u30c3\u30b0\u7528\uff09 Circle { playerPos , 60 }. drawFrame ( 2 , Palette :: Red ); // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u5f53\u305f\u308a\u5224\u5b9a\u5186 for ( const auto & item : items ) { // \u30a2\u30a4\u30c6\u30e0\u306e\u5f53\u305f\u308a\u5224\u5b9a\u5186 Circle { item . pos , 60 }. drawFrame ( 2 , Palette :: Red ); } } }","title":"3. \u30a2\u30a4\u30c6\u30e0\u3068\u306e\u5f53\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/learn/make-2/","text":"\u5e45\u512a\u5148\u63a2\u7d22\u306e\u53ef\u8996\u5316 \u00b6 \u5e45\u512a\u5148\u63a2\u7d22\u306b\u3088\u308b\u8ff7\u8def\u306e\u6700\u5c0f\u624b\u6570\u8a08\u7b97\u3092\u53ef\u8996\u5316\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u8ff7\u8def\u306e\u53ef\u8996\u5316 \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u6c34\u8272\u306b Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u8ddd\u96e2\u306e\u8868\u793a\u7528\u30d5\u30a9\u30f3\u30c8 const Font font { 18 , Typeface :: Bold }; // \u8ff7\u8def\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u304d\u306e\u30de\u30b9\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 constexpr int32 CellSize = 40 ; // \u4e8c\u6b21\u5143\u914d\u5217: \u8ff7\u8def (0: \u901a\u884c\u53ef\u80fd, 1: \u58c1) const Grid < int32 > maze = { { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 }, { 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, }; // \u7121\u9650\u5927\u3092\u8868\u73fe\u3059\u308b\u6570 constexpr int32 INF = 10000 ; // \u4e8c\u6b21\u5143\u914d\u5217: maze \u3068\u540c\u3058\u30b5\u30a4\u30ba\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u3092 INF \u306b\u30bb\u30c3\u30c8 Grid < int32 > distances ( maze . size (), INF ); while ( System :: Update ()) { // \u72b6\u614b\u66f4\u65b0\u30d5\u30e9\u30b0 bool update = false ; // \u8ff7\u8def\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316 for ( int32 y = 0 ; y < maze . height (); ++ y ) { for ( int32 x = 0 ; x < maze . width (); ++ x ) { // \u30de\u30b9\u306e\u6b63\u65b9\u5f62 const Rect rect = Rect { ( x * CellSize ), ( y * CellSize ), CellSize }. stretched ( -1 ); if ( maze [ y ][ x ] == 1 ) // \u58c1\u306e\u30de\u30b9 { // \u9ed2\u3067\u8868\u793a rect . draw ( ColorF { 0.25 }); } else // \u901a\u884c\u53ef\u80fd\u306a\u30de\u30b9 { // \u8ddd\u96e2\u60c5\u5831 const int32 distance = distances [ y ][ x ]; if ( distance == INF ) { // \u7070\u8272\u3067\u8868\u793a rect . draw ( ColorF { 0.75 }); font ( U \"\u221e\" ). drawAt ( rect . center (), ColorF { 0.25 }); } else { // \u767d\u3067\u8868\u793a rect . draw (); font ( distances [ y ][ x ]). drawAt ( rect . center (), ColorF { 0.25 }); } } } } } } 2. \u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u53ef\u8996\u5316 \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u6c34\u8272\u306b Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u8ddd\u96e2\u306e\u8868\u793a\u7528\u30d5\u30a9\u30f3\u30c8 const Font font { 18 , Typeface :: Bold }; // \u8ff7\u8def\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u304d\u306e\u30de\u30b9\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 constexpr int32 CellSize = 40 ; // \u4e8c\u6b21\u5143\u914d\u5217: \u8ff7\u8def (0: \u901a\u884c\u53ef\u80fd, 1: \u58c1) const Grid < int32 > maze = { { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 }, { 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, }; // \u7121\u9650\u5927\u3092\u8868\u73fe\u3059\u308b\u6570 constexpr int32 INF = 10000 ; // \u4e8c\u6b21\u5143\u914d\u5217: maze \u3068\u540c\u3058\u30b5\u30a4\u30ba\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u3092 INF \u306b\u30bb\u30c3\u30c8 Grid < int32 > distances ( maze . size (), INF ); // \u4e0a\u3001\u5de6\u3001\u53f3\u3001\u4e0b\u306e\u30de\u30b9\u3078\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Point Offsets [ 4 ] = { Point { 0 , -1 }, Point { -1 , 0 }, Point { 1 , 0 }, Point { 0 , 1 } }; // \u5168\u8981\u7d20\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3001std::queue \u306e\u4ee3\u308f\u308a\u306b std::deque \u3092\u4f7f\u3046 std :: deque < Point > q ; // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e const Point start { 1 , 1 }; q . push_back ( start ); distances [ start ] = 0 ; // \u66f4\u65b0\u306e\u9593\u9694\uff08\u79d2\uff09 constexpr double UpdateTime = 0.5 ; // \u84c4\u7a4d\u6642\u9593\uff08\u79d2\uff09 double accumulatedTime = 0.0 ; while ( System :: Update ()) { // \u72b6\u614b\u66f4\u65b0\u30d5\u30e9\u30b0 bool update = false ; // \u524d\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u52a0\u7b97 accumulatedTime += Scene :: DeltaTime (); // \u66f4\u65b0\u9593\u9694\u3092\u8d85\u3048\u3066\u3044\u305f\u3089 if ( UpdateTime <= accumulatedTime ) { accumulatedTime -= UpdateTime ; update = true ; } // \u5e45\u512a\u5148\u63a2\u7d22 if ( update && ( not q . empty ())) { const Point currentPos = q . front (); q . pop_front (); const int32 currentDistance = distances [ currentPos ]; for ( const auto & offset : Offsets ) { const Point nextPos = ( currentPos + offset ); if (( maze [ nextPos ] == 0 ) && (( currentDistance + 1 ) < distances [ nextPos ])) { distances [ nextPos ] = ( currentDistance + 1 ); q . push_back ( nextPos ); } } } // \u8ff7\u8def\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316 for ( int32 y = 0 ; y < maze . height (); ++ y ) { for ( int32 x = 0 ; x < maze . width (); ++ x ) { // \u30de\u30b9\u306e\u6b63\u65b9\u5f62 const Rect rect = Rect { ( x * CellSize ), ( y * CellSize ), CellSize }. stretched ( -1 ); if ( maze [ y ][ x ] == 1 ) // \u58c1\u306e\u30de\u30b9 { // \u9ed2\u3067\u8868\u793a rect . draw ( ColorF { 0.25 }); } else // \u901a\u884c\u53ef\u80fd\u306a\u30de\u30b9 { // \u8ddd\u96e2\u60c5\u5831 const int32 distance = distances [ y ][ x ]; if ( distance == INF ) { // \u7070\u8272\u3067\u8868\u793a rect . draw ( ColorF { 0.75 }); font ( U \"\u221e\" ). drawAt ( rect . center (), ColorF { 0.25 }); } else { // \u767d\u3067\u8868\u793a rect . draw (); font ( distances [ y ][ x ]). drawAt ( rect . center (), ColorF { 0.25 }); } } } } // queue \u306b\u5165\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u53ef\u8996\u5316 for ( const auto & point : q ) { // \u8d64\u3044\u534a\u900f\u660e\u306e\u6b63\u65b9\u5f62\u3092\u91cd\u306d\u308b Rect { ( point * CellSize ), CellSize }. draw ( ColorF { 1.0 , 0.0 , 0.0 , 0.5 }); } } }","title":"\u6f14\u7fd2 B - \u5e45\u512a\u5148\u63a2\u7d22\u306e\u53ef\u8996\u5316"},{"location":"ja-jp/learn/make-2/#\u5e45\u512a\u5148\u63a2\u7d22\u306e\u53ef\u8996\u5316","text":"\u5e45\u512a\u5148\u63a2\u7d22\u306b\u3088\u308b\u8ff7\u8def\u306e\u6700\u5c0f\u624b\u6570\u8a08\u7b97\u3092\u53ef\u8996\u5316\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u5e45\u512a\u5148\u63a2\u7d22\u306e\u53ef\u8996\u5316"},{"location":"ja-jp/learn/make-2/#1-\u8ff7\u8def\u306e\u53ef\u8996\u5316","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u6c34\u8272\u306b Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u8ddd\u96e2\u306e\u8868\u793a\u7528\u30d5\u30a9\u30f3\u30c8 const Font font { 18 , Typeface :: Bold }; // \u8ff7\u8def\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u304d\u306e\u30de\u30b9\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 constexpr int32 CellSize = 40 ; // \u4e8c\u6b21\u5143\u914d\u5217: \u8ff7\u8def (0: \u901a\u884c\u53ef\u80fd, 1: \u58c1) const Grid < int32 > maze = { { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 }, { 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, }; // \u7121\u9650\u5927\u3092\u8868\u73fe\u3059\u308b\u6570 constexpr int32 INF = 10000 ; // \u4e8c\u6b21\u5143\u914d\u5217: maze \u3068\u540c\u3058\u30b5\u30a4\u30ba\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u3092 INF \u306b\u30bb\u30c3\u30c8 Grid < int32 > distances ( maze . size (), INF ); while ( System :: Update ()) { // \u72b6\u614b\u66f4\u65b0\u30d5\u30e9\u30b0 bool update = false ; // \u8ff7\u8def\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316 for ( int32 y = 0 ; y < maze . height (); ++ y ) { for ( int32 x = 0 ; x < maze . width (); ++ x ) { // \u30de\u30b9\u306e\u6b63\u65b9\u5f62 const Rect rect = Rect { ( x * CellSize ), ( y * CellSize ), CellSize }. stretched ( -1 ); if ( maze [ y ][ x ] == 1 ) // \u58c1\u306e\u30de\u30b9 { // \u9ed2\u3067\u8868\u793a rect . draw ( ColorF { 0.25 }); } else // \u901a\u884c\u53ef\u80fd\u306a\u30de\u30b9 { // \u8ddd\u96e2\u60c5\u5831 const int32 distance = distances [ y ][ x ]; if ( distance == INF ) { // \u7070\u8272\u3067\u8868\u793a rect . draw ( ColorF { 0.75 }); font ( U \"\u221e\" ). drawAt ( rect . center (), ColorF { 0.25 }); } else { // \u767d\u3067\u8868\u793a rect . draw (); font ( distances [ y ][ x ]). drawAt ( rect . center (), ColorF { 0.25 }); } } } } } }","title":"1. \u8ff7\u8def\u306e\u53ef\u8996\u5316"},{"location":"ja-jp/learn/make-2/#2-\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u53ef\u8996\u5316","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u6c34\u8272\u306b Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u8ddd\u96e2\u306e\u8868\u793a\u7528\u30d5\u30a9\u30f3\u30c8 const Font font { 18 , Typeface :: Bold }; // \u8ff7\u8def\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u304d\u306e\u30de\u30b9\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 constexpr int32 CellSize = 40 ; // \u4e8c\u6b21\u5143\u914d\u5217: \u8ff7\u8def (0: \u901a\u884c\u53ef\u80fd, 1: \u58c1) const Grid < int32 > maze = { { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 }, { 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 }, { 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 }, { 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }, { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }, }; // \u7121\u9650\u5927\u3092\u8868\u73fe\u3059\u308b\u6570 constexpr int32 INF = 10000 ; // \u4e8c\u6b21\u5143\u914d\u5217: maze \u3068\u540c\u3058\u30b5\u30a4\u30ba\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u3092 INF \u306b\u30bb\u30c3\u30c8 Grid < int32 > distances ( maze . size (), INF ); // \u4e0a\u3001\u5de6\u3001\u53f3\u3001\u4e0b\u306e\u30de\u30b9\u3078\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Point Offsets [ 4 ] = { Point { 0 , -1 }, Point { -1 , 0 }, Point { 1 , 0 }, Point { 0 , 1 } }; // \u5168\u8981\u7d20\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3001std::queue \u306e\u4ee3\u308f\u308a\u306b std::deque \u3092\u4f7f\u3046 std :: deque < Point > q ; // \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e const Point start { 1 , 1 }; q . push_back ( start ); distances [ start ] = 0 ; // \u66f4\u65b0\u306e\u9593\u9694\uff08\u79d2\uff09 constexpr double UpdateTime = 0.5 ; // \u84c4\u7a4d\u6642\u9593\uff08\u79d2\uff09 double accumulatedTime = 0.0 ; while ( System :: Update ()) { // \u72b6\u614b\u66f4\u65b0\u30d5\u30e9\u30b0 bool update = false ; // \u524d\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u52a0\u7b97 accumulatedTime += Scene :: DeltaTime (); // \u66f4\u65b0\u9593\u9694\u3092\u8d85\u3048\u3066\u3044\u305f\u3089 if ( UpdateTime <= accumulatedTime ) { accumulatedTime -= UpdateTime ; update = true ; } // \u5e45\u512a\u5148\u63a2\u7d22 if ( update && ( not q . empty ())) { const Point currentPos = q . front (); q . pop_front (); const int32 currentDistance = distances [ currentPos ]; for ( const auto & offset : Offsets ) { const Point nextPos = ( currentPos + offset ); if (( maze [ nextPos ] == 0 ) && (( currentDistance + 1 ) < distances [ nextPos ])) { distances [ nextPos ] = ( currentDistance + 1 ); q . push_back ( nextPos ); } } } // \u8ff7\u8def\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316 for ( int32 y = 0 ; y < maze . height (); ++ y ) { for ( int32 x = 0 ; x < maze . width (); ++ x ) { // \u30de\u30b9\u306e\u6b63\u65b9\u5f62 const Rect rect = Rect { ( x * CellSize ), ( y * CellSize ), CellSize }. stretched ( -1 ); if ( maze [ y ][ x ] == 1 ) // \u58c1\u306e\u30de\u30b9 { // \u9ed2\u3067\u8868\u793a rect . draw ( ColorF { 0.25 }); } else // \u901a\u884c\u53ef\u80fd\u306a\u30de\u30b9 { // \u8ddd\u96e2\u60c5\u5831 const int32 distance = distances [ y ][ x ]; if ( distance == INF ) { // \u7070\u8272\u3067\u8868\u793a rect . draw ( ColorF { 0.75 }); font ( U \"\u221e\" ). drawAt ( rect . center (), ColorF { 0.25 }); } else { // \u767d\u3067\u8868\u793a rect . draw (); font ( distances [ y ][ x ]). drawAt ( rect . center (), ColorF { 0.25 }); } } } } // queue \u306b\u5165\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u53ef\u8996\u5316 for ( const auto & point : q ) { // \u8d64\u3044\u534a\u900f\u660e\u306e\u6b63\u65b9\u5f62\u3092\u91cd\u306d\u308b Rect { ( point * CellSize ), CellSize }. draw ( ColorF { 1.0 , 0.0 , 0.0 , 0.5 }); } } }","title":"2. \u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u53ef\u8996\u5316"},{"location":"ja-jp/learn/make-3/","text":"\u6f14\u7fd2 C - \u697d\u8b5c\u8a18\u8ff0\u8a00\u8a9e\u81ea\u4f5c \u00b6 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3057\u305f\u697d\u8b5c\u3092\u6f14\u594f\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 \u697d\u8b5c\u30d5\u30a1\u30a4\u30eb \u00b6 \u3042\u3089\u304b\u3058\u3081\u6b21\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u305f\u697d\u8b5c\u30d5\u30a1\u30a4\u30eb score.txt \u3092\u3001\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e App/ \u30d5\u30a9\u30eb\u30c0\u5185\u306b\u914d\u7f6e\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u30c9\u30ec\u30df\u30c9\u30ec\u30df \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u7c21\u5358\u306b\u958b\u304f\u65b9\u6cd5 (Visual Studio) Visual Studio \u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3 \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u4e0a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\u300c\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3067\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u958b\u304f\u300d\u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u958b\u304d\u307e\u3059\u3002\u305d\u306e\u4e2d\u306b\u3042\u308b App \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b score.txt \u3092\u914d\u7f6e\u3057\u307e\u3059\u3002 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6570\u5024\u3092\u30d1\u30fc\u30b9\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u6f14\u7fd2 E \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 # include <Siv3D.hpp> void Main () { // \u697d\u8b5c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570 String score ; { // \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f TextReader reader { U \"score.txt\" }; if ( not reader ) { throw Error { U \"score.txt \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\" }; } String line ; // \u4e00\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { // score \u306e\u672b\u5c3e\u306b\u8ffd\u52a0 score += line ; } } Print << U \"\u8aad\u307f\u8fbc\u3093\u3060\u697d\u8b5c: \" << score ; // \u30c9\u3001\u30ec\u3001\u30df\u306e\u97f3\u3092\u7528\u610f const Audio soundDo { s3d :: GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; const Audio soundRe { s3d :: GMInstrument :: Piano1 , PianoKey :: D4 , 0.5 s }; const Audio soundMi { s3d :: GMInstrument :: Piano1 , PianoKey :: E4 , 0.5 s }; // \u53c2\u8003 // \u30c9: C4, \u30ec: D4, \u30df: E4, \u30d5\u30a1: F4, \u30bd: G4, \u30e9: A4, \u30b7: B4, \u30c9: C5, ... // \u30c9#: CS4, \u30ec#: DS4, ... // \u518d\u751f\u4f4d\u7f6e int32 pos = -1 ; // \u97f3\u91cf double volume = 0.5 ; // \u5373\u5ea7\u306b\u958b\u59cb\u3059\u308b\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 / 1000 \u3092 newPos \u3068\u3059\u308b const int32 newPos = ( stopwatch . ms () / 1000 ); if ( pos != newPos ) { pos = newPos ; // \u7bc4\u56f2\u5185\u3067\u3042\u308c\u3070 if ( pos < score . size ()) { // pos \u756a\u76ee\u306e\u6587\u5b57 const char32 ch = score [ pos ]; Print << pos << U \": \" << ch ; if ( ch == U '\u30c9' ) { soundDo . playOneShot ( volume ); } else if ( ch == U '\u30ec' ) { soundRe . playOneShot ( volume ); } else if ( ch == U '\u30df' ) { soundMi . playOneShot ( volume ); } } } } }","title":"\u6f14\u7fd2 C - \u697d\u8b5c\u8a18\u8ff0\u8a00\u8a9e\u81ea\u4f5c"},{"location":"ja-jp/learn/make-3/#\u6f14\u7fd2-c---\u697d\u8b5c\u8a18\u8ff0\u8a00\u8a9e\u81ea\u4f5c","text":"\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3057\u305f\u697d\u8b5c\u3092\u6f14\u594f\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u6f14\u7fd2 C - \u697d\u8b5c\u8a18\u8ff0\u8a00\u8a9e\u81ea\u4f5c"},{"location":"ja-jp/learn/make-3/#\u697d\u8b5c\u30d5\u30a1\u30a4\u30eb","text":"\u3042\u3089\u304b\u3058\u3081\u6b21\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u305f\u697d\u8b5c\u30d5\u30a1\u30a4\u30eb score.txt \u3092\u3001\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e App/ \u30d5\u30a9\u30eb\u30c0\u5185\u306b\u914d\u7f6e\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u30c9\u30ec\u30df\u30c9\u30ec\u30df \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u7c21\u5358\u306b\u958b\u304f\u65b9\u6cd5 (Visual Studio) Visual Studio \u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3 \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u4e0a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\u300c\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3067\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u958b\u304f\u300d\u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u958b\u304d\u307e\u3059\u3002\u305d\u306e\u4e2d\u306b\u3042\u308b App \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b score.txt \u3092\u914d\u7f6e\u3057\u307e\u3059\u3002 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6570\u5024\u3092\u30d1\u30fc\u30b9\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u6f14\u7fd2 E \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u697d\u8b5c\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/learn/make-3/#\u30d7\u30ed\u30b0\u30e9\u30e0","text":"# include <Siv3D.hpp> void Main () { // \u697d\u8b5c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570 String score ; { // \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f TextReader reader { U \"score.txt\" }; if ( not reader ) { throw Error { U \"score.txt \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\" }; } String line ; // \u4e00\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { // score \u306e\u672b\u5c3e\u306b\u8ffd\u52a0 score += line ; } } Print << U \"\u8aad\u307f\u8fbc\u3093\u3060\u697d\u8b5c: \" << score ; // \u30c9\u3001\u30ec\u3001\u30df\u306e\u97f3\u3092\u7528\u610f const Audio soundDo { s3d :: GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s }; const Audio soundRe { s3d :: GMInstrument :: Piano1 , PianoKey :: D4 , 0.5 s }; const Audio soundMi { s3d :: GMInstrument :: Piano1 , PianoKey :: E4 , 0.5 s }; // \u53c2\u8003 // \u30c9: C4, \u30ec: D4, \u30df: E4, \u30d5\u30a1: F4, \u30bd: G4, \u30e9: A4, \u30b7: B4, \u30c9: C5, ... // \u30c9#: CS4, \u30ec#: DS4, ... // \u518d\u751f\u4f4d\u7f6e int32 pos = -1 ; // \u97f3\u91cf double volume = 0.5 ; // \u5373\u5ea7\u306b\u958b\u59cb\u3059\u308b\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch stopwatch { StartImmediately :: Yes }; while ( System :: Update ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 / 1000 \u3092 newPos \u3068\u3059\u308b const int32 newPos = ( stopwatch . ms () / 1000 ); if ( pos != newPos ) { pos = newPos ; // \u7bc4\u56f2\u5185\u3067\u3042\u308c\u3070 if ( pos < score . size ()) { // pos \u756a\u76ee\u306e\u6587\u5b57 const char32 ch = score [ pos ]; Print << pos << U \": \" << ch ; if ( ch == U '\u30c9' ) { soundDo . playOneShot ( volume ); } else if ( ch == U '\u30ec' ) { soundRe . playOneShot ( volume ); } else if ( ch == U '\u30df' ) { soundMi . playOneShot ( volume ); } } } } }","title":"\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/learn/make-4/","text":"\u6f14\u7fd2 D - \u6a21\u5199\u30a2\u30d7\u30ea\u6539\u9020 \u00b6 1.2 \u3067\u7d39\u4ecb\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u300c\u6a21\u5199\u30a2\u30d7\u30ea\u300d\u3092\u6539\u9020\u3057\u3066\u3001\u7570\u306a\u308b\u30b9\u30bf\u30a4\u30eb\u3067\u7d75\u3092\u63cf\u304f\u3088\u3046\u306b\u3057\u307e\u3059\u3002 \u7dda\u3067\u63cf\u304f \u00b6 # include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u59cb\u70b9\u5ea7\u6a19 const Point startPos = RandomPoint ( Rect { image . size () }); // \u30e9\u30f3\u30c0\u30e0\u306a\u7d42\u70b9\u5ea7\u6a19 const Point endPos { ( startPos . x + Random ( -10 , 10 )), ( startPos . y + Random ( -10 , 10 )) }; // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 const ColorF color { Random (), Random (), Random (), Random () }; // \u592a\u3055 const int32 thickness = 1 ; // \u7dda\u5206\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Line { startPos , endPos }. paint ( image , thickness , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } } \u4e38\u30bf\u30a4\u30eb \u00b6 # include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 Point pos = RandomPoint ( Rect { image . size () }); // 10 \u3067\u5272\u308b (\u5c0f\u6570\u4ee5\u4e0b\u5207\u308a\u6368\u3066\uff09 pos /= 10 ; // 10 \u3092\u304b\u3051\u308b pos *= 10 ; // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 const ColorF color { Random (), Random (), Random (), Random () }; // \u5186\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Circle { pos , 4 }. paint ( image , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } } \u30e2\u30ce\u30af\u30ed \u00b6 # include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 const Point pos = RandomPoint ( Rect { image . size () }); // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 (rgb, a) const ColorF color { Random (), Random () }; // \u30e9\u30f3\u30c0\u30e0\u306a\u534a\u5f84 const int32 size = Random ( 1 , 10 ); // \u5186\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Circle { pos , size }. paint ( image , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } }","title":"\u6f14\u7fd2 D - \u6a21\u5199\u30a2\u30d7\u30ea\u6539\u9020"},{"location":"ja-jp/learn/make-4/#\u6f14\u7fd2-d---\u6a21\u5199\u30a2\u30d7\u30ea\u6539\u9020","text":"1.2 \u3067\u7d39\u4ecb\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u300c\u6a21\u5199\u30a2\u30d7\u30ea\u300d\u3092\u6539\u9020\u3057\u3066\u3001\u7570\u306a\u308b\u30b9\u30bf\u30a4\u30eb\u3067\u7d75\u3092\u63cf\u304f\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"\u6f14\u7fd2 D - \u6a21\u5199\u30a2\u30d7\u30ea\u6539\u9020"},{"location":"ja-jp/learn/make-4/#\u7dda\u3067\u63cf\u304f","text":"# include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u59cb\u70b9\u5ea7\u6a19 const Point startPos = RandomPoint ( Rect { image . size () }); // \u30e9\u30f3\u30c0\u30e0\u306a\u7d42\u70b9\u5ea7\u6a19 const Point endPos { ( startPos . x + Random ( -10 , 10 )), ( startPos . y + Random ( -10 , 10 )) }; // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 const ColorF color { Random (), Random (), Random (), Random () }; // \u592a\u3055 const int32 thickness = 1 ; // \u7dda\u5206\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Line { startPos , endPos }. paint ( image , thickness , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } }","title":"\u7dda\u3067\u63cf\u304f"},{"location":"ja-jp/learn/make-4/#\u4e38\u30bf\u30a4\u30eb","text":"# include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 Point pos = RandomPoint ( Rect { image . size () }); // 10 \u3067\u5272\u308b (\u5c0f\u6570\u4ee5\u4e0b\u5207\u308a\u6368\u3066\uff09 pos /= 10 ; // 10 \u3092\u304b\u3051\u308b pos *= 10 ; // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 const ColorF color { Random (), Random (), Random (), Random () }; // \u5186\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Circle { pos , 4 }. paint ( image , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } }","title":"\u4e38\u30bf\u30a4\u30eb"},{"location":"ja-jp/learn/make-4/#\u30e2\u30ce\u30af\u30ed","text":"# include <Siv3D.hpp> // 2 \u3064\u306e\u753b\u50cf\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 double Diff ( const Image & a , const Image & b ) { const Color * pA = a . data (); const Color * pB = b . data (); const Color * const pAEnd = ( pA + a . num_pixels ()); double d = 0.0 ; // \u3059\u3079\u3066\u306e\u30d4\u30af\u30bb\u30eb\u306b\u5bfe\u3057\u3066 while ( pA != pAEnd ) { d += AbsDiff ( pA -> r , pB -> r ) + AbsDiff ( pA -> g , pB -> g ) + AbsDiff ( pA -> b , pB -> b ); ++ pA ; ++ pB ; } return d ; } void Main () { // \u76ee\u6a19\u3068\u3059\u308b\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u30ea\u30b5\u30a4\u30ba const Image target = Dialog :: OpenImage (). fit ( Scene :: Size ()); // \u73fe\u5728\u306e\u753b\u50cf Image image { target . size (), Palette :: White }; // \u76f4\u524d\u306e\u753b\u50cf Image old = image ; // \u73fe\u5728\u306e\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture { image }; // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2 double d1 = Diff ( target , image ); while ( System :: Update ()) { for ( int32 i = 0 ; i < 100 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 const Point pos = RandomPoint ( Rect { image . size () }); // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 (rgb, a) const ColorF color { Random (), Random () }; // \u30e9\u30f3\u30c0\u30e0\u306a\u534a\u5f84 const int32 size = Random ( 1 , 10 ); // \u5186\u3092\u73fe\u5728\u306e\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3080 Circle { pos , size }. paint ( image , color ); // \u76ee\u6a19\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97 const double d2 = Diff ( target , image ); if ( d2 < d1 ) // \u76ee\u6a19\u306b\u8fd1\u3065\u3044\u3066\u3044\u305f\u3089\u63a1\u7528 { d1 = d2 ; old = image ; } else // \u8fd1\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u5143\u306b\u623b\u3059 { image = old ; } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); // \u4fdd\u5b58\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Save\" , Vec2 { 660 , 550 })) { // \u73fe\u5728\u306e\u753b\u50cf\u3092\u30d5\u30a1\u30a4\u30eb\u30c0\u30a4\u30a2\u30ed\u30b0\u7d4c\u7531\u3067\u4fdd\u5b58 image . saveWithDialog (); } } }","title":"\u30e2\u30ce\u30af\u30ed"},{"location":"ja-jp/learn/make-5/","text":"\u6f14\u7fd2 E - \u97f3\u30b2\u30fc\u57fa\u790e \u00b6 \u30bf\u30a4\u30df\u30f3\u30b0\u3088\u304f\u30ce\u30fc\u30c8\u3092\u62bc\u3059\u3001\u97f3\u30b2\u30fc\u306e\u57fa\u672c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 \u304a\u624b\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u5de6\u304b\u3089\u9806\u306b 1 2 3 4 \u30ad\u30fc\u3067\u30ce\u30fc\u30c8\u3092\u72d9\u3044\u307e\u3059\u3002 \u5b9f\u969b\u306e\u30b2\u30fc\u30e0\u3067\u306f Audio \u306e .posSec() \u3084 .posSample() \u304b\u3089\u7d4c\u904e\u6642\u9593\u3092\u53d6\u5f97\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u308f\u305a\u306b Stopwatch \u3067\u7d4c\u904e\u6642\u9593\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002 \u8b5c\u9762\u30d5\u30a1\u30a4\u30eb \u00b6 \u3042\u3089\u304b\u3058\u3081\u6b21\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u305f\u8b5c\u9762\u30d5\u30a1\u30a4\u30eb notes.txt \u3092\u3001\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e App/ \u30d5\u30a9\u30eb\u30c0\u5185\u306b\u914d\u7f6e\u3057\u3066\u304a\u304d\u307e\u3059\u3002 2000 0 2500 1 3000 2 3500 3 4000 3 4500 2 5000 1 5500 0 6000 0 6500 1 7000 2 7500 3 8000 3 8500 2 9000 1 9500 0 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u7c21\u5358\u306b\u958b\u304f\u65b9\u6cd5 (Visual Studio) Visual Studio \u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3 \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u4e0a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\u300c\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3067\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u958b\u304f\u300d\u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u958b\u304d\u307e\u3059\u3002\u305d\u306e\u4e2d\u306b\u3042\u308b App \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b notes.txt \u3092\u914d\u7f6e\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 # include <Siv3D.hpp> // \u30ce\u30fc\u30c8 struct Note { // \u30ce\u30fc\u30c8\u306e\u6642\u523b int32 time ; // \u62bc\u3059\u3079\u304d\u30ad\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0, 1, 2, 3) int32 key ; // \u6d88\u3048\u305f\u3089 false bool active = true ; }; // \u30ce\u30fc\u30c8\u60c5\u5831\u3092\u8b5c\u9762\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570 Array < Note > LoadNotes ( const FilePath & path ) { TextReader reader { path }; if ( not reader ) { throw Error { U \"\u8b5c\u9762 {} \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\" _fmt ( path ) }; } Array < Note > notes ; String line ; // 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { // \u7a7a\u767d\u884c\u306f\u30b9\u30ad\u30c3\u30d7 if ( line . isEmpty ()) { continue ; } // \u8aad\u307f\u8fbc\u3093\u3060\u884c\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272 const Array < String > params = line . split ( U ' ' ); // \u5206\u5272\u3057\u305f\u7d50\u679c\u304c 2 \u8981\u7d20\u3067\u306a\u3044\u5834\u5408\u306f\u4e0d\u6b63\u306a\u8b5c\u9762 if ( params . size () != 2 ) { throw Error { U \"\u4e0d\u6b63\u306a\u8b5c\u9762\u3067\u3059\u3002\" }; } // \u5206\u5272\u3057\u305f\u7d50\u679c\u3092\u305d\u308c\u305e\u308c int32 \u578b\u306b\u5909\u63db notes . emplace_back ( Parse < int32 > ( params [ 0 ]), Parse < int32 > ( params [ 1 ])); } return notes ; } // \u30ce\u30fc\u30c8\u306e\u5ea7\u6a19\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 Vec2 GetNotePos ( const Note & note , int32 time ) { const double x = ( 250 + note . key * 100 ); const double y = ( 500 - ( note . time - time ) * 0.25 ); return { x , y }; } // \u30ce\u30fc\u30c8\u3092\u62bc\u3057\u305f\u3068\u304d\u306e\u30a8\u30d5\u30a7\u30af\u30c8 struct NoteEffect : IEffect { Vec2 m_start ; String m_text ; Font m_font ; NoteEffect ( const Vec2 & start , const String & text , const Font & font ) : m_start { start } , m_text { text } , m_font { font } {} bool update ( double t ) override { Circle { m_start , ( 30 + t * 30 ) }. drawFrame ( 20 * ( 0.5 - t )); m_font ( m_text ). drawAt ( m_start . movedBy ( 0 , t * -120 ), Palette :: Orange ); return ( t < 0.5 ); } }; void Main () { // \u30ce\u30fc\u30c8\u914d\u5217 Array < Note > notes = LoadNotes ( U \"notes.txt\" ); // \u5224\u5b9a\u30ad\u30fc const Array < Input > Keys = { Key1 , Key2 , Key3 , Key4 }; // \u6642\u9593\u6e2c\u5b9a\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch stopwatch { StartImmediately :: Yes }; // \u30d5\u30a9\u30f3\u30c8 const Font font { 40 , Typeface :: Heavy }; // \u30a8\u30d5\u30a7\u30af\u30c8\u7ba1\u7406 Effect effect ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 const int32 time = stopwatch . ms (); ClearPrint (); Print << time ; //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// for ( auto & note : notes ) { // \u6d88\u3048\u3066\u3044\u308b\u30ce\u30fc\u30c8\u306f\u30b9\u30ad\u30c3\u30d7 if ( not note . active ) { continue ; } // \u73fe\u5728\u306e\u30bf\u30a4\u30e0\u3068\u30ce\u30fc\u30c8\u306e\u30bf\u30a4\u30e0\u3068\u306e\u5dee\uff08\u30df\u30ea\u79d2\uff09 const int32 diffMillisec = ( time - note . time ); // \u5dee\u306e\u7d76\u5bfe\u5024\u304c 250 \u30df\u30ea\u79d2\u672a\u6e80\u306a\u3089 if ( Abs ( diffMillisec ) < 250 ) { // \u30ce\u30fc\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( Keys [ note . key ]. down ()) { // \u30ce\u30fc\u30c8\u3092\u6d88\u3059 note . active = false ; // \u30ce\u30fc\u30c8\u306e\u5ea7\u6a19 const Vec2 notePos = GetNotePos ( note , time ); // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add < NoteEffect > ( Vec2 { notePos . x , 500 }, U \"Good\" , font ); } } // 250 \u30df\u30ea\u79d2\u4ee5\u4e0a\u306e\u9045\u308c\u306f\u30df\u30b9 if ( note . active && ( 250 <= diffMillisec )) { // \u30ce\u30fc\u30c8\u3092\u6d88\u3059 note . active = false ; } } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u9577\u65b9\u5f62\u3092\u63cf\u753b Rect { 0 , 480 , 800 , 40 }. draw ( ColorF { 0.5 }); // \u30ce\u30fc\u30c8\u306e\u63cf\u753b for ( const auto & note : notes ) { // \u6d88\u3048\u3066\u3044\u308b\u30ce\u30fc\u30c8\u306f\u30b9\u30ad\u30c3\u30d7 if ( not note . active ) { continue ; } // \u30ce\u30fc\u30c8\u306e\u5ea7\u6a19 const Vec2 notePos = GetNotePos ( note , time ); // \u753b\u9762\u5185\u306b\u3042\u308b\u30ce\u30fc\u30c8\u306e\u307f\u63cf\u753b\u3059\u308b if ( -100.0 < notePos . y ) { Circle { notePos , 30 }. draw (); } } // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u63cf\u753b effect . update (); } }","title":"\u6f14\u7fd2 E - \u97f3\u30b2\u30fc\u57fa\u790e"},{"location":"ja-jp/learn/make-5/#\u6f14\u7fd2-e---\u97f3\u30b2\u30fc\u57fa\u790e","text":"\u30bf\u30a4\u30df\u30f3\u30b0\u3088\u304f\u30ce\u30fc\u30c8\u3092\u62bc\u3059\u3001\u97f3\u30b2\u30fc\u306e\u57fa\u672c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 \u304a\u624b\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u5de6\u304b\u3089\u9806\u306b 1 2 3 4 \u30ad\u30fc\u3067\u30ce\u30fc\u30c8\u3092\u72d9\u3044\u307e\u3059\u3002 \u5b9f\u969b\u306e\u30b2\u30fc\u30e0\u3067\u306f Audio \u306e .posSec() \u3084 .posSample() \u304b\u3089\u7d4c\u904e\u6642\u9593\u3092\u53d6\u5f97\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u308f\u305a\u306b Stopwatch \u3067\u7d4c\u904e\u6642\u9593\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002","title":"\u6f14\u7fd2 E - \u97f3\u30b2\u30fc\u57fa\u790e"},{"location":"ja-jp/learn/make-5/#\u8b5c\u9762\u30d5\u30a1\u30a4\u30eb","text":"\u3042\u3089\u304b\u3058\u3081\u6b21\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u305f\u8b5c\u9762\u30d5\u30a1\u30a4\u30eb notes.txt \u3092\u3001\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e App/ \u30d5\u30a9\u30eb\u30c0\u5185\u306b\u914d\u7f6e\u3057\u3066\u304a\u304d\u307e\u3059\u3002 2000 0 2500 1 3000 2 3500 3 4000 3 4500 2 5000 1 5500 0 6000 0 6500 1 7000 2 7500 3 8000 3 8500 2 9000 1 9500 0 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u7c21\u5358\u306b\u958b\u304f\u65b9\u6cd5 (Visual Studio) Visual Studio \u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3 \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u4e0a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\u300c\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3067\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u958b\u304f\u300d\u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u958b\u304d\u307e\u3059\u3002\u305d\u306e\u4e2d\u306b\u3042\u308b App \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b notes.txt \u3092\u914d\u7f6e\u3057\u307e\u3059\u3002","title":"\u8b5c\u9762\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/learn/make-5/#\u30d7\u30ed\u30b0\u30e9\u30e0","text":"# include <Siv3D.hpp> // \u30ce\u30fc\u30c8 struct Note { // \u30ce\u30fc\u30c8\u306e\u6642\u523b int32 time ; // \u62bc\u3059\u3079\u304d\u30ad\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0, 1, 2, 3) int32 key ; // \u6d88\u3048\u305f\u3089 false bool active = true ; }; // \u30ce\u30fc\u30c8\u60c5\u5831\u3092\u8b5c\u9762\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570 Array < Note > LoadNotes ( const FilePath & path ) { TextReader reader { path }; if ( not reader ) { throw Error { U \"\u8b5c\u9762 {} \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\" _fmt ( path ) }; } Array < Note > notes ; String line ; // 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { // \u7a7a\u767d\u884c\u306f\u30b9\u30ad\u30c3\u30d7 if ( line . isEmpty ()) { continue ; } // \u8aad\u307f\u8fbc\u3093\u3060\u884c\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272 const Array < String > params = line . split ( U ' ' ); // \u5206\u5272\u3057\u305f\u7d50\u679c\u304c 2 \u8981\u7d20\u3067\u306a\u3044\u5834\u5408\u306f\u4e0d\u6b63\u306a\u8b5c\u9762 if ( params . size () != 2 ) { throw Error { U \"\u4e0d\u6b63\u306a\u8b5c\u9762\u3067\u3059\u3002\" }; } // \u5206\u5272\u3057\u305f\u7d50\u679c\u3092\u305d\u308c\u305e\u308c int32 \u578b\u306b\u5909\u63db notes . emplace_back ( Parse < int32 > ( params [ 0 ]), Parse < int32 > ( params [ 1 ])); } return notes ; } // \u30ce\u30fc\u30c8\u306e\u5ea7\u6a19\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570 Vec2 GetNotePos ( const Note & note , int32 time ) { const double x = ( 250 + note . key * 100 ); const double y = ( 500 - ( note . time - time ) * 0.25 ); return { x , y }; } // \u30ce\u30fc\u30c8\u3092\u62bc\u3057\u305f\u3068\u304d\u306e\u30a8\u30d5\u30a7\u30af\u30c8 struct NoteEffect : IEffect { Vec2 m_start ; String m_text ; Font m_font ; NoteEffect ( const Vec2 & start , const String & text , const Font & font ) : m_start { start } , m_text { text } , m_font { font } {} bool update ( double t ) override { Circle { m_start , ( 30 + t * 30 ) }. drawFrame ( 20 * ( 0.5 - t )); m_font ( m_text ). drawAt ( m_start . movedBy ( 0 , t * -120 ), Palette :: Orange ); return ( t < 0.5 ); } }; void Main () { // \u30ce\u30fc\u30c8\u914d\u5217 Array < Note > notes = LoadNotes ( U \"notes.txt\" ); // \u5224\u5b9a\u30ad\u30fc const Array < Input > Keys = { Key1 , Key2 , Key3 , Key4 }; // \u6642\u9593\u6e2c\u5b9a\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch stopwatch { StartImmediately :: Yes }; // \u30d5\u30a9\u30f3\u30c8 const Font font { 40 , Typeface :: Heavy }; // \u30a8\u30d5\u30a7\u30af\u30c8\u7ba1\u7406 Effect effect ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 const int32 time = stopwatch . ms (); ClearPrint (); Print << time ; //////////////////////////////// // // \u72b6\u614b\u66f4\u65b0 // //////////////////////////////// for ( auto & note : notes ) { // \u6d88\u3048\u3066\u3044\u308b\u30ce\u30fc\u30c8\u306f\u30b9\u30ad\u30c3\u30d7 if ( not note . active ) { continue ; } // \u73fe\u5728\u306e\u30bf\u30a4\u30e0\u3068\u30ce\u30fc\u30c8\u306e\u30bf\u30a4\u30e0\u3068\u306e\u5dee\uff08\u30df\u30ea\u79d2\uff09 const int32 diffMillisec = ( time - note . time ); // \u5dee\u306e\u7d76\u5bfe\u5024\u304c 250 \u30df\u30ea\u79d2\u672a\u6e80\u306a\u3089 if ( Abs ( diffMillisec ) < 250 ) { // \u30ce\u30fc\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( Keys [ note . key ]. down ()) { // \u30ce\u30fc\u30c8\u3092\u6d88\u3059 note . active = false ; // \u30ce\u30fc\u30c8\u306e\u5ea7\u6a19 const Vec2 notePos = GetNotePos ( note , time ); // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add < NoteEffect > ( Vec2 { notePos . x , 500 }, U \"Good\" , font ); } } // 250 \u30df\u30ea\u79d2\u4ee5\u4e0a\u306e\u9045\u308c\u306f\u30df\u30b9 if ( note . active && ( 250 <= diffMillisec )) { // \u30ce\u30fc\u30c8\u3092\u6d88\u3059 note . active = false ; } } //////////////////////////////// // // \u63cf\u753b // //////////////////////////////// // \u9577\u65b9\u5f62\u3092\u63cf\u753b Rect { 0 , 480 , 800 , 40 }. draw ( ColorF { 0.5 }); // \u30ce\u30fc\u30c8\u306e\u63cf\u753b for ( const auto & note : notes ) { // \u6d88\u3048\u3066\u3044\u308b\u30ce\u30fc\u30c8\u306f\u30b9\u30ad\u30c3\u30d7 if ( not note . active ) { continue ; } // \u30ce\u30fc\u30c8\u306e\u5ea7\u6a19 const Vec2 notePos = GetNotePos ( note , time ); // \u753b\u9762\u5185\u306b\u3042\u308b\u30ce\u30fc\u30c8\u306e\u307f\u63cf\u753b\u3059\u308b if ( -100.0 < notePos . y ) { Circle { notePos , 30 }. draw (); } } // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u63cf\u753b effect . update (); } }","title":"\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/learn/make-6/","text":"\u6f14\u7fd2 F - \u8131\u51fa\u30b2\u30fc\u30e0 \u00b6 \u8131\u51fa\u30b2\u30fc\u30e0\u306e\u57fa\u672c\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); const Texture computerTexture { U \"\ud83d\udda5\ufe0f\" _emoji }; const Texture boxTexture { U \"\ud83d\uddc3\ufe0f\" _emoji }; const Texture doorTexture { U \"\ud83d\udeaa\" _emoji }; const Vec2 computerPos { 200 , 300 }; const Vec2 boxPos { 400 , 300 }; const Vec2 doorPos { 600 , 300 }; while ( System :: Update ()) { computerTexture . drawAt ( computerPos ); boxTexture . drawAt ( boxPos ); doorTexture . drawAt ( doorPos ); if ( const Circle circle { computerPos , 80 }; circle . mouseOver ()) { circle . draw ( ColorF { 1.0 , 0.2 }); Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( circle . leftClicked ()) { Print << U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ; } } if ( const Circle circle { boxPos , 80 }; circle . mouseOver ()) { circle . draw ( ColorF { 1.0 , 0.2 }); Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( circle . leftClicked ()) { Print << U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002\u90e8\u5c4b\u306e\u9375\u3092\u898b\u3064\u3051\u305f\uff01\" ; } } if ( const Circle circle { doorPos , 80 }; circle . mouseOver ()) { circle . draw ( ColorF { 1.0 , 0.2 }); Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( circle . leftClicked ()) { Print << U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ; } } } } 2. \u30af\u30e9\u30b9\u5316 \u00b6 # include <Siv3D.hpp> class Item { public : // \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u306e\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff09 Item ( const Emoji & emoji , const Vec2 & pos , bool visible ) : m_texture { emoji } , m_circle { pos , 80 } , m_visible { visible } {} // \u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b void setVisibility ( bool visible ) { m_visible = visible ; } // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u3092\u8fd4\u3059 bool clicked () const { if ( not m_visible ) { return false ; } return m_circle . leftClicked (); } // \u63cf\u753b\u3059\u308b void draw () const { if ( not m_visible ) { return ; } m_texture . drawAt ( m_circle . center ); if ( m_circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); m_circle . draw ( ColorF { 1.0 , 0.2 }); } } private : Texture m_texture ; Circle m_circle ; bool m_visible ; }; void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); Item computer { U \"\ud83d\udda5\ufe0f\" _emoji , Vec2 { 200 , 300 }, true }; Item box { U \"\ud83d\uddc3\ufe0f\" _emoji , Vec2 { 400 , 300 }, true }; Item door { U \"\ud83d\udeaa\" _emoji , Vec2 { 600 , 300 }, true }; while ( System :: Update ()) { computer . draw (); box . draw (); door . draw (); if ( computer . clicked ()) { Print << U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ; } if ( box . clicked ()) { Print << U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002\u90e8\u5c4b\u306e\u9375\u3092\u898b\u3064\u3051\u305f\uff01\" ; } if ( door . clicked ()) { Print << U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ; } } } 3. \u30a4\u30d9\u30f3\u30c8\u306e\u7ba1\u7406 \u00b6 # include <Siv3D.hpp> class Item { public : // \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u306e\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff09 Item ( const Emoji & emoji , const Vec2 & pos , bool visible ) : m_texture { emoji } , m_circle { pos , 80 } , m_visible { visible } {} // \u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b void setVisibility ( bool visible ) { m_visible = visible ; } // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u3092\u8fd4\u3059 bool clicked () const { if ( not m_visible ) { return false ; } return m_circle . leftClicked (); } // \u63cf\u753b\u3059\u308b void draw () const { if ( not m_visible ) { return ; } m_texture . drawAt ( m_circle . center ); if ( m_circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); m_circle . draw ( ColorF { 1.0 , 0.2 }); } } private : Texture m_texture ; Circle m_circle ; bool m_visible ; }; void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); Item computer { U \"\ud83d\udda5\ufe0f\" _emoji , Vec2 { 200 , 300 }, true }; Item box { U \"\ud83d\uddc3\ufe0f\" _emoji , Vec2 { 400 , 300 }, true }; Item door { U \"\ud83d\udeaa\" _emoji , Vec2 { 600 , 300 }, true }; Item food { U \"\ud83c\udf72\" _emoji , Vec2 { 400 , 300 }, false }; // \u9375\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u306e\u30d5\u30e9\u30b0 bool hasKey = false ; while ( System :: Update ()) { computer . draw (); box . draw (); door . draw (); food . draw (); if ( computer . clicked ()) { Print << U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ; } if ( box . clicked ()) { if ( not hasKey ) { Print << U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002\" ; Print << U \"[\u9375\u3092\u624b\u306b\u5165\u308c\u305f\uff01]\" ; hasKey = true ; } else { Print << U \"\u7bb1\u306e\u4e2d\u306b\u306f\u91cd\u8981\u305d\u3046\u306a\u3082\u306e\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u3002\" ; } } if ( door . clicked ()) { if ( not hasKey ) { Print << U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ; } else { Print << U \"\u9375\u3092\u4f7f\u3063\u3066\u30c9\u30a2\u3092\u958b\u3051\u305f\uff01\" ; computer . setVisibility ( false ); box . setVisibility ( false ); door . setVisibility ( false ); food . setVisibility ( true ); } } if ( food . clicked ()) { Print << U \"\u304a\u3044\u3057\u305d\u3046\u306a\u6599\u7406\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u3002\u307e\u3060\u6e29\u304b\u3044\u3002\" ; } } } 4. \u30e1\u30c3\u30bb\u30fc\u30b8\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5b9f\u88c5 \u00b6 # include <Siv3D.hpp> class Item { public : // \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u306e\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff09 Item ( const Emoji & emoji , const Vec2 & pos , bool visible ) : m_texture { emoji } , m_circle { pos , 80 } , m_visible { visible } {} // \u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b void setVisibility ( bool visible ) { m_visible = visible ; } // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u3092\u8fd4\u3059 bool clicked () const { if ( not m_visible ) { return false ; } return m_circle . leftClicked (); } // \u63cf\u753b\u3059\u308b void draw () const { if ( not m_visible ) { return ; } m_texture . drawAt ( m_circle . center ); if ( m_circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); m_circle . draw ( ColorF { 1.0 , 0.2 }); } } private : Texture m_texture ; Circle m_circle ; bool m_visible ; }; class MessageWindow { public : void setText ( const String & text ) { m_text = text ; m_stopwatch . restart (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092 0 \u304b\u3089\u30b9\u30bf\u30fc\u30c8 } void draw () const { Rect { 20 , 440 , 760 , 140 }. draw ( ColorF { 0.5 , 0.5 , 0.5 }); RoundRect { 30 , 450 , 740 , 120 , 10 }. draw (); const int32 count = ( m_stopwatch . ms () / 50 ); // 50 \u30df\u30ea\u79d2\u306b\u3064\u304d 1 \u6587\u5b57 m_font ( m_text . substr ( 0 , count )). draw ( 40 , 460 , ColorF { 0.1 }); } private : Font m_font { 25 }; String m_text ; Stopwatch m_stopwatch ; }; void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); Item computer { U \"\ud83d\udda5\ufe0f\" _emoji , Vec2 { 200 , 300 }, true }; Item box { U \"\ud83d\uddc3\ufe0f\" _emoji , Vec2 { 400 , 300 }, true }; Item door { U \"\ud83d\udeaa\" _emoji , Vec2 { 600 , 300 }, true }; Item food { U \"\ud83c\udf72\" _emoji , Vec2 { 400 , 300 }, false }; MessageWindow messageWindow ; bool hasKey = false ; while ( System :: Update ()) { computer . draw (); box . draw (); door . draw (); food . draw (); if ( computer . clicked ()) { messageWindow . setText ( U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ); } if ( box . clicked ()) { if ( not hasKey ) { messageWindow . setText ( U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002 \\n [\u9375\u3092\u624b\u306b\u5165\u308c\u305f\uff01]\" ); hasKey = true ; } else { messageWindow . setText ( U \"\u7bb1\u306e\u4e2d\u306b\u306f\u91cd\u8981\u305d\u3046\u306a\u3082\u306e\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u3002\" ); } } if ( door . clicked ()) { if ( not hasKey ) { messageWindow . setText ( U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ); } else { messageWindow . setText ( U \"\u9375\u3092\u4f7f\u3063\u3066\u30c9\u30a2\u3092\u958b\u3051\u305f\uff01\" ); computer . setVisibility ( false ); box . setVisibility ( false ); door . setVisibility ( false ); food . setVisibility ( true ); } } if ( food . clicked ()) { messageWindow . setText ( U \"\u304a\u3044\u3057\u305d\u3046\u306a\u6599\u7406\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u3002\u307e\u3060\u6e29\u304b\u3044\u3002\" ); } messageWindow . draw (); } }","title":"\u6f14\u7fd2 F - \u8131\u51fa\u30b2\u30fc\u30e0"},{"location":"ja-jp/learn/make-6/#\u6f14\u7fd2-f---\u8131\u51fa\u30b2\u30fc\u30e0","text":"\u8131\u51fa\u30b2\u30fc\u30e0\u306e\u57fa\u672c\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u6f14\u7fd2 F - \u8131\u51fa\u30b2\u30fc\u30e0"},{"location":"ja-jp/learn/make-6/#1-\u57fa\u672c","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); const Texture computerTexture { U \"\ud83d\udda5\ufe0f\" _emoji }; const Texture boxTexture { U \"\ud83d\uddc3\ufe0f\" _emoji }; const Texture doorTexture { U \"\ud83d\udeaa\" _emoji }; const Vec2 computerPos { 200 , 300 }; const Vec2 boxPos { 400 , 300 }; const Vec2 doorPos { 600 , 300 }; while ( System :: Update ()) { computerTexture . drawAt ( computerPos ); boxTexture . drawAt ( boxPos ); doorTexture . drawAt ( doorPos ); if ( const Circle circle { computerPos , 80 }; circle . mouseOver ()) { circle . draw ( ColorF { 1.0 , 0.2 }); Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( circle . leftClicked ()) { Print << U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ; } } if ( const Circle circle { boxPos , 80 }; circle . mouseOver ()) { circle . draw ( ColorF { 1.0 , 0.2 }); Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( circle . leftClicked ()) { Print << U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002\u90e8\u5c4b\u306e\u9375\u3092\u898b\u3064\u3051\u305f\uff01\" ; } } if ( const Circle circle { doorPos , 80 }; circle . mouseOver ()) { circle . draw ( ColorF { 1.0 , 0.2 }); Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( circle . leftClicked ()) { Print << U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ; } } } }","title":"1. \u57fa\u672c"},{"location":"ja-jp/learn/make-6/#2-\u30af\u30e9\u30b9\u5316","text":"# include <Siv3D.hpp> class Item { public : // \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u306e\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff09 Item ( const Emoji & emoji , const Vec2 & pos , bool visible ) : m_texture { emoji } , m_circle { pos , 80 } , m_visible { visible } {} // \u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b void setVisibility ( bool visible ) { m_visible = visible ; } // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u3092\u8fd4\u3059 bool clicked () const { if ( not m_visible ) { return false ; } return m_circle . leftClicked (); } // \u63cf\u753b\u3059\u308b void draw () const { if ( not m_visible ) { return ; } m_texture . drawAt ( m_circle . center ); if ( m_circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); m_circle . draw ( ColorF { 1.0 , 0.2 }); } } private : Texture m_texture ; Circle m_circle ; bool m_visible ; }; void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); Item computer { U \"\ud83d\udda5\ufe0f\" _emoji , Vec2 { 200 , 300 }, true }; Item box { U \"\ud83d\uddc3\ufe0f\" _emoji , Vec2 { 400 , 300 }, true }; Item door { U \"\ud83d\udeaa\" _emoji , Vec2 { 600 , 300 }, true }; while ( System :: Update ()) { computer . draw (); box . draw (); door . draw (); if ( computer . clicked ()) { Print << U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ; } if ( box . clicked ()) { Print << U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002\u90e8\u5c4b\u306e\u9375\u3092\u898b\u3064\u3051\u305f\uff01\" ; } if ( door . clicked ()) { Print << U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ; } } }","title":"2. \u30af\u30e9\u30b9\u5316"},{"location":"ja-jp/learn/make-6/#3-\u30a4\u30d9\u30f3\u30c8\u306e\u7ba1\u7406","text":"# include <Siv3D.hpp> class Item { public : // \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u306e\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff09 Item ( const Emoji & emoji , const Vec2 & pos , bool visible ) : m_texture { emoji } , m_circle { pos , 80 } , m_visible { visible } {} // \u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b void setVisibility ( bool visible ) { m_visible = visible ; } // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u3092\u8fd4\u3059 bool clicked () const { if ( not m_visible ) { return false ; } return m_circle . leftClicked (); } // \u63cf\u753b\u3059\u308b void draw () const { if ( not m_visible ) { return ; } m_texture . drawAt ( m_circle . center ); if ( m_circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); m_circle . draw ( ColorF { 1.0 , 0.2 }); } } private : Texture m_texture ; Circle m_circle ; bool m_visible ; }; void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); Item computer { U \"\ud83d\udda5\ufe0f\" _emoji , Vec2 { 200 , 300 }, true }; Item box { U \"\ud83d\uddc3\ufe0f\" _emoji , Vec2 { 400 , 300 }, true }; Item door { U \"\ud83d\udeaa\" _emoji , Vec2 { 600 , 300 }, true }; Item food { U \"\ud83c\udf72\" _emoji , Vec2 { 400 , 300 }, false }; // \u9375\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u306e\u30d5\u30e9\u30b0 bool hasKey = false ; while ( System :: Update ()) { computer . draw (); box . draw (); door . draw (); food . draw (); if ( computer . clicked ()) { Print << U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ; } if ( box . clicked ()) { if ( not hasKey ) { Print << U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002\" ; Print << U \"[\u9375\u3092\u624b\u306b\u5165\u308c\u305f\uff01]\" ; hasKey = true ; } else { Print << U \"\u7bb1\u306e\u4e2d\u306b\u306f\u91cd\u8981\u305d\u3046\u306a\u3082\u306e\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u3002\" ; } } if ( door . clicked ()) { if ( not hasKey ) { Print << U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ; } else { Print << U \"\u9375\u3092\u4f7f\u3063\u3066\u30c9\u30a2\u3092\u958b\u3051\u305f\uff01\" ; computer . setVisibility ( false ); box . setVisibility ( false ); door . setVisibility ( false ); food . setVisibility ( true ); } } if ( food . clicked ()) { Print << U \"\u304a\u3044\u3057\u305d\u3046\u306a\u6599\u7406\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u3002\u307e\u3060\u6e29\u304b\u3044\u3002\" ; } } }","title":"3. \u30a4\u30d9\u30f3\u30c8\u306e\u7ba1\u7406"},{"location":"ja-jp/learn/make-6/#4-\u30e1\u30c3\u30bb\u30fc\u30b8\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5b9f\u88c5","text":"# include <Siv3D.hpp> class Item { public : // \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u306e\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff09 Item ( const Emoji & emoji , const Vec2 & pos , bool visible ) : m_texture { emoji } , m_circle { pos , 80 } , m_visible { visible } {} // \u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b void setVisibility ( bool visible ) { m_visible = visible ; } // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u3092\u8fd4\u3059 bool clicked () const { if ( not m_visible ) { return false ; } return m_circle . leftClicked (); } // \u63cf\u753b\u3059\u308b void draw () const { if ( not m_visible ) { return ; } m_texture . drawAt ( m_circle . center ); if ( m_circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); m_circle . draw ( ColorF { 1.0 , 0.2 }); } } private : Texture m_texture ; Circle m_circle ; bool m_visible ; }; class MessageWindow { public : void setText ( const String & text ) { m_text = text ; m_stopwatch . restart (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092 0 \u304b\u3089\u30b9\u30bf\u30fc\u30c8 } void draw () const { Rect { 20 , 440 , 760 , 140 }. draw ( ColorF { 0.5 , 0.5 , 0.5 }); RoundRect { 30 , 450 , 740 , 120 , 10 }. draw (); const int32 count = ( m_stopwatch . ms () / 50 ); // 50 \u30df\u30ea\u79d2\u306b\u3064\u304d 1 \u6587\u5b57 m_font ( m_text . substr ( 0 , count )). draw ( 40 , 460 , ColorF { 0.1 }); } private : Font m_font { 25 }; String m_text ; Stopwatch m_stopwatch ; }; void Main () { Scene :: SetBackground ( ColorF { 0.9 , 0.85 , 0.8 }); Item computer { U \"\ud83d\udda5\ufe0f\" _emoji , Vec2 { 200 , 300 }, true }; Item box { U \"\ud83d\uddc3\ufe0f\" _emoji , Vec2 { 400 , 300 }, true }; Item door { U \"\ud83d\udeaa\" _emoji , Vec2 { 600 , 300 }, true }; Item food { U \"\ud83c\udf72\" _emoji , Vec2 { 400 , 300 }, false }; MessageWindow messageWindow ; bool hasKey = false ; while ( System :: Update ()) { computer . draw (); box . draw (); door . draw (); food . draw (); if ( computer . clicked ()) { messageWindow . setText ( U \"\u30d1\u30bd\u30b3\u30f3\u3060\u3002\u96fb\u6e90\u306f\u5165\u3089\u306a\u3044\u3002\" ); } if ( box . clicked ()) { if ( not hasKey ) { messageWindow . setText ( U \"\u7bb1\u306e\u4e2d\u306b\u4f55\u304b\u5165\u3063\u3066\u3044\u308b\u3002 \\n [\u9375\u3092\u624b\u306b\u5165\u308c\u305f\uff01]\" ); hasKey = true ; } else { messageWindow . setText ( U \"\u7bb1\u306e\u4e2d\u306b\u306f\u91cd\u8981\u305d\u3046\u306a\u3082\u306e\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u3002\" ); } } if ( door . clicked ()) { if ( not hasKey ) { messageWindow . setText ( U \"\u30c9\u30a2\u306b\u306f\u9375\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3002\u51fa\u3089\u308c\u306a\u3044\u3002\" ); } else { messageWindow . setText ( U \"\u9375\u3092\u4f7f\u3063\u3066\u30c9\u30a2\u3092\u958b\u3051\u305f\uff01\" ); computer . setVisibility ( false ); box . setVisibility ( false ); door . setVisibility ( false ); food . setVisibility ( true ); } } if ( food . clicked ()) { messageWindow . setText ( U \"\u304a\u3044\u3057\u305d\u3046\u306a\u6599\u7406\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u3002\u307e\u3060\u6e29\u304b\u3044\u3002\" ); } messageWindow . draw (); } }","title":"4. \u30e1\u30c3\u30bb\u30fc\u30b8\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5b9f\u88c5"},{"location":"ja-jp/learn/make-7/","text":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u00b6 Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5165\u9580\u8005\u5411\u3051 https://zenn.dev/reputeless/books/siv3d-documentation \u4e2d\u7d1a\u8005\u5411\u3051 https://github.com/Reputeless/games","title":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"},{"location":"ja-jp/learn/make-7/#siv3d-\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","text":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5165\u9580\u8005\u5411\u3051 https://zenn.dev/reputeless/books/siv3d-documentation \u4e2d\u7d1a\u8005\u5411\u3051 https://github.com/Reputeless/games","title":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"},{"location":"ja-jp/learn/misc/","text":"13. \u305d\u306e\u4ed6\u306e\u6a5f\u80fd \u00b6 13.1 \u4e71\u6570 \u00b6 Random() \u306f 0.0 \u4ee5\u4e0a 1.0 \u672a\u6e80\u306e\u30e9\u30f3\u30c0\u30e0\u306a double \u578b\u306e\u6570\u3092\u3001 Random(max) \u306f 0 \u304b\u3089 max \u307e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u3001 Random<Type>(min, max) \u306f min \u304b\u3089 max \u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"[0.0, 1.0)\" , Vec2 { 200 , 20 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0.0 \u4ee5\u4e0a 1.0 \u672a\u6e80\u306e\u30e9\u30f3\u30c0\u30e0\u306a double \u578b Print << Random (); } } if ( SimpleGUI :: Button ( U \"int32\" , Vec2 { 200 , 60 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0\uff5e100 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570 Print << Random ( 100 ); } } if ( SimpleGUI :: Button ( U \"double\" , Vec2 { 200 , 100 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // -100.0\uff5e100.0 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << Random ( -100.0 , 100.0 ); } } if ( SimpleGUI :: Button ( U \"char32\" , Vec2 { 200 , 140 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // A\uff5eZ \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57 Print << Random ( U 'A' , U 'Z' ); } } } } 13.2 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TextReader \u30af\u30e9\u30b9\u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if (not reader) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 .readLine() \u306b String \u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u6b21\u306b\u898b\u3064\u304b\u3063\u305f\u6539\u884c\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u306e 1 \u884c\u5206\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u305d\u306e\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u3053\u307e\u3067\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b while \u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b\u306e\u3067\u3001\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b TextReader reader { U \"example/txt/en.txt\" }; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( not reader ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error { U \"Failed to open `en.txt`\" }; } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // \u7d42\u7aef\u306b\u9054\u3059\u308b\u307e\u3067 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << i << U \": \" << line ; } while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 13.3 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30ea\u30b5\u30a4\u30ba \u00b6 Window::Resize(int \u5e45, int \u9ad8\u3055) \u307e\u305f\u306f Window::Resize(Size \u30b5\u30a4\u30ba) \u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1000 , 600 ); while ( System :: Update ()) { } } 13.4 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor::RequestStyle() \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle::Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle::Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u307e\u3059\u3002\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::IBeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeNWSE \u5de6\u4e0a-\u53f3\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeNESW \u53f3\u4e0a-\u5de6\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeAll \u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor { 0.2 , 0.6 , 1.0 }; constexpr Circle button { 400 , 300 , 60 }; Transition press { 0.05 s , 0.05 s }; while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 { 0 , 0 }. lerp ( Vec2 { 0 , 4 }, t )) . drawShadow ( Vec2 { 0 , 6 }. lerp ( Vec2 { 0 , 1 }, t ), ( 12 - t * 7 ), ( 5 - t * 4 )) . draw ( buttonColor ); } } 13.5 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db \u00b6 Parse<int32>(s) \u3067\u3001\u6587\u5b57\u5217 s \u3092\u30d1\u30fc\u30b9\u3057\u3066\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u300213.2 \u3068\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6570\u5024\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; while ( System :: Update ()) { } }","title":"13. \u305d\u306e\u4ed6\u306e\u6a5f\u80fd"},{"location":"ja-jp/learn/misc/#13-\u305d\u306e\u4ed6\u306e\u6a5f\u80fd","text":"","title":"13. \u305d\u306e\u4ed6\u306e\u6a5f\u80fd"},{"location":"ja-jp/learn/misc/#131-\u4e71\u6570","text":"Random() \u306f 0.0 \u4ee5\u4e0a 1.0 \u672a\u6e80\u306e\u30e9\u30f3\u30c0\u30e0\u306a double \u578b\u306e\u6570\u3092\u3001 Random(max) \u306f 0 \u304b\u3089 max \u307e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u3001 Random<Type>(min, max) \u306f min \u304b\u3089 max \u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"[0.0, 1.0)\" , Vec2 { 200 , 20 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0.0 \u4ee5\u4e0a 1.0 \u672a\u6e80\u306e\u30e9\u30f3\u30c0\u30e0\u306a double \u578b Print << Random (); } } if ( SimpleGUI :: Button ( U \"int32\" , Vec2 { 200 , 60 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0\uff5e100 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570 Print << Random ( 100 ); } } if ( SimpleGUI :: Button ( U \"double\" , Vec2 { 200 , 100 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // -100.0\uff5e100.0 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << Random ( -100.0 , 100.0 ); } } if ( SimpleGUI :: Button ( U \"char32\" , Vec2 { 200 , 140 })) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // A\uff5eZ \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57 Print << Random ( U 'A' , U 'Z' ); } } } }","title":"13.1 \u4e71\u6570"},{"location":"ja-jp/learn/misc/#132-\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089-1-\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080","text":"\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TextReader \u30af\u30e9\u30b9\u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if (not reader) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 .readLine() \u306b String \u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u6b21\u306b\u898b\u3064\u304b\u3063\u305f\u6539\u884c\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u306e 1 \u884c\u5206\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u305d\u306e\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u3053\u307e\u3067\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b while \u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b\u306e\u3067\u3001\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b TextReader reader { U \"example/txt/en.txt\" }; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( not reader ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error { U \"Failed to open `en.txt`\" }; } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // \u7d42\u7aef\u306b\u9054\u3059\u308b\u307e\u3067 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << i << U \": \" << line ; } while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"13.2 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/learn/misc/#133-\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30ea\u30b5\u30a4\u30ba","text":"Window::Resize(int \u5e45, int \u9ad8\u3055) \u307e\u305f\u306f Window::Resize(Size \u30b5\u30a4\u30ba) \u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1000 , 600 ); while ( System :: Update ()) { } }","title":"13.3 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30ea\u30b5\u30a4\u30ba"},{"location":"ja-jp/learn/misc/#134-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor::RequestStyle() \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle::Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle::Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u307e\u3059\u3002\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::IBeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeNWSE \u5de6\u4e0a-\u53f3\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeNESW \u53f3\u4e0a-\u5de6\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeAll \u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor { 0.2 , 0.6 , 1.0 }; constexpr Circle button { 400 , 300 , 60 }; Transition press { 0.05 s , 0.05 s }; while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 { 0 , 0 }. lerp ( Vec2 { 0 , 4 }, t )) . drawShadow ( Vec2 { 0 , 6 }. lerp ( Vec2 { 0 , 1 }, t ), ( 12 - t * 7 ), ( 5 - t * 4 )) . draw ( buttonColor ); } }","title":"13.4 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb"},{"location":"ja-jp/learn/misc/#135-\u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db","text":"Parse<int32>(s) \u3067\u3001\u6587\u5b57\u5217 s \u3092\u30d1\u30fc\u30b9\u3057\u3066\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u300213.2 \u3068\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6570\u5024\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; while ( System :: Update ()) { } }","title":"13.5 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db"},{"location":"ja-jp/learn/mouse/","text":"10. \u30de\u30a6\u30b9 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 10.1 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306f Cursor::Pos() \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u5b9f\u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b (\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 15 \u53c2\u7167) \u5834\u5408\u3001 Cursor::PosF() \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u5c0f\u6570\u70b9\u6570\u4ee5\u4e0b\u306e\u5ea7\u6a19\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Cursor::Pos() \u3067\u53d6\u5f97\u3067\u304d\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f\u3001\u6700\u5f8c\u306e System::Update() \u306e\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u306e\u5ea7\u6a19\u306e\u305f\u3081\u3001\u5b9f\u969b\u753b\u9762\u306b\u898b\u3048\u3066\u3044\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3088\u308a\u3082\u53e4\u3044\u5ea7\u6a19\u3092\u793a\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); Print << Cursor :: PosF (); Circle { Cursor :: Pos (), 50 }. draw ( Palette :: Skyblue ); } } 10.2 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u3092\u53d6\u5f97\u3059\u308b \u00b6 1 \u30d5\u30ec\u30fc\u30e0\u524d\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f Cursor::PreviousPos() / Cursor::PreviousPosF() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u30021 \u30d5\u30ec\u30fc\u30e0\u524d\u304b\u3089\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u306f Cursor::Delta() / Cursor::DeltaF() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Cursor::Delta() == (Cursor::Pos() - Cursor::PreviousPos()) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u3092\u3064\u304b\u3093\u3067\u3044\u308b\u304b bool grab = false ; Circle circle { Scene :: Center (), 50 }; while ( System :: Update ()) { if ( grab ) { // \u79fb\u52d5\u91cf\u5206\u3060\u3051\u5186\u3092\u79fb\u52d5 circle . moveBy ( Cursor :: Delta ()); } if ( circle . leftClicked ()) // \u5186\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 { grab = true ; } else if ( MouseL . up ()) // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u305f\u3089 { grab = false ; } if ( grab || circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } circle . draw ( Palette :: Skyblue ); } } 10.3 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u4e0a\u306e\u3069\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u304b\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Cursor::ScreenPos() \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3067\u8868\u793a Print << Cursor :: ScreenPos (); } } 10.4 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b\u3092\u8abf\u3079\u308b \u00b6 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306b\u306f\u3001\u4ee5\u4e0b\u306e Input \u578b\u306e\u5024\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u5b9a\u6570 \u5bfe\u5fdc\u3059\u308b\u30dc\u30bf\u30f3 MouseL \u5de6\u30dc\u30bf\u30f3 MouseR \u53f3\u30dc\u30bf\u30f3 MouseM \u4e2d\u592e\u30dc\u30bf\u30f3 MouseX1 \u62e1\u5f35\u30dc\u30bf\u30f3 1 MouseX2 \u62e1\u5f35\u30dc\u30bf\u30f3 2 MouseX3 \u62e1\u5f35\u30dc\u30bf\u30f3 3 MouseX4 \u62e1\u5f35\u30dc\u30bf\u30f3 4 MouseX5 \u62e1\u5f35\u30dc\u30bf\u30f3 5 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 16 \u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u3068\u540c\u69d8\u306b\u3001\u62bc\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down() , \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b\u304b\u3092 .pressed() , \u96e2\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up() \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570 \u62bc\u3057\u3066\u3044\u306a\u3044\u3068\u304d \u62bc\u3057\u305f\u77ac\u9593 \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b \u96e2\u3057\u305f\u77ac\u9593 \u96e2\u3057\u7d9a\u3051\u3066\u3044\u308b .down() false \u2714 true false false false .pressed() false \u2714 true \u2714 true false false .up() false false false \u2714 true false # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressed (); Print << MouseM . pressed (); Print << MouseR . pressed (); } } 10.5 \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593\u3092\u8abf\u3079\u308b \u00b6 Input \u306e .pressedDuration() \u306f\u3001\u305d\u306e\u5165\u529b\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u306f .up() \u304c true \u306b\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u6709\u52b9\u3067\u3059\u3002 .up() \u3055\u308c\u305f\u3068\u304d\u306b .pressedDuration() \u3092\u8abf\u3079\u308b\u3068\u3001\u305d\u306e\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u308b\u307e\u3067\u4f55\u79d2\u9593\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u305f\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressedDuration (); Print << MouseM . pressedDuration (); Print << MouseR . pressedDuration (); } } 10.6 \u3059\u3079\u3066\u306e\u30de\u30a6\u30b9\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b \u00b6 Mouse::GetAllInputs() \u306f\u3001 .down() , .pressed() , .up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30de\u30a6\u30b9\u30dc\u30bf\u30f3\u306e\u4e00\u89a7\u3092 Array<Input> \u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // down() / pressed() / up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u30de\u30a6\u30b9\u30dc\u30bf\u30f3\u4e00\u89a7\u3092\u53d6\u5f97 const Array < Input > buttons = Mouse :: GetAllInputs (); for ( const auto & button : buttons ) { Print << button . name () << ( button . pressed () ? U \" pressed\" : U \" up\" ); } } } 10.7 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf\u3092\u53d6\u5f97\u3059\u308b \u00b6 \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse::Wheel() \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse::WheelH() \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u3001 Scene::Delta() \u3067\u8abf\u6574\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { ClearPrint (); // \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf Print << Mouse :: Wheel (); // \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf Print << Mouse :: WheelH (); pos . y -= ( Mouse :: Wheel () * 10 ); pos . x += ( Mouse :: WheelH () * 10 ); RectF { Arg :: center = pos , 200 }. draw (); } } 10.8 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u3042\u308b\u304b\u3092\u8abf\u3079\u308b \u00b6 Cursor::OnClientRect() \u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u3042\u308b\u5834\u5408 true \u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u3042\u308b\u304b\u3092\u8868\u793a Print << Cursor :: OnClientRect (); if ( Cursor :: OnClientRect ()) { Scene :: SetBackground ( ColorF { 0.4 }); } else { Scene :: SetBackground ( ColorF { 0.2 }); } } } 10.9 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u79fb\u52d5\u3055\u305b\u308b \u00b6 Cursor::SetPos() \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); if ( SimpleGUI :: Button ( U \"center\" , Vec2 { 100 , 20 })) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5 Cursor :: SetPos ( Scene :: Center ()); } } } 10.10 (Windows \u7248) \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3092\u5236\u9650\u3059\u308b \u00b6 Windows \u7248\u3067\u306f\u3001 Cursor::ClipToWindow(true) \u3092\u547c\u3076\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u79fb\u52d5\u3067\u304d\u308b\u9818\u57df\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u5236\u9650\u3067\u304d\u307e\u3059\u3002\u5236\u9650\u3092\u89e3\u9664\u3059\u308b\u306b\u306f Cursor::ClipToWindow(false) \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { bool clip = false ; while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); if ( SimpleGUI :: CheckBox ( clip , U \"clip\" , Vec2 { 100 , 20 })) { if ( clip ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u5236\u9650 Cursor :: ClipToWindow ( true ); } else { // \u5236\u9650\u3092\u89e3\u9664 Cursor :: ClipToWindow ( false ); } } } }","title":"10. \u30de\u30a6\u30b9"},{"location":"ja-jp/learn/mouse/#10-\u30de\u30a6\u30b9","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"10. \u30de\u30a6\u30b9"},{"location":"ja-jp/learn/mouse/#101-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306f Cursor::Pos() \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u5b9f\u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b (\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 15 \u53c2\u7167) \u5834\u5408\u3001 Cursor::PosF() \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u5c0f\u6570\u70b9\u6570\u4ee5\u4e0b\u306e\u5ea7\u6a19\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Cursor::Pos() \u3067\u53d6\u5f97\u3067\u304d\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f\u3001\u6700\u5f8c\u306e System::Update() \u306e\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u306e\u5ea7\u6a19\u306e\u305f\u3081\u3001\u5b9f\u969b\u753b\u9762\u306b\u898b\u3048\u3066\u3044\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3088\u308a\u3082\u53e4\u3044\u5ea7\u6a19\u3092\u793a\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); Print << Cursor :: PosF (); Circle { Cursor :: Pos (), 50 }. draw ( Palette :: Skyblue ); } }","title":"10.1 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/mouse/#102-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u3092\u53d6\u5f97\u3059\u308b","text":"1 \u30d5\u30ec\u30fc\u30e0\u524d\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f Cursor::PreviousPos() / Cursor::PreviousPosF() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u30021 \u30d5\u30ec\u30fc\u30e0\u524d\u304b\u3089\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u306f Cursor::Delta() / Cursor::DeltaF() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Cursor::Delta() == (Cursor::Pos() - Cursor::PreviousPos()) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u3092\u3064\u304b\u3093\u3067\u3044\u308b\u304b bool grab = false ; Circle circle { Scene :: Center (), 50 }; while ( System :: Update ()) { if ( grab ) { // \u79fb\u52d5\u91cf\u5206\u3060\u3051\u5186\u3092\u79fb\u52d5 circle . moveBy ( Cursor :: Delta ()); } if ( circle . leftClicked ()) // \u5186\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 { grab = true ; } else if ( MouseL . up ()) // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u305f\u3089 { grab = false ; } if ( grab || circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } circle . draw ( Palette :: Skyblue ); } }","title":"10.2 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/mouse/#103-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u4e0a\u306e\u3069\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u304b\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Cursor::ScreenPos() \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3067\u8868\u793a Print << Cursor :: ScreenPos (); } }","title":"10.3 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/mouse/#104-\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b\u3092\u8abf\u3079\u308b","text":"\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306b\u306f\u3001\u4ee5\u4e0b\u306e Input \u578b\u306e\u5024\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u5b9a\u6570 \u5bfe\u5fdc\u3059\u308b\u30dc\u30bf\u30f3 MouseL \u5de6\u30dc\u30bf\u30f3 MouseR \u53f3\u30dc\u30bf\u30f3 MouseM \u4e2d\u592e\u30dc\u30bf\u30f3 MouseX1 \u62e1\u5f35\u30dc\u30bf\u30f3 1 MouseX2 \u62e1\u5f35\u30dc\u30bf\u30f3 2 MouseX3 \u62e1\u5f35\u30dc\u30bf\u30f3 3 MouseX4 \u62e1\u5f35\u30dc\u30bf\u30f3 4 MouseX5 \u62e1\u5f35\u30dc\u30bf\u30f3 5 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 16 \u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u3068\u540c\u69d8\u306b\u3001\u62bc\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down() , \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b\u304b\u3092 .pressed() , \u96e2\u3057\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up() \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570 \u62bc\u3057\u3066\u3044\u306a\u3044\u3068\u304d \u62bc\u3057\u305f\u77ac\u9593 \u62bc\u3057\u7d9a\u3051\u3066\u3044\u308b \u96e2\u3057\u305f\u77ac\u9593 \u96e2\u3057\u7d9a\u3051\u3066\u3044\u308b .down() false \u2714 true false false false .pressed() false \u2714 true \u2714 true false false .up() false false false \u2714 true false # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressed (); Print << MouseM . pressed (); Print << MouseR . pressed (); } }","title":"10.4 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/learn/mouse/#105-\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593\u3092\u8abf\u3079\u308b","text":"Input \u306e .pressedDuration() \u306f\u3001\u305d\u306e\u5165\u529b\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u306f .up() \u304c true \u306b\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u6709\u52b9\u3067\u3059\u3002 .up() \u3055\u308c\u305f\u3068\u304d\u306b .pressedDuration() \u3092\u8abf\u3079\u308b\u3068\u3001\u305d\u306e\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u308b\u307e\u3067\u4f55\u79d2\u9593\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u305f\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressedDuration (); Print << MouseM . pressedDuration (); Print << MouseR . pressedDuration (); } }","title":"10.5 \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/learn/mouse/#106-\u3059\u3079\u3066\u306e\u30de\u30a6\u30b9\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b","text":"Mouse::GetAllInputs() \u306f\u3001 .down() , .pressed() , .up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30de\u30a6\u30b9\u30dc\u30bf\u30f3\u306e\u4e00\u89a7\u3092 Array<Input> \u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // down() / pressed() / up() \u306e\u3044\u305a\u308c\u304b\u304c true \u306b\u306a\u3063\u3066\u3044\u308b\u30de\u30a6\u30b9\u30dc\u30bf\u30f3\u4e00\u89a7\u3092\u53d6\u5f97 const Array < Input > buttons = Mouse :: GetAllInputs (); for ( const auto & button : buttons ) { Print << button . name () << ( button . pressed () ? U \" pressed\" : U \" up\" ); } } }","title":"10.6 \u3059\u3079\u3066\u306e\u30de\u30a6\u30b9\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/mouse/#107-\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf\u3092\u53d6\u5f97\u3059\u308b","text":"\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse::Wheel() \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse::WheelH() \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u3001 Scene::Delta() \u3067\u8abf\u6574\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { ClearPrint (); // \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf Print << Mouse :: Wheel (); // \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf Print << Mouse :: WheelH (); pos . y -= ( Mouse :: Wheel () * 10 ); pos . x += ( Mouse :: WheelH () * 10 ); RectF { Arg :: center = pos , 200 }. draw (); } }","title":"10.7 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/learn/mouse/#108-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u3042\u308b\u304b\u3092\u8abf\u3079\u308b","text":"Cursor::OnClientRect() \u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u3042\u308b\u5834\u5408 true \u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u3042\u308b\u304b\u3092\u8868\u793a Print << Cursor :: OnClientRect (); if ( Cursor :: OnClientRect ()) { Scene :: SetBackground ( ColorF { 0.4 }); } else { Scene :: SetBackground ( ColorF { 0.2 }); } } }","title":"10.8 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u3042\u308b\u304b\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/learn/mouse/#109-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u79fb\u52d5\u3055\u305b\u308b","text":"Cursor::SetPos() \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); if ( SimpleGUI :: Button ( U \"center\" , Vec2 { 100 , 20 })) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5 Cursor :: SetPos ( Scene :: Center ()); } } }","title":"10.9 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u79fb\u52d5\u3055\u305b\u308b"},{"location":"ja-jp/learn/mouse/#1010-windows-\u7248-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3092\u5236\u9650\u3059\u308b","text":"Windows \u7248\u3067\u306f\u3001 Cursor::ClipToWindow(true) \u3092\u547c\u3076\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u79fb\u52d5\u3067\u304d\u308b\u9818\u57df\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u5236\u9650\u3067\u304d\u307e\u3059\u3002\u5236\u9650\u3092\u89e3\u9664\u3059\u308b\u306b\u306f Cursor::ClipToWindow(false) \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { bool clip = false ; while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); if ( SimpleGUI :: CheckBox ( clip , U \"clip\" , Vec2 { 100 , 20 })) { if ( clip ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306b\u5236\u9650 Cursor :: ClipToWindow ( true ); } else { // \u5236\u9650\u3092\u89e3\u9664 Cursor :: ClipToWindow ( false ); } } } }","title":"10.10 (Windows \u7248) \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3092\u5236\u9650\u3059\u308b"},{"location":"ja-jp/learn/shape/","text":"3. \u56f3\u5f62\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002 Siv3D \u3067\u306f\u30012D \u56f3\u5f62\u306b\u95a2\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 2D \u56f3\u5f62\u306b\u95a2\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9 \u578b\u540d \u8aac\u660e Point 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f int32 \uff09 Vec2 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 Size \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f int32 \uff09\uff08 Point \u306e\u5225\u540d\uff09 SizeF \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f double \uff09\uff08 Vec2 \u306e\u5225\u540d\uff09 Line \u7dda\u5206 Circle \u5186 Ellipse \u6955\u5186 Rect \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f int32 \uff09 RectF \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f double \uff09 Triangle \u4e09\u89d2\u5f62 Quad \u51f8\u56db\u89d2\u5f62 RoundRect \u89d2\u4e38\u9577\u65b9\u5f62 Polygon \u591a\u89d2\u5f62\uff08\u7a74\u3082\u6301\u3066\u308b\uff09 MultiPolygon \u591a\u89d2\u5f62\u306e\u96c6\u5408\uff08 Array<Polygon> \u306e\u7f6e\u304d\u63db\u3048\uff09 Bezier2 \u4e8c\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 \u4e09\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda LineString \u9023\u7d9a\u3059\u308b\u7dda\u5206\uff08 Array<Vec2> \u306e\u7f6e\u304d\u63db\u3048\uff09 Spline2D \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda Circular \u5186\u5ea7\u6a19 OffsetCircular \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19 Shape2D \u591a\u89d2\u5f62\u4f5c\u6210\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 3.1 \u5186\u3092\u63cf\u304f \u00b6 Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3044\u307e\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw() \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle { 400 , 300 , 20 }. draw (); } } 3.2 \u5186\u306e\u5927\u304d\u3055\u3092\u5909\u3048\u308b \u00b6 Circle{} \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { 400 , 300 , 100 }. draw (); } } 3.3 X \u5ea7\u6a19\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u5186\u3092\u63cf\u304f \u00b6 \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle{} \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (\u30de\u30a6\u30b9\u306e X \u5ea7\u6a19, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { Cursor :: Pos (). x , 300 , 100 }. draw (); } } \u524d\u7ae0\u3067\u3001 Print \u3092\u4f7f\u3063\u3066\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u306f\u4f8b\u5916\u7684\u306a\u30eb\u30fc\u30eb\u3067\u3059\u3002 Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u306f System::Update() \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 3.4 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u5186\u3092\u63cf\u304f \u00b6 Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3001\u3082\u3057\u304f\u306f Vec2 \u578b\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 int32 x = 10 , y = 20 ; Circle { x , y , 10 }; Point p1 { 10 , 20 }; Circle { p1 , 10 }; Vec2 p2 { 10.0 , 20.0 }; Circle { p2 , 10 }; Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u304b\u3089\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u304b\u3089\u69cb\u7bc9\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u5186\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3055\u305b\u307e\u3059\u3002 C++ \u306e\u6587\u6cd5\u5fa9\u7fd2\u300c\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u300d \u5f15\u6570\u306e\u578b\u3084\u500b\u6570\u304c\u7570\u306a\u308b\u95a2\u6570\u3092\u540c\u3058\u540d\u524d\u3067\u5b9a\u7fa9\u3067\u304d\u308b\u3068\u3044\u3046 C++ \u306e\u8a00\u8a9e\u6a5f\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19\u304c\u30de\u30a6\u30b9\u306e\u5ea7\u6a19, \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { Cursor :: Pos (), 100 }. draw (); } } \u6b21\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u524d\u8ff0\u306e\u30b3\u30fc\u30c9\u306e\u307b\u3046\u304c\u4fbf\u5229\u3067\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (\u30de\u30a6\u30b9\u306e X \u5ea7\u6a19, \u30de\u30a6\u30b9\u306e Y \u5ea7\u6a19), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { Cursor :: Pos (). x , Cursor :: Pos (). y , 100 }. draw (); } } 3.5 \u8272\u3092\u4ed8\u3051\u308b \u00b6 \u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f .draw() \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e 4 \u3064\u3092\u3088\u304f\u4f7f\u3044\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF{ r, g, b, a } 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color{ r, g, b, a } 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV{ h, s, v, a } \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f\u3001 Palette::Orange , Palette::Yellow \u306e\u3088\u3046\u306b\u3001RGB \u5024\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u4f7f\u3048\u307e\u3059\u3002 ColorF \u306f\u3001Siv3D \u3067\u6700\u3082\u4f7f\u308f\u308c\u308b\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f\u3001 Image \u578b\u306e\u8981\u7d20\u3067\u4f7f\u308f\u308c\u307e\u3059\u3002Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u3001\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059 \u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059 \u5f69\u5ea6 (saturation) , \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059 \u660e\u5ea6 (value) \u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF \u3068 HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u306e\u900f\u904e\u304c\u5897\u3057\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f55\u5ea6\u3082\u767b\u5834\u3059\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF{ 0.5 } \u306f ColorF{ 0.5, 0.5, 0.5, 1.0 } \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF{ r, g, b } ColorF{ r, g, b, 1.0 } ColorF{ rgb, a } ColorF{ rgb, rgb, rgb, a } ColorF{ rgb } ColorF{ rgb, rgb, rgb, 1.0 } Color{ r, g, b } Color{ r, g, b, 255 } Color{ rgb, a } Color{ rgb, rgb, rgb, a } Color{ rgb } Color{ rgb, rgb, rgb, 255 } HSV{ h, s, v } HSV{ h, s, v, 1.0 } HSV{ h, a } HSV{ h, 1.0, 1.0, a } HSV{ h } HSV{ h, 1.0, 1.0, 1.0 } \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw() \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8272\u306f Palette::White ( ColorF{ 1.0, 1.0, 1.0, 1.0 } ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle { 100 , 200 , 40 }. draw (); Circle { 200 , 200 , 40 }. draw ( Palette :: Green ); Circle { 300 , 200 , 40 }. draw ( Palette :: Skyblue ); Circle { 400 , 200 , 40 }. draw ( ColorF { 1.0 , 0.8 , 0.0 }); Circle { 500 , 200 , 40 }. draw ( Color { 255 , 127 , 127 }); Circle { 600 , 200 , 40 }. draw ( HSV { 160.0 , 1.0 , 1.0 }); Circle { 700 , 200 , 40 }. draw ( HSV { 160.0 , 0.75 , 1.0 }); // \u534a\u900f\u660e\u306e\u5186 Circle { Cursor :: Pos (), 80 }. draw ( ColorF { 0.0 , 0.5 , 1.0 , 0.8 }); } } 3.6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b \u00b6 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene::SetBackground() \u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u305d\u308c\u4ee5\u964d\u306e System::Update() \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u3001\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092 ColorF{ 0.3, 0.6, 1.0 } \u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF { 0.3 , 0.6 , 1.0 }); while ( System :: Update ()) { Circle { Cursor :: Pos (), 80 }. draw (); } } 3.7 \u80cc\u666f\u306e\u8272\u3092\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u5909\u3048\u308b \u00b6 Scene::Time() \u306f \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u7528\u3044\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u8272\u76f8 hue = (\u7d4c\u904e\u6642\u9593 (\u79d2) * 60) const double hue = ( Scene :: Time () * 60 ); Scene :: SetBackground ( HSV { hue , 0.6 , 1.0 }); } } 3.8 \u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect { 20 , 40 , 400 , 100 }. draw (); // \u5ea7\u6a19 (100, 200) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect { 100 , 200 , 80 }. draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect { Arg :: center ( 400 , 300 ), 80 , 40 }. draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect { Arg :: center ( Cursor :: Pos ()), 100 }. draw ( ColorF { 1.0 , 0.0 , 0.0 , 0.5 }); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF { 200.4 , 450.3 , 390.5 , 122.5 }. draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw() \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3068\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u3092\u6bd4\u3079\u308b\u3068\u3001\u5f8c\u8005\u306e\u307b\u3046\u304c\u4e0a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002 3.9 \u67a0\u3092\u63cf\u304f \u00b6 \u56f3\u5f62\u306e\u67a0\u3060\u3051\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u3001 .draw() \u306e\u4ee3\u308f\u308a\u306b .drawFrame() \u3092\u4f7f\u3044\u307e\u3059\u3002 .drawFrame() \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw() \u3084 .drawFrame() \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect.draw().drawFrame() \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect { 100 , 100 , 100 , 30 } . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect { 220 , 100 , 100 , 30 } . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect { 200 , 200 , 400 , 100 } . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle { Cursor :: Pos (), 40 } . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } 3.10 \u7dda\u5206\u3092\u63cf\u304f \u00b6 \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 .draw() \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 \u30b9\u30bf\u30a4\u30eb \u610f\u5473 LineStyle::SquareCap \u4e21\u7aef\u304c\u56db\u89d2\u3044\u7dda\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 LineStyle::RoundCap \u4e21\u7aef\u304c\u4e38\u3044\u7dda LineStyle::Uncapped \u4e21\u7aef\u304c\u306f\u307f\u51fa\u306a\u3044\u7dda LineStyle::SquareDot \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda LineStyle::RoundDot \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line { 100 , 100 , 400 , 150 }. draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line { 400 , 300 , Cursor :: Pos () }. draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line { 100 , 400 , 700 , 400 }. draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line { 100 , 450 , 700 , 450 }. draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line { 100 , 500 , 700 , 500 }. draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line { 100 , 550 , 700 , 550 }. draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } } 3.11 \u4e09\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 Triangle \u306f\u6b21\u306e\u3088\u3046\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b \u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2\u03c0 = 360\u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 Math::ToRadians() \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle { 100 , 100 , 400 , 300 , 100 , 300 }. draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle { 300 , 100 , 80 }. draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle { 400 , 100 , 80 , 15 _deg }. draw ( Palette :: Seagreen ); // \u5ea7\u6a19 (500, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle { 500 , 100 , 80 , 30 _deg }. draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle { Cursor :: Pos (), Vec2 { 700 , 500 }, Vec2 { 100 , 500 } }. draw ( Palette :: Skyblue ); } } 3.12 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c X \u8ef8\u3001Y \u8ef8\u306b\u5e73\u884c\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u306e\u3061\u306b\u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad { Vec2 { 100 , 100 }, Vec2 { 150 , 100 }, Vec2 { 300 , 300 }, Vec2 { 100 , 300 } }. draw (); Quad { Vec2 { 300 , 400 }, Vec2 { 500 , 100 }, Vec2 { 600 , 200 }, Vec2 { 500 , 500 } }. draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated() \u307e\u305f\u306f .rotatedAt() \u3092\u4f7f\u3046\u3068\u3001\u9577\u65b9\u5f62\u3092\u56de\u8ee2\u3055\u305b\u3066 Quad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw() \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002 Rect::pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF::pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect { 150 , 200 , 400 , 100 }; while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX() \u307e\u305f\u306f .shearedY() \u3092\u4f7f\u3046\u3068\u3001\u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u307e\u305f\u306f Y \u8ef8\u306b\u6cbf\u3063\u3066\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect { 100 , 50 , 200 , 100 }. drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect { 400 , 150 , 300 , 200 }. drawFrame ( 1 , 0 ) . shearedY ( -50 ). draw ( Palette :: Orange ); } } 3.13 \u6955\u5186\u3092\u63cf\u304f \u00b6 \u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse { 300 , 200 , 200 , 100 }. draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse { 600 , 400 , 50 , 150 }. draw ( Palette :: Orange ); } } 3.14 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect { 100 , 350 , 500 , 200 }; while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect { 100 , 100 , 200 , 100 , 10 }. draw (); // RectF(Arg::center(400, 300), 200, 80) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect { Arg :: center ( 400 , 300 ), 200 , 80 , 5 }. draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } } 3.15 \u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u8907\u96d1\u306a\u591a\u89d2\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw() , .drawFrame() \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r, double width, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r, double width, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 uint32 n, double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Star \u4e94\u8292\u661f double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Nstar \u661f uint32 n, double rOuter, double rInner, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Arrow \u77e2\u5370 const Vec2& from, const Vec2& to, double width, const Vec2& headSize Shape2D::Arrow \u77e2\u5370 const Line& line, double width, const Vec2& headSize Shape2D::DoubleHeadedArrow \u4e21\u65b9\u5411\u77e2\u5370 const Vec2& from, const Vec2& to, double width, const Vec2& headSize Shape2D::DoubleHeadedArrow \u4e21\u65b9\u5411\u77e2\u5370 const Line& line, double width, const Vec2& headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w, double h, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF& rect, const Vec2& target, double pointingRootRatio = 0.5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2& base, double w, double h, uint32 steps, bool upStairs = true Shape2D::Heart \u30cf\u30fc\u30c8\u5f62 double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Squircle \u56db\u89d2\u3068\u5186\u306e\u4e2d\u9593\u5f62 double r, const Vec2& center, uint32 quality # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u304a\u3088\u3073\u30b7\u30fc\u30f3\u3092 1000x600 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1000 , 600 ); while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 { 100 , 100 }). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 { 300 , 100 }). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 { 500 , 100 }). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 { 700 , 100 }). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 { 900 , 100 }, 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 { 100 , 300 }). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 { 300 , 300 }). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 { 500 , 300 }). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Line { 640 , 340 , 760 , 260 }, 20 , Vec2 { 40 , 30 }). draw ( Palette :: Skyblue ); Shape2D :: DoubleHeadedArrow ( Line { 840 , 340 , 960 , 260 }, 20 , Vec2 { 40 , 30 }). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 { 100 , 500 }). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF { 220 , 420 , 160 , 120 }, Vec2 { 220 , 580 }). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 { 560 , 560 }, 120 , 120 , 4 ). draw ( Palette :: Skyblue ); Shape2D :: Heart ( 80 , Vec2 { 700 , 500 }). draw ( Palette :: Skyblue ); // \u7b2c 3 \u5f15\u6570\u306f\u89d2\u306e\u4e38\u306e\u5206\u5272\u54c1\u8cea Shape2D :: Squircle ( 60 , Vec2 { 900 , 500 }, 64 ). draw ( Palette :: Skyblue ); } } 3.16 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 { 400 , 100 }, Vec2 { 600 , 300 }, Vec2 { 500 , 500 }, Vec2 { 400 , 400 }, Vec2 { 300 , 500 }, Vec2 { 200 , 300 } }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } 3.17 \u7a74\u306e\u958b\u3044\u305f\u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array<Vec2> \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array<Array<Vec2>> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 { 400 , 100 }, Vec2 { 600 , 300 }, Vec2 { 500 , 500 }, Vec2 { 400 , 400 }, Vec2 { 300 , 500 }, Vec2 { 200 , 300 } }, { { Vec2 { 450 , 250 }, Vec2 { 350 , 250 }, Vec2 { 350 , 350 }, Vec2 { 450 , 350 } } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001 Shape2D \u3084 Buffer2D \u30af\u30e9\u30b9\u306e\u4f4e\u30ec\u30a4\u30e4\u64cd\u4f5c\u3092\u4f7f\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Shape2D \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001 Buffer2D \u3067\u306f\u3055\u3089\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e UV \u5ea7\u6a19\u3082\u5fc5\u8981\u306b\u306a\u308b\u306a\u3069\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u672c\u7ae0\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u3002 3.18 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f \u00b6 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 .drawClosed() \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 { 100 , 60 }, Vec2 { 400 , 140 }, Vec2 { 100 , 220 }, Vec2 { 400 , 300 }, Vec2 { 100 , 380 }, Vec2 { 400 , 460 }, Vec2 { 100 , 540 } }; const LineString lineB { Vec2 { 500 , 100 }, Vec2 { 700 , 200 }, Vec2 { 600 , 500 }, }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } } 3.19 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f \u00b6 \u6307\u5b9a\u3057\u305f\u901a\u904e\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f\u306b\u306f\u3001 Spline2D \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 Spline2D \u306f Vec2 \u306e\u914d\u5217\u3084 LineString \u304b\u3089\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c 2 \u5f15\u6570\u306b Close::Ring \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7d42\u70b9\u3068\u59cb\u70b9\u304c\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001 .draw() \u306b\u306f\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Spline2D splineA { { Vec2 { 100 , 60 }, Vec2 { 400 , 140 }, Vec2 { 100 , 220 }, Vec2 { 400 , 300 }, Vec2 { 100 , 380 }, Vec2 { 400 , 460 }, Vec2 { 100 , 540 } } }; // CloseRing::Yes -> \u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076 const Spline2D splineB { { Vec2 { 500 , 100 }, Vec2 { 700 , 200 }, Vec2 { 600 , 500 }, }, CloseRing :: Yes }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f splineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f splineB . draw ( 4 , Palette :: Orange ); } } 3.20 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f \u00b6 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001 .draw() \u306b\u306f\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 { Vec2 { 100 , 400 }, Vec2 { 100 , 250 }, Vec2 { 300 , 100 } } . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 { Vec2 { 300 , 400 }, Vec2 { 400 , 400 }, Vec2 { 400 , 100 }, Vec2 { 500 , 100 }} . draw ( 4 , Palette :: Orange ); } } 3.21 \u77e2\u5370\u3092\u63cf\u304f \u00b6 Line \u306b\u306f\u5358\u65b9\u5411\u306e\u77e2\u5370\u3092\u63cf\u304f .drawArrow() \u3068\u3001\u4e21\u65b9\u5411\u306e\u77e2\u5370\u3092\u63cf\u304f .drawDoubleHeadedArrow() \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\u3044\u305a\u308c\u3082\u7b2c 1 \u5f15\u6570\u306b\u306f\u7dda\u306e\u5e45\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u65b9\u5411\u77e2\u5370\u306f\u3001 Line \u306e\u59cb\u70b9\u304b\u3089\u7d42\u70b9\u65b9\u5411\u3092\u5411\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u5358\u65b9\u5411\u77e2\u5370\u3092\u63cf\u304f Line { 50 , 200 , 200 , 250 } . drawArrow ( 3 , Vec2 { 20 , 20 }, Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u5358\u65b9\u5411\u77e2\u5370\u3092\u63cf\u304f Line { 350 , 450 , 450 , 100 } . drawArrow ( 10 , Vec2 { 40 , 80 }, Palette :: Orange ); // \u7dda\u306e\u5e45 8px, \u4e09\u89d2\u306e\u5e45 30px, \u9ad8\u3055 30px \u306e\u4e21\u65b9\u5411\u77e2\u5370\u3092\u63cf\u304f Line { 600 , 100 , 700 , 400 } . drawDoubleHeadedArrow ( 8 , Vec2 { 30 , 30 }, Palette :: Limegreen ); } } 3.22 \u6247\u5f62\u3092\u63cf\u304f \u00b6 \u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u306e\u3082\u3068\u306b\u306a\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie() \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie() \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie().drawPie() \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u305f\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u958b\u59cb\u89d2\u5ea6 270\u00b0 \u304b\u3089 30\u00b0 \u306e\u5927\u304d\u3055\u306e\u6247\u5f62\u3092\u63cf\u304f Circle { 300 , 300 , 200 } . drawPie ( 270 _deg , 30 _deg ); // \u958b\u59cb\u89d2\u5ea6 0\u00b0 \u304b\u3089 120\u00b0 \u306e\u5927\u304d\u3055\u306e\u6247\u5f62\u3068 // \u958b\u59cb\u89d2\u5ea6 120\u00b0 \u304b\u3089 70\u00b0 \u306e\u5927\u304d\u3055\u306e\u6247\u5f62\u3092\u63cf\u304f Circle { 500 , 300 , 200 } . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } } 3.23 \u5186\u5f27\u3092\u63cf\u304f \u00b6 \u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u306e\u3082\u3068\u306b\u306a\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc() \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u958b\u59cb\u89d2\u5ea6 270\u00b0 \u304b\u3089 30\u00b0 \u306e\u5927\u304d\u3055\u306e\u5186\u5f27\u3092\u63cf\u304f Circle { 300 , 300 , 200 } . drawArc ( 270 _deg , 30 _deg , 40 , 0 ); // \u958b\u59cb\u89d2\u5ea6 0\u00b0 \u304b\u3089 120\u00b0 \u306e\u5927\u304d\u3055\u306e\u5186\u5f27\u3068 // \u958b\u59cb\u89d2\u5ea6 120\u00b0 \u304b\u3089 70\u00b0 \u306e\u5927\u304d\u3055\u306e\u5186\u5f27\u3092\u63cf\u304f Circle { 500 , 300 , 200 } . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } } 3.24 \u56f3\u5f62\u306e\u64cd\u4f5c \u00b6 \u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u307b\u3068\u3093\u3069\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle { 100 , 100 , 60 }; constexpr Rect rect { 400 , 300 , 200 }; while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( -10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , -20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled() \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated() , .rotatedAt() \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 { 0 , 0 }); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF { 0.6 }); star . movedBy ( 200 , 200 ). draw ( ColorF { 0.8 }); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF { 1.0 }); star . rotated ( -30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF { 0.6 }); star . movedBy ( 600 , 400 ). draw ( ColorF { 0.8 }); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF { 1.0 }); } } 3.25 \u5186 / \u9577\u65b9\u5f62 / \u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u56f3\u5f62\u3067\u96a0\u308c\u3066\u898b\u3048\u306a\u3044\u90e8\u5206\u3082\u5857\u308a\u3064\u3076\u3055\u308c\u3066\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u3092\u63cf\u3044\u305f\u3042\u3068\u306b\u4e0a\u304b\u3089\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); while ( System :: Update ()) { Rect { 100 , 50 , 150 , 200 } . drawShadow ( Vec2 { 2 , 2 }, 8 , 1 ) . draw (); Rect { 300 , 50 , 150 , 200 } . drawShadow ( Vec2 { 4 , 4 }, 16 , 2 ) . draw (); Rect { 500 , 50 , 150 , 200 } . drawShadow ( Vec2 { 6 , 6 }, 24 , 3 ) . draw (); Circle { 100 , 400 , 50 } . drawShadow ( Vec2 { 0 , 3 }, 8 , 2 ) . draw (); Circle { 300 , 400 , 50 } . drawShadow ( Vec2 { 3 , 0 }, 8 , 2 ) . draw (); Circle { 500 , 400 , 50 } . drawShadow ( Vec2 { 0 , -3 }, 8 , 2 ) . draw (); Circle { 700 , 400 , 50 } . drawShadow ( Vec2 { -3 , 0 }, 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30b5\u30f3\u30d7\u30eb/\u56f3\u5f62\u3084\u7d75\u6587\u5b57\u306b\u5f71\u3092\u4ed8\u3051\u308b \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 3.26 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 \u00b6 Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u59cb\u70b9\u304b\u3089\u7d42\u70b9\u306b\u304b\u3051\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Line { 100 , 100 , 500 , 150 } . draw ( 6 , Palette :: Yellow , Palette :: Red ); // 3 \u3064\u306e\u9802\u70b9\u306e\u8272\u3067\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Triangle { 200 , 200 , 100 } . draw ( HSV { 0 }, HSV { 120 }, HSV { 240 }); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect { 400 , 200 , 200 , 100 } . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect { 200 , 400 , 400 , 100 } . draw ( Arg :: top = ColorF { 1.0 , 1.0 }, Arg :: bottom = ColorF { 1.0 , 0.0 }); } }","title":"3. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#3-\u56f3\u5f62\u3092\u63cf\u304f","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002 Siv3D \u3067\u306f\u30012D \u56f3\u5f62\u306b\u95a2\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 2D \u56f3\u5f62\u306b\u95a2\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9 \u578b\u540d \u8aac\u660e Point 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f int32 \uff09 Vec2 2 \u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\uff08\u8981\u7d20\u306f double \uff09 Size \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f int32 \uff09\uff08 Point \u306e\u5225\u540d\uff09 SizeF \u6a2a\u3001\u7e26\u306e\u5927\u304d\u3055\uff08\u8981\u7d20\u306f double \uff09\uff08 Vec2 \u306e\u5225\u540d\uff09 Line \u7dda\u5206 Circle \u5186 Ellipse \u6955\u5186 Rect \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f int32 \uff09 RectF \u9577\u65b9\u5f62\uff08\u8981\u7d20\u306f double \uff09 Triangle \u4e09\u89d2\u5f62 Quad \u51f8\u56db\u89d2\u5f62 RoundRect \u89d2\u4e38\u9577\u65b9\u5f62 Polygon \u591a\u89d2\u5f62\uff08\u7a74\u3082\u6301\u3066\u308b\uff09 MultiPolygon \u591a\u89d2\u5f62\u306e\u96c6\u5408\uff08 Array<Polygon> \u306e\u7f6e\u304d\u63db\u3048\uff09 Bezier2 \u4e8c\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 \u4e09\u6b21\u30d9\u30b8\u30a7\u66f2\u7dda LineString \u9023\u7d9a\u3059\u308b\u7dda\u5206\uff08 Array<Vec2> \u306e\u7f6e\u304d\u63db\u3048\uff09 Spline2D \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda Circular \u5186\u5ea7\u6a19 OffsetCircular \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u5186\u5ea7\u6a19 Shape2D \u591a\u89d2\u5f62\u4f5c\u6210\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3","title":"3. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#31-\u5186\u3092\u63cf\u304f","text":"Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3044\u307e\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw() \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle { 400 , 300 , 20 }. draw (); } }","title":"3.1 \u5186\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#32-\u5186\u306e\u5927\u304d\u3055\u3092\u5909\u3048\u308b","text":"Circle{} \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { 400 , 300 , 100 }. draw (); } }","title":"3.2 \u5186\u306e\u5927\u304d\u3055\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/shape/#33-x-\u5ea7\u6a19\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u5186\u3092\u63cf\u304f","text":"\u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle{} \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (\u30de\u30a6\u30b9\u306e X \u5ea7\u6a19, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { Cursor :: Pos (). x , 300 , 100 }. draw (); } } \u524d\u7ae0\u3067\u3001 Print \u3092\u4f7f\u3063\u3066\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u306f\u4f8b\u5916\u7684\u306a\u30eb\u30fc\u30eb\u3067\u3059\u3002 Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u306f System::Update() \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002","title":"3.3 X \u5ea7\u6a19\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u5186\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#34-\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u5186\u3092\u63cf\u304f","text":"Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3001\u3082\u3057\u304f\u306f Vec2 \u578b\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 int32 x = 10 , y = 20 ; Circle { x , y , 10 }; Point p1 { 10 , 20 }; Circle { p1 , 10 }; Vec2 p2 { 10.0 , 20.0 }; Circle { p2 , 10 }; Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u304b\u3089\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u304b\u3089\u69cb\u7bc9\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u5186\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3055\u305b\u307e\u3059\u3002 C++ \u306e\u6587\u6cd5\u5fa9\u7fd2\u300c\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u300d \u5f15\u6570\u306e\u578b\u3084\u500b\u6570\u304c\u7570\u306a\u308b\u95a2\u6570\u3092\u540c\u3058\u540d\u524d\u3067\u5b9a\u7fa9\u3067\u304d\u308b\u3068\u3044\u3046 C++ \u306e\u8a00\u8a9e\u6a5f\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19\u304c\u30de\u30a6\u30b9\u306e\u5ea7\u6a19, \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { Cursor :: Pos (), 100 }. draw (); } } \u6b21\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u524d\u8ff0\u306e\u30b3\u30fc\u30c9\u306e\u307b\u3046\u304c\u4fbf\u5229\u3067\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (\u30de\u30a6\u30b9\u306e X \u5ea7\u6a19, \u30de\u30a6\u30b9\u306e Y \u5ea7\u6a19), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle { Cursor :: Pos (). x , Cursor :: Pos (). y , 100 }. draw (); } }","title":"3.4 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u5186\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#35-\u8272\u3092\u4ed8\u3051\u308b","text":"\u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f .draw() \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e 4 \u3064\u3092\u3088\u304f\u4f7f\u3044\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF{ r, g, b, a } 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color{ r, g, b, a } 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV{ h, s, v, a } \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f\u3001 Palette::Orange , Palette::Yellow \u306e\u3088\u3046\u306b\u3001RGB \u5024\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u4f7f\u3048\u307e\u3059\u3002 ColorF \u306f\u3001Siv3D \u3067\u6700\u3082\u4f7f\u308f\u308c\u308b\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f\u3001 Image \u578b\u306e\u8981\u7d20\u3067\u4f7f\u308f\u308c\u307e\u3059\u3002Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u3001\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059 \u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059 \u5f69\u5ea6 (saturation) , \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059 \u660e\u5ea6 (value) \u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF \u3068 HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u306e\u900f\u904e\u304c\u5897\u3057\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f55\u5ea6\u3082\u767b\u5834\u3059\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF{ 0.5 } \u306f ColorF{ 0.5, 0.5, 0.5, 1.0 } \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF{ r, g, b } ColorF{ r, g, b, 1.0 } ColorF{ rgb, a } ColorF{ rgb, rgb, rgb, a } ColorF{ rgb } ColorF{ rgb, rgb, rgb, 1.0 } Color{ r, g, b } Color{ r, g, b, 255 } Color{ rgb, a } Color{ rgb, rgb, rgb, a } Color{ rgb } Color{ rgb, rgb, rgb, 255 } HSV{ h, s, v } HSV{ h, s, v, 1.0 } HSV{ h, a } HSV{ h, 1.0, 1.0, a } HSV{ h } HSV{ h, 1.0, 1.0, 1.0 } \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw() \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8272\u306f Palette::White ( ColorF{ 1.0, 1.0, 1.0, 1.0 } ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle { 100 , 200 , 40 }. draw (); Circle { 200 , 200 , 40 }. draw ( Palette :: Green ); Circle { 300 , 200 , 40 }. draw ( Palette :: Skyblue ); Circle { 400 , 200 , 40 }. draw ( ColorF { 1.0 , 0.8 , 0.0 }); Circle { 500 , 200 , 40 }. draw ( Color { 255 , 127 , 127 }); Circle { 600 , 200 , 40 }. draw ( HSV { 160.0 , 1.0 , 1.0 }); Circle { 700 , 200 , 40 }. draw ( HSV { 160.0 , 0.75 , 1.0 }); // \u534a\u900f\u660e\u306e\u5186 Circle { Cursor :: Pos (), 80 }. draw ( ColorF { 0.0 , 0.5 , 1.0 , 0.8 }); } }","title":"3.5 \u8272\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/learn/shape/#36-\u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b","text":"\u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene::SetBackground() \u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u305d\u308c\u4ee5\u964d\u306e System::Update() \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u3001\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092 ColorF{ 0.3, 0.6, 1.0 } \u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF { 0.3 , 0.6 , 1.0 }); while ( System :: Update ()) { Circle { Cursor :: Pos (), 80 }. draw (); } }","title":"3.6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b"},{"location":"ja-jp/learn/shape/#37-\u80cc\u666f\u306e\u8272\u3092\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u5909\u3048\u308b","text":"Scene::Time() \u306f \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u7528\u3044\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u8272\u76f8 hue = (\u7d4c\u904e\u6642\u9593 (\u79d2) * 60) const double hue = ( Scene :: Time () * 60 ); Scene :: SetBackground ( HSV { hue , 0.6 , 1.0 }); } }","title":"3.7 \u80cc\u666f\u306e\u8272\u3092\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u5909\u3048\u308b"},{"location":"ja-jp/learn/shape/#38-\u9577\u65b9\u5f62\u3092\u63cf\u304f","text":"\u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect { 20 , 40 , 400 , 100 }. draw (); // \u5ea7\u6a19 (100, 200) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect { 100 , 200 , 80 }. draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect { Arg :: center ( 400 , 300 ), 80 , 40 }. draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect { Arg :: center ( Cursor :: Pos ()), 100 }. draw ( ColorF { 1.0 , 0.0 , 0.0 , 0.5 }); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF { 200.4 , 450.3 , 390.5 , 122.5 }. draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw() \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3068\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u3092\u6bd4\u3079\u308b\u3068\u3001\u5f8c\u8005\u306e\u307b\u3046\u304c\u4e0a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"3.8 \u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#39-\u67a0\u3092\u63cf\u304f","text":"\u56f3\u5f62\u306e\u67a0\u3060\u3051\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u3001 .draw() \u306e\u4ee3\u308f\u308a\u306b .drawFrame() \u3092\u4f7f\u3044\u307e\u3059\u3002 .drawFrame() \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw() \u3084 .drawFrame() \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect.draw().drawFrame() \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect { 100 , 100 , 100 , 30 } . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect { 220 , 100 , 100 , 30 } . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect { 200 , 200 , 400 , 100 } . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle { Cursor :: Pos (), 40 } . drawFrame ( 1 , 1 , Palette :: Seagreen ); } }","title":"3.9 \u67a0\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#310-\u7dda\u5206\u3092\u63cf\u304f","text":"\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 .draw() \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 \u30b9\u30bf\u30a4\u30eb \u610f\u5473 LineStyle::SquareCap \u4e21\u7aef\u304c\u56db\u89d2\u3044\u7dda\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 LineStyle::RoundCap \u4e21\u7aef\u304c\u4e38\u3044\u7dda LineStyle::Uncapped \u4e21\u7aef\u304c\u306f\u307f\u51fa\u306a\u3044\u7dda LineStyle::SquareDot \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda LineStyle::RoundDot \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line { 100 , 100 , 400 , 150 }. draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line { 400 , 300 , Cursor :: Pos () }. draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line { 100 , 400 , 700 , 400 }. draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line { 100 , 450 , 700 , 450 }. draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line { 100 , 500 , 700 , 500 }. draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line { 100 , 550 , 700 , 550 }. draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } }","title":"3.10 \u7dda\u5206\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#311-\u4e09\u89d2\u5f62\u3092\u63cf\u304f","text":"\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 Triangle \u306f\u6b21\u306e\u3088\u3046\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b \u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2\u03c0 = 360\u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 Math::ToRadians() \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle { 100 , 100 , 400 , 300 , 100 , 300 }. draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle { 300 , 100 , 80 }. draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle { 400 , 100 , 80 , 15 _deg }. draw ( Palette :: Seagreen ); // \u5ea7\u6a19 (500, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle { 500 , 100 , 80 , 30 _deg }. draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle { Cursor :: Pos (), Vec2 { 700 , 500 }, Vec2 { 100 , 500 } }. draw ( Palette :: Skyblue ); } }","title":"3.11 \u4e09\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#312-\u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f","text":"Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c X \u8ef8\u3001Y \u8ef8\u306b\u5e73\u884c\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u306e\u3061\u306b\u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad { Vec2 { 100 , 100 }, Vec2 { 150 , 100 }, Vec2 { 300 , 300 }, Vec2 { 100 , 300 } }. draw (); Quad { Vec2 { 300 , 400 }, Vec2 { 500 , 100 }, Vec2 { 600 , 200 }, Vec2 { 500 , 500 } }. draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated() \u307e\u305f\u306f .rotatedAt() \u3092\u4f7f\u3046\u3068\u3001\u9577\u65b9\u5f62\u3092\u56de\u8ee2\u3055\u305b\u3066 Quad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw() \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002 Rect::pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF::pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect { 150 , 200 , 400 , 100 }; while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX() \u307e\u305f\u306f .shearedY() \u3092\u4f7f\u3046\u3068\u3001\u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u307e\u305f\u306f Y \u8ef8\u306b\u6cbf\u3063\u3066\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect { 100 , 50 , 200 , 100 }. drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect { 400 , 150 , 300 , 200 }. drawFrame ( 1 , 0 ) . shearedY ( -50 ). draw ( Palette :: Orange ); } }","title":"3.12 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#313-\u6955\u5186\u3092\u63cf\u304f","text":"\u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse { 300 , 200 , 200 , 100 }. draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse { 600 , 400 , 50 , 150 }. draw ( Palette :: Orange ); } }","title":"3.13 \u6955\u5186\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#314-\u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f","text":"\u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect { 100 , 350 , 500 , 200 }; while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect { 100 , 100 , 200 , 100 , 10 }. draw (); // RectF(Arg::center(400, 300), 200, 80) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect { Arg :: center ( 400 , 300 ), 200 , 80 , 5 }. draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } }","title":"3.14 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#315-\u591a\u89d2\u5f62\u3092\u63cf\u304f","text":"\u8907\u96d1\u306a\u591a\u89d2\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw() , .drawFrame() \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r, double width, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r, double width, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 uint32 n, double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Star \u4e94\u8292\u661f double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Nstar \u661f uint32 n, double rOuter, double rInner, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Arrow \u77e2\u5370 const Vec2& from, const Vec2& to, double width, const Vec2& headSize Shape2D::Arrow \u77e2\u5370 const Line& line, double width, const Vec2& headSize Shape2D::DoubleHeadedArrow \u4e21\u65b9\u5411\u77e2\u5370 const Vec2& from, const Vec2& to, double width, const Vec2& headSize Shape2D::DoubleHeadedArrow \u4e21\u65b9\u5411\u77e2\u5370 const Line& line, double width, const Vec2& headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w, double h, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF& rect, const Vec2& target, double pointingRootRatio = 0.5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2& base, double w, double h, uint32 steps, bool upStairs = true Shape2D::Heart \u30cf\u30fc\u30c8\u5f62 double r, const Vec2& center = Vec2{ 0, 0 }, double angle = 0.0 Shape2D::Squircle \u56db\u89d2\u3068\u5186\u306e\u4e2d\u9593\u5f62 double r, const Vec2& center, uint32 quality # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u304a\u3088\u3073\u30b7\u30fc\u30f3\u3092 1000x600 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1000 , 600 ); while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 { 100 , 100 }). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 { 300 , 100 }). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 { 500 , 100 }). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 { 700 , 100 }). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 { 900 , 100 }, 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 { 100 , 300 }). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 { 300 , 300 }). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 { 500 , 300 }). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Line { 640 , 340 , 760 , 260 }, 20 , Vec2 { 40 , 30 }). draw ( Palette :: Skyblue ); Shape2D :: DoubleHeadedArrow ( Line { 840 , 340 , 960 , 260 }, 20 , Vec2 { 40 , 30 }). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 { 100 , 500 }). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF { 220 , 420 , 160 , 120 }, Vec2 { 220 , 580 }). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 { 560 , 560 }, 120 , 120 , 4 ). draw ( Palette :: Skyblue ); Shape2D :: Heart ( 80 , Vec2 { 700 , 500 }). draw ( Palette :: Skyblue ); // \u7b2c 3 \u5f15\u6570\u306f\u89d2\u306e\u4e38\u306e\u5206\u5272\u54c1\u8cea Shape2D :: Squircle ( 60 , Vec2 { 900 , 500 }, 64 ). draw ( Palette :: Skyblue ); } }","title":"3.15 \u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#316-\u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f","text":"Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 { 400 , 100 }, Vec2 { 600 , 300 }, Vec2 { 500 , 500 }, Vec2 { 400 , 400 }, Vec2 { 300 , 500 }, Vec2 { 200 , 300 } }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } }","title":"3.16 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#317-\u7a74\u306e\u958b\u3044\u305f\u591a\u89d2\u5f62\u3092\u63cf\u304f","text":"\u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array<Vec2> \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array<Array<Vec2>> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 { 400 , 100 }, Vec2 { 600 , 300 }, Vec2 { 500 , 500 }, Vec2 { 400 , 400 }, Vec2 { 300 , 500 }, Vec2 { 200 , 300 } }, { { Vec2 { 450 , 250 }, Vec2 { 350 , 250 }, Vec2 { 350 , 350 }, Vec2 { 450 , 350 } } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001 Shape2D \u3084 Buffer2D \u30af\u30e9\u30b9\u306e\u4f4e\u30ec\u30a4\u30e4\u64cd\u4f5c\u3092\u4f7f\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Shape2D \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001 Buffer2D \u3067\u306f\u3055\u3089\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e UV \u5ea7\u6a19\u3082\u5fc5\u8981\u306b\u306a\u308b\u306a\u3069\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u672c\u7ae0\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u3002","title":"3.17 \u7a74\u306e\u958b\u3044\u305f\u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#318-\u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f","text":"\u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 .drawClosed() \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 { 100 , 60 }, Vec2 { 400 , 140 }, Vec2 { 100 , 220 }, Vec2 { 400 , 300 }, Vec2 { 100 , 380 }, Vec2 { 400 , 460 }, Vec2 { 100 , 540 } }; const LineString lineB { Vec2 { 500 , 100 }, Vec2 { 700 , 200 }, Vec2 { 600 , 500 }, }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } }","title":"3.18 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#319-catmull-rom-\u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f","text":"\u6307\u5b9a\u3057\u305f\u901a\u904e\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f\u306b\u306f\u3001 Spline2D \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 Spline2D \u306f Vec2 \u306e\u914d\u5217\u3084 LineString \u304b\u3089\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c 2 \u5f15\u6570\u306b Close::Ring \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7d42\u70b9\u3068\u59cb\u70b9\u304c\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001 .draw() \u306b\u306f\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Spline2D splineA { { Vec2 { 100 , 60 }, Vec2 { 400 , 140 }, Vec2 { 100 , 220 }, Vec2 { 400 , 300 }, Vec2 { 100 , 380 }, Vec2 { 400 , 460 }, Vec2 { 100 , 540 } } }; // CloseRing::Yes -> \u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076 const Spline2D splineB { { Vec2 { 500 , 100 }, Vec2 { 700 , 200 }, Vec2 { 600 , 500 }, }, CloseRing :: Yes }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f splineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f splineB . draw ( 4 , Palette :: Orange ); } }","title":"3.19 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#320-\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f","text":"2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw() \u3057\u307e\u3059\u3002 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001 .draw() \u306b\u306f\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 { Vec2 { 100 , 400 }, Vec2 { 100 , 250 }, Vec2 { 300 , 100 } } . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 { Vec2 { 300 , 400 }, Vec2 { 400 , 400 }, Vec2 { 400 , 100 }, Vec2 { 500 , 100 }} . draw ( 4 , Palette :: Orange ); } }","title":"3.20 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#321-\u77e2\u5370\u3092\u63cf\u304f","text":"Line \u306b\u306f\u5358\u65b9\u5411\u306e\u77e2\u5370\u3092\u63cf\u304f .drawArrow() \u3068\u3001\u4e21\u65b9\u5411\u306e\u77e2\u5370\u3092\u63cf\u304f .drawDoubleHeadedArrow() \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\u3044\u305a\u308c\u3082\u7b2c 1 \u5f15\u6570\u306b\u306f\u7dda\u306e\u5e45\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u65b9\u5411\u77e2\u5370\u306f\u3001 Line \u306e\u59cb\u70b9\u304b\u3089\u7d42\u70b9\u65b9\u5411\u3092\u5411\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u5358\u65b9\u5411\u77e2\u5370\u3092\u63cf\u304f Line { 50 , 200 , 200 , 250 } . drawArrow ( 3 , Vec2 { 20 , 20 }, Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u5358\u65b9\u5411\u77e2\u5370\u3092\u63cf\u304f Line { 350 , 450 , 450 , 100 } . drawArrow ( 10 , Vec2 { 40 , 80 }, Palette :: Orange ); // \u7dda\u306e\u5e45 8px, \u4e09\u89d2\u306e\u5e45 30px, \u9ad8\u3055 30px \u306e\u4e21\u65b9\u5411\u77e2\u5370\u3092\u63cf\u304f Line { 600 , 100 , 700 , 400 } . drawDoubleHeadedArrow ( 8 , Vec2 { 30 , 30 }, Palette :: Limegreen ); } }","title":"3.21 \u77e2\u5370\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#322-\u6247\u5f62\u3092\u63cf\u304f","text":"\u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u306e\u3082\u3068\u306b\u306a\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie() \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie() \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie().drawPie() \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u305f\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u958b\u59cb\u89d2\u5ea6 270\u00b0 \u304b\u3089 30\u00b0 \u306e\u5927\u304d\u3055\u306e\u6247\u5f62\u3092\u63cf\u304f Circle { 300 , 300 , 200 } . drawPie ( 270 _deg , 30 _deg ); // \u958b\u59cb\u89d2\u5ea6 0\u00b0 \u304b\u3089 120\u00b0 \u306e\u5927\u304d\u3055\u306e\u6247\u5f62\u3068 // \u958b\u59cb\u89d2\u5ea6 120\u00b0 \u304b\u3089 70\u00b0 \u306e\u5927\u304d\u3055\u306e\u6247\u5f62\u3092\u63cf\u304f Circle { 500 , 300 , 200 } . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } }","title":"3.22 \u6247\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#323-\u5186\u5f27\u3092\u63cf\u304f","text":"\u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u306e\u3082\u3068\u306b\u306a\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc() \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u958b\u59cb\u89d2\u5ea6 270\u00b0 \u304b\u3089 30\u00b0 \u306e\u5927\u304d\u3055\u306e\u5186\u5f27\u3092\u63cf\u304f Circle { 300 , 300 , 200 } . drawArc ( 270 _deg , 30 _deg , 40 , 0 ); // \u958b\u59cb\u89d2\u5ea6 0\u00b0 \u304b\u3089 120\u00b0 \u306e\u5927\u304d\u3055\u306e\u5186\u5f27\u3068 // \u958b\u59cb\u89d2\u5ea6 120\u00b0 \u304b\u3089 70\u00b0 \u306e\u5927\u304d\u3055\u306e\u5186\u5f27\u3092\u63cf\u304f Circle { 500 , 300 , 200 } . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } }","title":"3.23 \u5186\u5f27\u3092\u63cf\u304f"},{"location":"ja-jp/learn/shape/#324-\u56f3\u5f62\u306e\u64cd\u4f5c","text":"\u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u307b\u3068\u3093\u3069\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle { 100 , 100 , 60 }; constexpr Rect rect { 400 , 300 , 200 }; while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( -10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , -20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled() \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated() , .rotatedAt() \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 { 0 , 0 }); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF { 0.6 }); star . movedBy ( 200 , 200 ). draw ( ColorF { 0.8 }); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF { 1.0 }); star . rotated ( -30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF { 0.6 }); star . movedBy ( 600 , 400 ). draw ( ColorF { 0.8 }); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF { 1.0 }); } }","title":"3.24 \u56f3\u5f62\u306e\u64cd\u4f5c"},{"location":"ja-jp/learn/shape/#325-\u5186--\u9577\u65b9\u5f62--\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71","text":"Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u56f3\u5f62\u3067\u96a0\u308c\u3066\u898b\u3048\u306a\u3044\u90e8\u5206\u3082\u5857\u308a\u3064\u3076\u3055\u308c\u3066\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u3092\u63cf\u3044\u305f\u3042\u3068\u306b\u4e0a\u304b\u3089\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); while ( System :: Update ()) { Rect { 100 , 50 , 150 , 200 } . drawShadow ( Vec2 { 2 , 2 }, 8 , 1 ) . draw (); Rect { 300 , 50 , 150 , 200 } . drawShadow ( Vec2 { 4 , 4 }, 16 , 2 ) . draw (); Rect { 500 , 50 , 150 , 200 } . drawShadow ( Vec2 { 6 , 6 }, 24 , 3 ) . draw (); Circle { 100 , 400 , 50 } . drawShadow ( Vec2 { 0 , 3 }, 8 , 2 ) . draw (); Circle { 300 , 400 , 50 } . drawShadow ( Vec2 { 3 , 0 }, 8 , 2 ) . draw (); Circle { 500 , 400 , 50 } . drawShadow ( Vec2 { 0 , -3 }, 8 , 2 ) . draw (); Circle { 700 , 400 , 50 } . drawShadow ( Vec2 { -3 , 0 }, 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30b5\u30f3\u30d7\u30eb/\u56f3\u5f62\u3084\u7d75\u6587\u5b57\u306b\u5f71\u3092\u4ed8\u3051\u308b \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002","title":"3.25 \u5186 / \u9577\u65b9\u5f62 / \u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71"},{"location":"ja-jp/learn/shape/#326-\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3","text":"Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u59cb\u70b9\u304b\u3089\u7d42\u70b9\u306b\u304b\u3051\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Line { 100 , 100 , 500 , 150 } . draw ( 6 , Palette :: Yellow , Palette :: Red ); // 3 \u3064\u306e\u9802\u70b9\u306e\u8272\u3067\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Triangle { 200 , 200 , 100 } . draw ( HSV { 0 }, HSV { 120 }, HSV { 240 }); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect { 400 , 200 , 200 , 100 } . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect { 200 , 400 , 400 , 100 } . draw ( Arg :: top = ColorF { 1.0 , 1.0 }, Arg :: bottom = ColorF { 1.0 , 0.0 }); } }","title":"3.26 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/learn/texture/","text":"5. \u753b\u50cf\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u30b7\u30fc\u30f3\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw() \u307e\u305f\u306f .drawAt() \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf ( Image ) \u304b\u3089\u4f5c\u6210\u3059\u308b Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3059\u308b\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3059\u308b\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b Texture \u306f\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u89e3\u653e\u3059\u308b\u305f\u3081\u3001\u30ea\u30bd\u30fc\u30b9\u306e\u89e3\u653e\u51e6\u7406\u3092\u660e\u793a\u7684\u306b\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u6700\u521d\u306b\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b U\"\ud83d\udc08\"_emoji \u306e\u3088\u3046\u306b\u7d75\u6587\u5b57\u3092\u6e21\u3057\u307e\u3059\u3002 Texture::drawAt() \u00b6 .drawAt() \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u30b7\u30fc\u30f3\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (200, 200) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 200 , 200 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u30b7\u30fc\u30f3\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u3057\u3066\u63cf\u753b texture . drawAt ( Scene :: Center ()); } } Texture::draw() \u00b6 .draw() \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u30b7\u30fc\u30f3\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (400, 0) \u304b\u3089\u63cf\u753b texture . draw ( 400 , 0 ); // \u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408 (0, 0) \u304b\u3089\u63cf\u753b texture . draw (); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30fc\u30f3\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } } Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7 \u00b6 Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 3,600 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u7d75\u6587\u5b57\u3092\u63a2\u3059\u3068\u304d\u306f emojipedia \u306e Categories \u304b\u3089\u8abf\u3079\u308b\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002 OpenSiv3D v0.6.6 \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Color Emoji (Unicode 14.0 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::scaled() \u00b6 Texture::scaled() \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw() \u307e\u305f\u306f .drawAt() \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; const Texture dog { U \"\ud83d\udc15\" _emoji }; while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } } Texture::resized() \u00b6 Texture::resized() \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; const Texture dog { U \"\ud83d\udc15\" _emoji }; while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } } 5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::rotated() \u307e\u305f\u306f Texture::rotatedAt() \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw() \u307e\u305f\u306f .drawAt() \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002 Texture::rotated() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } } Texture::roatedAt() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002 Vec2{ 0, 0 } \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 { 40 , 20 }, Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } } 5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::flipped() \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture::mirrored() \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3059\u308b\u304b\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } } 5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u30a2\u30a4\u30b3\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 8,000 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 Material Design Icons \u307e\u305f\u306f Font Awesome \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u306b _icon \u3092\u4ed8\u3051\u305f\u5024\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.92 }); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture icon0 { 0xf013 _icon , 40 }; // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture icon1 { 0xf023 _icon , 80 }; // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture icon2 { 0xf00e _icon , 120 }; while ( System :: Update ()) { icon0 . drawAt ( 200 , 300 , ColorF { 0.25 }); icon1 . drawAt ( 400 , 300 , ColorF { 0.25 }); icon2 . drawAt ( 600 , 300 , ColorF { 0.25 }); } } 5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill { U \"example/windmill.png\" }; // Siv3D \u304f\u3093\uff08Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\uff09\u306e\u753b\u50cf const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" }; while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.6.6 \u3067\u306f\u30019 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 SVG svg \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 TIFF tif/tiff \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ed\u30fc\u30c9\u6642\u9593\u304c\u82e5\u5e72\u306e\u5897\u52a0\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u6d88\u8cbb\u3059\u308b\u30e1\u30e2\u30ea\u3082 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u3001\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u304c\u884c\u308f\u308c\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002 \u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u4e00\u65b9\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc::Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc::Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u304c\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u53f3\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306f\u305d\u308c\u304c\u6291\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture unmipped { U \"example/windmill.png\" }; // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture mipped { U \"example/windmill.png\" , TextureDesc :: Mipped }; while ( System :: Update ()) { const double scale = ( 0.02 + Periodic :: Triangle0_1 ( 10 s ) * 0.4 ); unmipped . scaled ( scale ). drawAt ( 300 , 300 ); mipped . scaled ( scale ). drawAt ( 500 , 300 ); } } 5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture::operator() \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Texture textureWindmill { U \"example/windmill.png\" }; const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" }; while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } 5.9 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f .size() \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u308c\u305e\u308c .width() , .height() \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture { U \"example/windmill.png\" }; Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { Rect { 0 , 0 , texture . size () }. draw (); } } 5.10 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF , Circle , Quad , RoundRect , Polygon \u306b\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill { U \"example/windmill.png\" , TextureDesc :: Mipped }; const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" , TextureDesc :: Mipped }; const RoundRect roundRect { 430 , 50 , 100 , 100 , 25 }; const Circle circle { 480 , 240 , 50 }; const Polygon hexagon = Shape2D :: Hexagon ( 60 , Vec2 { 480 , 380 }); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect { 50 , 50 , 350 , 400 }( textureWindmill ). draw (); roundRect . draw ( HSV { 0 , 0.5 , 1.0 }); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV { 120 , 0.5 , 1.0 }); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); hexagon . draw ( HSV { 240 , 0.5 , 1.0 }); // Polygon \u306b\u5bfe\u3057\u3001(515, 560) \u3092\u753b\u50cf\u306e\u4e2d\u5fc3\u3068\u3059\u308b\u3088\u3046\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b hexagon . toBuffer2D ( Arg :: center ( 515 , 560 ), textureSiv3DKun . size ()) . draw ( textureSiv3DKun ); } } 5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw() , .drawAt() \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Texture textureWindmill { U \"example/windmill.png\" }; const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" }; while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF { 1.0 , Periodic :: Sine0_1 ( 2 s ) }); } } 5.12 \u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u30c7\u30fc\u30bf\u3092\u6301\u305f\u306a\u3044\u7a7a\uff08\u304b\u3089\uff09\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u300116x16 \u306e\u9ec4\u8272\u3044\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u3082\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u3067\u3042\u308b\u304b\u306f if (texture.isEmpty()) \u3082\u3057\u304f\u306f if (not texture) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u3044\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture textureA ; if ( not textureA ) { Print << U \"textureA is empty\" ; } // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture textureB { U \"aaa/bbb.png\" }; if ( not textureB ) { Print << U \"textureB is empty\" ; } while ( System :: Update ()) { textureA . draw ( 0 , 0 ); textureB . draw ( 400 , 0 ); } } 5.13 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165 \u00b6 Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( not texture ) && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u3066\u4ee3\u5165 texture = Texture { U \"example/windmill.png\" }; } if ( texture ) { texture . draw (); } } }","title":"5. \u753b\u50cf\u3092\u63cf\u304f"},{"location":"ja-jp/learn/texture/#5-\u753b\u50cf\u3092\u63cf\u304f","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u30b7\u30fc\u30f3\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"5. \u753b\u50cf\u3092\u63cf\u304f"},{"location":"ja-jp/learn/texture/#51-\u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b","text":"\u30b7\u30fc\u30f3\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw() \u307e\u305f\u306f .drawAt() \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf ( Image ) \u304b\u3089\u4f5c\u6210\u3059\u308b Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3059\u308b\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3059\u308b\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b Texture \u306f\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u89e3\u653e\u3059\u308b\u305f\u3081\u3001\u30ea\u30bd\u30fc\u30b9\u306e\u89e3\u653e\u51e6\u7406\u3092\u660e\u793a\u7684\u306b\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u6700\u521d\u306b\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b U\"\ud83d\udc08\"_emoji \u306e\u3088\u3046\u306b\u7d75\u6587\u5b57\u3092\u6e21\u3057\u307e\u3059\u3002","title":"5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#texturedrawat","text":".drawAt() \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u30b7\u30fc\u30f3\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (200, 200) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 200 , 200 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u30b7\u30fc\u30f3\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u3057\u3066\u63cf\u753b texture . drawAt ( Scene :: Center ()); } }","title":"Texture::drawAt()"},{"location":"ja-jp/learn/texture/#texturedraw","text":".draw() \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u30b7\u30fc\u30f3\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (400, 0) \u304b\u3089\u63cf\u753b texture . draw ( 400 , 0 ); // \u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408 (0, 0) \u304b\u3089\u63cf\u753b texture . draw (); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30fc\u30f3\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } }","title":"Texture::draw()"},{"location":"ja-jp/learn/texture/#siv3d-\u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7","text":"Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 3,600 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u7d75\u6587\u5b57\u3092\u63a2\u3059\u3068\u304d\u306f emojipedia \u306e Categories \u304b\u3089\u8abf\u3079\u308b\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002 OpenSiv3D v0.6.6 \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Color Emoji (Unicode 14.0 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002","title":"Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7"},{"location":"ja-jp/learn/texture/#52-\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b","text":"","title":"5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#texturescaled","text":"Texture::scaled() \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw() \u307e\u305f\u306f .drawAt() \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; const Texture dog { U \"\ud83d\udc15\" _emoji }; while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } }","title":"Texture::scaled()"},{"location":"ja-jp/learn/texture/#textureresized","text":"Texture::resized() \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; const Texture dog { U \"\ud83d\udc15\" _emoji }; while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } }","title":"Texture::resized()"},{"location":"ja-jp/learn/texture/#53-\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b","text":"Texture::rotated() \u307e\u305f\u306f Texture::rotatedAt() \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw() \u307e\u305f\u306f .drawAt() \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002","title":"5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#texturerotated","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } }","title":"Texture::rotated()"},{"location":"ja-jp/learn/texture/#textureroatedat","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002 Vec2{ 0, 0 } \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 { 40 , 20 }, Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } }","title":"Texture::roatedAt()"},{"location":"ja-jp/learn/texture/#54-\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b","text":"Texture::flipped() \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture::mirrored() \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat { U \"\ud83d\udc08\" _emoji }; while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3059\u308b\u304b\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } }","title":"5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#55-\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b","text":"\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u30a2\u30a4\u30b3\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 8,000 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 Material Design Icons \u307e\u305f\u306f Font Awesome \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u306b _icon \u3092\u4ed8\u3051\u305f\u5024\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.92 }); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture icon0 { 0xf013 _icon , 40 }; // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture icon1 { 0xf023 _icon , 80 }; // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture icon2 { 0xf00e _icon , 120 }; while ( System :: Update ()) { icon0 . drawAt ( 200 , 300 , ColorF { 0.25 }); icon1 . drawAt ( 400 , 300 , ColorF { 0.25 }); icon2 . drawAt ( 600 , 300 , ColorF { 0.25 }); } }","title":"5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#56-\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill { U \"example/windmill.png\" }; // Siv3D \u304f\u3093\uff08Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\uff09\u306e\u753b\u50cf const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" }; while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } }","title":"5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8","text":"OpenSiv3D v0.6.6 \u3067\u306f\u30019 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 SVG svg \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 TIFF tif/tiff \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"ja-jp/learn/texture/#57-\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ed\u30fc\u30c9\u6642\u9593\u304c\u82e5\u5e72\u306e\u5897\u52a0\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u6d88\u8cbb\u3059\u308b\u30e1\u30e2\u30ea\u3082 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u3001\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u304c\u884c\u308f\u308c\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002 \u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u4e00\u65b9\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc::Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc::Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u304c\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u53f3\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306f\u305d\u308c\u304c\u6291\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture unmipped { U \"example/windmill.png\" }; // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture mipped { U \"example/windmill.png\" , TextureDesc :: Mipped }; while ( System :: Update ()) { const double scale = ( 0.02 + Periodic :: Triangle0_1 ( 10 s ) * 0.4 ); unmipped . scaled ( scale ). drawAt ( 300 , 300 ); mipped . scaled ( scale ). drawAt ( 500 , 300 ); } }","title":"5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210"},{"location":"ja-jp/learn/texture/#58-\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture::operator() \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Texture textureWindmill { U \"example/windmill.png\" }; const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" }; while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } }","title":"5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/learn/texture/#59-\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f .size() \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u308c\u305e\u308c .width() , .height() \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture { U \"example/windmill.png\" }; Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { Rect { 0 , 0 , texture . size () }. draw (); } }","title":"5.9 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba"},{"location":"ja-jp/learn/texture/#510-\u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f","text":"Rect \u3084 RectF , Circle , Quad , RoundRect , Polygon \u306b\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill { U \"example/windmill.png\" , TextureDesc :: Mipped }; const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" , TextureDesc :: Mipped }; const RoundRect roundRect { 430 , 50 , 100 , 100 , 25 }; const Circle circle { 480 , 240 , 50 }; const Polygon hexagon = Shape2D :: Hexagon ( 60 , Vec2 { 480 , 380 }); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect { 50 , 50 , 350 , 400 }( textureWindmill ). draw (); roundRect . draw ( HSV { 0 , 0.5 , 1.0 }); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV { 120 , 0.5 , 1.0 }); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); hexagon . draw ( HSV { 240 , 0.5 , 1.0 }); // Polygon \u306b\u5bfe\u3057\u3001(515, 560) \u3092\u753b\u50cf\u306e\u4e2d\u5fc3\u3068\u3059\u308b\u3088\u3046\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b hexagon . toBuffer2D ( Arg :: center ( 515 , 560 ), textureSiv3DKun . size ()) . draw ( textureSiv3DKun ); } }","title":"5.10 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f"},{"location":"ja-jp/learn/texture/#511-\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw() , .drawAt() \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF { 0.8 , 0.9 , 1.0 }); const Texture textureWindmill { U \"example/windmill.png\" }; const Texture textureSiv3DKun { U \"example/siv3d-kun.png\" }; while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF { 1.0 , Periodic :: Sine0_1 ( 2 s ) }); } }","title":"5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b"},{"location":"ja-jp/learn/texture/#512-\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3","text":"\u30c7\u30fc\u30bf\u3092\u6301\u305f\u306a\u3044\u7a7a\uff08\u304b\u3089\uff09\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u300116x16 \u306e\u9ec4\u8272\u3044\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u3082\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u3067\u3042\u308b\u304b\u306f if (texture.isEmpty()) \u3082\u3057\u304f\u306f if (not texture) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u3044\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture textureA ; if ( not textureA ) { Print << U \"textureA is empty\" ; } // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture textureB { U \"aaa/bbb.png\" }; if ( not textureB ) { Print << U \"textureB is empty\" ; } while ( System :: Update ()) { textureA . draw ( 0 , 0 ); textureB . draw ( 400 , 0 ); } }","title":"5.12 \u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"ja-jp/learn/texture/#513-\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165","text":"Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( not texture ) && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u3066\u4ee3\u5165 texture = Texture { U \"example/windmill.png\" }; } if ( texture ) { texture . draw (); } } }","title":"5.13 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165"},{"location":"ja-jp/mascot/gallery/","text":"Siv3D \u304f\u3093 \u30ae\u30e3\u30e9\u30ea\u30fc \u00b6 3D \u30e2\u30c7\u30eb \u00b6 Siv3D \u304f\u3093 VRM \u30e2\u30c7\u30eb ( itakawa \u69d8 \u63d0\u4f9b) \u30b0\u30c3\u30ba \u00b6 Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7 \u516c\u5f0f\u30a4\u30e9\u30b9\u30c8 \u00b6 Siv3D Advent Calendar 2021 \u62db\u5f85\u72b6\u30a4\u30e9\u30b9\u30c8 \u00b6 Siv3D \u65e7 Web \u30b5\u30a4\u30c8\u633f\u7d75\u30a4\u30e9\u30b9\u30c8 \u00b6 Siv3D for Kids \u30bf\u30a4\u30c8\u30eb\u753b\u9762\u30a4\u30e9\u30b9\u30c8 \u00b6 Siv3D Game Jam (2016 \u5e74) \u30a4\u30d9\u30f3\u30c8\u30d0\u30ca\u30fc \u00b6","title":"\u30ae\u30e3\u30e9\u30ea\u30fc"},{"location":"ja-jp/mascot/gallery/#siv3d-\u304f\u3093-\u30ae\u30e3\u30e9\u30ea\u30fc","text":"","title":"Siv3D \u304f\u3093 \u30ae\u30e3\u30e9\u30ea\u30fc"},{"location":"ja-jp/mascot/gallery/#3d-\u30e2\u30c7\u30eb","text":"Siv3D \u304f\u3093 VRM \u30e2\u30c7\u30eb ( itakawa \u69d8 \u63d0\u4f9b)","title":"3D \u30e2\u30c7\u30eb"},{"location":"ja-jp/mascot/gallery/#\u30b0\u30c3\u30ba","text":"Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"\u30b0\u30c3\u30ba"},{"location":"ja-jp/mascot/gallery/#\u516c\u5f0f\u30a4\u30e9\u30b9\u30c8","text":"","title":"\u516c\u5f0f\u30a4\u30e9\u30b9\u30c8"},{"location":"ja-jp/mascot/mascot/","text":"Siv3D \u304f\u3093 \u00b6 \u300cSiv3D \u304f\u3093\u300d\u306f\u3001C++ \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Siv3D \u306e\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002\u30c7\u30b6\u30a4\u30f3\u3092 2015 \u5e74\u306b\u516c\u52df\u3057\u3001 \u7070\u8272 \u3055\u3093\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u9078\u3070\u308c\u307e\u3057\u305f\u3002 \u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u8a2d\u5b9a \u00b6 \u5e74\u9f62: 12 \u6b73 / \u8eab\u9577: 144 cm / \u4f53\u91cd: 36 kg \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b \u95a2\u9023\u30d5\u30a1\u30a4\u30eb \u00b6 Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u516c\u5f0f\u753b\u50cf example/siv3d-kun.png 3D \u30e2\u30c7\u30eb example/obj/siv3d-kun.obj \u30c9\u30c3\u30c8\u7d75 example/spritesheet/siv3d-kun-16.png","title":"\u30de\u30b9\u30b3\u30c3\u30c8"},{"location":"ja-jp/mascot/mascot/#siv3d-\u304f\u3093","text":"\u300cSiv3D \u304f\u3093\u300d\u306f\u3001C++ \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Siv3D \u306e\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002\u30c7\u30b6\u30a4\u30f3\u3092 2015 \u5e74\u306b\u516c\u52df\u3057\u3001 \u7070\u8272 \u3055\u3093\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u9078\u3070\u308c\u307e\u3057\u305f\u3002","title":"Siv3D \u304f\u3093"},{"location":"ja-jp/mascot/mascot/#\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u8a2d\u5b9a","text":"\u5e74\u9f62: 12 \u6b73 / \u8eab\u9577: 144 cm / \u4f53\u91cd: 36 kg \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b","title":"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u8a2d\u5b9a"},{"location":"ja-jp/mascot/mascot/#\u95a2\u9023\u30d5\u30a1\u30a4\u30eb","text":"Siv3D \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u516c\u5f0f\u753b\u50cf example/siv3d-kun.png 3D \u30e2\u30c7\u30eb example/obj/siv3d-kun.obj \u30c9\u30c3\u30c8\u7d75 example/spritesheet/siv3d-kun-16.png","title":"\u95a2\u9023\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/reference/async/","text":"\u975e\u540c\u671f\u51e6\u7406 \u00b6 1. \u6982\u8981 \u00b6 Siv3D \u306e Main() \u95a2\u6570\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u5185\u3067\u8a08\u7b97\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u95a2\u6570\u3092\u547c\u3093\u3060\u5834\u5408\u3001\u95a2\u6570\u306e\u7d50\u679c\u304c\u8fd4\u308b\u307e\u3067\u51e6\u7406\u304c\u305d\u3053\u3067\u30b9\u30c8\u30c3\u30d7\u3057\u3001\u753b\u9762\u306e\u66f4\u65b0\u304c\u505c\u6b62\u3057\u305f\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3057\u305f\u308a\u3057\u307e\u3059\u3002Siv3D \u306e\u975e\u540c\u671f API \u3092\u4f7f\u3046\u3068\u3001\u5b8c\u4e86\u307e\u3067\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u3092\u975e\u540c\u671f\uff08\u57fa\u672c\u7684\u306b\u306f\u5225\u306e\u30b9\u30ec\u30c3\u30c9\uff09\u306b\u5b9f\u884c\u3055\u305b\u3001\u305d\u308c\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067 Main() \u95a2\u6570\u5185\u3067\u5225\u306e\u51e6\u7406\u3092\u9032\u3081\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6ce8\u610f\u4e8b\u9805 \u00b6 Main() \u4ee5\u5916\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u3001Siv3D \u306e\u63cf\u753b\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306b\u95a2\u9023\u3059\u308b API\uff08 .draw() \u3084\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3001\u30b7\u30a7\u30fc\u30c0\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306a\u3069\u306e\u4f5c\u6210\u3084\u64cd\u4f5c\uff09\u3092\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\u552f\u4e00\u306e\u4f8b\u5916\u3068\u3057\u3066 Print \u306f\u4f7f\u7528\u3067\u304d\u307e\u3059 Main() \u4ee5\u5916\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a2\u30bb\u30c3\u30c8 ( Texture , Audio , Font , PixelShader \u306a\u3069\uff09\u3092\u4f5c\u6210\u3057\u305f\u3044\u5834\u5408\u306f\u3001 \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd ( TextureAsset \u306a\u3069\uff09\u304c\u63d0\u4f9b\u3059\u308b\u975e\u540c\u671f\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u4ee5\u5916\u306e\u65b9\u6cd5\u3067\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059 HTTP \u901a\u4fe1\u306b\u3088\u308b\u30d5\u30a1\u30a4\u30eb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u975e\u540c\u671f\u306b\u884c\u3044\u305f\u3044\u5834\u5408\u306f SimpleHTTP::SaveAsync() \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044 Array , Stopwatch , Image , Wave , BinaryReader , JSON , TextWriter , NavMesh \u306e\u3088\u3046\u306b\u3001Siv3D \u306e\u30b3\u30a2\u30b7\u30b9\u30c6\u30e0\u3068\u5bc6\u63a5\u306b\u304b\u304b\u308f\u3089\u306a\u3044\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30fc\u30f3\u306e\u6a5f\u80fd\u306e\u5927\u90e8\u5206\u306f\u3069\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\u305f\u3060\u3057\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30fc\u30bf\u7af6\u5408\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u3001\u9069\u5207\u306a\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044 Siv3D \u30a8\u30f3\u30b8\u30f3\u5185\u306e\u4e26\u884c\u51e6\u7406 \u00b6 Siv3D \u306e\u30a8\u30f3\u30b8\u30f3\u90e8\u5206\u306f\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u304a\u3082\u306b\u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f\u3001Web \u30ab\u30e1\u30e9\u51e6\u7406\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306a\u3069\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u975e\u540c\u671f\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 2. \u975e\u540c\u671f\u3067\u306e\u30a2\u30bb\u30c3\u30c8\u4f5c\u6210 \u00b6 Texture , Audio , Font , PixelShader \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u3092\u975e\u540c\u671f\u3067\u4f5c\u6210\u3059\u308b\u5834\u5408\u3001\u6700\u3082\u5b89\u5168\u3067\u52b9\u7387\u7684\u306a\u65b9\u6cd5\u306f \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd \u304c\u63d0\u4f9b\u3059\u308b\u975e\u540c\u671f API \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u4ee5\u5916\u306e\u65b9\u6cd5\u3067\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u5404\u30a2\u30bb\u30c3\u30c8\u306e ::LoadAsync() \u3092\u4f7f\u3046\u3068\u3001\u305d\u306e\u30a2\u30bb\u30c3\u30c8\u304c\u672a\u30ed\u30fc\u30c9\u3067\u3042\u308b\u5834\u5408\u306b\u3001\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b\u306f ::IsReady() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u4e2d\u306b\u305d\u306e\u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528\u307e\u305f\u306f ::Wait() \u3092\u3059\u308b\u3068\u3001\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306e\u5f85\u6a5f\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u540c\u6642\u306b\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3067\u304d\u308b\u30a2\u30bb\u30c3\u30c8\u6570\u306b\u4e0a\u9650\u306f\u8a2d\u3051\u3089\u308c\u3066\u3044\u307e\u305b\u3093\u3002 OpenGL \u3067\u306e TextureAsset \u975e\u540c\u671f\u30ed\u30fc\u30c9\u306b\u304a\u3051\u308b\u6ce8\u610f OpenGL \u30d0\u30c3\u30af\u30a8\u30f3\u30c9 (macOS \u3068 Linux \u306e\u30c7\u30d5\u30a9\u30eb\u30c8, \u304a\u3088\u3073 Windows \u3067\u9078\u629e\u3057\u305f\u5834\u5408) \u3067\u306f\u3001 TextureAsset \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c System::Update() \u306e\u547c\u3073\u51fa\u3057\u4e2d\u306b\u5b8c\u4e86\u3057\u307e\u3059\u3002 TextureAsset \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u4e2d\u306f\u5fc5\u305a System::Update() \u3092\u547c\u3093\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { const String preloadText = U \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" ; FontAsset :: Register ( U \"MyFont\" , FontMethod :: MSDF , 64 , Typeface :: Bold ); TextureAsset :: Register ( U \"MyTexture\" , U \"example/bay.jpg\" ); AudioAsset :: Register ( U \"MyAudio\" , Audio :: Stream , U \"example/test.mp3\" ); AudioAsset :: Register ( U \"MyMIDI\" , U \"example/midi/test.mid\" ); // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u958b\u59cb FontAsset :: LoadAsync ( U \"MyFont\" , preloadText ); TextureAsset :: LoadAsync ( U \"MyTexture\" ); AudioAsset :: LoadAsync ( U \"MyAudio\" ); AudioAsset :: LoadAsync ( U \"MyMIDI\" ); while ( System :: Update ()) { ClearPrint (); // \u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b Print << FontAsset :: IsReady ( U \"MyFont\" ); Print << TextureAsset :: IsReady ( U \"MyTexture\" ); Print << AudioAsset :: IsReady ( U \"MyAudio\" ); Print << AudioAsset :: IsReady ( U \"MyMIDI\" ); } } \u975e\u540c\u671f\u51e6\u7406\u306e API \u00b6 \u30af\u30e9\u30b9 \u00b6 AsyncTask<Type> \u00b6 \u3042\u308b\u95a2\u6570\u3092\u975e\u540c\u671f\u5b9f\u884c\u3057\u3001\u305d\u306e\u72b6\u614b\u3084\u7d50\u679c\u3092\u7ba1\u7406\u3059\u308b\u3001\u975e\u540c\u671f\u30bf\u30b9\u30af\u30af\u30e9\u30b9\u3067\u3059\u3002\u901a\u5e38\u306f Async() \u95a2\u6570\u306b\u3088\u3063\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002 AsyncTask \u306b\u306f\u4ee5\u4e0b\u306e\u72b6\u614b\u304c\u3042\u308a\u307e\u3059 \u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u306a\u3044 \u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u3066\u3001\u30bf\u30b9\u30af\u304c\u5b9f\u884c\u4e2d\u3067\u3042\u308a\u3001\u7d50\u679c\u306f\u307e\u3060\u8fd4\u305b\u306a\u3044 \u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u3066\u3001\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u3066\u304a\u308a\u3001\u7d50\u679c\u3092\u3059\u3050\u306b\u8fd4\u305b\u308b \u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool AsyncTask < Type >:: isValid () const ; AsyncTask<Type>::get() \u3092\u547c\u3076\u3068\u3001\u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u305f\u306a\u3044\u72b6\u614b\u306b\u623b\u308a\u307e\u3059\u3002 \u623b\u308a\u5024 \u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f false \u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u3066\u3001\u7d50\u679c\u3092\u3059\u3050\u306b\u8fd4\u305b\u308b\u72b6\u614b\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool AsyncTask < Type >:: isReady () const ; AsyncTask<Type>::get() \u3092\u547c\u3076\u3068\u3001\u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u305f\u306a\u3044\u72b6\u614b\u306b\u623b\u308a\u307e\u3059\u3002 \u623b\u308a\u5024 \u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u3066\u3001\u7d50\u679c\u3092\u3059\u3050\u306b\u8fd4\u305b\u308b\u72b6\u614b\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f false \u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u975e\u540c\u671f\u51e6\u7406\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 Type AsyncTask < Type >:: get (); \u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u5b8c\u4e86\u307e\u3067\u5f85\u6a5f\u3057\u307e\u3059\u3002 \u623b\u308a\u5024 \u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u975e\u540c\u671f\u51e6\u7406\u306e\u7d50\u679c \u975e\u540c\u671f\u51e6\u7406\u306e\u30bf\u30b9\u30af\u5b8c\u4e86\u3092\u5f85\u3061\u307e\u3059\u3002 void AsyncTask < Type >:: wait () const ; \u975e\u540c\u671f\u51e6\u7406\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u3053\u306e\u95a2\u6570\u306f\u3059\u3050\u306b\u5236\u5fa1\u3092\u8fd4\u3057\u307e\u3059\u3002 \u95a2\u6570 \u00b6 \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 template < class Fty , class ... Args > auto Async ( Fty && f , Args && ... args ); f \u975e\u540c\u671f\u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570 args \u95a2\u6570 f \u306b\u6e21\u3059\u5f15\u6570 \u623b\u308a\u5024 \u95a2\u6570 f \u306e\u623b\u308a\u5024\u578b\u306e\u975e\u540c\u671f\u30bf\u30b9\u30af ( AsyncTask<Ret> ) 3. \u975e\u540c\u671f\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 3.1 \u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306b\u542b\u307e\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u975e\u540c\u671f\u3067\u30ed\u30fc\u30c9\u3057\u3066\u8868\u793a\u3059\u308b \u00b6 # include <Siv3D.hpp> // \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u304c\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\uff08\u7c21\u6613\u7684\u306a\u5b9f\u88c5\uff09 bool IsImageFilePath ( const FilePath & path ) { const String extension = FileSystem :: Extension ( path ); // \u62e1\u5f35\u5b50 png, jpg, jpeg \u306e\u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u898b\u306a\u3059 return ( extension == U \"png\" ) || ( extension == U \"jpg\" ) || ( extension == U \"jpeg\" ); } // \u30d5\u30a9\u30eb\u30c0\u9078\u629e\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < FilePath > GetImageFilePaths () { // \u30d5\u30a9\u30eb\u30c0\u9078\u629e\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u30d5\u30a9\u30eb\u30c0\u304c\u9078\u629e\u3055\u308c\u305f\u3089 if ( const auto directory = Dialog :: SelectFolder ()) { // \u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u542b\u307e\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u4e00\u89a7\u3092\u8fd4\u3059 return FileSystem :: DirectoryContents ( * directory , Recursive :: No ) . filter ( IsImageFilePath ); } return {}; } void Main () { Window :: Resize ( 1200 , 800 ); const Array < FilePath > imageFilePaths = GetImageFilePaths () // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u4e00\u89a7\u306e\u3046\u3061 . take ( 24 ); // \u6700\u5927 24 \u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97 // \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u540d\u3092\u8a18\u9332\u3059\u308b\u914d\u5217 Array < AssetName > assetNames ( imageFilePaths . size ()); // \u5404\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066 for ( size_t i = 0 ; i < imageFilePaths . size (); ++ i ) { // \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u540d\uff08\u4efb\u610f\uff09 const AssetName assetName = U \"texture_{}\" _fmt ( i ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 const FilePath path = imageFilePaths [ i ]; // \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u540d\u3092\u8a18\u9332\u3059\u308b assetNames [ i ] = assetName ; // \u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b TextureAsset :: Register ( assetName , path , TextureDesc :: Mipped ); // \u975e\u540c\u671f\u3067\u306e\u8aad\u307f\u8fbc\u307f\u3092\u958b\u59cb\u3059\u308b TextureAsset :: LoadAsync ( assetName ); } while ( System :: Update ()) { // \u5404\u30a2\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066 for ( size_t i = 0 ; i < imageFilePaths . size (); ++ i ) { const double x = ( 100.0 + ( i % 6 ) * 200.0 ); const double y = ( 100.0 + ( i / 6 ) * 200.0 ); if ( TextureAsset :: IsReady ( assetNames [ i ])) // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308c\u3070 { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a\u3059\u308b TextureAsset ( assetNames [ i ]). resized ( 200 ). drawAt ( x , y ); } else { // \u30ed\u30fc\u30c9\u4e2d\u3067\u3042\u308c\u3070\u3001\u4ee3\u308f\u308a\u306b\u5186\u3092\u8868\u793a\u3059\u308b Circle { x , y , 50 }. drawFrame ( 20 , ColorF { 0.75 }); } } } } 3.2 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u6b62\u3081\u305a\u306b\u3001\u5b9f\u884c\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u95a2\u6570\u306e\u7d50\u679c\u3092\u5f97\u308b \u00b6 # include <Siv3D.hpp> // n \u79d2\u5f8c\u306b n \u3092\u8fd4\u3059\u95a2\u6570\uff08\u91cd\u3044\u51e6\u7406\u3092 Sleep \u3067\u4ee3\u308f\u308a\u306b\u8868\u73fe\uff09 int32 F ( int32 n ) { // n \u79d2\u30b9\u30ea\u30fc\u30d7 System :: Sleep ( n * 1 s ); return n ; } void Main () { Scene :: SetBackground ( Palette :: White ); // \u975e\u540c\u671f\u30bf\u30b9\u30af AsyncTask < int32 > task ; while ( System :: Update ()) { // \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u6642\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u308b if ( SimpleGUI :: Button ( U \"Call\" , Vec2 { 600 , 20 }, unspecified , ( not task . isValid ()))) { // \u95a2\u6570 F \u3092\u5b9f\u884c\u3059\u308b\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3002F \u306e\u7b2c\u4e00\u5f15\u6570\u306b 5 \u3092\u6e21\u3059 task = Async ( F , 5 ); } // \u975e\u540c\u671f\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3089 if ( task . isReady ()) { // \u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b Print << task . get (); } const double t = Scene :: Time (); for ( auto i : step ( 12 )) { const double angle = ( i * 30 _deg ) + ( t * 30 _deg ); const Vec2 pos = OffsetCircular { Scene :: Center (), 160 , angle }; Circle { pos , 20 }. draw ( HSV { ( i * 30 ) }); } } // \u5b9f\u884c\u9014\u4e2d\u306e\u30bf\u30b9\u30af\u304c\u3042\u308c\u3070\u5b8c\u4e86\u307e\u3067\u5f85\u3064\u3002 if ( task . isValid ()) { task . wait (); } } 3.3 \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4e2d\u65ad\u3059\u308b \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e2d\u65ad\u3059\u308b\u5834\u5408\u3001 AsyncTask \u306f\u95a2\u6570\u304c\u623b\u308a\u5024\u3092\u8fd4\u3059\u307e\u3067\u5f85\u6a5f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u5f85\u6a5f\u6642\u9593\u3092\u6e1b\u3089\u3059\u305f\u3081\u30013.2 \u306e\u30b5\u30f3\u30d7\u30eb\u3092\u62e1\u5f35\u3057\u3001\u95a2\u6570\u3092\u4e2d\u65ad\u3067\u304d\u308b\u4ed5\u7d44\u307f\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // n \u79d2\u5f8c\u306b n \u3092\u8fd4\u3059\u95a2\u6570\uff08\u91cd\u3044\u51e6\u7406\u3092 Sleep \u3067\u4ee3\u308f\u308a\u306b\u8868\u73fe\uff09 int32 F ( int32 n , const std :: atomic < bool >& abort ) { for ( int i = 0 ; i < ( n * 10 ); ++ i ) { // \u51e6\u7406\u306e\u6700\u4e2d\u306b\u4e2d\u65ad\u30d5\u30e9\u30b0\u3092\u78ba\u8a8d\u3059\u308b if ( abort ) // \u4e2d\u65ad\u30d5\u30e9\u30b0\u304c true \u306a\u3089 { // \u5b8c\u5168\u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3059\u308b\u524d\u306b\u305d\u3053\u3067\u4e2d\u65ad\u3059\u308b return -1 ; } System :: Sleep ( 100 ms ); } return n ; } void Main () { Scene :: SetBackground ( Palette :: White ); // \u975e\u540c\u671f\u30bf\u30b9\u30af AsyncTask < int32 > task ; // \u4e2d\u65ad\u30d5\u30e9\u30b0 std :: atomic < bool > abort { false }; while ( System :: Update ()) { // \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u6642\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u308b if ( SimpleGUI :: Button ( U \"Call\" , Vec2 { 600 , 20 }, unspecified , ( not task . isValid ()))) { abort = false ; // \u95a2\u6570 F \u3092\u5b9f\u884c\u3059\u308b\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3002F \u306e\u7b2c\u4e00\u5f15\u6570\u306b 5 \u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u4e2d\u65ad\u6307\u793a\u306e\u53c2\u7167\u3092\u6e21\u3059 task = Async ( F , 5 , std :: ref ( abort )); } // \u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u4e2d\u65ad if ( SimpleGUI :: Button ( U \"Abort\" , Vec2 { 600 , 60 }, unspecified , task . isValid ())) { // \u4e2d\u65ad\u30d5\u30e9\u30b0\u3092 true \u306b abort = true ; } // \u975e\u540c\u671f\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3089 if ( task . isReady ()) { // \u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b Print << task . get (); } const double t = Scene :: Time (); for ( auto i : step ( 12 )) { const double angle = ( i * 30 _deg ) + ( t * 30 _deg ); const Vec2 pos = OffsetCircular { Scene :: Center (), 160 , angle }; Circle { pos , 20 }. draw ( HSV { ( i * 30 ) }); } } // \u5b9f\u884c\u9014\u4e2d\u306e\u30bf\u30b9\u30af\u304c\u3042\u308c\u3070\u5b8c\u4e86\u307e\u3067\u5f85\u3064\u3002 if ( task . isValid ()) { // \u4e2d\u65ad\u6307\u793a\u3092\u51fa\u3059 abort = true ; // \u5b8c\u5168\u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3059\u308b\u524d\u306b\u5236\u5fa1\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b task . wait (); } } 3.4 \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u751f\u6210\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u9014\u4e2d\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b \u00b6 # include <Siv3D.hpp> class ImageTask { public : ImageTask () : m_processingImage ( 400 , 400 , Palette :: White ) , m_result { m_processingImage } { m_task = Async ( Update , this ); } ~ ImageTask () { // \u975e\u540c\u671f\u30bf\u30b9\u30af\u304c\u3042\u308c\u3070 if ( m_task . isValid ()) { // \u4e2d\u65ad\u30d5\u30e9\u30b0\u3092\u30aa\u30f3\u306b m_abort = true ; // \u5236\u5fa1\u3092\u8fd4\u3059\u307e\u3067\u5f85\u3064 m_task . wait (); } } // \u4f55\u884c\u5857\u308a\u3064\u3076\u3057\u305f\u304b\u3092\u8fd4\u3059 size_t getProgress () const { return m_processedLine ; } // \u7d50\u679c\u753b\u50cf\u3092\u53d6\u5f97 void get ( DynamicTexture & texture ) { std :: lock_guard lock { m_mutex }; texture . fill ( m_result ); } private : bool update () { const size_t y = m_processedLine ; // 1 \u884c\u5857\u308b for ( size_t x = 0 ; x < m_processingImage . width (); ++ x ) { m_processingImage [ y ][ x ] = Palette :: Orange ; } // \u4e00\u884c\u7d42\u308f\u3063\u305f\u3089\u7d50\u679c\u753b\u50cf\u3092\u66f4\u65b0 { std :: lock_guard lock { m_mutex }; // \u51e6\u7406\u4e2d\u306e\u5185\u5bb9\u3092\u8ee2\u9001 m_result = m_processingImage ; ++ m_processedLine ; } // \u51e6\u7406\u304c\u5b8c\u5168\u306b\u5b8c\u4e86\u3057\u305f\u3089 if ( m_processedLine == m_processingImage . height ()) { // \u51e6\u7406\u7528\u306e\u753b\u50cf\u3092\u7834\u68c4\u3057\u3001\u30e1\u30e2\u30ea\u3082\u958b\u653e\u3059\u308b m_processingImage . release (); return true ; } return false ; } static void Update ( ImageTask * pImageTask ) { // \u4e2d\u65ad\u30d5\u30e9\u30b0\u304c\u7d4c\u3063\u305f\u3089\u672a\u5b8c\u4e86\u3067\u3082\u7d42\u4e86\u3059\u308b while ( not pImageTask -> m_abort ) { // 5 \u30df\u30ea\u79d2\u3054\u3068\u306b 1 \u884c\u5857\u308b System :: Sleep ( 5 ms ); if ( pImageTask -> update ()) { break ; } } } // \u975e\u540c\u671f\u30bf\u30b9\u30af AsyncTask < void > m_task ; // \u51e6\u7406\u3092\u4e2d\u65ad\u3059\u308b\u304b\u306e\u30d5\u30e9\u30b0 std :: atomic < bool > m_abort { false }; // \u51e6\u7406\u4e2d\u306e\u753b\u50cf Image m_processingImage ; // \u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u884c\u6570 std :: atomic < size_t > m_processedLine = 0 ; //////// // // \u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3067\u4fdd\u8b77\u3059\u308b\u30c7\u30fc\u30bf // std :: mutex m_mutex ; // \u7d50\u679c\u753b\u50cf Image m_result ; // //////// }; void Main () { ImageTask imageTask ; DynamicTexture texture ; size_t currentProgress = 0 ; while ( System :: Update ()) { // \u9032\u6357\u304c\u3042\u308c\u3070 if ( const size_t newProgress = imageTask . getProgress (); currentProgress != newProgress ) { // \u7d50\u679c\u753b\u50cf\u3092\u53d6\u5f97\u3059\u308b imageTask . get ( texture ); currentProgress = newProgress ; Print << currentProgress ; } if ( texture ) { texture . draw (); } } }","title":"\u975e\u540c\u671f\u51e6\u7406"},{"location":"ja-jp/reference/async/#\u975e\u540c\u671f\u51e6\u7406","text":"","title":"\u975e\u540c\u671f\u51e6\u7406"},{"location":"ja-jp/reference/async/#1-\u6982\u8981","text":"Siv3D \u306e Main() \u95a2\u6570\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u5185\u3067\u8a08\u7b97\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u95a2\u6570\u3092\u547c\u3093\u3060\u5834\u5408\u3001\u95a2\u6570\u306e\u7d50\u679c\u304c\u8fd4\u308b\u307e\u3067\u51e6\u7406\u304c\u305d\u3053\u3067\u30b9\u30c8\u30c3\u30d7\u3057\u3001\u753b\u9762\u306e\u66f4\u65b0\u304c\u505c\u6b62\u3057\u305f\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3057\u305f\u308a\u3057\u307e\u3059\u3002Siv3D \u306e\u975e\u540c\u671f API \u3092\u4f7f\u3046\u3068\u3001\u5b8c\u4e86\u307e\u3067\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u3092\u975e\u540c\u671f\uff08\u57fa\u672c\u7684\u306b\u306f\u5225\u306e\u30b9\u30ec\u30c3\u30c9\uff09\u306b\u5b9f\u884c\u3055\u305b\u3001\u305d\u308c\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067 Main() \u95a2\u6570\u5185\u3067\u5225\u306e\u51e6\u7406\u3092\u9032\u3081\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"1. \u6982\u8981"},{"location":"ja-jp/reference/async/#2-\u975e\u540c\u671f\u3067\u306e\u30a2\u30bb\u30c3\u30c8\u4f5c\u6210","text":"Texture , Audio , Font , PixelShader \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u3092\u975e\u540c\u671f\u3067\u4f5c\u6210\u3059\u308b\u5834\u5408\u3001\u6700\u3082\u5b89\u5168\u3067\u52b9\u7387\u7684\u306a\u65b9\u6cd5\u306f \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd \u304c\u63d0\u4f9b\u3059\u308b\u975e\u540c\u671f API \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u4ee5\u5916\u306e\u65b9\u6cd5\u3067\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u5404\u30a2\u30bb\u30c3\u30c8\u306e ::LoadAsync() \u3092\u4f7f\u3046\u3068\u3001\u305d\u306e\u30a2\u30bb\u30c3\u30c8\u304c\u672a\u30ed\u30fc\u30c9\u3067\u3042\u308b\u5834\u5408\u306b\u3001\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b\u306f ::IsReady() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u4e2d\u306b\u305d\u306e\u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528\u307e\u305f\u306f ::Wait() \u3092\u3059\u308b\u3068\u3001\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306e\u5f85\u6a5f\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u540c\u6642\u306b\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3067\u304d\u308b\u30a2\u30bb\u30c3\u30c8\u6570\u306b\u4e0a\u9650\u306f\u8a2d\u3051\u3089\u308c\u3066\u3044\u307e\u305b\u3093\u3002 OpenGL \u3067\u306e TextureAsset \u975e\u540c\u671f\u30ed\u30fc\u30c9\u306b\u304a\u3051\u308b\u6ce8\u610f OpenGL \u30d0\u30c3\u30af\u30a8\u30f3\u30c9 (macOS \u3068 Linux \u306e\u30c7\u30d5\u30a9\u30eb\u30c8, \u304a\u3088\u3073 Windows \u3067\u9078\u629e\u3057\u305f\u5834\u5408) \u3067\u306f\u3001 TextureAsset \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c System::Update() \u306e\u547c\u3073\u51fa\u3057\u4e2d\u306b\u5b8c\u4e86\u3057\u307e\u3059\u3002 TextureAsset \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u4e2d\u306f\u5fc5\u305a System::Update() \u3092\u547c\u3093\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { const String preloadText = U \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" ; FontAsset :: Register ( U \"MyFont\" , FontMethod :: MSDF , 64 , Typeface :: Bold ); TextureAsset :: Register ( U \"MyTexture\" , U \"example/bay.jpg\" ); AudioAsset :: Register ( U \"MyAudio\" , Audio :: Stream , U \"example/test.mp3\" ); AudioAsset :: Register ( U \"MyMIDI\" , U \"example/midi/test.mid\" ); // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u958b\u59cb FontAsset :: LoadAsync ( U \"MyFont\" , preloadText ); TextureAsset :: LoadAsync ( U \"MyTexture\" ); AudioAsset :: LoadAsync ( U \"MyAudio\" ); AudioAsset :: LoadAsync ( U \"MyMIDI\" ); while ( System :: Update ()) { ClearPrint (); // \u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b Print << FontAsset :: IsReady ( U \"MyFont\" ); Print << TextureAsset :: IsReady ( U \"MyTexture\" ); Print << AudioAsset :: IsReady ( U \"MyAudio\" ); Print << AudioAsset :: IsReady ( U \"MyMIDI\" ); } }","title":"2. \u975e\u540c\u671f\u3067\u306e\u30a2\u30bb\u30c3\u30c8\u4f5c\u6210"},{"location":"ja-jp/reference/async/#\u975e\u540c\u671f\u51e6\u7406\u306e-api","text":"","title":"\u975e\u540c\u671f\u51e6\u7406\u306e API"},{"location":"ja-jp/reference/async/#\u30af\u30e9\u30b9","text":"","title":"\u30af\u30e9\u30b9"},{"location":"ja-jp/reference/async/#\u95a2\u6570","text":"\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 template < class Fty , class ... Args > auto Async ( Fty && f , Args && ... args ); f \u975e\u540c\u671f\u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570 args \u95a2\u6570 f \u306b\u6e21\u3059\u5f15\u6570 \u623b\u308a\u5024 \u95a2\u6570 f \u306e\u623b\u308a\u5024\u578b\u306e\u975e\u540c\u671f\u30bf\u30b9\u30af ( AsyncTask<Ret> )","title":"\u95a2\u6570"},{"location":"ja-jp/reference/async/#3-\u975e\u540c\u671f\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb","text":"","title":"3. \u975e\u540c\u671f\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/reference/async/#31-\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306b\u542b\u307e\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u975e\u540c\u671f\u3067\u30ed\u30fc\u30c9\u3057\u3066\u8868\u793a\u3059\u308b","text":"# include <Siv3D.hpp> // \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u304c\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\uff08\u7c21\u6613\u7684\u306a\u5b9f\u88c5\uff09 bool IsImageFilePath ( const FilePath & path ) { const String extension = FileSystem :: Extension ( path ); // \u62e1\u5f35\u5b50 png, jpg, jpeg \u306e\u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u898b\u306a\u3059 return ( extension == U \"png\" ) || ( extension == U \"jpg\" ) || ( extension == U \"jpeg\" ); } // \u30d5\u30a9\u30eb\u30c0\u9078\u629e\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u9078\u629e\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < FilePath > GetImageFilePaths () { // \u30d5\u30a9\u30eb\u30c0\u9078\u629e\u30c0\u30a4\u30a2\u30ed\u30b0\u3067\u30d5\u30a9\u30eb\u30c0\u304c\u9078\u629e\u3055\u308c\u305f\u3089 if ( const auto directory = Dialog :: SelectFolder ()) { // \u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u542b\u307e\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u4e00\u89a7\u3092\u8fd4\u3059 return FileSystem :: DirectoryContents ( * directory , Recursive :: No ) . filter ( IsImageFilePath ); } return {}; } void Main () { Window :: Resize ( 1200 , 800 ); const Array < FilePath > imageFilePaths = GetImageFilePaths () // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u4e00\u89a7\u306e\u3046\u3061 . take ( 24 ); // \u6700\u5927 24 \u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97 // \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u540d\u3092\u8a18\u9332\u3059\u308b\u914d\u5217 Array < AssetName > assetNames ( imageFilePaths . size ()); // \u5404\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066 for ( size_t i = 0 ; i < imageFilePaths . size (); ++ i ) { // \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u540d\uff08\u4efb\u610f\uff09 const AssetName assetName = U \"texture_{}\" _fmt ( i ); // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 const FilePath path = imageFilePaths [ i ]; // \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30bb\u30c3\u30c8\u540d\u3092\u8a18\u9332\u3059\u308b assetNames [ i ] = assetName ; // \u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b TextureAsset :: Register ( assetName , path , TextureDesc :: Mipped ); // \u975e\u540c\u671f\u3067\u306e\u8aad\u307f\u8fbc\u307f\u3092\u958b\u59cb\u3059\u308b TextureAsset :: LoadAsync ( assetName ); } while ( System :: Update ()) { // \u5404\u30a2\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066 for ( size_t i = 0 ; i < imageFilePaths . size (); ++ i ) { const double x = ( 100.0 + ( i % 6 ) * 200.0 ); const double y = ( 100.0 + ( i / 6 ) * 200.0 ); if ( TextureAsset :: IsReady ( assetNames [ i ])) // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308c\u3070 { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a\u3059\u308b TextureAsset ( assetNames [ i ]). resized ( 200 ). drawAt ( x , y ); } else { // \u30ed\u30fc\u30c9\u4e2d\u3067\u3042\u308c\u3070\u3001\u4ee3\u308f\u308a\u306b\u5186\u3092\u8868\u793a\u3059\u308b Circle { x , y , 50 }. drawFrame ( 20 , ColorF { 0.75 }); } } } }","title":"3.1 \u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306b\u542b\u307e\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u975e\u540c\u671f\u3067\u30ed\u30fc\u30c9\u3057\u3066\u8868\u793a\u3059\u308b"},{"location":"ja-jp/reference/async/#32-\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u6b62\u3081\u305a\u306b\u5b9f\u884c\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u95a2\u6570\u306e\u7d50\u679c\u3092\u5f97\u308b","text":"# include <Siv3D.hpp> // n \u79d2\u5f8c\u306b n \u3092\u8fd4\u3059\u95a2\u6570\uff08\u91cd\u3044\u51e6\u7406\u3092 Sleep \u3067\u4ee3\u308f\u308a\u306b\u8868\u73fe\uff09 int32 F ( int32 n ) { // n \u79d2\u30b9\u30ea\u30fc\u30d7 System :: Sleep ( n * 1 s ); return n ; } void Main () { Scene :: SetBackground ( Palette :: White ); // \u975e\u540c\u671f\u30bf\u30b9\u30af AsyncTask < int32 > task ; while ( System :: Update ()) { // \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u6642\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u308b if ( SimpleGUI :: Button ( U \"Call\" , Vec2 { 600 , 20 }, unspecified , ( not task . isValid ()))) { // \u95a2\u6570 F \u3092\u5b9f\u884c\u3059\u308b\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3002F \u306e\u7b2c\u4e00\u5f15\u6570\u306b 5 \u3092\u6e21\u3059 task = Async ( F , 5 ); } // \u975e\u540c\u671f\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3089 if ( task . isReady ()) { // \u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b Print << task . get (); } const double t = Scene :: Time (); for ( auto i : step ( 12 )) { const double angle = ( i * 30 _deg ) + ( t * 30 _deg ); const Vec2 pos = OffsetCircular { Scene :: Center (), 160 , angle }; Circle { pos , 20 }. draw ( HSV { ( i * 30 ) }); } } // \u5b9f\u884c\u9014\u4e2d\u306e\u30bf\u30b9\u30af\u304c\u3042\u308c\u3070\u5b8c\u4e86\u307e\u3067\u5f85\u3064\u3002 if ( task . isValid ()) { task . wait (); } }","title":"3.2 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u6b62\u3081\u305a\u306b\u3001\u5b9f\u884c\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u95a2\u6570\u306e\u7d50\u679c\u3092\u5f97\u308b"},{"location":"ja-jp/reference/async/#33-\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4e2d\u65ad\u3059\u308b","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e2d\u65ad\u3059\u308b\u5834\u5408\u3001 AsyncTask \u306f\u95a2\u6570\u304c\u623b\u308a\u5024\u3092\u8fd4\u3059\u307e\u3067\u5f85\u6a5f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u5f85\u6a5f\u6642\u9593\u3092\u6e1b\u3089\u3059\u305f\u3081\u30013.2 \u306e\u30b5\u30f3\u30d7\u30eb\u3092\u62e1\u5f35\u3057\u3001\u95a2\u6570\u3092\u4e2d\u65ad\u3067\u304d\u308b\u4ed5\u7d44\u307f\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // n \u79d2\u5f8c\u306b n \u3092\u8fd4\u3059\u95a2\u6570\uff08\u91cd\u3044\u51e6\u7406\u3092 Sleep \u3067\u4ee3\u308f\u308a\u306b\u8868\u73fe\uff09 int32 F ( int32 n , const std :: atomic < bool >& abort ) { for ( int i = 0 ; i < ( n * 10 ); ++ i ) { // \u51e6\u7406\u306e\u6700\u4e2d\u306b\u4e2d\u65ad\u30d5\u30e9\u30b0\u3092\u78ba\u8a8d\u3059\u308b if ( abort ) // \u4e2d\u65ad\u30d5\u30e9\u30b0\u304c true \u306a\u3089 { // \u5b8c\u5168\u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3059\u308b\u524d\u306b\u305d\u3053\u3067\u4e2d\u65ad\u3059\u308b return -1 ; } System :: Sleep ( 100 ms ); } return n ; } void Main () { Scene :: SetBackground ( Palette :: White ); // \u975e\u540c\u671f\u30bf\u30b9\u30af AsyncTask < int32 > task ; // \u4e2d\u65ad\u30d5\u30e9\u30b0 std :: atomic < bool > abort { false }; while ( System :: Update ()) { // \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u6642\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u308b if ( SimpleGUI :: Button ( U \"Call\" , Vec2 { 600 , 20 }, unspecified , ( not task . isValid ()))) { abort = false ; // \u95a2\u6570 F \u3092\u5b9f\u884c\u3059\u308b\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3002F \u306e\u7b2c\u4e00\u5f15\u6570\u306b 5 \u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u4e2d\u65ad\u6307\u793a\u306e\u53c2\u7167\u3092\u6e21\u3059 task = Async ( F , 5 , std :: ref ( abort )); } // \u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u4e2d\u65ad if ( SimpleGUI :: Button ( U \"Abort\" , Vec2 { 600 , 60 }, unspecified , task . isValid ())) { // \u4e2d\u65ad\u30d5\u30e9\u30b0\u3092 true \u306b abort = true ; } // \u975e\u540c\u671f\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3089 if ( task . isReady ()) { // \u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b Print << task . get (); } const double t = Scene :: Time (); for ( auto i : step ( 12 )) { const double angle = ( i * 30 _deg ) + ( t * 30 _deg ); const Vec2 pos = OffsetCircular { Scene :: Center (), 160 , angle }; Circle { pos , 20 }. draw ( HSV { ( i * 30 ) }); } } // \u5b9f\u884c\u9014\u4e2d\u306e\u30bf\u30b9\u30af\u304c\u3042\u308c\u3070\u5b8c\u4e86\u307e\u3067\u5f85\u3064\u3002 if ( task . isValid ()) { // \u4e2d\u65ad\u6307\u793a\u3092\u51fa\u3059 abort = true ; // \u5b8c\u5168\u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3059\u308b\u524d\u306b\u5236\u5fa1\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b task . wait (); } }","title":"3.3 \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u4e2d\u65ad\u3059\u308b"},{"location":"ja-jp/reference/async/#34-\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u751f\u6210\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u9014\u4e2d\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b","text":"# include <Siv3D.hpp> class ImageTask { public : ImageTask () : m_processingImage ( 400 , 400 , Palette :: White ) , m_result { m_processingImage } { m_task = Async ( Update , this ); } ~ ImageTask () { // \u975e\u540c\u671f\u30bf\u30b9\u30af\u304c\u3042\u308c\u3070 if ( m_task . isValid ()) { // \u4e2d\u65ad\u30d5\u30e9\u30b0\u3092\u30aa\u30f3\u306b m_abort = true ; // \u5236\u5fa1\u3092\u8fd4\u3059\u307e\u3067\u5f85\u3064 m_task . wait (); } } // \u4f55\u884c\u5857\u308a\u3064\u3076\u3057\u305f\u304b\u3092\u8fd4\u3059 size_t getProgress () const { return m_processedLine ; } // \u7d50\u679c\u753b\u50cf\u3092\u53d6\u5f97 void get ( DynamicTexture & texture ) { std :: lock_guard lock { m_mutex }; texture . fill ( m_result ); } private : bool update () { const size_t y = m_processedLine ; // 1 \u884c\u5857\u308b for ( size_t x = 0 ; x < m_processingImage . width (); ++ x ) { m_processingImage [ y ][ x ] = Palette :: Orange ; } // \u4e00\u884c\u7d42\u308f\u3063\u305f\u3089\u7d50\u679c\u753b\u50cf\u3092\u66f4\u65b0 { std :: lock_guard lock { m_mutex }; // \u51e6\u7406\u4e2d\u306e\u5185\u5bb9\u3092\u8ee2\u9001 m_result = m_processingImage ; ++ m_processedLine ; } // \u51e6\u7406\u304c\u5b8c\u5168\u306b\u5b8c\u4e86\u3057\u305f\u3089 if ( m_processedLine == m_processingImage . height ()) { // \u51e6\u7406\u7528\u306e\u753b\u50cf\u3092\u7834\u68c4\u3057\u3001\u30e1\u30e2\u30ea\u3082\u958b\u653e\u3059\u308b m_processingImage . release (); return true ; } return false ; } static void Update ( ImageTask * pImageTask ) { // \u4e2d\u65ad\u30d5\u30e9\u30b0\u304c\u7d4c\u3063\u305f\u3089\u672a\u5b8c\u4e86\u3067\u3082\u7d42\u4e86\u3059\u308b while ( not pImageTask -> m_abort ) { // 5 \u30df\u30ea\u79d2\u3054\u3068\u306b 1 \u884c\u5857\u308b System :: Sleep ( 5 ms ); if ( pImageTask -> update ()) { break ; } } } // \u975e\u540c\u671f\u30bf\u30b9\u30af AsyncTask < void > m_task ; // \u51e6\u7406\u3092\u4e2d\u65ad\u3059\u308b\u304b\u306e\u30d5\u30e9\u30b0 std :: atomic < bool > m_abort { false }; // \u51e6\u7406\u4e2d\u306e\u753b\u50cf Image m_processingImage ; // \u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u884c\u6570 std :: atomic < size_t > m_processedLine = 0 ; //////// // // \u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3067\u4fdd\u8b77\u3059\u308b\u30c7\u30fc\u30bf // std :: mutex m_mutex ; // \u7d50\u679c\u753b\u50cf Image m_result ; // //////// }; void Main () { ImageTask imageTask ; DynamicTexture texture ; size_t currentProgress = 0 ; while ( System :: Update ()) { // \u9032\u6357\u304c\u3042\u308c\u3070 if ( const size_t newProgress = imageTask . getProgress (); currentProgress != newProgress ) { // \u7d50\u679c\u753b\u50cf\u3092\u53d6\u5f97\u3059\u308b imageTask . get ( texture ); currentProgress = newProgress ; Print << currentProgress ; } if ( texture ) { texture . draw (); } } }","title":"3.4 \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u751f\u6210\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u9014\u4e2d\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/reference/messagebox/","text":"\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9 \u00b6 1. \u6982\u8981 \u00b6 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u30e1\u30a4\u30f3\u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u306f\u5225\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u3057\u3066\u3001\u30e6\u30fc\u30b6\u306b\u5fdc\u7b54\u3092\u6c42\u3081\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u30e6\u30fc\u30b6\u306e\u9078\u629e\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u4e2d\u306f\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u9032\u884c\u304c\u30d6\u30ed\u30c3\u30af\u3055\u308c\u307e\u3059\u3002 \u6ce8\u610f\u4e8b\u9805 \u00b6 \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u306f\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u4e2d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u30e1\u30a4\u30f3\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u88cf\u306b\u96a0\u308c\u3001\u30e6\u30fc\u30b6\u304c\u64cd\u4f5c\u4e0d\u80fd\u306b\u9665\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u969b\u306f\u3001\u4ee3\u308f\u308a\u306b 3.5 \u306e\u3088\u3046\u306b\u30b7\u30fc\u30f3\u5185\u306e\u63cf\u753b\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u518d\u73fe\u3059\u308b\u306a\u3069\u3001\u6a19\u6e96\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059 OpenSiv3D v0.6.6 \u304b\u3089\u306f Windows \u7248\u3067\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b\u3068\u3001\u30b7\u30fc\u30f3\u5185\u3067\u63cf\u753b\u3055\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f 2. \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e API \u00b6 \u95a2\u6570 \u00b6 \u300cOK\u300d\u30dc\u30bf\u30f3\u3092\u6301\u3064\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 MessageBoxResult System::MessageBoxOK ( StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); MessageBoxResult System::MessageBoxOK ( StringView title , StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); title \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30bf\u30a4\u30c8\u30eb text \u672c\u6587 style \u30b9\u30bf\u30a4\u30eb \u623b\u308a\u5024 MessageBoxResult::OK \u300cOK\u300d\u300c\u30ad\u30e3\u30f3\u30bb\u30eb\u300d\u30dc\u30bf\u30f3\u3092\u6301\u3064\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 MessageBoxResult System::MessageBoxOKCancel ( StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); MessageBoxResult System::MessageBoxOKCancel ( StringView title , StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); title \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30bf\u30a4\u30c8\u30eb text \u672c\u6587 style \u30b9\u30bf\u30a4\u30eb \u623b\u308a\u5024 MessageBoxResult::OK \u307e\u305f\u306f MessageBoxResult::Cancel \u300c\u306f\u3044\u300d\u300c\u3044\u3044\u3048\u300d\u30dc\u30bf\u30f3\u3092\u6301\u3064\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 MessageBoxResult System::MessageBoxYesNo ( StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); MessageBoxResult System::MessageBoxYesNo ( StringView title , StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); title \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30bf\u30a4\u30c8\u30eb text \u672c\u6587 style \u30b9\u30bf\u30a4\u30eb \u623b\u308a\u5024 MessageBoxResult::Yes \u307e\u305f\u306f MessageBoxResult::No \u5217\u6319\u578b \u00b6 MessageBoxResult \u00b6 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u3092\u8868\u3059\u5b9a\u6570\u3067\u3059\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u306f\u3001\u30dc\u30bf\u30f3\u3092\u9078\u629e\u305b\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u9589\u3058\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u5024 \u8aac\u660e OK \u300cOK\u300d\u304c\u62bc\u3055\u308c\u305f Cancel \u300c\u30ad\u30e3\u30f3\u30bb\u30eb\u300d\u304c\u62bc\u3055\u308c\u305f\u304b\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u304c\u9589\u3058\u3089\u308c\u305f Yes \u300c\u306f\u3044\u300d\u304c\u62bc\u3055\u308c\u305f No \u300c\u3044\u3044\u3048\u300d\u304c\u62bc\u3055\u308c\u305f MessageBoxStyle \u00b6 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8868\u3059\u5b9a\u6570\u3067\u3059\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u306f\u30b9\u30bf\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u3001\u305d\u306e\u5834\u5408\u306f\u901a\u5e38\u306e\u30b9\u30bf\u30a4\u30eb\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 \u5024 \u8aac\u660e Default \u901a\u5e38\u306e\u30b9\u30bf\u30a4\u30eb Info \u60c5\u5831\u3092\u4f1d\u3048\u308b\u30b9\u30bf\u30a4\u30eb Warning \u8b66\u544a\u3092\u4f1d\u3048\u308b\u30b9\u30bf\u30a4\u30eb Error \u6df1\u523b\u306a\u30a8\u30e9\u30fc\u3092\u4f1d\u3048\u308b\u30b9\u30bf\u30a4\u30eb Question \u30af\u30a8\u30b9\u30c1\u30e7\u30f3\u30de\u30fc\u30af\u306e\u30b9\u30bf\u30a4\u30eb 3. \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 3.1 \u4e00\u5b9a\u6642\u9593\u304c\u7d4c\u904e\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b \u00b6 # include <Siv3D.hpp> void Main () { // 5 \u79d2\u9593\u306e\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u30bf\u30a4\u30de\u30fc Timer timer { 5 s , StartImmediately :: Yes }; while ( System :: Update ()) { ClearPrint (); // \u6b8b\u308a\u6642\u9593\u3092\u8868\u793a\u3059\u308b Print << U \"\u6b8b\u308a \" << timer . format ( U \"mm:ss\" ); // \u30bf\u30a4\u30de\u30fc\u304c 0 \u306b\u5230\u9054\u3057\u305f\u3089 if ( timer . reachedZero ()) { // OK \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b System :: MessageBoxOK ( U \"\u4f53\u9a13\u7248\u306e\u7d42\u4e86\" , U \"\u4f53\u9a13\u7248\u3067\u904a\u3079\u308b\u306e\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\" ); // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } } 3.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u7d42\u4e86\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b \u00b6 # include <Siv3D.hpp> void Main () { // \u30e6\u30fc\u30b6\u64cd\u4f5c\u3067\u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b System :: SetTerminationTriggers ( UserAction :: NoAction ); while ( System :: Update ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( System :: GetUserActions () & UserAction :: CloseButtonClicked ) { // Yes \u304b No \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b const MessageBoxResult result = System :: MessageBoxYesNo ( U \"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3057\u307e\u3059\u304b\uff1f\" ); // Yes \u304c\u9078\u3070\u308c\u305f\u3089 if ( result == MessageBoxResult :: Yes ) { // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } } } 3.3 \u8d77\u52d5\u6642\u306b\u524d\u56de\u306e\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u304b\u78ba\u8a8d\u3059\u308b \u00b6 # include <Siv3D.hpp> void Main () { // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 constexpr FilePathView SaveDataPath = U \"save.txt\" ; // \u8aad\u307f\u8fbc\u3093\u3060\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf String saveData ; // \u3082\u3057\u524d\u56de\u306e\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308c\u3070 if ( FileSystem :: Exists ( SaveDataPath )) { // Yes \u304b No \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b const MessageBoxResult result = System :: MessageBoxYesNo ( U \"\u524d\u56de\u306e\u30c7\u30fc\u30bf\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\u8aad\u307f\u8fbc\u3093\u3067\u305d\u3053\u304b\u3089\u518d\u958b\u3057\u307e\u3059\u304b\uff1f\" ); // Yes \u304c\u9078\u3070\u308c\u305f\u3089 if ( result == MessageBoxResult :: Yes ) { // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3080 saveData = TextReader { SaveDataPath }. readAll (); } } // \u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u305f\u3089 if ( saveData ) { Print << U \"\u524d\u56de\u306e\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf: \" << saveData ; } else { Print << U \"\u65b0\u898f\u30c7\u30fc\u30bf\" ; } while ( System :: Update ()) { } // \u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\uff08\u73fe\u5728\u306e\u65e5\u4ed8\u3068\u6642\u523b\uff09\u3092\u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u7d42\u4e86\u3059\u308b TextWriter { SaveDataPath }. writeln ( DateTime :: Now ()); } 3.4 \u4f5c\u696d\u5185\u5bb9\u3092\u4fdd\u5b58\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b \u00b6 # include <Siv3D.hpp> void Main () { // \u30e6\u30fc\u30b6\u64cd\u4f5c\u3067\u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b System :: SetTerminationTriggers ( UserAction :: NoAction ); // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 constexpr FilePathView SaveDataPath = U \"save-hsv.txt\" ; // \u80cc\u666f\u8272 HSV hsv = ColorF { 0.8 , 0.9 , 1.0 }; // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308c\u3070\u305d\u3053\u304b\u3089\u8272\u3092\u8aad\u307f\u8fbc\u3080 if ( FileSystem :: Exists ( SaveDataPath )) { Deserializer < BinaryReader > reader { SaveDataPath }; reader ( hsv ); } // \u73fe\u5728\u9078\u629e\u3057\u3066\u3044\u308b\u8272\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u304b bool saved = true ; while ( System :: Update ()) { // \u4f5c\u696d\u5185\u5bb9\u304c\u672a\u4fdd\u5b58\u306e\u5834\u5408\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u77e5\u3089\u305b\u308b Window :: SetTitle ( saved ? U \"\u8272\u306e\u9078\u629e\" : U \"* \u8272\u306e\u9078\u629e [\u672a\u4fdd\u5b58]\" ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a\u3059\u308b Scene :: SetBackground ( hsv ); // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3067\u8272\u3092\u9078\u629e\u3059\u308b if ( SimpleGUI :: ColorPicker ( hsv , Vec2 { 40 , 40 })) { // \u5909\u66f4\u304c\u3042\u308c\u3070\u672a\u4fdd\u5b58\u72b6\u614b\u306b\u3059\u308b saved = false ; } // \u672a\u4fdd\u5b58\u306e\u5834\u5408\u3001\u300c\u8272\u3092\u4fdd\u5b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u8868\u793a if ( SimpleGUI :: Button ( U \"\u8272\u3092\u4fdd\u5b58\u3059\u308b\" , Vec2 { 240 , 40 }, unspecified , ( not saved ))) // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 { // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306b\u8272\u3092\u4fdd\u5b58 Serializer < BinaryWriter > writer { SaveDataPath }; writer ( hsv ); // \u4fdd\u5b58\u6e08\u307f\u306b\u3059\u308b saved = true ; } // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( System :: GetUserActions () & UserAction :: CloseButtonClicked ) { if ( saved ) // \u4fdd\u5b58\u6e08\u307f\u306a\u3089 { return ; // \u4f55\u3082\u305b\u305a\u7d42\u4e86\u3059\u308b } else // \u672a\u4fdd\u5b58\u306a\u3089 { // OK \u304b \u30ad\u30e3\u30f3\u30bb\u30eb \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b const MessageBoxResult result = System :: MessageBoxOKCancel ( U \"\u8272\u306e\u9078\u629e\" , U \"\u8272\u3092\u4fdd\u5b58\u305b\u305a\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3057\u307e\u3059\u304b\uff1f\" ); // OK \u304c\u9078\u3070\u308c\u305f\u3089 if ( result == MessageBoxResult :: OK ) { // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } } } } 3.5 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u76f8\u5f53\u306e\u6a5f\u80fd\u3092\u81ea\u4f5c\u3059\u308b \u00b6 # include <Siv3D.hpp> namespace s3dx { class SceneMessageBoxImpl { public : static constexpr Size MessageBoxSize { 360 , 240 }; static constexpr Size MessageBoxButtonSize { 120 , 40 }; static constexpr ColorF MessageBoxBackgroundColor { 0.96 }; static constexpr ColorF MessageBoxActiveButtonColor { 1.0 }; static constexpr ColorF MessageBoxTextColor { 0.11 }; SceneMessageBoxImpl () { System :: SetTerminationTriggers ( UserAction :: NoAction ); Scene :: SetBackground ( ColorF { 0.11 }); } ~ SceneMessageBoxImpl () { System :: SetTerminationTriggers ( m_triggers ); Scene :: SetBackground ( m_bgColor ); } MessageBoxResult show ( StringView text , const std :: pair < String , MessageBoxResult >& button ) const { while ( System :: Update ()) { drawMessageBox ( text ); m_buttonC . draw ( m_buttonC . mouseOver () ? MessageBoxActiveButtonColor : MessageBoxBackgroundColor ). drawFrame ( 0 , 1 , MessageBoxTextColor ); m_font ( button . first ). drawAt ( m_buttonC . center (). moveBy ( 0 , -1 ), MessageBoxTextColor ); if ( m_buttonC . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( MouseL . down ()) { break ; } } } return button . second ; } MessageBoxResult show ( const StringView text , const std :: pair < String , MessageBoxResult >& button0 , const std :: pair < String , MessageBoxResult >& button1 ) const { MessageBoxResult result = MessageBoxResult :: Cancel ; while ( System :: Update ()) { drawMessageBox ( text ); m_buttonL . draw ( m_buttonL . mouseOver () ? MessageBoxActiveButtonColor : MessageBoxBackgroundColor ). drawFrame ( 0 , 1 , MessageBoxTextColor ); m_buttonR . draw ( m_buttonR . mouseOver () ? MessageBoxActiveButtonColor : MessageBoxBackgroundColor ). drawFrame ( 0 , 1 , MessageBoxTextColor ); m_font ( button0 . first ). drawAt ( m_buttonL . center (). moveBy ( 0 , -1 ), MessageBoxTextColor ); m_font ( button1 . first ). drawAt ( m_buttonR . center (). moveBy ( 0 , -1 ), MessageBoxTextColor ); if ( m_buttonL . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( MouseL . down ()) { result = button0 . second ; break ; } } else if ( m_buttonR . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( MouseL . down ()) { result = button1 . second ; break ; } } } return result ; } private : Transformer2D m_tr { Mat3x2 :: Identity (), Mat3x2 :: Identity (), Transformer2D :: Target :: SetLocal }; ScopedRenderStates2D m_rs { BlendState :: Default2D , SamplerState :: Default2D , RasterizerState :: Default2D }; uint32 m_triggers = System :: GetTerminationTriggers (); ColorF m_bgColor = Scene :: GetBackground (); Vec2 m_pos = (( Scene :: Size () - MessageBoxSize ) * 0.5 ); RectF m_messageBoxRect { m_pos , MessageBoxSize }; RectF m_buttonC = RectF { Arg :: bottomCenter ( m_messageBoxRect . bottomCenter (). movedBy ( 0 , -20 )), MessageBoxButtonSize }; RectF m_buttonL = RectF { Arg :: bottomCenter ( m_messageBoxRect . bottomCenter (). movedBy ( -80 , -20 )), MessageBoxButtonSize }; RectF m_buttonR = RectF { Arg :: bottomCenter ( m_messageBoxRect . bottomCenter (). movedBy ( 80 , -20 )), MessageBoxButtonSize }; Font m_font = SimpleGUI :: GetFont (); void drawMessageBox ( StringView text ) const { m_messageBoxRect . draw ( MessageBoxBackgroundColor ). stretched ( -5 ). drawFrame ( 1 , 0 , MessageBoxTextColor ); m_font ( text ). draw ( 14 , m_messageBoxRect . stretched ( -20 , -20 , -80 , -20 ), MessageBoxTextColor ); } }; inline MessageBoxResult SceneMessageBoxOK ( StringView text ) { return SceneMessageBoxImpl {}. show ( text , { U \"OK\" , MessageBoxResult :: OK }); } [[ nodiscard ]] inline MessageBoxResult SceneMessageBoxOKCancel ( StringView text ) { return SceneMessageBoxImpl {}. show ( text , { U \"OK\" , MessageBoxResult :: OK }, { U \"\u30ad\u30e3\u30f3\u30bb\u30eb\" , MessageBoxResult :: Cancel }); } [[ nodiscard ]] inline MessageBoxResult SceneMessageBoxYesNo ( StringView text ) { return SceneMessageBoxImpl {}. show ( text , { U \"\u306f\u3044\" , MessageBoxResult :: Yes }, { U \"\u3044\u3044\u3048\" , MessageBoxResult :: No }); } } void Main () { // 5 \u79d2\u9593\u306e\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u30bf\u30a4\u30de\u30fc Timer timer { 5 s , StartImmediately :: Yes }; while ( System :: Update ()) { ClearPrint (); // \u6b8b\u308a\u6642\u9593\u3092\u8868\u793a\u3059\u308b Print << U \"\u6b8b\u308a \" << timer . format ( U \"mm:ss\" ); // \u30bf\u30a4\u30de\u30fc\u304c 0 \u306b\u5230\u9054\u3057\u305f\u3089 if ( timer . reachedZero ()) { // OK \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b s3dx :: SceneMessageBoxOK ( U \"\u4f53\u9a13\u7248\u3067\u904a\u3079\u308b\u306e\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\" ); // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } }","title":"\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/reference/messagebox/#\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9","text":"","title":"\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/reference/messagebox/#1-\u6982\u8981","text":"\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u30e1\u30a4\u30f3\u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u306f\u5225\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u3057\u3066\u3001\u30e6\u30fc\u30b6\u306b\u5fdc\u7b54\u3092\u6c42\u3081\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u30e6\u30fc\u30b6\u306e\u9078\u629e\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u4e2d\u306f\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u9032\u884c\u304c\u30d6\u30ed\u30c3\u30af\u3055\u308c\u307e\u3059\u3002","title":"1. \u6982\u8981"},{"location":"ja-jp/reference/messagebox/#2-\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e-api","text":"","title":"2. \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e API"},{"location":"ja-jp/reference/messagebox/#\u95a2\u6570","text":"\u300cOK\u300d\u30dc\u30bf\u30f3\u3092\u6301\u3064\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 MessageBoxResult System::MessageBoxOK ( StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); MessageBoxResult System::MessageBoxOK ( StringView title , StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); title \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30bf\u30a4\u30c8\u30eb text \u672c\u6587 style \u30b9\u30bf\u30a4\u30eb \u623b\u308a\u5024 MessageBoxResult::OK \u300cOK\u300d\u300c\u30ad\u30e3\u30f3\u30bb\u30eb\u300d\u30dc\u30bf\u30f3\u3092\u6301\u3064\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 MessageBoxResult System::MessageBoxOKCancel ( StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); MessageBoxResult System::MessageBoxOKCancel ( StringView title , StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); title \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30bf\u30a4\u30c8\u30eb text \u672c\u6587 style \u30b9\u30bf\u30a4\u30eb \u623b\u308a\u5024 MessageBoxResult::OK \u307e\u305f\u306f MessageBoxResult::Cancel \u300c\u306f\u3044\u300d\u300c\u3044\u3044\u3048\u300d\u30dc\u30bf\u30f3\u3092\u6301\u3064\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 MessageBoxResult System::MessageBoxYesNo ( StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); MessageBoxResult System::MessageBoxYesNo ( StringView title , StringView text , MessageBoxStyle style = MessageBoxStyle :: Default ); title \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30bf\u30a4\u30c8\u30eb text \u672c\u6587 style \u30b9\u30bf\u30a4\u30eb \u623b\u308a\u5024 MessageBoxResult::Yes \u307e\u305f\u306f MessageBoxResult::No","title":"\u95a2\u6570"},{"location":"ja-jp/reference/messagebox/#\u5217\u6319\u578b","text":"","title":"\u5217\u6319\u578b"},{"location":"ja-jp/reference/messagebox/#3-\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b5\u30f3\u30d7\u30eb","text":"","title":"3. \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/reference/messagebox/#31-\u4e00\u5b9a\u6642\u9593\u304c\u7d4c\u904e\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b","text":"# include <Siv3D.hpp> void Main () { // 5 \u79d2\u9593\u306e\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u30bf\u30a4\u30de\u30fc Timer timer { 5 s , StartImmediately :: Yes }; while ( System :: Update ()) { ClearPrint (); // \u6b8b\u308a\u6642\u9593\u3092\u8868\u793a\u3059\u308b Print << U \"\u6b8b\u308a \" << timer . format ( U \"mm:ss\" ); // \u30bf\u30a4\u30de\u30fc\u304c 0 \u306b\u5230\u9054\u3057\u305f\u3089 if ( timer . reachedZero ()) { // OK \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b System :: MessageBoxOK ( U \"\u4f53\u9a13\u7248\u306e\u7d42\u4e86\" , U \"\u4f53\u9a13\u7248\u3067\u904a\u3079\u308b\u306e\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\" ); // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } }","title":"3.1 \u4e00\u5b9a\u6642\u9593\u304c\u7d4c\u904e\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b"},{"location":"ja-jp/reference/messagebox/#32-\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u7d42\u4e86\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b","text":"# include <Siv3D.hpp> void Main () { // \u30e6\u30fc\u30b6\u64cd\u4f5c\u3067\u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b System :: SetTerminationTriggers ( UserAction :: NoAction ); while ( System :: Update ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( System :: GetUserActions () & UserAction :: CloseButtonClicked ) { // Yes \u304b No \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b const MessageBoxResult result = System :: MessageBoxYesNo ( U \"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3057\u307e\u3059\u304b\uff1f\" ); // Yes \u304c\u9078\u3070\u308c\u305f\u3089 if ( result == MessageBoxResult :: Yes ) { // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } } }","title":"3.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u7d42\u4e86\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b"},{"location":"ja-jp/reference/messagebox/#33-\u8d77\u52d5\u6642\u306b\u524d\u56de\u306e\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u304b\u78ba\u8a8d\u3059\u308b","text":"# include <Siv3D.hpp> void Main () { // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 constexpr FilePathView SaveDataPath = U \"save.txt\" ; // \u8aad\u307f\u8fbc\u3093\u3060\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf String saveData ; // \u3082\u3057\u524d\u56de\u306e\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308c\u3070 if ( FileSystem :: Exists ( SaveDataPath )) { // Yes \u304b No \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b const MessageBoxResult result = System :: MessageBoxYesNo ( U \"\u524d\u56de\u306e\u30c7\u30fc\u30bf\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\u8aad\u307f\u8fbc\u3093\u3067\u305d\u3053\u304b\u3089\u518d\u958b\u3057\u307e\u3059\u304b\uff1f\" ); // Yes \u304c\u9078\u3070\u308c\u305f\u3089 if ( result == MessageBoxResult :: Yes ) { // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3080 saveData = TextReader { SaveDataPath }. readAll (); } } // \u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u305f\u3089 if ( saveData ) { Print << U \"\u524d\u56de\u306e\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf: \" << saveData ; } else { Print << U \"\u65b0\u898f\u30c7\u30fc\u30bf\" ; } while ( System :: Update ()) { } // \u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\uff08\u73fe\u5728\u306e\u65e5\u4ed8\u3068\u6642\u523b\uff09\u3092\u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u7d42\u4e86\u3059\u308b TextWriter { SaveDataPath }. writeln ( DateTime :: Now ()); }","title":"3.3 \u8d77\u52d5\u6642\u306b\u524d\u56de\u306e\u30bb\u30fc\u30d6\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u304b\u78ba\u8a8d\u3059\u308b"},{"location":"ja-jp/reference/messagebox/#34-\u4f5c\u696d\u5185\u5bb9\u3092\u4fdd\u5b58\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b","text":"# include <Siv3D.hpp> void Main () { // \u30e6\u30fc\u30b6\u64cd\u4f5c\u3067\u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b System :: SetTerminationTriggers ( UserAction :: NoAction ); // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 constexpr FilePathView SaveDataPath = U \"save-hsv.txt\" ; // \u80cc\u666f\u8272 HSV hsv = ColorF { 0.8 , 0.9 , 1.0 }; // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308c\u3070\u305d\u3053\u304b\u3089\u8272\u3092\u8aad\u307f\u8fbc\u3080 if ( FileSystem :: Exists ( SaveDataPath )) { Deserializer < BinaryReader > reader { SaveDataPath }; reader ( hsv ); } // \u73fe\u5728\u9078\u629e\u3057\u3066\u3044\u308b\u8272\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u304b bool saved = true ; while ( System :: Update ()) { // \u4f5c\u696d\u5185\u5bb9\u304c\u672a\u4fdd\u5b58\u306e\u5834\u5408\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u77e5\u3089\u305b\u308b Window :: SetTitle ( saved ? U \"\u8272\u306e\u9078\u629e\" : U \"* \u8272\u306e\u9078\u629e [\u672a\u4fdd\u5b58]\" ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a\u3059\u308b Scene :: SetBackground ( hsv ); // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3067\u8272\u3092\u9078\u629e\u3059\u308b if ( SimpleGUI :: ColorPicker ( hsv , Vec2 { 40 , 40 })) { // \u5909\u66f4\u304c\u3042\u308c\u3070\u672a\u4fdd\u5b58\u72b6\u614b\u306b\u3059\u308b saved = false ; } // \u672a\u4fdd\u5b58\u306e\u5834\u5408\u3001\u300c\u8272\u3092\u4fdd\u5b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u8868\u793a if ( SimpleGUI :: Button ( U \"\u8272\u3092\u4fdd\u5b58\u3059\u308b\" , Vec2 { 240 , 40 }, unspecified , ( not saved ))) // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 { // \u30bb\u30fc\u30d6\u30d5\u30a1\u30a4\u30eb\u306b\u8272\u3092\u4fdd\u5b58 Serializer < BinaryWriter > writer { SaveDataPath }; writer ( hsv ); // \u4fdd\u5b58\u6e08\u307f\u306b\u3059\u308b saved = true ; } // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( System :: GetUserActions () & UserAction :: CloseButtonClicked ) { if ( saved ) // \u4fdd\u5b58\u6e08\u307f\u306a\u3089 { return ; // \u4f55\u3082\u305b\u305a\u7d42\u4e86\u3059\u308b } else // \u672a\u4fdd\u5b58\u306a\u3089 { // OK \u304b \u30ad\u30e3\u30f3\u30bb\u30eb \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b const MessageBoxResult result = System :: MessageBoxOKCancel ( U \"\u8272\u306e\u9078\u629e\" , U \"\u8272\u3092\u4fdd\u5b58\u305b\u305a\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3057\u307e\u3059\u304b\uff1f\" ); // OK \u304c\u9078\u3070\u308c\u305f\u3089 if ( result == MessageBoxResult :: OK ) { // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } } } }","title":"3.4 \u4f5c\u696d\u5185\u5bb9\u3092\u4fdd\u5b58\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b"},{"location":"ja-jp/reference/messagebox/#35-\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u76f8\u5f53\u306e\u6a5f\u80fd\u3092\u81ea\u4f5c\u3059\u308b","text":"# include <Siv3D.hpp> namespace s3dx { class SceneMessageBoxImpl { public : static constexpr Size MessageBoxSize { 360 , 240 }; static constexpr Size MessageBoxButtonSize { 120 , 40 }; static constexpr ColorF MessageBoxBackgroundColor { 0.96 }; static constexpr ColorF MessageBoxActiveButtonColor { 1.0 }; static constexpr ColorF MessageBoxTextColor { 0.11 }; SceneMessageBoxImpl () { System :: SetTerminationTriggers ( UserAction :: NoAction ); Scene :: SetBackground ( ColorF { 0.11 }); } ~ SceneMessageBoxImpl () { System :: SetTerminationTriggers ( m_triggers ); Scene :: SetBackground ( m_bgColor ); } MessageBoxResult show ( StringView text , const std :: pair < String , MessageBoxResult >& button ) const { while ( System :: Update ()) { drawMessageBox ( text ); m_buttonC . draw ( m_buttonC . mouseOver () ? MessageBoxActiveButtonColor : MessageBoxBackgroundColor ). drawFrame ( 0 , 1 , MessageBoxTextColor ); m_font ( button . first ). drawAt ( m_buttonC . center (). moveBy ( 0 , -1 ), MessageBoxTextColor ); if ( m_buttonC . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( MouseL . down ()) { break ; } } } return button . second ; } MessageBoxResult show ( const StringView text , const std :: pair < String , MessageBoxResult >& button0 , const std :: pair < String , MessageBoxResult >& button1 ) const { MessageBoxResult result = MessageBoxResult :: Cancel ; while ( System :: Update ()) { drawMessageBox ( text ); m_buttonL . draw ( m_buttonL . mouseOver () ? MessageBoxActiveButtonColor : MessageBoxBackgroundColor ). drawFrame ( 0 , 1 , MessageBoxTextColor ); m_buttonR . draw ( m_buttonR . mouseOver () ? MessageBoxActiveButtonColor : MessageBoxBackgroundColor ). drawFrame ( 0 , 1 , MessageBoxTextColor ); m_font ( button0 . first ). drawAt ( m_buttonL . center (). moveBy ( 0 , -1 ), MessageBoxTextColor ); m_font ( button1 . first ). drawAt ( m_buttonR . center (). moveBy ( 0 , -1 ), MessageBoxTextColor ); if ( m_buttonL . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( MouseL . down ()) { result = button0 . second ; break ; } } else if ( m_buttonR . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); if ( MouseL . down ()) { result = button1 . second ; break ; } } } return result ; } private : Transformer2D m_tr { Mat3x2 :: Identity (), Mat3x2 :: Identity (), Transformer2D :: Target :: SetLocal }; ScopedRenderStates2D m_rs { BlendState :: Default2D , SamplerState :: Default2D , RasterizerState :: Default2D }; uint32 m_triggers = System :: GetTerminationTriggers (); ColorF m_bgColor = Scene :: GetBackground (); Vec2 m_pos = (( Scene :: Size () - MessageBoxSize ) * 0.5 ); RectF m_messageBoxRect { m_pos , MessageBoxSize }; RectF m_buttonC = RectF { Arg :: bottomCenter ( m_messageBoxRect . bottomCenter (). movedBy ( 0 , -20 )), MessageBoxButtonSize }; RectF m_buttonL = RectF { Arg :: bottomCenter ( m_messageBoxRect . bottomCenter (). movedBy ( -80 , -20 )), MessageBoxButtonSize }; RectF m_buttonR = RectF { Arg :: bottomCenter ( m_messageBoxRect . bottomCenter (). movedBy ( 80 , -20 )), MessageBoxButtonSize }; Font m_font = SimpleGUI :: GetFont (); void drawMessageBox ( StringView text ) const { m_messageBoxRect . draw ( MessageBoxBackgroundColor ). stretched ( -5 ). drawFrame ( 1 , 0 , MessageBoxTextColor ); m_font ( text ). draw ( 14 , m_messageBoxRect . stretched ( -20 , -20 , -80 , -20 ), MessageBoxTextColor ); } }; inline MessageBoxResult SceneMessageBoxOK ( StringView text ) { return SceneMessageBoxImpl {}. show ( text , { U \"OK\" , MessageBoxResult :: OK }); } [[ nodiscard ]] inline MessageBoxResult SceneMessageBoxOKCancel ( StringView text ) { return SceneMessageBoxImpl {}. show ( text , { U \"OK\" , MessageBoxResult :: OK }, { U \"\u30ad\u30e3\u30f3\u30bb\u30eb\" , MessageBoxResult :: Cancel }); } [[ nodiscard ]] inline MessageBoxResult SceneMessageBoxYesNo ( StringView text ) { return SceneMessageBoxImpl {}. show ( text , { U \"\u306f\u3044\" , MessageBoxResult :: Yes }, { U \"\u3044\u3044\u3048\" , MessageBoxResult :: No }); } } void Main () { // 5 \u79d2\u9593\u306e\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u30bf\u30a4\u30de\u30fc Timer timer { 5 s , StartImmediately :: Yes }; while ( System :: Update ()) { ClearPrint (); // \u6b8b\u308a\u6642\u9593\u3092\u8868\u793a\u3059\u308b Print << U \"\u6b8b\u308a \" << timer . format ( U \"mm:ss\" ); // \u30bf\u30a4\u30de\u30fc\u304c 0 \u306b\u5230\u9054\u3057\u305f\u3089 if ( timer . reachedZero ()) { // OK \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3059\u308b s3dx :: SceneMessageBoxOK ( U \"\u4f53\u9a13\u7248\u3067\u904a\u3079\u308b\u306e\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\" ); // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b return ; } } }","title":"3.5 \u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u76f8\u5f53\u306e\u6a5f\u80fd\u3092\u81ea\u4f5c\u3059\u308b"},{"location":"ja-jp/reference/multithreading/","text":"\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9 \u00b6 \u5b9f\u884c\u74b0\u5883\u306b\u304a\u3044\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30b9\u30ec\u30c3\u30c9\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 size_t Threading::GetConcurrency (); \u623b\u308a\u5024 \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30b9\u30ec\u30c3\u30c9\u6570 \u6761\u4ef6\u3092\u6e80\u305f\u3059\u914d\u5217\u306e\u8981\u7d20\u3092\u4e26\u5217\u51e6\u7406\u3067\u6570\u3048\u307e\u3059\u3002 template < class Fty > size_t Array < Type >:: parallel_count_if ( Fty f ) const ; f \u6761\u4ef6\u3092\u8a18\u8ff0\u3057\u305f\u95a2\u6570 \u623b\u308a\u5024 \u6761\u4ef6\u3092\u6e80\u305f\u3059\u914d\u5217\u306e\u8981\u7d20\u6570 \u914d\u5217\u306e\u5404\u8981\u7d20\u3092\u5f15\u6570\u306b\u3057\u305f\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u4e26\u5217\u5b9f\u884c\u3057\u307e\u3059\u3002 template < class Fty > void Array < Type >:: parallel_each ( Fty f ); template < class Fty > void Array < Type >:: parallel_each ( Fty f ) const ; f \u975e\u540c\u671f\u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570 \u914d\u5217\u306e\u5404\u8981\u7d20\u3092\u5f15\u6570\u306b\u3057\u305f\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u4e26\u5217\u5b9f\u884c\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u540c\u3058\u9806\u5e8f\u306e\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002 template < class Fty > size_t Array < Type >:: parallel_map ( Fty f ) const ; f \u975e\u540c\u671f\u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570 \u623b\u308a\u5024 \u5404\u8981\u7d20\u3092\u5f15\u6570\u306b\u95a2\u6570 f \u3092\u5b9f\u884c\u3057\u305f\u623b\u308a\u5024\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217","title":"Multithreading"},{"location":"ja-jp/reference/multithreading/#\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9","text":"\u5b9f\u884c\u74b0\u5883\u306b\u304a\u3044\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30b9\u30ec\u30c3\u30c9\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 size_t Threading::GetConcurrency (); \u623b\u308a\u5024 \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30b9\u30ec\u30c3\u30c9\u6570 \u6761\u4ef6\u3092\u6e80\u305f\u3059\u914d\u5217\u306e\u8981\u7d20\u3092\u4e26\u5217\u51e6\u7406\u3067\u6570\u3048\u307e\u3059\u3002 template < class Fty > size_t Array < Type >:: parallel_count_if ( Fty f ) const ; f \u6761\u4ef6\u3092\u8a18\u8ff0\u3057\u305f\u95a2\u6570 \u623b\u308a\u5024 \u6761\u4ef6\u3092\u6e80\u305f\u3059\u914d\u5217\u306e\u8981\u7d20\u6570 \u914d\u5217\u306e\u5404\u8981\u7d20\u3092\u5f15\u6570\u306b\u3057\u305f\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u4e26\u5217\u5b9f\u884c\u3057\u307e\u3059\u3002 template < class Fty > void Array < Type >:: parallel_each ( Fty f ); template < class Fty > void Array < Type >:: parallel_each ( Fty f ) const ; f \u975e\u540c\u671f\u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570 \u914d\u5217\u306e\u5404\u8981\u7d20\u3092\u5f15\u6570\u306b\u3057\u305f\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u4e26\u5217\u5b9f\u884c\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u540c\u3058\u9806\u5e8f\u306e\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002 template < class Fty > size_t Array < Type >:: parallel_map ( Fty f ) const ; f \u975e\u540c\u671f\u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570 \u623b\u308a\u5024 \u5404\u8981\u7d20\u3092\u5f15\u6570\u306b\u95a2\u6570 f \u3092\u5b9f\u884c\u3057\u305f\u623b\u308a\u5024\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217","title":"\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9"},{"location":"ja-jp/tutorial/tutorial/","text":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u00b6 Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5165\u9580\u8005\u5411\u3051 https://zenn.dev/reputeless/books/siv3d-documentation \u4e2d\u7d1a\u8005\u5411\u3051 https://github.com/Reputeless/games \u4e2d\u7d1a\u8005\u5411\u3051 https://github.com/Siv3D/Siv3D-Samples","title":"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"},{"location":"ja-jp/tutorial/tutorial/#siv3d-\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","text":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5165\u9580\u8005\u5411\u3051 https://zenn.dev/reputeless/books/siv3d-documentation \u4e2d\u7d1a\u8005\u5411\u3051 https://github.com/Reputeless/games \u4e2d\u7d1a\u8005\u5411\u3051 https://github.com/Siv3D/Siv3D-Samples","title":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"},{"location":"mascot/gallery/","text":"Siv3D-kun Gallery \u00b6 3D Model \u00b6 Siv3D-kun VRM Model (by itakawa ) Goods \u00b6 Siv3D-kun LINE Stickers Official Images \u00b6 Siv3D Advent Calendar 2021 Invitation \u00b6 Siv3D Web Site Illustration (old) \u00b6 Siv3D for Kids Title Screen \u00b6 Siv3D Game Jam (2016) Event Banner \u00b6","title":"Gallery"},{"location":"mascot/gallery/#siv3d-kun-gallery","text":"","title":"Siv3D-kun Gallery"},{"location":"mascot/gallery/#3d-model","text":"Siv3D-kun VRM Model (by itakawa )","title":"3D Model"},{"location":"mascot/gallery/#goods","text":"Siv3D-kun LINE Stickers","title":"Goods"},{"location":"mascot/gallery/#official-images","text":"","title":"Official Images"},{"location":"mascot/mascot/","text":"Siv3D-kun \u00b6 Siv3D-kun is the mascot of the Siv3D C++ framework. The design was selected in 2015 through a public contest. Synopsis \u00b6 Age: 12 / Height: 144 cm / Weight: 36 kg \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b Related Files \u00b6 The following files are included in the Siv3D project directory. Official Image example/siv3d-kun.png 3D Model example/obj/siv3d-kun.obj Pixel Graphics example/spritesheet/siv3d-kun-16.png","title":"Mascot"},{"location":"mascot/mascot/#siv3d-kun","text":"Siv3D-kun is the mascot of the Siv3D C++ framework. The design was selected in 2015 through a public contest.","title":"Siv3D-kun"},{"location":"mascot/mascot/#synopsis","text":"Age: 12 / Height: 144 cm / Weight: 36 kg \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b","title":"Synopsis"},{"location":"mascot/mascot/#related-files","text":"The following files are included in the Siv3D project directory. Official Image example/siv3d-kun.png 3D Model example/obj/siv3d-kun.obj Pixel Graphics example/spritesheet/siv3d-kun-16.png","title":"Related Files"},{"location":"tutorial/tutorial/","text":"Tutorial \u00b6 Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 Beginner: https://zenn.dev/reputeless/books/siv3d-documentation Intermediate: https://github.com/Reputeless/games Intermediate: https://github.com/Siv3D/Siv3D-Samples","title":"Tutorial"},{"location":"tutorial/tutorial/#tutorial","text":"Siv3D \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 Beginner: https://zenn.dev/reputeless/books/siv3d-documentation Intermediate: https://github.com/Reputeless/games Intermediate: https://github.com/Siv3D/Siv3D-Samples","title":"Tutorial"}]}